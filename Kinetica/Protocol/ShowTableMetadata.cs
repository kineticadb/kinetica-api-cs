/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /show/table/metadata.
    /// <br />
    /// Retrieves the user provided metadata for the specified
    /// tables.</summary>
    public class ShowTableMetadataRequest : KineticaData
    {

        /// <summary>Tables whose metadata will be fetched. All provided tables
        /// must exist, or an error is returned.  </summary>
        public IList<string> table_names { get; set; } = new List<string>();

        /// <summary>Optional parameters.  </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a ShowTableMetadataRequest object with default
        /// parameters.</summary>
        public ShowTableMetadataRequest() { }

        /// <summary>Constructs a ShowTableMetadataRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_names">Tables whose metadata will be fetched.
        /// All provided tables must exist, or an error is returned.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        public ShowTableMetadataRequest( IList<string> table_names,
                                         IDictionary<string, string> options = null)
        {
            this.table_names = table_names ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class ShowTableMetadataRequest



    /// <summary>A set of results returned by /show/table/metadata.</summary>
    public class ShowTableMetadataResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="ShowTableMetadataRequest.table_names" />.  </summary>
        public IList<string> table_names { get; set; } = new List<string>();

        /// <summary>A list of maps which contain the metadata of the tables in
        /// the order the tables are listed in <paramref
        /// cref="ShowTableMetadataRequest.table_names" />. Each map has
        /// (metadata attribute name, metadata attribute value) pairs.
        /// </summary>
        public IList<IDictionary<string, string>> metadata_maps { get; set; } = new List<IDictionary<string, string>>();

    } // end class ShowTableMetadataResponse




}  // end namespace kinetica
