/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Adds multiple records to the specified table. The operation is
    /// synchronous, meaning that a response will not be returned until all the
    /// records
    /// are fully inserted and available. The response payload provides the
    /// counts of
    /// the number of records actually inserted and/or updated, and can provide
    /// the
    /// unique identifier of each added record.
    /// <br />
    /// The <see cref="options" /> parameter can be used to customize this
    /// function's
    /// behavior.
    /// <br />
    /// The <i>update_on_existing_pk</i> option specifies the record
    /// collision policy for inserting into a table with a
    /// <a href="../../../concepts/tables/#primary-keys" target="_top">primary
    /// key</a>, but is ignored if
    /// no primary key exists.
    /// <br />
    /// The <i>return_record_ids</i> option indicates that the
    /// database should return the unique identifiers of inserted
    /// records.</summary>
    public class RawInsertRecordsRequest : KineticaData
    {

        /// <summary>The encoding of the records to be inserted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.ListEncoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.ListEncoding.JSON">JSON</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.ListEncoding.BINARY">BINARY</see>.
        /// A set of string constants for the parameter <see
        /// cref="list_encoding" />.</summary>
        public struct ListEncoding
        {
            public const string BINARY = "binary";
            public const string JSON = "json";
        } // end struct ListEncoding


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting into a table
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>. If set to
        /// <i>true</i>, any existing table record with primary
        /// key values that match those of a record being inserted will be
        /// replaced by that new record (the new
        /// data will be "upserted"). If set to <i>false</i>,
        /// any existing table record with primary key values that match those
        /// of a record being inserted will
        /// remain unchanged, while the new record will be rejected and the
        /// error handled as determined by
        /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary
        /// key, then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Upsert new records when primary keys match
        /// existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Reject new records when primary keys match
        /// existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision
        /// error-suppression policy for
        /// inserting into a table with a <a
        /// href="../../../concepts/tables/#primary-keys" target="_top">primary
        /// key</a>, only used when
        /// not in upsert mode (upsert mode is disabled when
        /// <i>update_on_existing_pk</i> is
        /// <i>false</i>).  If set to
        /// <i>true</i>, any record being inserted that is rejected
        /// for having primary key values that match those of an existing table
        /// record will be ignored with no
        /// error generated.  If <i>false</i>, the rejection of any
        /// record for having primary key values matching an existing record
        /// will result in an error being
        /// reported, as determined by <i>allow_partial_batch</i> &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary key or if upsert mode is in effect
        /// (<i>update_on_existing_pk</i> is
        /// <i>true</i>), then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Ignore new records whose primary key values
        /// collide with those of existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Treat as errors any new records whose primary
        /// key values collide with those of existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If <i>true</i> then return the internal record
        /// id along for each inserted record.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:</term>
        ///         <description>If set to <i>true</i>, any strings which are
        /// too long for their target charN string columns will be truncated to
        /// fit.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>:</term>
        ///         <description>If set to <i>true</i>, success will always be
        /// returned, and any errors found will be included in the info map.
        /// The "bad_record_indices" entry is a comma-separated list of bad
        /// records (0-based).  And if so, there will also be an "error_N"
        /// entry for each record with an error, where N is the index
        /// (0-based).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>:</term>
        ///         <description>If set to <i>true</i>, all correct records
        /// will be inserted and incorrect records will be rejected and
        /// reported.  Otherwise, the entire batch will be rejected if any
        /// records are incorrect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be saved
        /// and any errors will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Specifies the record collision policy for inserting
            /// into a table
            /// with a <a href="../../../concepts/tables/#primary-keys"
            /// target="_top">primary key</a>. If set to
            /// <i>true</i>, any existing table record with primary
            /// key values that match those of a record being inserted will be
            /// replaced by that new record (the new
            /// data will be "upserted"). If set to <i>false</i>,
            /// any existing table record with primary key values that match
            /// those of a record being inserted will
            /// remain unchanged, while the new record will be rejected and the
            /// error handled as determined by
            /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
            /// <i>return_individual_errors</i>.  If the specified table does
            /// not have a primary
            /// key, then this option has no effect.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
            ///         <description>Upsert new records when primary keys match
            /// existing records</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
            ///         <description>Reject new records when primary keys match
            /// existing records</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string UPDATE_ON_EXISTING_PK = "update_on_existing_pk";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Specifies the record collision error-suppression
            /// policy for
            /// inserting into a table with a <a
            /// href="../../../concepts/tables/#primary-keys"
            /// target="_top">primary key</a>, only used when
            /// not in upsert mode (upsert mode is disabled when
            /// <i>update_on_existing_pk</i> is
            /// <i>false</i>).  If set to
            /// <i>true</i>, any record being inserted that is rejected
            /// for having primary key values that match those of an existing
            /// table record will be ignored with no
            /// error generated.  If <i>false</i>, the rejection of any
            /// record for having primary key values matching an existing
            /// record will result in an error being
            /// reported, as determined by <i>allow_partial_batch</i> &
            /// <i>return_individual_errors</i>.  If the specified table does
            /// not
            /// have a primary key or if upsert mode is in effect
            /// (<i>update_on_existing_pk</i> is
            /// <i>true</i>), then this option has no effect.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
            ///         <description>Ignore new records whose primary key
            /// values collide with those of existing records</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
            ///         <description>Treat as errors any new records whose
            /// primary key values collide with those of existing
            /// records</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string IGNORE_EXISTING_PK = "ignore_existing_pk";

            /// <summary>If <i>true</i> then return the internal record id
            /// along for each inserted record.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string RETURN_RECORD_IDS = "return_record_ids";

            /// <summary>If set to <i>true</i>, any strings which are too long
            /// for their target charN string columns will be truncated to fit.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string TRUNCATE_STRINGS = "truncate_strings";

            /// <summary>If set to <i>true</i>, success will always be
            /// returned, and any errors found will be included in the info
            /// map.  The "bad_record_indices" entry is a comma-separated list
            /// of bad records (0-based).  And if so, there will also be an
            /// "error_N" entry for each record with an error, where N is the
            /// index (0-based).
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string RETURN_INDIVIDUAL_ERRORS = "return_individual_errors";

            /// <summary>If set to <i>true</i>, all correct records will be
            /// inserted and incorrect records will be rejected and reported.
            /// Otherwise, the entire batch will be rejected if any records are
            /// incorrect.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ALLOW_PARTIAL_BATCH = "allow_partial_batch";

            /// <summary>If set to <i>true</i>, no data will be saved and any
            /// errors will be returned.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string DRY_RUN = "dry_run";
        } // end struct Options


        /// <summary>Name of table to which the records are to be added, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.  </summary>
        public string table_name { get; set; }

        /// <summary>An array of binary-encoded data for the records to be
        /// added. All records must be of the same type as that of the table.
        /// Empty array if <paramref
        /// cref="RawInsertRecordsRequest.list_encoding" /> is <i>json</i>.
        /// </summary>
        public IList<byte[]> list { get; set; } = new List<byte[]>();

        /// <summary>An array of JSON encoded data for the records to be added.
        /// All records must be of the same type as that of the table. Empty
        /// array if <paramref cref="RawInsertRecordsRequest.list_encoding" />
        /// is <i>binary</i>.  </summary>
        public IList<string> list_str { get; set; } = new List<string>();

        /// <summary>The encoding of the records to be inserted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.ListEncoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.ListEncoding.JSON">JSON</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.ListEncoding.BINARY">BINARY</see>.
        /// </summary>
        public string list_encoding { get; set; } = ListEncoding.BINARY;

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting into a table
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>. If set to
        /// <i>true</i>, any existing table record with primary
        /// key values that match those of a record being inserted will be
        /// replaced by that new record (the new
        /// data will be "upserted"). If set to <i>false</i>,
        /// any existing table record with primary key values that match those
        /// of a record being inserted will
        /// remain unchanged, while the new record will be rejected and the
        /// error handled as determined by
        /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary
        /// key, then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Upsert new records when primary keys match
        /// existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Reject new records when primary keys match
        /// existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision
        /// error-suppression policy for
        /// inserting into a table with a <a
        /// href="../../../concepts/tables/#primary-keys" target="_top">primary
        /// key</a>, only used when
        /// not in upsert mode (upsert mode is disabled when
        /// <i>update_on_existing_pk</i> is
        /// <i>false</i>).  If set to
        /// <i>true</i>, any record being inserted that is rejected
        /// for having primary key values that match those of an existing table
        /// record will be ignored with no
        /// error generated.  If <i>false</i>, the rejection of any
        /// record for having primary key values matching an existing record
        /// will result in an error being
        /// reported, as determined by <i>allow_partial_batch</i> &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary key or if upsert mode is in effect
        /// (<i>update_on_existing_pk</i> is
        /// <i>true</i>), then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Ignore new records whose primary key values
        /// collide with those of existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Treat as errors any new records whose primary
        /// key values collide with those of existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If <i>true</i> then return the internal record
        /// id along for each inserted record.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:</term>
        ///         <description>If set to <i>true</i>, any strings which are
        /// too long for their target charN string columns will be truncated to
        /// fit.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>:</term>
        ///         <description>If set to <i>true</i>, success will always be
        /// returned, and any errors found will be included in the info map.
        /// The "bad_record_indices" entry is a comma-separated list of bad
        /// records (0-based).  And if so, there will also be an "error_N"
        /// entry for each record with an error, where N is the index
        /// (0-based).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>:</term>
        ///         <description>If set to <i>true</i>, all correct records
        /// will be inserted and incorrect records will be rejected and
        /// reported.  Otherwise, the entire batch will be rejected if any
        /// records are incorrect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be saved
        /// and any errors will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a RawInsertRecordsRequest object with default
        /// parameters.</summary>
        public RawInsertRecordsRequest() { }

        /// <summary>Constructs a RawInsertRecordsRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of table to which the records are to
        /// be added, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.  </param>
        /// <param name="list">An array of binary-encoded data for the records
        /// to be added. All records must be of the same type as that of the
        /// table. Empty array if <paramref
        /// cref="RawInsertRecordsRequest.list_encoding" /> is <i>json</i>.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting into a table
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>. If set to
        /// <i>true</i>, any existing table record with primary
        /// key values that match those of a record being inserted will be
        /// replaced by that new record (the new
        /// data will be "upserted"). If set to <i>false</i>,
        /// any existing table record with primary key values that match those
        /// of a record being inserted will
        /// remain unchanged, while the new record will be rejected and the
        /// error handled as determined by
        /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary
        /// key, then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Upsert new records when primary keys match
        /// existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Reject new records when primary keys match
        /// existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision
        /// error-suppression policy for
        /// inserting into a table with a <a
        /// href="../../../concepts/tables/#primary-keys" target="_top">primary
        /// key</a>, only used when
        /// not in upsert mode (upsert mode is disabled when
        /// <i>update_on_existing_pk</i> is
        /// <i>false</i>).  If set to
        /// <i>true</i>, any record being inserted that is rejected
        /// for having primary key values that match those of an existing table
        /// record will be ignored with no
        /// error generated.  If <i>false</i>, the rejection of any
        /// record for having primary key values matching an existing record
        /// will result in an error being
        /// reported, as determined by <i>allow_partial_batch</i> &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary key or if upsert mode is in effect
        /// (<i>update_on_existing_pk</i> is
        /// <i>true</i>), then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Ignore new records whose primary key values
        /// collide with those of existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Treat as errors any new records whose primary
        /// key values collide with those of existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If <i>true</i> then return the internal record
        /// id along for each inserted record.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:</term>
        ///         <description>If set to <i>true</i>, any strings which are
        /// too long for their target charN string columns will be truncated to
        /// fit.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>:</term>
        ///         <description>If set to <i>true</i>, success will always be
        /// returned, and any errors found will be included in the info map.
        /// The "bad_record_indices" entry is a comma-separated list of bad
        /// records (0-based).  And if so, there will also be an "error_N"
        /// entry for each record with an error, where N is the index
        /// (0-based).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>:</term>
        ///         <description>If set to <i>true</i>, all correct records
        /// will be inserted and incorrect records will be rejected and
        /// reported.  Otherwise, the entire batch will be rejected if any
        /// records are incorrect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be saved
        /// and any errors will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public RawInsertRecordsRequest( string table_name,
                                        IList<byte[]> list,
                                        IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.list = list ?? new List<byte[]>();
            this.list_str = new List<string>();
            this.list_encoding = ListEncoding.BINARY;
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor


        /// <summary>Constructs a RawInsertRecordsRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of table to which the records are to
        /// be added, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.  </param>
        /// <param name="list">An array of binary-encoded data for the records
        /// to be added. All records must be of the same type as that of the
        /// table. Empty array if <paramref
        /// cref="RawInsertRecordsRequest.list_encoding" /> is <i>json</i>.
        /// </param>
        /// <param name="list_str">An array of JSON encoded data for the
        /// records to be added. All records must be of the same type as that
        /// of the table. Empty array if <paramref
        /// cref="RawInsertRecordsRequest.list_encoding" /> is <i>binary</i>.
        /// </param>
        /// <param name="list_encoding">The encoding of the records to be
        /// inserted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.ListEncoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.ListEncoding.JSON">JSON</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.ListEncoding.BINARY">BINARY</see>.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting into a table
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>. If set to
        /// <i>true</i>, any existing table record with primary
        /// key values that match those of a record being inserted will be
        /// replaced by that new record (the new
        /// data will be "upserted"). If set to <i>false</i>,
        /// any existing table record with primary key values that match those
        /// of a record being inserted will
        /// remain unchanged, while the new record will be rejected and the
        /// error handled as determined by
        /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary
        /// key, then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Upsert new records when primary keys match
        /// existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Reject new records when primary keys match
        /// existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision
        /// error-suppression policy for
        /// inserting into a table with a <a
        /// href="../../../concepts/tables/#primary-keys" target="_top">primary
        /// key</a>, only used when
        /// not in upsert mode (upsert mode is disabled when
        /// <i>update_on_existing_pk</i> is
        /// <i>false</i>).  If set to
        /// <i>true</i>, any record being inserted that is rejected
        /// for having primary key values that match those of an existing table
        /// record will be ignored with no
        /// error generated.  If <i>false</i>, the rejection of any
        /// record for having primary key values matching an existing record
        /// will result in an error being
        /// reported, as determined by <i>allow_partial_batch</i> &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary key or if upsert mode is in effect
        /// (<i>update_on_existing_pk</i> is
        /// <i>true</i>), then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Ignore new records whose primary key values
        /// collide with those of existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Treat as errors any new records whose primary
        /// key values collide with those of existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If <i>true</i> then return the internal record
        /// id along for each inserted record.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:</term>
        ///         <description>If set to <i>true</i>, any strings which are
        /// too long for their target charN string columns will be truncated to
        /// fit.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>:</term>
        ///         <description>If set to <i>true</i>, success will always be
        /// returned, and any errors found will be included in the info map.
        /// The "bad_record_indices" entry is a comma-separated list of bad
        /// records (0-based).  And if so, there will also be an "error_N"
        /// entry for each record with an error, where N is the index
        /// (0-based).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>:</term>
        ///         <description>If set to <i>true</i>, all correct records
        /// will be inserted and incorrect records will be rejected and
        /// reported.  Otherwise, the entire batch will be rejected if any
        /// records are incorrect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be saved
        /// and any errors will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public RawInsertRecordsRequest( string table_name,
                                        IList<byte[]> list,
                                        IList<string> list_str,
                                        string list_encoding = null,
                                        IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.list = list ?? new List<byte[]>();
            this.list_str = list_str ?? new List<string>();
            this.list_encoding = list_encoding ?? ListEncoding.BINARY;
            this.options = options ?? new Dictionary<string, string>();
        } // end full constructor

    } // end class RawInsertRecordsRequest



    /// <summary>A set of parameters for <see
    /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Adds multiple records to the specified table. The operation is
    /// synchronous, meaning that a response will not be returned until all the
    /// records
    /// are fully inserted and available. The response payload provides the
    /// counts of
    /// the number of records actually inserted and/or updated, and can provide
    /// the
    /// unique identifier of each added record.
    /// <br />
    /// The <see cref="options" /> parameter can be used to customize this
    /// function's
    /// behavior.
    /// <br />
    /// The <i>update_on_existing_pk</i> option specifies the record
    /// collision policy for inserting into a table with a
    /// <a href="../../../concepts/tables/#primary-keys" target="_top">primary
    /// key</a>, but is ignored if
    /// no primary key exists.
    /// <br />
    /// The <i>return_record_ids</i> option indicates that the
    /// database should return the unique identifiers of inserted
    /// records.</summary>
    /// 
    /// <typeparam name="T">The type of object being processed.</typeparam>
    /// 
    public class InsertRecordsRequest<T> : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting into a table
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>. If set to
        /// <i>true</i>, any existing table record with primary
        /// key values that match those of a record being inserted will be
        /// replaced by that new record (the new
        /// data will be "upserted"). If set to <i>false</i>,
        /// any existing table record with primary key values that match those
        /// of a record being inserted will
        /// remain unchanged, while the new record will be rejected and the
        /// error handled as determined by
        /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary
        /// key, then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Upsert new records when primary keys match
        /// existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Reject new records when primary keys match
        /// existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision
        /// error-suppression policy for
        /// inserting into a table with a <a
        /// href="../../../concepts/tables/#primary-keys" target="_top">primary
        /// key</a>, only used when
        /// not in upsert mode (upsert mode is disabled when
        /// <i>update_on_existing_pk</i> is
        /// <i>false</i>).  If set to
        /// <i>true</i>, any record being inserted that is rejected
        /// for having primary key values that match those of an existing table
        /// record will be ignored with no
        /// error generated.  If <i>false</i>, the rejection of any
        /// record for having primary key values matching an existing record
        /// will result in an error being
        /// reported, as determined by <i>allow_partial_batch</i> &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary key or if upsert mode is in effect
        /// (<i>update_on_existing_pk</i> is
        /// <i>true</i>), then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Ignore new records whose primary key values
        /// collide with those of existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Treat as errors any new records whose primary
        /// key values collide with those of existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If <i>true</i> then return the internal record
        /// id along for each inserted record.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:</term>
        ///         <description>If set to <i>true</i>, any strings which are
        /// too long for their target charN string columns will be truncated to
        /// fit.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>:</term>
        ///         <description>If set to <i>true</i>, success will always be
        /// returned, and any errors found will be included in the info map.
        /// The "bad_record_indices" entry is a comma-separated list of bad
        /// records (0-based).  And if so, there will also be an "error_N"
        /// entry for each record with an error, where N is the index
        /// (0-based).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>:</term>
        ///         <description>If set to <i>true</i>, all correct records
        /// will be inserted and incorrect records will be rejected and
        /// reported.  Otherwise, the entire batch will be rejected if any
        /// records are incorrect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be saved
        /// and any errors will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Specifies the record collision policy for inserting
            /// into a table
            /// with a <a href="../../../concepts/tables/#primary-keys"
            /// target="_top">primary key</a>. If set to
            /// <i>true</i>, any existing table record with primary
            /// key values that match those of a record being inserted will be
            /// replaced by that new record (the new
            /// data will be "upserted"). If set to <i>false</i>,
            /// any existing table record with primary key values that match
            /// those of a record being inserted will
            /// remain unchanged, while the new record will be rejected and the
            /// error handled as determined by
            /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
            /// <i>return_individual_errors</i>.  If the specified table does
            /// not have a primary
            /// key, then this option has no effect.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
            ///         <description>Upsert new records when primary keys match
            /// existing records</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
            ///         <description>Reject new records when primary keys match
            /// existing records</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string UPDATE_ON_EXISTING_PK = "update_on_existing_pk";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Specifies the record collision error-suppression
            /// policy for
            /// inserting into a table with a <a
            /// href="../../../concepts/tables/#primary-keys"
            /// target="_top">primary key</a>, only used when
            /// not in upsert mode (upsert mode is disabled when
            /// <i>update_on_existing_pk</i> is
            /// <i>false</i>).  If set to
            /// <i>true</i>, any record being inserted that is rejected
            /// for having primary key values that match those of an existing
            /// table record will be ignored with no
            /// error generated.  If <i>false</i>, the rejection of any
            /// record for having primary key values matching an existing
            /// record will result in an error being
            /// reported, as determined by <i>allow_partial_batch</i> &
            /// <i>return_individual_errors</i>.  If the specified table does
            /// not
            /// have a primary key or if upsert mode is in effect
            /// (<i>update_on_existing_pk</i> is
            /// <i>true</i>), then this option has no effect.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
            ///         <description>Ignore new records whose primary key
            /// values collide with those of existing records</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
            ///         <description>Treat as errors any new records whose
            /// primary key values collide with those of existing
            /// records</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string IGNORE_EXISTING_PK = "ignore_existing_pk";

            /// <summary>If <i>true</i> then return the internal record id
            /// along for each inserted record.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string RETURN_RECORD_IDS = "return_record_ids";

            /// <summary>If set to <i>true</i>, any strings which are too long
            /// for their target charN string columns will be truncated to fit.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string TRUNCATE_STRINGS = "truncate_strings";

            /// <summary>If set to <i>true</i>, success will always be
            /// returned, and any errors found will be included in the info
            /// map.  The "bad_record_indices" entry is a comma-separated list
            /// of bad records (0-based).  And if so, there will also be an
            /// "error_N" entry for each record with an error, where N is the
            /// index (0-based).
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string RETURN_INDIVIDUAL_ERRORS = "return_individual_errors";

            /// <summary>If set to <i>true</i>, all correct records will be
            /// inserted and incorrect records will be rejected and reported.
            /// Otherwise, the entire batch will be rejected if any records are
            /// incorrect.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ALLOW_PARTIAL_BATCH = "allow_partial_batch";

            /// <summary>If set to <i>true</i>, no data will be saved and any
            /// errors will be returned.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string DRY_RUN = "dry_run";
        } // end struct Options


        /// <summary>Name of table to which the records are to be added, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.  </summary>
        public string table_name { get; set; }

        /// <summary>An array of binary-encoded data for the records to be
        /// added. All records must be of the same type as that of the table.
        /// Empty array if <paramref
        /// cref="RawInsertRecordsRequest.list_encoding" /> is <i>json</i>.
        /// </summary>
        public IList<T> data { get; set; } = new List<T>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting into a table
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>. If set to
        /// <i>true</i>, any existing table record with primary
        /// key values that match those of a record being inserted will be
        /// replaced by that new record (the new
        /// data will be "upserted"). If set to <i>false</i>,
        /// any existing table record with primary key values that match those
        /// of a record being inserted will
        /// remain unchanged, while the new record will be rejected and the
        /// error handled as determined by
        /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary
        /// key, then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Upsert new records when primary keys match
        /// existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Reject new records when primary keys match
        /// existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision
        /// error-suppression policy for
        /// inserting into a table with a <a
        /// href="../../../concepts/tables/#primary-keys" target="_top">primary
        /// key</a>, only used when
        /// not in upsert mode (upsert mode is disabled when
        /// <i>update_on_existing_pk</i> is
        /// <i>false</i>).  If set to
        /// <i>true</i>, any record being inserted that is rejected
        /// for having primary key values that match those of an existing table
        /// record will be ignored with no
        /// error generated.  If <i>false</i>, the rejection of any
        /// record for having primary key values matching an existing record
        /// will result in an error being
        /// reported, as determined by <i>allow_partial_batch</i> &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary key or if upsert mode is in effect
        /// (<i>update_on_existing_pk</i> is
        /// <i>true</i>), then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Ignore new records whose primary key values
        /// collide with those of existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Treat as errors any new records whose primary
        /// key values collide with those of existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If <i>true</i> then return the internal record
        /// id along for each inserted record.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:</term>
        ///         <description>If set to <i>true</i>, any strings which are
        /// too long for their target charN string columns will be truncated to
        /// fit.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>:</term>
        ///         <description>If set to <i>true</i>, success will always be
        /// returned, and any errors found will be included in the info map.
        /// The "bad_record_indices" entry is a comma-separated list of bad
        /// records (0-based).  And if so, there will also be an "error_N"
        /// entry for each record with an error, where N is the index
        /// (0-based).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>:</term>
        ///         <description>If set to <i>true</i>, all correct records
        /// will be inserted and incorrect records will be rejected and
        /// reported.  Otherwise, the entire batch will be rejected if any
        /// records are incorrect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be saved
        /// and any errors will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an InsertRecordsRequest object with default
        /// parameters.</summary>
        public InsertRecordsRequest() { }

        /// <summary>Constructs an InsertRecordsRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of table to which the records are to
        /// be added, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.  </param>
        /// <param name="data">An array of binary-encoded data for the records
        /// to be added. All records must be of the same type as that of the
        /// table. Empty array if <paramref
        /// cref="RawInsertRecordsRequest.list_encoding" /> is <i>json</i>.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting into a table
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>. If set to
        /// <i>true</i>, any existing table record with primary
        /// key values that match those of a record being inserted will be
        /// replaced by that new record (the new
        /// data will be "upserted"). If set to <i>false</i>,
        /// any existing table record with primary key values that match those
        /// of a record being inserted will
        /// remain unchanged, while the new record will be rejected and the
        /// error handled as determined by
        /// <i>ignore_existing_pk</i>, <i>allow_partial_batch</i>, &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary
        /// key, then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Upsert new records when primary keys match
        /// existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Reject new records when primary keys match
        /// existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision
        /// error-suppression policy for
        /// inserting into a table with a <a
        /// href="../../../concepts/tables/#primary-keys" target="_top">primary
        /// key</a>, only used when
        /// not in upsert mode (upsert mode is disabled when
        /// <i>update_on_existing_pk</i> is
        /// <i>false</i>).  If set to
        /// <i>true</i>, any record being inserted that is rejected
        /// for having primary key values that match those of an existing table
        /// record will be ignored with no
        /// error generated.  If <i>false</i>, the rejection of any
        /// record for having primary key values matching an existing record
        /// will result in an error being
        /// reported, as determined by <i>allow_partial_batch</i> &
        /// <i>return_individual_errors</i>.  If the specified table does not
        /// have a primary key or if upsert mode is in effect
        /// (<i>update_on_existing_pk</i> is
        /// <i>true</i>), then this option has no effect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Ignore new records whose primary key values
        /// collide with those of existing records</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Treat as errors any new records whose primary
        /// key values collide with those of existing records</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If <i>true</i> then return the internal record
        /// id along for each inserted record.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:</term>
        ///         <description>If set to <i>true</i>, any strings which are
        /// too long for their target charN string columns will be truncated to
        /// fit.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>:</term>
        ///         <description>If set to <i>true</i>, success will always be
        /// returned, and any errors found will be included in the info map.
        /// The "bad_record_indices" entry is a comma-separated list of bad
        /// records (0-based).  And if so, there will also be an "error_N"
        /// entry for each record with an error, where N is the index
        /// (0-based).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>:</term>
        ///         <description>If set to <i>true</i>, all correct records
        /// will be inserted and incorrect records will be rejected and
        /// reported.  Otherwise, the entire batch will be rejected if any
        /// records are incorrect.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be saved
        /// and any errors will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public InsertRecordsRequest( string table_name,
                                     IList<T> data,
                                     IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.data = data ?? new List<T>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class InsertRecordsRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
    /// />.</summary>
    public class InsertRecordsResponse : KineticaData
    {

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsResponse.Info.BAD_RECORD_INDICES">BAD_RECORD_INDICES</see>:</term>
        ///         <description>If return_individual_errors option is
        /// specified or implied, returns a comma-separated list of invalid
        /// indices (0-based)</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsResponse.Info.ERROR_N">ERROR_N</see>:</term>
        ///         <description>Error message for record at index N
        /// (0-based)</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="info"
        /// />.</summary>
        public struct Info
        {

            /// <summary>If return_individual_errors option is specified or
            /// implied, returns a comma-separated list of invalid indices
            /// (0-based)</summary>
            public const string BAD_RECORD_INDICES = "bad_record_indices";

            /// <summary>Error message for record at index N
            /// (0-based)</summary>
            public const string ERROR_N = "error_N";
        } // end struct Info


        /// <summary>An array containing the IDs with which the added records
        /// are identified internally.  </summary>
        public IList<string> record_ids { get; set; } = new List<string>();

        /// <summary>The number of records inserted.  </summary>
        public int count_inserted { get; set; }

        /// <summary>The number of records updated.  </summary>
        public int count_updated { get; set; }

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsResponse.Info.BAD_RECORD_INDICES">BAD_RECORD_INDICES</see>:</term>
        ///         <description>If return_individual_errors option is
        /// specified or implied, returns a comma-separated list of invalid
        /// indices (0-based)</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsResponse.Info.ERROR_N">ERROR_N</see>:</term>
        ///         <description>Error message for record at index N
        /// (0-based)</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class InsertRecordsResponse




}  // end namespace kinetica
