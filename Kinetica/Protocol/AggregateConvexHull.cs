/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /aggregate/convexhull.
    /// <br />
    /// Calculates and returns the convex hull for the values in a table
    /// specified by <member name="table_name" />.</summary>
    public class AggregateConvexHullRequest : KineticaData
    {

        /// <summary>Name of Table on which the operation will be performed.
        /// Must be an existing table.  It can not be a collection.  </summary>
        public string table_name { get; set; }

        /// <summary>Name of the column containing the x coordinates of the
        /// points for the operation being performed.  </summary>
        public string x_column_name { get; set; }

        /// <summary>Name of the column containing the y coordinates of the
        /// points for the operation being performed.  </summary>
        public string y_column_name { get; set; }

        /// <summary>Optional parameters.  </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AggregateConvexHullRequest object with
        /// default parameters.</summary>
        public AggregateConvexHullRequest() { }

        /// <summary>Constructs an AggregateConvexHullRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of Table on which the operation will
        /// be performed. Must be an existing table.  It can not be a
        /// collection.  </param>
        /// <param name="x_column_name">Name of the column containing the x
        /// coordinates of the points for the operation being performed.
        /// </param>
        /// <param name="y_column_name">Name of the column containing the y
        /// coordinates of the points for the operation being performed.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        public AggregateConvexHullRequest( string table_name,
                                           string x_column_name,
                                           string y_column_name,
                                           IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.x_column_name = x_column_name ?? "";
            this.y_column_name = y_column_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AggregateConvexHullRequest



    /// <summary>A set of results returned by /aggregate/convexhull.</summary>
    public class AggregateConvexHullResponse : KineticaData
    {

        /// <summary>Array of x coordinates of the resulting convex set.
        /// </summary>
        public IList<double> x_vector { get; set; } = new List<double>();

        /// <summary>Array of y coordinates of the resulting convex set.
        /// </summary>
        public IList<double> y_vector { get; set; } = new List<double>();

        /// <summary>Count of the number of points in the convex set.
        /// </summary>
        public int count { get; set; }
        public bool is_valid { get; set; }

    } // end class AggregateConvexHullResponse




}  // end namespace kinetica
