/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.mergeRecords(string,IList{string},IList{IDictionary{string, string}},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Create a new empty result table (specified by <see cref="table_name"
    /// />),
    /// and insert all records from source tables
    /// (specified by <see cref="source_table_names" />) based on the field
    /// mapping
    /// information (specified by <see cref="field_maps" />).
    /// <br />
    /// For merge records details and examples, see
    /// <a href="../../../concepts/merge_records/" target="_top">Merge
    /// Records</a>.  For limitations, see
    /// <a href="../../../concepts/merge_records/#limitations-and-cautions"
    /// target="_top">Merge Records Limitations and Cautions</a>.
    /// <br />
    /// The field map (specified by <see cref="field_maps" />) holds the
    /// user-specified maps
    /// of target table column names to source table columns. The array of
    /// <see cref="field_maps" /> must match one-to-one with the <see
    /// cref="source_table_names" />,
    /// e.g., there's a map present in <see cref="field_maps" /> for each table
    /// listed in
    /// <see cref="source_table_names" />.</summary>
    public class MergeRecordsRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>[DEPRECATED--please specify the containing
        /// schema for the merged table as part of <paramref
        /// cref="MergeRecordsRequest.table_name" /> and use /create/schema to
        /// create the schema if non-existent]  Name of a schema for the newly
        /// created merged table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>Indicates the <a
        /// href="../../../concepts/tables/#distribution"
        /// target="_top">distribution scheme</a> for the data of the merged
        /// table specified in <paramref cref="MergeRecordsRequest.table_name"
        /// />.  If true, the table will be <a
        /// href="../../../concepts/tables/#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly sharded</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.PERSIST">PERSIST</see>:</term>
        ///         <description>If <i>true</i>, then the table specified in
        /// <paramref cref="MergeRecordsRequest.table_name" /> will be
        /// persisted and will not expire unless a <i>ttl</i> is specified.
        /// If <i>false</i>, then the table will be an in-memory table and will
        /// expire unless a <i>ttl</i> is specified otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this result table is part of.  The
        /// default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>[DEPRECATED--please specify the containing schema for
            /// the merged table as part of <see cref="table_name" /> and use
            /// <see
            /// cref="Kinetica.createSchema(string,IDictionary{string, string})"
            /// /> to create the schema if non-existent]  Name of a schema for
            /// the newly created merged table specified by <see
            /// cref="table_name" />.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>Indicates the <a
            /// href="../../../concepts/tables/#distribution"
            /// target="_top">distribution scheme</a> for the data of the
            /// merged table specified in <see cref="table_name" />.  If true,
            /// the table will be <a
            /// href="../../../concepts/tables/#replication"
            /// target="_top">replicated</a>.  If false, the table will be <a
            /// href="../../../concepts/tables/#random-sharding"
            /// target="_top">randomly sharded</a>.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string IS_REPLICATED = "is_replicated";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Sets the <a href="../../../concepts/ttl/"
            /// target="_top">TTL</a> of the merged table specified in <see
            /// cref="table_name" />.</summary>
            public const string TTL = "ttl";

            /// <summary>If <i>true</i>, then the table specified in <see
            /// cref="table_name" /> will be persisted and will not expire
            /// unless a <i>ttl</i> is specified.   If <i>false</i>, then the
            /// table will be an in-memory table and will expire unless a
            /// <i>ttl</i> is specified otherwise.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see>.</summary>
            public const string PERSIST = "persist";

            /// <summary>Indicates the number of records per chunk to be used
            /// for the merged table specified in <see cref="table_name"
            /// />.</summary>
            public const string CHUNK_SIZE = "chunk_size";

            /// <summary>view this result table is part of.  The default value
            /// is ''.</summary>
            public const string VIEW_ID = "view_id";
        } // end struct Options


        /// <summary>The name of the new result table for the records to be
        /// merged into, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must NOT be an existing
        /// table.  </summary>
        public string table_name { get; set; }

        /// <summary>The list of names of source tables to get the records
        /// from, each in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be existing table
        /// names.  </summary>
        public IList<string> source_table_names { get; set; } = new List<string>();

        /// <summary>Contains a list of source/target column mappings, one
        /// mapping for each source table listed in <paramref
        /// cref="MergeRecordsRequest.source_table_names" /> being merged into
        /// the target table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />.  Each mapping contains
        /// the target column names (as keys) that the data in the mapped
        /// source columns or column <a href="../../../concepts/expressions/"
        /// target="_top">expressions</a> (as values) will be merged into.  All
        /// of the source columns being merged into a given target column must
        /// match in type, as that type will determine the type of the new
        /// target column.  </summary>
        public IList<IDictionary<string, string>> field_maps { get; set; } = new List<IDictionary<string, string>>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>[DEPRECATED--please specify the containing
        /// schema for the merged table as part of <paramref
        /// cref="MergeRecordsRequest.table_name" /> and use /create/schema to
        /// create the schema if non-existent]  Name of a schema for the newly
        /// created merged table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>Indicates the <a
        /// href="../../../concepts/tables/#distribution"
        /// target="_top">distribution scheme</a> for the data of the merged
        /// table specified in <paramref cref="MergeRecordsRequest.table_name"
        /// />.  If true, the table will be <a
        /// href="../../../concepts/tables/#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly sharded</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.PERSIST">PERSIST</see>:</term>
        ///         <description>If <i>true</i>, then the table specified in
        /// <paramref cref="MergeRecordsRequest.table_name" /> will be
        /// persisted and will not expire unless a <i>ttl</i> is specified.
        /// If <i>false</i>, then the table will be an in-memory table and will
        /// expire unless a <i>ttl</i> is specified otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this result table is part of.  The
        /// default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a MergeRecordsRequest object with default
        /// parameters.</summary>
        public MergeRecordsRequest() { }

        /// <summary>Constructs a MergeRecordsRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">The name of the new result table for the
        /// records to be merged into, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must NOT be an existing
        /// table.  </param>
        /// <param name="source_table_names">The list of names of source tables
        /// to get the records from, each in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be existing table
        /// names.  </param>
        /// <param name="field_maps">Contains a list of source/target column
        /// mappings, one mapping for each source table listed in <paramref
        /// cref="MergeRecordsRequest.source_table_names" /> being merged into
        /// the target table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />.  Each mapping contains
        /// the target column names (as keys) that the data in the mapped
        /// source columns or column <a href="../../../concepts/expressions/"
        /// target="_top">expressions</a> (as values) will be merged into.  All
        /// of the source columns being merged into a given target column must
        /// match in type, as that type will determine the type of the new
        /// target column.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>[DEPRECATED--please specify the containing
        /// schema for the merged table as part of <paramref
        /// cref="MergeRecordsRequest.table_name" /> and use /create/schema to
        /// create the schema if non-existent]  Name of a schema for the newly
        /// created merged table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>Indicates the <a
        /// href="../../../concepts/tables/#distribution"
        /// target="_top">distribution scheme</a> for the data of the merged
        /// table specified in <paramref cref="MergeRecordsRequest.table_name"
        /// />.  If true, the table will be <a
        /// href="../../../concepts/tables/#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly sharded</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.PERSIST">PERSIST</see>:</term>
        ///         <description>If <i>true</i>, then the table specified in
        /// <paramref cref="MergeRecordsRequest.table_name" /> will be
        /// persisted and will not expire unless a <i>ttl</i> is specified.
        /// If <i>false</i>, then the table will be an in-memory table and will
        /// expire unless a <i>ttl</i> is specified otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this result table is part of.  The
        /// default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public MergeRecordsRequest( string table_name,
                                    IList<string> source_table_names,
                                    IList<IDictionary<string, string>> field_maps,
                                    IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.source_table_names = source_table_names ?? new List<string>();
            this.field_maps = field_maps ?? new List<IDictionary<string, string>>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class MergeRecordsRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.mergeRecords(string,IList{string},IList{IDictionary{string, string}},IDictionary{string, string})"
    /// />.</summary>
    public class MergeRecordsResponse : KineticaData
    {

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsResponse.Info.QUALIFIED_TABLE_NAME">QUALIFIED_TABLE_NAME</see>:</term>
        ///         <description>The fully qualified name of the result table
        /// (i.e. including the schema)</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <member name="info"
        /// />.</summary>
        public struct Info
        {

            /// <summary>The fully qualified name of the result table (i.e.
            /// including the schema)</summary>
            public const string QUALIFIED_TABLE_NAME = "qualified_table_name";
        } // end struct Info

        public string table_name { get; set; }

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsResponse.Info.QUALIFIED_TABLE_NAME">QUALIFIED_TABLE_NAME</see>:</term>
        ///         <description>The fully qualified name of the result table
        /// (i.e. including the schema)</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class MergeRecordsResponse




}  // end namespace kinetica
