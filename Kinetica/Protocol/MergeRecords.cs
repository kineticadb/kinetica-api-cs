/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.mergeRecords(string,IList{string},IList{IDictionary{string, string}},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Create a new empty result table (specified by <see cref="table_name"
    /// />), and insert all records from source tables (specified by <see
    /// cref="source_table_names" />) based on the field mapping information
    /// (specified by <see cref="field_maps" />).
    /// <br />
    /// For merge records details and examples, see <a
    /// href="../../concepts/merge_records.html" target="_top">Merge
    /// Records</a>.  For limitations, see <a
    /// href="../../concepts/merge_records.html#limitations-and-cautions"
    /// target="_top">Merge Records Limitations and Cautions</a>.
    /// <br />
    /// The field map (specified by <see cref="field_maps" />) holds the
    /// user-specified maps of target table column names to source table
    /// columns. The array of <see cref="field_maps" /> must match one-to-one
    /// with the <see cref="source_table_names" />, e.g., there's a map present
    /// in <see cref="field_maps" /> for each table listed in <see
    /// cref="source_table_names" />.</summary>
    public class MergeRecordsRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created merged table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />. If the collection
        /// provided is non-existent, the collection will be automatically
        /// created. If empty, then the newly created merged table will be a
        /// top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>Indicates the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the data of the merged
        /// table specified in <paramref cref="MergeRecordsRequest.table_name"
        /// />.  If true, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">TTL</a> of the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the chunk size to be used for the
        /// merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this result table is part
        /// of</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Name of a collection which is to contain the newly
            /// created merged table specified by <see cref="table_name" />. If
            /// the collection provided is non-existent, the collection will be
            /// automatically created. If empty, then the newly created merged
            /// table will be a top-level table.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>Indicates the <a
            /// href="../../concepts/tables.html#distribution"
            /// target="_top">distribution scheme</a> for the data of the
            /// merged table specified in <see cref="table_name" />.  If true,
            /// the table will be <a
            /// href="../../concepts/tables.html#replication"
            /// target="_top">replicated</a>.  If false, the table will be <a
            /// href="../../concepts/tables.html#random-sharding"
            /// target="_top">randomly sharded</a>.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</summary>
            public const string IS_REPLICATED = "is_replicated";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Sets the <a href="../../concepts/ttl.html"
            /// target="_top">TTL</a> of the merged table specified in <see
            /// cref="table_name" />.</summary>
            public const string TTL = "ttl";

            /// <summary>Indicates the chunk size to be used for the merged
            /// table specified in <see cref="table_name" />.</summary>
            public const string CHUNK_SIZE = "chunk_size";

            /// <summary>view this result table is part of</summary>
            public const string VIEW_ID = "view_id";
        } // end struct Options


        /// <summary>The new result table name for the records to be merged.
        /// Must NOT be an existing table.  </summary>
        public string table_name { get; set; }

        /// <summary>The list of source table names to get the records from.
        /// Must be existing table names.  </summary>
        public IList<string> source_table_names { get; set; } = new List<string>();

        /// <summary>Contains a list of source/target column mappings, one
        /// mapping for each source table listed in <paramref
        /// cref="MergeRecordsRequest.source_table_names" /> being merged into
        /// the target table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />.  Each mapping contains
        /// the target column names (as keys) that the data in the mapped
        /// source columns or column <a href="../../concepts/expressions.html"
        /// target="_top">expressions</a> (as values) will be merged into.  All
        /// of the source columns being merged into a given target column must
        /// match in type, as that type will determine the type of the new
        /// target column.  </summary>
        public IList<IDictionary<string, string>> field_maps { get; set; } = new List<IDictionary<string, string>>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created merged table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />. If the collection
        /// provided is non-existent, the collection will be automatically
        /// created. If empty, then the newly created merged table will be a
        /// top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>Indicates the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the data of the merged
        /// table specified in <paramref cref="MergeRecordsRequest.table_name"
        /// />.  If true, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">TTL</a> of the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the chunk size to be used for the
        /// merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this result table is part
        /// of</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a MergeRecordsRequest object with default
        /// parameters.</summary>
        public MergeRecordsRequest() { }

        /// <summary>Constructs a MergeRecordsRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">The new result table name for the records
        /// to be merged.  Must NOT be an existing table.  </param>
        /// <param name="source_table_names">The list of source table names to
        /// get the records from. Must be existing table names.  </param>
        /// <param name="field_maps">Contains a list of source/target column
        /// mappings, one mapping for each source table listed in <paramref
        /// cref="MergeRecordsRequest.source_table_names" /> being merged into
        /// the target table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />.  Each mapping contains
        /// the target column names (as keys) that the data in the mapped
        /// source columns or column <a href="../../concepts/expressions.html"
        /// target="_top">expressions</a> (as values) will be merged into.  All
        /// of the source columns being merged into a given target column must
        /// match in type, as that type will determine the type of the new
        /// target column.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created merged table specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />. If the collection
        /// provided is non-existent, the collection will be automatically
        /// created. If empty, then the newly created merged table will be a
        /// top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>Indicates the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the data of the merged
        /// table specified in <paramref cref="MergeRecordsRequest.table_name"
        /// />.  If true, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">TTL</a> of the merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the chunk size to be used for the
        /// merged table specified in <paramref
        /// cref="MergeRecordsRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this result table is part
        /// of</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public MergeRecordsRequest( string table_name,
                                    IList<string> source_table_names,
                                    IList<IDictionary<string, string>> field_maps,
                                    IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.source_table_names = source_table_names ?? new List<string>();
            this.field_maps = field_maps ?? new List<IDictionary<string, string>>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class MergeRecordsRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.mergeRecords(string,IList{string},IList{IDictionary{string, string}},IDictionary{string, string})"
    /// />.</summary>
    public class MergeRecordsResponse : KineticaData
    {
        public string table_name { get; set; }

    } // end class MergeRecordsResponse




}  // end namespace kinetica
