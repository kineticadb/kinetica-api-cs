/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /clear/table.
    /// <br />
    /// Clears (drops) one or all tables in the database cluster. The operation
    /// is synchronous meaning that the table will be cleared before the
    /// function returns. The response payload returns the status of the
    /// operation along with the name of the table that was cleared.</summary>
    public class ClearTableRequest : KineticaData
    {

        /// <summary>Name of the table to be cleared. Must be an existing
        /// table. Empty string clears all available tables.  </summary>
        public string table_name { get; set; } = "";

        /// <summary>No longer used. User can pass an empty string.  </summary>
        public string authorization { get; set; } = "";

        /// <summary>Optional parameters.  </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a ClearTableRequest object with default
        /// parameters.</summary>
        public ClearTableRequest() { }

        /// <summary>Constructs a ClearTableRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table to be cleared. Must be
        /// an existing table. Empty string clears all available tables.
        /// </param>
        /// <param name="authorization">No longer used. User can pass an empty
        /// string.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        public ClearTableRequest( string table_name = null,
                                  string authorization = null,
                                  IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.authorization = authorization ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class ClearTableRequest



    /// <summary>A set of results returned by /clear/table.</summary>
    public class ClearTableResponse : KineticaData
    {

        /// <summary>Value of <paramref cref="ClearTableRequest.table_name" />
        /// for a given table, or 'ALL CLEARED' in case of clearing all tables.
        /// </summary>
        public string table_name { get; set; }

    } // end class ClearTableResponse




}  // end namespace kinetica
