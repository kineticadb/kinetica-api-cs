/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.alterTableMonitor(string,IDictionary{string, string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Alters a table monitor previously created with <see
    /// cref="Kinetica.createTableMonitor(string,IDictionary{string, string})"
    /// />.</summary>
    public class AlterTableMonitorRequest : KineticaData
    {

        /// <summary>Map containing the properties of the table monitor to be
        /// updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableMonitorRequest.MonitorUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>:</term>
        ///         <description>Updates the schema name.  If
        /// <i>schema_name</i>
        /// doesn't exist, an error will be thrown. If <i>schema_name</i> is
        /// empty, then the user's
        /// default schema will be used.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <see
        /// cref="monitor_updates_map" />.</summary>
        public struct MonitorUpdatesMap
        {

            /// <summary>Updates the schema name.  If <i>schema_name</i>
            /// doesn't exist, an error will be thrown. If <i>schema_name</i>
            /// is empty, then the user's
            /// default schema will be used.</summary>
            public const string SCHEMA_NAME = "schema_name";
        } // end struct MonitorUpdatesMap


        /// <summary>The topic ID returned by /create/tablemonitor.  </summary>
        public string topic_id { get; set; }

        /// <summary>Map containing the properties of the table monitor to be
        /// updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableMonitorRequest.MonitorUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>:</term>
        ///         <description>Updates the schema name.  If
        /// <i>schema_name</i>
        /// doesn't exist, an error will be thrown. If <i>schema_name</i> is
        /// empty, then the user's
        /// default schema will be used.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> monitor_updates_map { get; set; } = new Dictionary<string, string>();

        /// <summary>Optional parameters.  </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AlterTableMonitorRequest object with default
        /// parameters.</summary>
        public AlterTableMonitorRequest() { }

        /// <summary>Constructs an AlterTableMonitorRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="topic_id">The topic ID returned by
        /// /create/tablemonitor.  </param>
        /// <param name="monitor_updates_map">Map containing the properties of
        /// the table monitor to be updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableMonitorRequest.MonitorUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>:</term>
        ///         <description>Updates the schema name.  If
        /// <i>schema_name</i>
        /// doesn't exist, an error will be thrown. If <i>schema_name</i> is
        /// empty, then the user's
        /// default schema will be used.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        public AlterTableMonitorRequest( string topic_id,
                                         IDictionary<string, string> monitor_updates_map,
                                         IDictionary<string, string> options)
        {
            this.topic_id = topic_id ?? "";
            this.monitor_updates_map = monitor_updates_map ?? new Dictionary<string, string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AlterTableMonitorRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.alterTableMonitor(string,IDictionary{string, string},IDictionary{string, string})"
    /// />.</summary>
    public class AlterTableMonitorResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="AlterTableMonitorRequest.topic_id" />.  </summary>
        public string topic_id { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AlterTableMonitorResponse




}  // end namespace kinetica
