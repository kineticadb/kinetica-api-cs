/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.executeSql(string,long,long,string,IList{byte[]},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Execute a SQL statement (query, DML, or DDL).
    /// <br />
    /// See <a href="../../../sql/" target="_top">SQL Support</a> for the
    /// complete set of supported SQL commands.</summary>
    public class ExecuteSqlRequest : KineticaData
    {

        /// <summary>Specifies the encoding for returned records; either
        /// 'binary' or 'json'.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Encoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Encoding.JSON">JSON</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Encoding.BINARY">BINARY</see>.
        /// A set of string constants for the parameter <see cref="encoding"
        /// />.</summary>
        public struct Encoding
        {
            public const string BINARY = "binary";
            public const string JSON = "json";
        } // end struct Encoding


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.COST_BASED_OPTIMIZATION">COST_BASED_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, disables the cost-based
        /// optimization of the given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.DISTRIBUTED_JOINS">DISTRIBUTED_JOINS</see>:</term>
        ///         <description>If <i>true</i>, enables the use of distributed
        /// joins in servicing the given query.  Any query requiring a
        /// distributed join will succeed, though hints can be used in the
        /// query to change the distribution of the source data to allow the
        /// query to succeed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.DISTRIBUTED_OPERATIONS">DISTRIBUTED_OPERATIONS</see>:</term>
        ///         <description>If <i>true</i>, enables the use of distributed
        /// operations in servicing the given query.  Any query requiring a
        /// distributed join will succeed, though hints can be used in the
        /// query to change the distribution of the source data to allow the
        /// query to succeed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.LATE_MATERIALIZATION">LATE_MATERIALIZATION</see>:</term>
        ///         <description>If <i>true</i>, Joins/Filters results  will
        /// always be materialized ( saved to result tables format)
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PAGING_TABLE">PAGING_TABLE</see>:</term>
        ///         <description>When empty or the specified paging table not
        /// exists, the system will create a paging table and return when query
        /// output has more records than the user asked. If the paging table
        /// exists in the system, the records from the paging table are
        /// returned without evaluating the query.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PAGING_TABLE_TTL">PAGING_TABLE_TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the paging table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PARALLEL_EXECUTION">PARALLEL_EXECUTION</see>:</term>
        ///         <description>If <i>false</i>, disables the parallel step
        /// execution of the given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PLAN_CACHE">PLAN_CACHE</see>:</term>
        ///         <description>If <i>false</i>, disables plan caching for the
        /// given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PREPARE_MODE">PREPARE_MODE</see>:</term>
        ///         <description>If <i>true</i>, compiles a query into an
        /// execution plan and saves it in query cache. Query execution is not
        /// performed and an empty response will be returned to user
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PRESERVE_DICT_ENCODING">PRESERVE_DICT_ENCODING</see>:</term>
        ///         <description>If <i>true</i>, then columns that were dict
        /// encoded in the source table will be dict encoded in the projection
        /// table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.QUERY_PARAMETERS">QUERY_PARAMETERS</see>:</term>
        ///         <description>Query parameters in JSON array or arrays (for
        /// inserting multiple rows).  This can be used instead of <paramref
        /// cref="ExecuteSqlRequest.data" /> and <paramref
        /// cref="ExecuteSqlRequest.request_schema_str" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.RESULTS_CACHING">RESULTS_CACHING</see>:</term>
        ///         <description>If <i>false</i>, disables caching of the
        /// results of the given query
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.RULE_BASED_OPTIMIZATION">RULE_BASED_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, disables rule-based rewrite
        /// optimizations for the given query
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.SSQ_OPTIMIZATION">SSQ_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, scalar subqueries will be
        /// translated into joins
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the intermediate result tables used in
        /// query execution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column using alter table,
        /// validate the change before applying it. If <i>true</i>, then
        /// validate all values. A value too large (or too long) for the new
        /// type will prevent any change. If <i>false</i>, then when a value is
        /// too large or long, it will be truncated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>false</i>, disables the cost-based optimization
            /// of the given query.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</summary>
            public const string COST_BASED_OPTIMIZATION = "cost_based_optimization";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If <i>true</i>, enables the use of distributed joins
            /// in servicing the given query.  Any query requiring a
            /// distributed join will succeed, though hints can be used in the
            /// query to change the distribution of the source data to allow
            /// the query to succeed.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</summary>
            public const string DISTRIBUTED_JOINS = "distributed_joins";

            /// <summary>If <i>true</i>, enables the use of distributed
            /// operations in servicing the given query.  Any query requiring a
            /// distributed join will succeed, though hints can be used in the
            /// query to change the distribution of the source data to allow
            /// the query to succeed.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</summary>
            public const string DISTRIBUTED_OPERATIONS = "distributed_operations";

            /// <summary>Can be used to customize behavior when the updated
            /// primary key value already exists as described in <see
            /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
            /// />.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</summary>
            public const string IGNORE_EXISTING_PK = "ignore_existing_pk";

            /// <summary>If <i>true</i>, Joins/Filters results  will always be
            /// materialized ( saved to result tables format)
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</summary>
            public const string LATE_MATERIALIZATION = "late_materialization";

            /// <summary>When empty or the specified paging table not exists,
            /// the system will create a paging table and return when query
            /// output has more records than the user asked. If the paging
            /// table exists in the system, the records from the paging table
            /// are returned without evaluating the query.</summary>
            public const string PAGING_TABLE = "paging_table";

            /// <summary>Sets the <a href="../../../concepts/ttl/"
            /// target="_top">TTL</a> of the paging table.</summary>
            public const string PAGING_TABLE_TTL = "paging_table_ttl";

            /// <summary>If <i>false</i>, disables the parallel step execution
            /// of the given query.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</summary>
            public const string PARALLEL_EXECUTION = "parallel_execution";

            /// <summary>If <i>false</i>, disables plan caching for the given
            /// query.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</summary>
            public const string PLAN_CACHE = "plan_cache";

            /// <summary>If <i>true</i>, compiles a query into an execution
            /// plan and saves it in query cache. Query execution is not
            /// performed and an empty response will be returned to user
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</summary>
            public const string PREPARE_MODE = "prepare_mode";

            /// <summary>If <i>true</i>, then columns that were dict encoded in
            /// the source table will be dict encoded in the projection table.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</summary>
            public const string PRESERVE_DICT_ENCODING = "preserve_dict_encoding";

            /// <summary>Query parameters in JSON array or arrays (for
            /// inserting multiple rows).  This can be used instead of <see
            /// cref="data" /> and <see cref="request_schema_str" />.</summary>
            public const string QUERY_PARAMETERS = "query_parameters";

            /// <summary>If <i>false</i>, disables caching of the results of
            /// the given query
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</summary>
            public const string RESULTS_CACHING = "results_caching";

            /// <summary>If <i>false</i>, disables rule-based rewrite
            /// optimizations for the given query
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</summary>
            public const string RULE_BASED_OPTIMIZATION = "rule_based_optimization";

            /// <summary>If <i>false</i>, scalar subqueries will be translated
            /// into joins
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</summary>
            public const string SSQ_OPTIMIZATION = "ssq_optimization";

            /// <summary>Sets the <a href="../../../concepts/ttl/"
            /// target="_top">TTL</a> of the intermediate result tables used in
            /// query execution.</summary>
            public const string TTL = "ttl";

            /// <summary>Can be used to customize behavior when the updated
            /// primary key value already exists as described in <see
            /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
            /// />.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</summary>
            public const string UPDATE_ON_EXISTING_PK = "update_on_existing_pk";

            /// <summary>When changing a column using alter table, validate the
            /// change before applying it. If <i>true</i>, then validate all
            /// values. A value too large (or too long) for the new type will
            /// prevent any change. If <i>false</i>, then when a value is too
            /// large or long, it will be truncated.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</summary>
            public const string VALIDATE_CHANGE_COLUMN = "validate_change_column";
        } // end struct Options


        /// <summary>SQL statement (query, DML, or DDL) to be executed
        /// </summary>
        public string statement { get; set; }

        /// <summary>A positive integer indicating the number of initial
        /// results to skip (this can be useful for paging through the
        /// results).  The default value is 0.The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT. </summary>
        public long offset { get; set; } = 0;

        /// <summary>A positive integer indicating the maximum number of
        /// results to be returned, or
        /// END_OF_SET (-9999) to indicate that the maximum number of results
        /// allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the
        /// <a href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration.
        /// Use <member name="has_more_records" /> to see if more records exist
        /// in the result to be fetched, and
        /// <paramref cref="ExecuteSqlRequest.offset" /> & <paramref
        /// cref="ExecuteSqlRequest.limit" /> to request subsequent pages of
        /// results.  The default value is -9999.</summary>
        public long limit { get; set; } = -9999;

        /// <summary>Specifies the encoding for returned records; either
        /// 'binary' or 'json'.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Encoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Encoding.JSON">JSON</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Encoding.BINARY">BINARY</see>.  </summary>
        public string encoding { get; set; } = Encoding.BINARY;

        /// <summary>Avro schema of <paramref cref="ExecuteSqlRequest.data" />.
        /// The default value is ''.</summary>
        public string request_schema_str { get; set; } = "";

        /// <summary>An array of binary-encoded data for the records to be
        /// binded to the SQL query.  Or use <i>query_parameters</i> to pass
        /// the data in JSON format.  The default value is an empty {@link
        /// List}.</summary>
        public IList<byte[]> data { get; set; } = new List<byte[]>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.COST_BASED_OPTIMIZATION">COST_BASED_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, disables the cost-based
        /// optimization of the given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.DISTRIBUTED_JOINS">DISTRIBUTED_JOINS</see>:</term>
        ///         <description>If <i>true</i>, enables the use of distributed
        /// joins in servicing the given query.  Any query requiring a
        /// distributed join will succeed, though hints can be used in the
        /// query to change the distribution of the source data to allow the
        /// query to succeed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.DISTRIBUTED_OPERATIONS">DISTRIBUTED_OPERATIONS</see>:</term>
        ///         <description>If <i>true</i>, enables the use of distributed
        /// operations in servicing the given query.  Any query requiring a
        /// distributed join will succeed, though hints can be used in the
        /// query to change the distribution of the source data to allow the
        /// query to succeed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.LATE_MATERIALIZATION">LATE_MATERIALIZATION</see>:</term>
        ///         <description>If <i>true</i>, Joins/Filters results  will
        /// always be materialized ( saved to result tables format)
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PAGING_TABLE">PAGING_TABLE</see>:</term>
        ///         <description>When empty or the specified paging table not
        /// exists, the system will create a paging table and return when query
        /// output has more records than the user asked. If the paging table
        /// exists in the system, the records from the paging table are
        /// returned without evaluating the query.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PAGING_TABLE_TTL">PAGING_TABLE_TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the paging table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PARALLEL_EXECUTION">PARALLEL_EXECUTION</see>:</term>
        ///         <description>If <i>false</i>, disables the parallel step
        /// execution of the given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PLAN_CACHE">PLAN_CACHE</see>:</term>
        ///         <description>If <i>false</i>, disables plan caching for the
        /// given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PREPARE_MODE">PREPARE_MODE</see>:</term>
        ///         <description>If <i>true</i>, compiles a query into an
        /// execution plan and saves it in query cache. Query execution is not
        /// performed and an empty response will be returned to user
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PRESERVE_DICT_ENCODING">PRESERVE_DICT_ENCODING</see>:</term>
        ///         <description>If <i>true</i>, then columns that were dict
        /// encoded in the source table will be dict encoded in the projection
        /// table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.QUERY_PARAMETERS">QUERY_PARAMETERS</see>:</term>
        ///         <description>Query parameters in JSON array or arrays (for
        /// inserting multiple rows).  This can be used instead of <paramref
        /// cref="ExecuteSqlRequest.data" /> and <paramref
        /// cref="ExecuteSqlRequest.request_schema_str" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.RESULTS_CACHING">RESULTS_CACHING</see>:</term>
        ///         <description>If <i>false</i>, disables caching of the
        /// results of the given query
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.RULE_BASED_OPTIMIZATION">RULE_BASED_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, disables rule-based rewrite
        /// optimizations for the given query
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.SSQ_OPTIMIZATION">SSQ_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, scalar subqueries will be
        /// translated into joins
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the intermediate result tables used in
        /// query execution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column using alter table,
        /// validate the change before applying it. If <i>true</i>, then
        /// validate all values. A value too large (or too long) for the new
        /// type will prevent any change. If <i>false</i>, then when a value is
        /// too large or long, it will be truncated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an ExecuteSqlRequest object with default
        /// parameters.</summary>
        public ExecuteSqlRequest() { }

        /// <summary>Constructs an ExecuteSqlRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="statement">SQL statement (query, DML, or DDL) to be
        /// executed  </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The default value is 0.The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or
        /// END_OF_SET (-9999) to indicate that the maximum number of results
        /// allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the
        /// <a href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration.
        /// Use <member name="has_more_records" /> to see if more records exist
        /// in the result to be fetched, and
        /// <paramref cref="ExecuteSqlRequest.offset" /> & <paramref
        /// cref="ExecuteSqlRequest.limit" /> to request subsequent pages of
        /// results.  The default value is -9999.</param>
        /// <param name="request_schema_str">Avro schema of <paramref
        /// cref="ExecuteSqlRequest.data" />.  The default value is ''.</param>
        /// <param name="data">An array of binary-encoded data for the records
        /// to be binded to the SQL query.  Or use <i>query_parameters</i> to
        /// pass the data in JSON format.  The default value is an empty {@link
        /// List}.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.COST_BASED_OPTIMIZATION">COST_BASED_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, disables the cost-based
        /// optimization of the given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.DISTRIBUTED_JOINS">DISTRIBUTED_JOINS</see>:</term>
        ///         <description>If <i>true</i>, enables the use of distributed
        /// joins in servicing the given query.  Any query requiring a
        /// distributed join will succeed, though hints can be used in the
        /// query to change the distribution of the source data to allow the
        /// query to succeed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.DISTRIBUTED_OPERATIONS">DISTRIBUTED_OPERATIONS</see>:</term>
        ///         <description>If <i>true</i>, enables the use of distributed
        /// operations in servicing the given query.  Any query requiring a
        /// distributed join will succeed, though hints can be used in the
        /// query to change the distribution of the source data to allow the
        /// query to succeed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.LATE_MATERIALIZATION">LATE_MATERIALIZATION</see>:</term>
        ///         <description>If <i>true</i>, Joins/Filters results  will
        /// always be materialized ( saved to result tables format)
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PAGING_TABLE">PAGING_TABLE</see>:</term>
        ///         <description>When empty or the specified paging table not
        /// exists, the system will create a paging table and return when query
        /// output has more records than the user asked. If the paging table
        /// exists in the system, the records from the paging table are
        /// returned without evaluating the query.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PAGING_TABLE_TTL">PAGING_TABLE_TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the paging table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PARALLEL_EXECUTION">PARALLEL_EXECUTION</see>:</term>
        ///         <description>If <i>false</i>, disables the parallel step
        /// execution of the given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PLAN_CACHE">PLAN_CACHE</see>:</term>
        ///         <description>If <i>false</i>, disables plan caching for the
        /// given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PREPARE_MODE">PREPARE_MODE</see>:</term>
        ///         <description>If <i>true</i>, compiles a query into an
        /// execution plan and saves it in query cache. Query execution is not
        /// performed and an empty response will be returned to user
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PRESERVE_DICT_ENCODING">PRESERVE_DICT_ENCODING</see>:</term>
        ///         <description>If <i>true</i>, then columns that were dict
        /// encoded in the source table will be dict encoded in the projection
        /// table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.QUERY_PARAMETERS">QUERY_PARAMETERS</see>:</term>
        ///         <description>Query parameters in JSON array or arrays (for
        /// inserting multiple rows).  This can be used instead of <paramref
        /// cref="ExecuteSqlRequest.data" /> and <paramref
        /// cref="ExecuteSqlRequest.request_schema_str" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.RESULTS_CACHING">RESULTS_CACHING</see>:</term>
        ///         <description>If <i>false</i>, disables caching of the
        /// results of the given query
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.RULE_BASED_OPTIMIZATION">RULE_BASED_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, disables rule-based rewrite
        /// optimizations for the given query
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.SSQ_OPTIMIZATION">SSQ_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, scalar subqueries will be
        /// translated into joins
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the intermediate result tables used in
        /// query execution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column using alter table,
        /// validate the change before applying it. If <i>true</i>, then
        /// validate all values. A value too large (or too long) for the new
        /// type will prevent any change. If <i>false</i>, then when a value is
        /// too large or long, it will be truncated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public ExecuteSqlRequest( string statement,
                                  long? offset = null,
                                  long? limit = null,
                                  string request_schema_str = null,
                                  IList<byte[]> data = null,
                                  IDictionary<string, string> options = null)
        {
            this.statement = statement ?? "";
            this.offset = offset ?? 0;
            this.limit = limit ?? -9999;
            this.encoding = Encoding.BINARY;
            this.request_schema_str = request_schema_str ?? "";
            this.data = data ?? new List<byte[]>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor


        /// <summary>Constructs an ExecuteSqlRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="statement">SQL statement (query, DML, or DDL) to be
        /// executed  </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The default value is 0.The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or
        /// END_OF_SET (-9999) to indicate that the maximum number of results
        /// allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the
        /// <a href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration.
        /// Use <member name="has_more_records" /> to see if more records exist
        /// in the result to be fetched, and
        /// <paramref cref="ExecuteSqlRequest.offset" /> & <paramref
        /// cref="ExecuteSqlRequest.limit" /> to request subsequent pages of
        /// results.  The default value is -9999.</param>
        /// <param name="encoding">Specifies the encoding for returned records;
        /// either 'binary' or 'json'.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Encoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Encoding.JSON">JSON</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Encoding.BINARY">BINARY</see>.  </param>
        /// <param name="request_schema_str">Avro schema of <paramref
        /// cref="ExecuteSqlRequest.data" />.  The default value is ''.</param>
        /// <param name="data">An array of binary-encoded data for the records
        /// to be binded to the SQL query.  Or use <i>query_parameters</i> to
        /// pass the data in JSON format.  The default value is an empty {@link
        /// List}.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.COST_BASED_OPTIMIZATION">COST_BASED_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, disables the cost-based
        /// optimization of the given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.DISTRIBUTED_JOINS">DISTRIBUTED_JOINS</see>:</term>
        ///         <description>If <i>true</i>, enables the use of distributed
        /// joins in servicing the given query.  Any query requiring a
        /// distributed join will succeed, though hints can be used in the
        /// query to change the distribution of the source data to allow the
        /// query to succeed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.DISTRIBUTED_OPERATIONS">DISTRIBUTED_OPERATIONS</see>:</term>
        ///         <description>If <i>true</i>, enables the use of distributed
        /// operations in servicing the given query.  Any query requiring a
        /// distributed join will succeed, though hints can be used in the
        /// query to change the distribution of the source data to allow the
        /// query to succeed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.LATE_MATERIALIZATION">LATE_MATERIALIZATION</see>:</term>
        ///         <description>If <i>true</i>, Joins/Filters results  will
        /// always be materialized ( saved to result tables format)
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PAGING_TABLE">PAGING_TABLE</see>:</term>
        ///         <description>When empty or the specified paging table not
        /// exists, the system will create a paging table and return when query
        /// output has more records than the user asked. If the paging table
        /// exists in the system, the records from the paging table are
        /// returned without evaluating the query.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PAGING_TABLE_TTL">PAGING_TABLE_TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the paging table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PARALLEL_EXECUTION">PARALLEL_EXECUTION</see>:</term>
        ///         <description>If <i>false</i>, disables the parallel step
        /// execution of the given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PLAN_CACHE">PLAN_CACHE</see>:</term>
        ///         <description>If <i>false</i>, disables plan caching for the
        /// given query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PREPARE_MODE">PREPARE_MODE</see>:</term>
        ///         <description>If <i>true</i>, compiles a query into an
        /// execution plan and saves it in query cache. Query execution is not
        /// performed and an empty response will be returned to user
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.PRESERVE_DICT_ENCODING">PRESERVE_DICT_ENCODING</see>:</term>
        ///         <description>If <i>true</i>, then columns that were dict
        /// encoded in the source table will be dict encoded in the projection
        /// table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.QUERY_PARAMETERS">QUERY_PARAMETERS</see>:</term>
        ///         <description>Query parameters in JSON array or arrays (for
        /// inserting multiple rows).  This can be used instead of <paramref
        /// cref="ExecuteSqlRequest.data" /> and <paramref
        /// cref="ExecuteSqlRequest.request_schema_str" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.RESULTS_CACHING">RESULTS_CACHING</see>:</term>
        ///         <description>If <i>false</i>, disables caching of the
        /// results of the given query
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.RULE_BASED_OPTIMIZATION">RULE_BASED_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, disables rule-based rewrite
        /// optimizations for the given query
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.SSQ_OPTIMIZATION">SSQ_OPTIMIZATION</see>:</term>
        ///         <description>If <i>false</i>, scalar subqueries will be
        /// translated into joins
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">TTL</a> of the intermediate result tables used in
        /// query execution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column using alter table,
        /// validate the change before applying it. If <i>true</i>, then
        /// validate all values. A value too large (or too long) for the new
        /// type will prevent any change. If <i>false</i>, then when a value is
        /// too large or long, it will be truncated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteSqlRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public ExecuteSqlRequest( string statement,
                                  long? offset = null,
                                  long? limit = null,
                                  string encoding = null,
                                  string request_schema_str = null,
                                  IList<byte[]> data = null,
                                  IDictionary<string, string> options = null)
        {
            this.statement = statement ?? "";
            this.offset = offset ?? 0;
            this.limit = limit ?? -9999;
            this.encoding = encoding ?? Encoding.BINARY;
            this.request_schema_str = request_schema_str ?? "";
            this.data = data ?? new List<byte[]>();
            this.options = options ?? new Dictionary<string, string>();
        } // end full constructor

    } // end class ExecuteSqlRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.executeSql(string,long,long,string,IList{byte[]},IDictionary{string, string})"
    /// />.</summary>
    public class RawExecuteSqlResponse : KineticaData
    {

        /// <summary>Too many records. Returned a partial set.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.HasMoreRecords.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.HasMoreRecords.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <member
        /// name="has_more_records" />.</summary>
        public struct HasMoreRecords
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct HasMoreRecords


        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.Info.COUNT">COUNT</see>:</term>
        ///         <description>Number of records in the final
        /// table</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <member name="info"
        /// />.</summary>
        public struct Info
        {

            /// <summary>Number of records in the final table</summary>
            public const string COUNT = "count";
        } // end struct Info


        /// <summary>The number of objects/records affected.  </summary>
        public long count_affected { get; set; }

        /// <summary>Avro schema of <member name="binary_encoded_response" />
        /// or <member name="json_encoded_response" />.  </summary>
        public string response_schema_str { get; set; }

        /// <summary>Avro binary encoded response.  </summary>
        public byte[] binary_encoded_response { get; set; }

        /// <summary>Avro JSON encoded response.  </summary>
        public string json_encoded_response { get; set; }

        /// <summary>Total/Filtered number of records.  </summary>
        public long total_number_of_records { get; set; }

        /// <summary>Too many records. Returned a partial set.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.HasMoreRecords.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.HasMoreRecords.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>  </summary>
        public bool has_more_records { get; set; }

        /// <summary>Name of the table that has the result records of the
        /// query. Valid, when <member name="has_more_records" /> is
        /// <i>true</i> (Subject to config.paging_tables_enabled)  </summary>
        public string paging_table { get; set; }

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.Info.COUNT">COUNT</see>:</term>
        ///         <description>Number of records in the final
        /// table</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class RawExecuteSqlResponse



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.executeSql(string,long,long,string,IList{byte[]},IDictionary{string, string})"
    /// />.</summary>
    public class ExecuteSqlResponse : KineticaData
    {

        /// <summary>Too many records. Returned a partial set.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.HasMoreRecords.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.HasMoreRecords.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <member
        /// name="has_more_records" />.</summary>
        public struct HasMoreRecords
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct HasMoreRecords


        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.Info.COUNT">COUNT</see>:</term>
        ///         <description>Number of records in the final
        /// table</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <member name="info"
        /// />.</summary>
        public struct Info
        {

            /// <summary>Number of records in the final table</summary>
            public const string COUNT = "count";
        } // end struct Info


        /// <summary>The number of objects/records affected.  </summary>
        public long count_affected { get; set; }

        /// <summary>Avro binary encoded response.  </summary>
        public IList<KineticaRecord> data { get; set; } = new List<KineticaRecord>();

        /// <summary>Total/Filtered number of records.  </summary>
        public long total_number_of_records { get; set; }

        /// <summary>Too many records. Returned a partial set.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.HasMoreRecords.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.HasMoreRecords.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>  </summary>
        public bool has_more_records { get; set; }

        /// <summary>Name of the table that has the result records of the
        /// query. Valid, when <member name="has_more_records" /> is
        /// <i>true</i> (Subject to config.paging_tables_enabled)  </summary>
        public string paging_table { get; set; }

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawExecuteSqlResponse.Info.COUNT">COUNT</see>:</term>
        ///         <description>Number of records in the final
        /// table</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class ExecuteSqlResponse




}  // end namespace kinetica
