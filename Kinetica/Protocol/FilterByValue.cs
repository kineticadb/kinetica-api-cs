/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.filterByValue(string,string,bool,double,string,string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Calculates which objects from a table has a particular value for a
    /// particular column. The input parameters provide a way to specify either
    /// a String or a Double valued column and a desired value for the column
    /// on which the filter is performed. The operation is synchronous, meaning
    /// that a response will not be returned until all the objects are fully
    /// available. The response payload provides the count of the resulting
    /// set. A new result view which satisfies the input filter restriction
    /// specification is also created with a view name passed in as part of the
    /// input payload.  Although this functionality can also be accomplished
    /// with the standard filter function, it is more efficient.</summary>
    public class FilterByValueRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByValueRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created view. If the collection provided is non-existent, the
        /// collection will be automatically created. If empty, then the newly
        /// created view will be top-level.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Name of a collection which is to contain the newly
            /// created view. If the collection provided is non-existent, the
            /// collection will be automatically created. If empty, then the
            /// newly created view will be top-level.</summary>
            public const string COLLECTION_NAME = "collection_name";
        } // end struct Options


        /// <summary>Name of an existing table on which to perform the
        /// calculation.  </summary>
        public string table_name { get; set; }

        /// <summary>If provided, then this will be the name of the view
        /// containing the results. Has the same naming restrictions as <a
        /// href="../../concepts/tables.html" target="_top">tables</a>.  The
        /// default value is ''.</summary>
        public string view_name { get; set; } = "";

        /// <summary>Indicates whether the value being searched for is string
        /// or numeric.  </summary>
        public bool is_string { get; set; }

        /// <summary>The value to search for.  The default value is
        /// 0.</summary>
        public double _value { get; set; } = 0;

        /// <summary>The string value to search for.  The default value is
        /// ''.</summary>
        public string value_str { get; set; } = "";

        /// <summary>Name of a column on which the filter by value would be
        /// applied.  </summary>
        public string column_name { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByValueRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created view. If the collection provided is non-existent, the
        /// collection will be automatically created. If empty, then the newly
        /// created view will be top-level.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a FilterByValueRequest object with default
        /// parameters.</summary>
        public FilterByValueRequest() { }

        /// <summary>Constructs a FilterByValueRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of an existing table on which to
        /// perform the calculation.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../concepts/tables.html" target="_top">tables</a>.
        /// The default value is ''.</param>
        /// <param name="is_string">Indicates whether the value being searched
        /// for is string or numeric.  </param>
        /// <param name="_value">The value to search for.  The default value is
        /// 0.</param>
        /// <param name="value_str">The string value to search for.  The
        /// default value is ''.</param>
        /// <param name="column_name">Name of a column on which the filter by
        /// value would be applied.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByValueRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created view. If the collection provided is non-existent, the
        /// collection will be automatically created. If empty, then the newly
        /// created view will be top-level.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public FilterByValueRequest( string table_name,
                                     string view_name,
                                     bool is_string,
                                     double _value,
                                     string value_str,
                                     string column_name,
                                     IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.view_name = view_name ?? "";
            this.is_string = is_string;
            this._value = _value;
            this.value_str = value_str ?? "";
            this.column_name = column_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class FilterByValueRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.filterByValue(string,string,bool,double,string,string,IDictionary{string, string})"
    /// />.</summary>
    public class FilterByValueResponse : KineticaData
    {

        /// <summary>The number of records passing the value filter.
        /// </summary>
        public long count { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class FilterByValueResponse




}  // end namespace kinetica
