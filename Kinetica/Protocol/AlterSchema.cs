/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.alterSchema(string,string,string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Used to change the name of a SQL-style <a
    /// href="../../../concepts/schemas/" target="_top">schema</a>, specified
    /// in <see cref="schema_name" />.</summary>
    public class AlterSchemaRequest : KineticaData
    {

        /// <summary>Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterSchemaRequest.Action.RENAME_SCHEMA">RENAME_SCHEMA</see>:</term>
        ///         <description>Renames a schema to <paramref
        /// cref="AlterSchemaRequest._value" />. Has the same naming
        /// restrictions as <a href="../../../concepts/tables/"
        /// target="_top">tables</a>.</description>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <see cref="action"
        /// />.</summary>
        public struct Action
        {

            /// <summary>Renames a schema to <see cref="_value" />. Has the
            /// same naming restrictions as <a href="../../../concepts/tables/"
            /// target="_top">tables</a>.</summary>
            public const string RENAME_SCHEMA = "rename_schema";
        } // end struct Action


        /// <summary>Name of the schema to be altered.  </summary>
        public string schema_name { get; set; }

        /// <summary>Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterSchemaRequest.Action.RENAME_SCHEMA">RENAME_SCHEMA</see>:</term>
        ///         <description>Renames a schema to <paramref
        /// cref="AlterSchemaRequest._value" />. Has the same naming
        /// restrictions as <a href="../../../concepts/tables/"
        /// target="_top">tables</a>.</description>
        ///     </item>
        /// </list>  </summary>
        public string action { get; set; }

        /// <summary>The value of the modification, depending on <paramref
        /// cref="AlterSchemaRequest.action" />.  For now the only value of
        /// <paramref cref="AlterSchemaRequest.action" /> is
        /// <i>rename_schema</i>.  In this case the value is the new name of
        /// the schema.  </summary>
        public string _value { get; set; }

        /// <summary>Optional parameters.  The default value is an empty {@link
        /// Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AlterSchemaRequest object with default
        /// parameters.</summary>
        public AlterSchemaRequest() { }

        /// <summary>Constructs an AlterSchemaRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="schema_name">Name of the schema to be altered.
        /// </param>
        /// <param name="action">Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterSchemaRequest.Action.RENAME_SCHEMA">RENAME_SCHEMA</see>:</term>
        ///         <description>Renames a schema to <paramref
        /// cref="AlterSchemaRequest._value" />. Has the same naming
        /// restrictions as <a href="../../../concepts/tables/"
        /// target="_top">tables</a>.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="_value">The value of the modification, depending on
        /// <paramref cref="AlterSchemaRequest.action" />.  For now the only
        /// value of <paramref cref="AlterSchemaRequest.action" /> is
        /// <i>rename_schema</i>.  In this case the value is the new name of
        /// the schema.  </param>
        /// <param name="options">Optional parameters.  The default value is an
        /// empty {@link Dictionary}.</param>
        /// 
        public AlterSchemaRequest( string schema_name,
                                   string action,
                                   string _value,
                                   IDictionary<string, string> options = null)
        {
            this.schema_name = schema_name ?? "";
            this.action = action ?? "";
            this._value = _value ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AlterSchemaRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.alterSchema(string,string,string,IDictionary{string, string})"
    /// />.</summary>
    public class AlterSchemaResponse : KineticaData
    {

        /// <summary>Value of <paramref cref="AlterSchemaRequest.schema_name"
        /// />.  </summary>
        public string schema_name { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AlterSchemaResponse




}  // end namespace kinetica
