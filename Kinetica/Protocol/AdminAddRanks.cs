/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminAddRanks(IList{string},IList{IDictionary{string, string}},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Add one or more new ranks to the Kinetica cluster. The new ranks will
    /// not contain any data initially, other than replicated tables, and not
    /// be assigned any shards. To rebalance data across the cluster, which
    /// includes shifting some shard key assignments to newly added ranks, see
    /// <see cref="Kinetica.adminRebalance(IDictionary{string, string})" />.
    /// <br />
    /// For example, if attempting to add three new ranks (two ranks on host
    /// 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster
    /// with additional configuration parameters:
    /// <br />
    /// * <see cref="hosts" /> would be an array including 172.123.45.67 in the
    /// first two indices (signifying two ranks being added to host
    /// 172.123.45.67) and 172.123.45.68 in the last index (signifying one rank
    /// being added to host 172.123.45.67)
    /// <br />
    /// * <see cref="config_params" /> would be an array of maps, with each map
    /// corresponding to the ranks being added in <see cref="hosts" />. The key
    /// of each map would be the configuration parameter name and the value
    /// would be the parameter's value, e.g. 'rank.gpu':'1'
    /// <br />
    /// This endpoint's processing includes copying all replicated table data
    /// to the new rank(s) and therefore could take a long time. The API call
    /// may time out if run directly.  It is recommended to run this endpoint
    /// asynchronously via <see
    /// cref="Kinetica.createJob(string,string,byte[],string,IDictionary{string, string})"
    /// />.</summary>
    public class AdminAddRanksRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If <i>true</i>, only validation checks will be
        /// performed. No ranks are added.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAddRanksRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>true</i>, only validation checks will be
            /// performed. No ranks are added.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AdminAddRanksRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AdminAddRanksRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AdminAddRanksRequest.Options.FALSE">FALSE</see>.</summary>
            public const string DRY_RUN = "dry_run";
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct Options


        /// <summary>The IP address of each rank being added to the cluster.
        /// Insert one entry per rank, even if they are on the same host. The
        /// order of the hosts in the array only matters as it relates to the
        /// <paramref cref="AdminAddRanksRequest.config_params" />.  </summary>
        public IList<string> hosts { get; set; } = new List<string>();

        /// <summary>Configuration parameters to apply to the new ranks, e.g.,
        /// which GPU to use. Configuration parameters that start with
        /// 'rankN.', where N is the rank number, should omit the N, as the new
        /// rank number(s) are not allocated until the ranks are created. Each
        /// entry in this array corresponds to the entry at the same array
        /// index in the <paramref cref="AdminAddRanksRequest.hosts" />. This
        /// array must either be completely empty or have the same number of
        /// elements as the hosts array.  An empty array will result in the new
        /// ranks being set only with default parameters.  </summary>
        public IList<IDictionary<string, string>> config_params { get; set; } = new List<IDictionary<string, string>>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If <i>true</i>, only validation checks will be
        /// performed. No ranks are added.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAddRanksRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AdminAddRanksRequest object with default
        /// parameters.</summary>
        public AdminAddRanksRequest() { }

        /// <summary>Constructs an AdminAddRanksRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="hosts">The IP address of each rank being added to the
        /// cluster. Insert one entry per rank, even if they are on the same
        /// host. The order of the hosts in the array only matters as it
        /// relates to the <paramref cref="AdminAddRanksRequest.config_params"
        /// />.  </param>
        /// <param name="config_params">Configuration parameters to apply to
        /// the new ranks, e.g., which GPU to use. Configuration parameters
        /// that start with 'rankN.', where N is the rank number, should omit
        /// the N, as the new rank number(s) are not allocated until the ranks
        /// are created. Each entry in this array corresponds to the entry at
        /// the same array index in the <paramref
        /// cref="AdminAddRanksRequest.hosts" />. This array must either be
        /// completely empty or have the same number of elements as the hosts
        /// array.  An empty array will result in the new ranks being set only
        /// with default parameters.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If <i>true</i>, only validation checks will be
        /// performed. No ranks are added.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAddRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAddRanksRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public AdminAddRanksRequest( IList<string> hosts,
                                     IList<IDictionary<string, string>> config_params,
                                     IDictionary<string, string> options = null)
        {
            this.hosts = hosts ?? new List<string>();
            this.config_params = config_params ?? new List<IDictionary<string, string>>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AdminAddRanksRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminAddRanks(IList{string},IList{IDictionary{string, string}},IDictionary{string, string})"
    /// />.</summary>
    public class AdminAddRanksResponse : KineticaData
    {

        /// <summary>The number assigned to each newly added rank, in the same
        /// order as the ranks in the <paramref
        /// cref="AdminAddRanksRequest.hosts" />. Will be empty if the
        /// operation fails.  </summary>
        public IList<int> added_ranks { get; set; } = new List<int>();

        /// <summary>Text description of the result of each rank being added.
        /// Indicates the reason for any errors that occur. Entries are in the
        /// same order as the <paramref cref="AdminAddRanksRequest.hosts" />.
        /// </summary>
        public IList<string> results { get; set; } = new List<string>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AdminAddRanksResponse




}  // end namespace kinetica
