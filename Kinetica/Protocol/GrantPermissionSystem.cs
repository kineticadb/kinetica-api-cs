/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /grant/permission/system.
    /// <br />
    /// Grants a system-level permission to a user or role.</summary>
    public class GrantPermissionSystemRequest : KineticaData
    {

        /// <summary>Permission to grant to the user or role. Values:
        /// system_admin, system_write, system_read.
        /// <br />
        /// A set of string constants for the parameter <member
        /// name="permission" />.</summary>
        public struct Permission
        {

            /// <summary>Full access to all data and system
            /// functions.</summary>
            public const string SYSTEM_ADMIN = "system_admin";

            /// <summary>Read and write access to all tables.</summary>
            public const string SYSTEM_WRITE = "system_write";

            /// <summary>Read-only access to all tables.</summary>
            public const string SYSTEM_READ = "system_read";
        } // end struct Permission


        /// <summary>Name of the user or role to which the permission will be
        /// granted. Must be an existing user or role.  </summary>
        public string name { get; set; }

        /// <summary>Permission to grant to the user or role. Values:
        /// system_admin, system_write, system_read.
        ///   </summary>
        public string permission { get; set; }

        /// <summary>Optional parameters.  </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a GrantPermissionSystemRequest object with
        /// default parameters.</summary>
        public GrantPermissionSystemRequest() { }

        /// <summary>Constructs a GrantPermissionSystemRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.  </param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Values: system_admin, system_write, system_read.
        ///   </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        public GrantPermissionSystemRequest( string name,
                                             string permission,
                                             IDictionary<string, string> options)
        {
            this.name = name ?? "";
            this.permission = permission ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class GrantPermissionSystemRequest



    /// <summary>A set of results returned by
    /// /grant/permission/system.</summary>
    public class GrantPermissionSystemResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="GrantPermissionSystemRequest.name" />.  </summary>
        public string name { get; set; }

        /// <summary>Value of <paramref
        /// cref="GrantPermissionSystemRequest.permission" />.  </summary>
        public string permission { get; set; }

    } // end class GrantPermissionSystemResponse




}  // end namespace kinetica
