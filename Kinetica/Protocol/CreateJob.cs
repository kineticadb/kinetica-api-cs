/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.createJob(string,string,byte[],string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Create a job which will run asynchronously. The response returns a job
    /// ID, which can be used to query the status and result of the job. The
    /// status and the result of the job upon completion can be requested by
    /// <see cref="Kinetica.getJob(long,IDictionary{string, string})"
    /// />.</summary>
    public class CreateJobRequest : KineticaData
    {

        /// <summary>The encoding of the request payload for the job.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.JSON">JSON</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.SNAPPY">SNAPPY</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see>.
        /// A set of string constants for the parameter <see
        /// cref="request_encoding" />.</summary>
        public struct RequestEncoding
        {
            public const string BINARY = "binary";
            public const string JSON = "json";
            public const string SNAPPY = "snappy";
        } // end struct RequestEncoding


        /// <summary>Indicates which endpoint to execute, e.g. '/alter/table'.
        /// </summary>
        public string endpoint { get; set; }

        /// <summary>The encoding of the request payload for the job.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.JSON">JSON</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.SNAPPY">SNAPPY</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see>.
        /// </summary>
        public string request_encoding { get; set; } = RequestEncoding.BINARY;

        /// <summary>Binary-encoded payload for the job to be run
        /// asynchronously.  The payload must contain the relevant input
        /// parameters for the endpoint indicated in <paramref
        /// cref="CreateJobRequest.endpoint" />.  Please see the documentation
        /// for the appropriate endpoint to see what values must (or can) be
        /// specified.  If this parameter is used, then <paramref
        /// cref="CreateJobRequest.request_encoding" /> must be <i>binary</i>
        /// or <i>snappy</i>.  </summary>
        public byte[] data { get; set; }

        /// <summary>JSON-encoded payload for the job to be run asynchronously.
        /// The payload must contain the relevant input parameters for the
        /// endpoint indicated in <paramref cref="CreateJobRequest.endpoint"
        /// />.  Please see the documentation for the appropriate endpoint to
        /// see what values must (or can) be specified.  If this parameter is
        /// used, then <paramref cref="CreateJobRequest.request_encoding" />
        /// must be <i>json</i>.  </summary>
        public string data_str { get; set; }

        /// <summary>Optional parameters.  </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a CreateJobRequest object with default
        /// parameters.</summary>
        public CreateJobRequest() { }

        /// <summary>Constructs a CreateJobRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="endpoint">Indicates which endpoint to execute, e.g.
        /// '/alter/table'.  </param>
        /// <param name="request_encoding">The encoding of the request payload
        /// for the job.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.JSON">JSON</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJobRequest.RequestEncoding.SNAPPY">SNAPPY</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see>.
        /// </param>
        /// <param name="data">Binary-encoded payload for the job to be run
        /// asynchronously.  The payload must contain the relevant input
        /// parameters for the endpoint indicated in <paramref
        /// cref="CreateJobRequest.endpoint" />.  Please see the documentation
        /// for the appropriate endpoint to see what values must (or can) be
        /// specified.  If this parameter is used, then <paramref
        /// cref="CreateJobRequest.request_encoding" /> must be <i>binary</i>
        /// or <i>snappy</i>.  </param>
        /// <param name="data_str">JSON-encoded payload for the job to be run
        /// asynchronously.  The payload must contain the relevant input
        /// parameters for the endpoint indicated in <paramref
        /// cref="CreateJobRequest.endpoint" />.  Please see the documentation
        /// for the appropriate endpoint to see what values must (or can) be
        /// specified.  If this parameter is used, then <paramref
        /// cref="CreateJobRequest.request_encoding" /> must be <i>json</i>.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        public CreateJobRequest( string endpoint,
                                 string request_encoding,
                                 byte[] data,
                                 string data_str,
                                 IDictionary<string, string> options = null)
        {
            this.endpoint = endpoint ?? "";
            this.request_encoding = request_encoding ?? RequestEncoding.BINARY;
            this.data = data ?? new byte[] { };
            this.data_str = data_str ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class CreateJobRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.createJob(string,string,byte[],string,IDictionary{string, string})"
    /// />.</summary>
    public class CreateJobResponse : KineticaData
    {

        /// <summary>An identifier for the job created by this call.
        /// </summary>
        public long job_id { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class CreateJobResponse




}  // end namespace kinetica
