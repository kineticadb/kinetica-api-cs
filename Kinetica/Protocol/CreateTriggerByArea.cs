/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;

namespace kinetica
{
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.createTriggerByArea(CreateTriggerByAreaRequest)">Kinetica.createTriggerByArea</see>.
    /// </summary>
    /// <remarks><para>Sets up an area trigger mechanism for two column_names
    /// for one or more tables. (This function is essentially the
    /// two-dimensional version of <see
    /// cref="Kinetica.createTriggerByRange(CreateTriggerByRangeRequest)">Kinetica.createTriggerByRange</see>.)
    /// Once the trigger has been activated, any record added to the listed
    /// tables(s) via <see
    /// cref="Kinetica.insertRecords{T}(InsertRecordsRequest{T})">Kinetica.insertRecords</see>
    /// with the chosen columns' values falling within the specified region
    /// will trip the trigger. All such records will be queued at the trigger
    /// port (by default '9001' but able to be retrieved via <see
    /// cref="Kinetica.showSystemStatus(ShowSystemStatusRequest)">Kinetica.showSystemStatus</see>)
    /// for any listening client to collect. Active triggers can be cancelled
    /// by using the <see
    /// cref="Kinetica.clearTrigger(ClearTriggerRequest)">Kinetica.clearTrigger</see>
    /// endpoint or by clearing all relevant tables.</para>
    /// <para>The output returns the trigger handle as well as indicating
    /// success or failure of the trigger activation.</para></remarks>
    public class CreateTriggerByAreaRequest : KineticaData
    {
        /// <summary>User-created ID for the trigger.</summary>
        /// <remarks><para>The ID can be alphanumeric, contain symbols, and
        /// must contain at least one character.</para></remarks>
        public string request_id { get; set; }

        /// <summary>Names of the tables on which the trigger will be activated
        /// and maintained, each in [schema_name.]table_name format, using
        /// standard <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</summary>
        public IList<string> table_names { get; set; } = new List<string>();

        /// <summary>Name of a numeric column on which the trigger is
        /// activated.</summary>
        /// <remarks><para>Usually 'x' for geospatial data points.</para>
        /// </remarks>
        public string x_column_name { get; set; }

        /// <summary>The respective coordinate values for the region on which
        /// the trigger is activated.</summary>
        /// <remarks><para>This usually translates to the x-coordinates of a
        /// geospatial region.</para></remarks>
        public IList<double> x_vector { get; set; } = new List<double>();

        /// <summary>Name of a second numeric column on which the trigger is
        /// activated.</summary>
        /// <remarks><para>Usually 'y' for geospatial data points.</para>
        /// </remarks>
        public string y_column_name { get; set; }

        /// <summary>The respective coordinate values for the region on which
        /// the trigger is activated.</summary>
        /// <remarks><para>This usually translates to the y-coordinates of a
        /// geospatial region. Must be the same length as xvals.</para>
        /// </remarks>
        public IList<double> y_vector { get; set; } = new List<double>();

        /// <summary>Optional parameters.</summary>
        /// <remarks><para>The default value is an empty Dictionary.</para>
        /// </remarks>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();

        /// <summary>Constructs a CreateTriggerByAreaRequest object with
        /// default parameters.</summary>
        public CreateTriggerByAreaRequest() { }

        /// <summary>Constructs a CreateTriggerByAreaRequest object with the
        /// specified parameters.</summary>
        ///
        /// <param name="request_id">User-created ID for the trigger. The ID
        /// can be alphanumeric, contain symbols, and must contain at least one
        /// character.</param>
        /// <param name="table_names">Names of the tables on which the trigger
        /// will be activated and maintained, each in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="x_column_name">Name of a numeric column on which the
        /// trigger is activated. Usually 'x' for geospatial data points.
        /// </param>
        /// <param name="x_vector">The respective coordinate values for the
        /// region on which the trigger is activated. This usually translates
        /// to the x-coordinates of a geospatial region.</param>
        /// <param name="y_column_name">Name of a second numeric column on
        /// which the trigger is activated. Usually 'y' for geospatial data
        /// points.</param>
        /// <param name="y_vector">The respective coordinate values for the
        /// region on which the trigger is activated. This usually translates
        /// to the y-coordinates of a geospatial region. Must be the same
        /// length as xvals.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        public CreateTriggerByAreaRequest( string request_id,
                                           IList<string> table_names,
                                           string x_column_name,
                                           IList<double> x_vector,
                                           string y_column_name,
                                           IList<double> y_vector,
                                           IDictionary<string, string> options = null)
        {
            this.request_id = request_id ?? "";
            this.table_names = table_names ?? new List<string>();
            this.x_column_name = x_column_name ?? "";
            this.x_vector = x_vector ?? new List<double>();
            this.y_column_name = y_column_name ?? "";
            this.y_vector = y_vector ?? new List<double>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor
    } // end class CreateTriggerByAreaRequest

    /// <summary>A set of results returned by <see
    /// cref="Kinetica.createTriggerByArea(CreateTriggerByAreaRequest)">Kinetica.createTriggerByArea</see>.
    /// </summary>
    public class CreateTriggerByAreaResponse : KineticaData
    {
        /// <summary>Value of <see
        /// cref="CreateTriggerByAreaRequest.request_id">request_id</see>.
        /// </summary>
        public string trigger_id { get; set; }

        /// <summary>Additional information.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();
    } // end class CreateTriggerByAreaResponse
} // end namespace kinetica
