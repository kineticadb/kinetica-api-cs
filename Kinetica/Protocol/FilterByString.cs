/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;

namespace kinetica
{
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.filterByString(FilterByStringRequest)">Kinetica.filterByString</see>.
    /// </summary>
    /// <remarks><para>Calculates which objects from a table or view match a
    /// string expression for the given string columns. Setting <see
    /// cref="Options.CASE_SENSITIVE">CASE_SENSITIVE</see> can modify case
    /// sensitivity in matching for all modes except <see
    /// cref="Mode.SEARCH">SEARCH</see>. For <see
    /// cref="Mode.SEARCH">SEARCH</see> mode details and limitations, see <a
    /// href="../../../concepts/full_text_search/" target="_top">Full Text
    /// Search</a>.</para></remarks>
    public class FilterByStringRequest : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="mode" />.</summary>
        /// <remarks><para>The string filtering mode to apply. See below for
        /// details.</para></remarks>
        public struct Mode
        {
            /// <summary>Full text search query with wildcards and boolean
            /// operators.</summary>
            /// <remarks><para>Note that for this mode, no column can be
            /// specified in <see cref="column_names" />; all string columns of
            /// the table that have text search enabled will be searched.
            /// </para></remarks>
            public const string SEARCH = "search";

            /// <summary>Exact whole-string match (accelerated).</summary>
            public const string EQUALS = "equals";

            /// <summary>Partial substring match (not accelerated).</summary>
            /// <remarks><para> If the column is a string type (non-charN) and
            /// the number of records is too large, it will return 0.</para>
            /// </remarks>
            public const string CONTAINS = "contains";

            /// <summary>Strings that start with the given expression (not
            /// accelerated).</summary>
            /// <remarks><para>If the column is a string type (non-charN) and
            /// the number of records is too large, it will return 0.</para>
            /// </remarks>
            public const string STARTS_WITH = "starts_with";

            /// <summary>Full regular expression search (not accelerated).
            /// </summary>
            /// <remarks><para>If the column is a string type (non-charN) and
            /// the number of records is too large, it will return 0.</para>
            /// </remarks>
            public const string REGEX = "regex";
        } // end struct Mode

        /// <summary>A set of string constants for the parameter <see
        /// cref="options" />.</summary>
        /// <remarks><para>Optional parameters.</para></remarks>
        public struct Options
        {
            /// <summary>If <see cref="Options.TRUE">TRUE</see>, a unique
            /// temporary table name will be generated in the sys_temp schema
            /// and used in place of <see cref="view_name" />.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string CREATE_TEMP_TABLE = "create_temp_table";

            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>[DEPRECATED--please specify the containing schema for
            /// the view as part of <see cref="view_name" /> and use <see
            /// cref="Kinetica.createSchema(CreateSchemaRequest)">Kinetica.createSchema</see>
            /// to create the schema if non-existent]  Name of a schema for the
            /// newly created view.</summary>
            /// <remarks><para>If the schema is non-existent, it will be
            /// automatically created.</para></remarks>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>If <see cref="Options.FALSE">FALSE</see> then string
            /// filtering will ignore case.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see cref="Options.TRUE">TRUE</see>.
            /// </para></remarks>
            public const string CASE_SENSITIVE = "case_sensitive";
        } // end struct Options

        /// <summary>Name of the table on which the filter operation will be
        /// performed, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</summary>
        /// <remarks><para> Must be an existing table or view.</para></remarks>
        public string table_name { get; set; }

        /// <summary>If provided, then this will be the name of the view
        /// containing the results, in [schema_name.]view_name format, using
        /// standard <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</summary>
        /// <remarks><para> Must not be an already existing table or view. The
        /// default value is ''.</para></remarks>
        public string view_name { get; set; } = "";

        /// <summary>The expression with which to filter the table.</summary>
        public string expression { get; set; }

        /// <summary>The string filtering mode to apply.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="Mode.SEARCH">SEARCH</see>:</term>
        ///         <description>Full text search query with wildcards and
        ///         boolean operators. Note that for this mode, no column can
        ///         be specified in <see cref="column_names" />; all string
        ///         columns of the table that have text search enabled will be
        ///         searched.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Mode.EQUALS">EQUALS</see>:</term>
        ///         <description>Exact whole-string match (accelerated).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Mode.CONTAINS">CONTAINS</see>:</term>
        ///         <description>Partial substring match (not accelerated).  If
        ///         the column is a string type (non-charN) and the number of
        ///         records is too large, it will return 0.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Mode.STARTS_WITH">STARTS_WITH</see>:
        ///         </term>
        ///         <description>Strings that start with the given expression
        ///         (not accelerated). If the column is a string type
        ///         (non-charN) and the number of records is too large, it will
        ///         return 0.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Mode.REGEX">REGEX</see>:</term>
        ///         <description>Full regular expression search (not
        ///         accelerated). If the column is a string type (non-charN)
        ///         and the number of records is too large, it will return 0.
        ///         </description>
        ///     </item>
        /// </list></remarks>
        public string mode { get; set; }

        /// <summary>List of columns on which to apply the filter.</summary>
        /// <remarks><para>Ignored for <see cref="Mode.SEARCH">SEARCH</see>
        /// mode.</para></remarks>
        public IList<string> column_names { get; set; } = new List<string>();

        /// <summary>Optional parameters.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see cref="Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <see cref="view_name"
        ///         />. This is always allowed even if the caller does not have
        ///         permission to create tables. The generated name is returned
        ///         in <see
        ///         cref="FilterByStringResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <see cref="view_name" /> and
        ///         use <see
        ///         cref="Kinetica.createSchema(CreateSchemaRequest)">Kinetica.createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.CASE_SENSITIVE">CASE_SENSITIVE</see>:</term>
        ///         <description>If <see cref="Options.FALSE">FALSE</see> then
        ///         string filtering will ignore case. Does not apply to <see
        ///         cref="Mode.SEARCH">SEARCH</see> mode.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();

        /// <summary>Constructs a FilterByStringRequest object with default
        /// parameters.</summary>
        public FilterByStringRequest() { }

        /// <summary>Constructs a FilterByStringRequest object with the
        /// specified parameters.</summary>
        ///
        /// <param name="table_name">Name of the table on which the filter
        /// operation will be performed, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing table
        /// or view.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="expression">The expression with which to filter the
        /// table.</param>
        /// <param name="mode">The string filtering mode to apply. See below
        /// for details.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="Mode.SEARCH">SEARCH</see>:</term>
        ///         <description>Full text search query with wildcards and
        ///         boolean operators. Note that for this mode, no column can
        ///         be specified in <paramref name="column_names" />; all
        ///         string columns of the table that have text search enabled
        ///         will be searched.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Mode.EQUALS">EQUALS</see>:</term>
        ///         <description>Exact whole-string match (accelerated).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Mode.CONTAINS">CONTAINS</see>:</term>
        ///         <description>Partial substring match (not accelerated).  If
        ///         the column is a string type (non-charN) and the number of
        ///         records is too large, it will return 0.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Mode.STARTS_WITH">STARTS_WITH</see>:
        ///         </term>
        ///         <description>Strings that start with the given expression
        ///         (not accelerated). If the column is a string type
        ///         (non-charN) and the number of records is too large, it will
        ///         return 0.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Mode.REGEX">REGEX</see>:</term>
        ///         <description>Full regular expression search (not
        ///         accelerated). If the column is a string type (non-charN)
        ///         and the number of records is too large, it will return 0.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="column_names">List of columns on which to apply the
        /// filter. Ignored for <see cref="Mode.SEARCH">SEARCH</see> mode.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see cref="Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByStringResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="Kinetica.createSchema(CreateSchemaRequest)">Kinetica.createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.CASE_SENSITIVE">CASE_SENSITIVE</see>:</term>
        ///         <description>If <see cref="Options.FALSE">FALSE</see> then
        ///         string filtering will ignore case. Does not apply to <see
        ///         cref="Mode.SEARCH">SEARCH</see> mode.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        public FilterByStringRequest( string table_name,
                                      string view_name,
                                      string expression,
                                      string mode,
                                      IList<string> column_names,
                                      IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.view_name = view_name ?? "";
            this.expression = expression ?? "";
            this.mode = mode ?? "";
            this.column_names = column_names ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor
    } // end class FilterByStringRequest

    /// <summary>A set of results returned by <see
    /// cref="Kinetica.filterByString(FilterByStringRequest)">Kinetica.filterByString</see>.
    /// </summary>
    public class FilterByStringResponse : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="info" />.</summary>
        /// <remarks><para>Additional information.</para></remarks>
        public struct Info
        {
            /// <summary>The fully qualified name of the view (i.e. including
            /// the schema)</summary>
            public const string QUALIFIED_VIEW_NAME = "qualified_view_name";
        } // end struct Info

        /// <summary>The number of records that passed the string filter.
        /// </summary>
        public long count { get; set; }

        /// <summary>Additional information.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>:
        ///         </term>
        ///         <description>The fully qualified name of the view (i.e.
        ///         including the schema)</description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();
    } // end class FilterByStringResponse
} // end namespace kinetica
