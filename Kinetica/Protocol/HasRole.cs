/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;

namespace kinetica
{
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.hasRole(HasRoleRequest)">Kinetica.hasRole</see>.
    /// </summary>
    /// <remarks><para>Checks if the specified user has the specified role.
    /// </para></remarks>
    public class HasRoleRequest : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="options" />.</summary>
        /// <remarks><para>Optional parameters.</para></remarks>
        public struct Options
        {
            /// <summary>If <see cref="Options.FALSE">FALSE</see> will return
            /// an error if the provided <see cref="role" /> does not exist or
            /// is blank.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";

            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If <see cref="Options.FALSE">FALSE</see> will search
            /// recursively if the <see cref="principal" /> is a member of <see
            /// cref="role" />.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string ONLY_DIRECT = "only_direct";
        } // end struct Options

        /// <summary>Name of the user for which role membersih is being
        /// checked.</summary>
        /// <remarks><para>Must be an existing user. If blank, will use the
        /// current user. The default value is ''.</para></remarks>
        public string principal { get; set; } = "";

        /// <summary>Name of role to check for membership.</summary>
        public string role { get; set; }

        /// <summary>Optional parameters.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see cref="Options.FALSE">FALSE</see> will
        ///         return an error if the provided <see cref="role" /> does
        ///         not exist or is blank. If <see
        ///         cref="Options.TRUE">TRUE</see> then it will return <see
        ///         cref="HasRoleResponse.HasRole.FALSE">FALSE</see> for <see
        ///         cref="HasRoleResponse.has_role">has_role</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.ONLY_DIRECT">ONLY_DIRECT</see>:
        ///         </term>
        ///         <description>If <see cref="Options.FALSE">FALSE</see> will
        ///         search recursively if the <see cref="principal" /> is a
        ///         member of <see cref="role" />.  If <see
        ///         cref="Options.TRUE">TRUE</see> then <see cref="principal"
        ///         /> must directly be a member of <see cref="role" />.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();

        /// <summary>Constructs a HasRoleRequest object with default
        /// parameters.</summary>
        public HasRoleRequest() { }

        /// <summary>Constructs a HasRoleRequest object with the specified
        /// parameters.</summary>
        ///
        /// <param name="principal">Name of the user for which role membersih
        /// is being checked. Must be an existing user. If blank, will use the
        /// current user. The default value is ''.</param>
        /// <param name="role">Name of role to check for membership.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see cref="Options.FALSE">FALSE</see> will
        ///         return an error if the provided <paramref name="role" />
        ///         does not exist or is blank. If <see
        ///         cref="Options.TRUE">TRUE</see> then it will return <see
        ///         cref="HasRoleResponse.HasRole.FALSE">FALSE</see> for <see
        ///         cref="HasRoleResponse.has_role">has_role</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.ONLY_DIRECT">ONLY_DIRECT</see>:
        ///         </term>
        ///         <description>If <see cref="Options.FALSE">FALSE</see> will
        ///         search recursively if the <paramref name="principal" /> is
        ///         a member of <paramref name="role" />.  If <see
        ///         cref="Options.TRUE">TRUE</see> then <paramref
        ///         name="principal" /> must directly be a member of <paramref
        ///         name="role" />.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        public HasRoleRequest( string principal,
                               string role,
                               IDictionary<string, string> options = null)
        {
            this.principal = principal ?? "";
            this.role = role ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor
    } // end class HasRoleRequest

    /// <summary>A set of results returned by <see
    /// cref="Kinetica.hasRole(HasRoleRequest)">Kinetica.hasRole</see>.
    /// </summary>
    public class HasRoleResponse : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="has_role" />.</summary>
        /// <remarks><para>Indicates whether the specified user has membership
        /// in the specified target <see cref="HasRoleRequest.role">role</see>.
        /// </para></remarks>
        public struct HasRole
        {
            /// <summary>User has membership in the role</summary>
            public const string TRUE = "true";

            /// <summary>User does not have membership in the role</summary>
            public const string FALSE = "false";
        } // end struct HasRole

        /// <summary>A set of string constants for the parameter <see
        /// cref="info" />.</summary>
        /// <remarks><para>Additional information.</para></remarks>
        public struct Info
        {
            /// <summary><see cref="Info.TRUE">TRUE</see> when principal is
            /// directly a member of the role.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Info.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Info.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see cref="Info.FALSE">FALSE</see>.
            /// </para></remarks>
            public const string DIRECT = "direct";

            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct Info

        /// <summary>Value of <see
        /// cref="HasRoleRequest.principal">principal</see></summary>
        public string principal { get; set; }

        /// <summary><see cref="HasRoleRequest.role">role</see> for which
        /// membership is being checked</summary>
        public string role { get; set; }

        /// <summary>Indicates whether the specified user has membership in the
        /// specified target <see cref="HasRoleRequest.role">role</see>.
        /// </summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="HasRole.TRUE">TRUE</see>:</term>
        ///         <description>User has membership in the role</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="HasRole.FALSE">FALSE</see>:</term>
        ///         <description>User does not have membership in the role
        ///         </description>
        ///     </item>
        /// </list></remarks>
        public bool has_role { get; set; }

        /// <summary>Additional information.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see cref="Info.DIRECT">DIRECT</see>:</term>
        ///         <description><see cref="Info.TRUE">TRUE</see> when
        ///         principal is directly a member of the role.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Info.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Info.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Info.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();
    } // end class HasRoleResponse
} // end namespace kinetica
