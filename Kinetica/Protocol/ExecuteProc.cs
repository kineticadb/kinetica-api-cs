/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.executeProc(string,IDictionary{string, string},IDictionary{string, byte[]},IList{string},IDictionary{string, IList{string}},IList{string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Executes a proc. This endpoint is asynchronous and does not wait for
    /// the proc to complete before returning.</summary>
    public class ExecuteProcRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.CACHE_INPUT">CACHE_INPUT</see>:</term>
        ///         <description>A comma-delimited list of table names from
        /// <paramref cref="ExecuteProcRequest.input_table_names" /> from which
        /// input data will be cached for use in subsequent calls to
        /// /execute/proc with the <i>use_cached_input</i> option. Cached input
        /// data will be retained until the proc status is cleared with the
        /// /show/proc/status option of /show/proc/status and all proc
        /// instances using the cached data have completed.  The default value
        /// is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.USE_CACHED_INPUT">USE_CACHED_INPUT</see>:</term>
        ///         <description>A comma-delimited list of run IDs (as returned
        /// from prior calls to /execute/proc) of running or completed proc
        /// instances from which input data cached using the <i>cache_input</i>
        /// option will be used. Cached input data will not be used for any
        /// tables specified in <paramref
        /// cref="ExecuteProcRequest.input_table_names" />, but data from all
        /// other tables cached for the specified run IDs will be passed to the
        /// proc. If the same table was cached for multiple specified run IDs,
        /// the cached data from the first run ID specified in the list that
        /// includes that table will be used.  The default value is
        /// ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.KIFS_INPUT_DIRS">KIFS_INPUT_DIRS</see>:</term>
        ///         <description>A comma-delimited list of KiFS directories
        /// whose local files will be made directly accessible to the proc
        /// through the API. (All KiFS files, local or not, are also accessible
        /// through the file system below the KiFS mount point.) Each name
        /// specified must the name of an existing KiFS directory.  The default
        /// value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.RUN_TAG">RUN_TAG</see>:</term>
        ///         <description>A string that, if not empty, can be used in
        /// subsequent calls to /show/proc/status or /kill/proc to identify the
        /// proc instance.  The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>A comma-delimited list of table names from <see
            /// cref="input_table_names" /> from which input data will be
            /// cached for use in subsequent calls to <see
            /// cref="Kinetica.executeProc(string,IDictionary{string, string},IDictionary{string, byte[]},IList{string},IDictionary{string, IList{string}},IList{string},IDictionary{string, string})"
            /// /> with the <i>use_cached_input</i> option. Cached input data
            /// will be retained until the proc status is cleared with the <see
            /// cref="Kinetica.showProcStatus(string,IDictionary{string, string})">clear_complete</see>
            /// option of <see
            /// cref="Kinetica.showProcStatus(string,IDictionary{string, string})"
            /// /> and all proc instances using the cached data have completed.
            /// The default value is ''.</summary>
            public const string CACHE_INPUT = "cache_input";

            /// <summary>A comma-delimited list of run IDs (as returned from
            /// prior calls to <see
            /// cref="Kinetica.executeProc(string,IDictionary{string, string},IDictionary{string, byte[]},IList{string},IDictionary{string, IList{string}},IList{string},IDictionary{string, string})"
            /// />) of running or completed proc instances from which input
            /// data cached using the <i>cache_input</i> option will be used.
            /// Cached input data will not be used for any tables specified in
            /// <see cref="input_table_names" />, but data from all other
            /// tables cached for the specified run IDs will be passed to the
            /// proc. If the same table was cached for multiple specified run
            /// IDs, the cached data from the first run ID specified in the
            /// list that includes that table will be used.  The default value
            /// is ''.</summary>
            public const string USE_CACHED_INPUT = "use_cached_input";

            /// <summary>A comma-delimited list of KiFS directories whose local
            /// files will be made directly accessible to the proc through the
            /// API. (All KiFS files, local or not, are also accessible through
            /// the file system below the KiFS mount point.) Each name
            /// specified must the name of an existing KiFS directory.  The
            /// default value is ''.</summary>
            public const string KIFS_INPUT_DIRS = "kifs_input_dirs";

            /// <summary>A string that, if not empty, can be used in subsequent
            /// calls to <see
            /// cref="Kinetica.showProcStatus(string,IDictionary{string, string})"
            /// /> or <see
            /// cref="Kinetica.killProc(string,IDictionary{string, string})"
            /// /> to identify the proc instance.  The default value is
            /// ''.</summary>
            public const string RUN_TAG = "run_tag";
        } // end struct Options


        /// <summary>Name of the proc to execute. Must be the name of a
        /// currently existing proc.  </summary>
        public string proc_name { get; set; }

        /// <summary>A map containing named parameters to pass to the proc.
        /// Each key/value pair specifies the name of a parameter and its
        /// value.  The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> _params { get; set; } = new Dictionary<string, string>();

        /// <summary>A map containing named binary parameters to pass to the
        /// proc. Each key/value pair specifies the name of a parameter and its
        /// value.  The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, byte[]> bin_params { get; set; } = new Dictionary<string, byte[]>();

        /// <summary>Names of the tables containing data to be passed to the
        /// proc. Each name specified must be the name of a currently existing
        /// table, in [schema_name.]table_name format, using standard <a
        /// href="../../concepts/tables.html#table-name-resolution"
        /// target="_top">name resolution rules</a>.  If no table names are
        /// specified, no data will be passed to the proc.  The default value
        /// is an empty {@link List}.</summary>
        public IList<string> input_table_names { get; set; } = new List<string>();

        /// <summary>Map of table names from <paramref
        /// cref="ExecuteProcRequest.input_table_names" /> to lists of names of
        /// columns from those tables that will be passed to the proc. Each
        /// column name specified must be the name of an existing column in the
        /// corresponding table. If a table name from <paramref
        /// cref="ExecuteProcRequest.input_table_names" /> is not included, all
        /// columns from that table will be passed to the proc.  The default
        /// value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, IList<string>> input_column_names { get; set; } = new Dictionary<string, IList<string>>();

        /// <summary>Names of the tables to which output data from the proc
        /// will be written, each in [schema_name.]table_name format, using
        /// standard <a href="../../concepts/tables.html#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../concepts/tables.html#table-naming-criteria"
        /// target="_top">table naming criteria</a>. If a specified table does
        /// not exist, it will automatically be created with the same schema as
        /// the corresponding table (by order) from <paramref
        /// cref="ExecuteProcRequest.input_table_names" />, excluding any
        /// primary and shard keys. If a specified table is a non-persistent
        /// result table, it must not have primary or shard keys. If no table
        /// names are specified, no output data can be returned from the proc.
        /// The default value is an empty {@link List}.</summary>
        public IList<string> output_table_names { get; set; } = new List<string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.CACHE_INPUT">CACHE_INPUT</see>:</term>
        ///         <description>A comma-delimited list of table names from
        /// <paramref cref="ExecuteProcRequest.input_table_names" /> from which
        /// input data will be cached for use in subsequent calls to
        /// /execute/proc with the <i>use_cached_input</i> option. Cached input
        /// data will be retained until the proc status is cleared with the
        /// /show/proc/status option of /show/proc/status and all proc
        /// instances using the cached data have completed.  The default value
        /// is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.USE_CACHED_INPUT">USE_CACHED_INPUT</see>:</term>
        ///         <description>A comma-delimited list of run IDs (as returned
        /// from prior calls to /execute/proc) of running or completed proc
        /// instances from which input data cached using the <i>cache_input</i>
        /// option will be used. Cached input data will not be used for any
        /// tables specified in <paramref
        /// cref="ExecuteProcRequest.input_table_names" />, but data from all
        /// other tables cached for the specified run IDs will be passed to the
        /// proc. If the same table was cached for multiple specified run IDs,
        /// the cached data from the first run ID specified in the list that
        /// includes that table will be used.  The default value is
        /// ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.KIFS_INPUT_DIRS">KIFS_INPUT_DIRS</see>:</term>
        ///         <description>A comma-delimited list of KiFS directories
        /// whose local files will be made directly accessible to the proc
        /// through the API. (All KiFS files, local or not, are also accessible
        /// through the file system below the KiFS mount point.) Each name
        /// specified must the name of an existing KiFS directory.  The default
        /// value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.RUN_TAG">RUN_TAG</see>:</term>
        ///         <description>A string that, if not empty, can be used in
        /// subsequent calls to /show/proc/status or /kill/proc to identify the
        /// proc instance.  The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an ExecuteProcRequest object with default
        /// parameters.</summary>
        public ExecuteProcRequest() { }

        /// <summary>Constructs an ExecuteProcRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="proc_name">Name of the proc to execute. Must be the
        /// name of a currently existing proc.  </param>
        /// <param name="_params">A map containing named parameters to pass to
        /// the proc. Each key/value pair specifies the name of a parameter and
        /// its value.  The default value is an empty {@link
        /// Dictionary}.</param>
        /// <param name="bin_params">A map containing named binary parameters
        /// to pass to the proc. Each key/value pair specifies the name of a
        /// parameter and its value.  The default value is an empty {@link
        /// Dictionary}.</param>
        /// <param name="input_table_names">Names of the tables containing data
        /// to be passed to the proc. Each name specified must be the name of a
        /// currently existing table, in [schema_name.]table_name format, using
        /// standard <a href="../../concepts/tables.html#table-name-resolution"
        /// target="_top">name resolution rules</a>.  If no table names are
        /// specified, no data will be passed to the proc.  The default value
        /// is an empty {@link List}.</param>
        /// <param name="input_column_names">Map of table names from <paramref
        /// cref="ExecuteProcRequest.input_table_names" /> to lists of names of
        /// columns from those tables that will be passed to the proc. Each
        /// column name specified must be the name of an existing column in the
        /// corresponding table. If a table name from <paramref
        /// cref="ExecuteProcRequest.input_table_names" /> is not included, all
        /// columns from that table will be passed to the proc.  The default
        /// value is an empty {@link Dictionary}.</param>
        /// <param name="output_table_names">Names of the tables to which
        /// output data from the proc will be written, each in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../concepts/tables.html#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../concepts/tables.html#table-naming-criteria"
        /// target="_top">table naming criteria</a>. If a specified table does
        /// not exist, it will automatically be created with the same schema as
        /// the corresponding table (by order) from <paramref
        /// cref="ExecuteProcRequest.input_table_names" />, excluding any
        /// primary and shard keys. If a specified table is a non-persistent
        /// result table, it must not have primary or shard keys. If no table
        /// names are specified, no output data can be returned from the proc.
        /// The default value is an empty {@link List}.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.CACHE_INPUT">CACHE_INPUT</see>:</term>
        ///         <description>A comma-delimited list of table names from
        /// <paramref cref="ExecuteProcRequest.input_table_names" /> from which
        /// input data will be cached for use in subsequent calls to
        /// /execute/proc with the <i>use_cached_input</i> option. Cached input
        /// data will be retained until the proc status is cleared with the
        /// /show/proc/status option of /show/proc/status and all proc
        /// instances using the cached data have completed.  The default value
        /// is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.USE_CACHED_INPUT">USE_CACHED_INPUT</see>:</term>
        ///         <description>A comma-delimited list of run IDs (as returned
        /// from prior calls to /execute/proc) of running or completed proc
        /// instances from which input data cached using the <i>cache_input</i>
        /// option will be used. Cached input data will not be used for any
        /// tables specified in <paramref
        /// cref="ExecuteProcRequest.input_table_names" />, but data from all
        /// other tables cached for the specified run IDs will be passed to the
        /// proc. If the same table was cached for multiple specified run IDs,
        /// the cached data from the first run ID specified in the list that
        /// includes that table will be used.  The default value is
        /// ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.KIFS_INPUT_DIRS">KIFS_INPUT_DIRS</see>:</term>
        ///         <description>A comma-delimited list of KiFS directories
        /// whose local files will be made directly accessible to the proc
        /// through the API. (All KiFS files, local or not, are also accessible
        /// through the file system below the KiFS mount point.) Each name
        /// specified must the name of an existing KiFS directory.  The default
        /// value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.RUN_TAG">RUN_TAG</see>:</term>
        ///         <description>A string that, if not empty, can be used in
        /// subsequent calls to /show/proc/status or /kill/proc to identify the
        /// proc instance.  The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public ExecuteProcRequest( string proc_name,
                                   IDictionary<string, string> _params = null,
                                   IDictionary<string, byte[]> bin_params = null,
                                   IList<string> input_table_names = null,
                                   IDictionary<string, IList<string>> input_column_names = null,
                                   IList<string> output_table_names = null,
                                   IDictionary<string, string> options = null)
        {
            this.proc_name = proc_name ?? "";
            this._params = _params ?? new Dictionary<string, string>();
            this.bin_params = bin_params ?? new Dictionary<string, byte[]>();
            this.input_table_names = input_table_names ?? new List<string>();
            this.input_column_names = input_column_names ?? new Dictionary<string, IList<string>>();
            this.output_table_names = output_table_names ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class ExecuteProcRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.executeProc(string,IDictionary{string, string},IDictionary{string, byte[]},IList{string},IDictionary{string, IList{string}},IList{string},IDictionary{string, string})"
    /// />.</summary>
    public class ExecuteProcResponse : KineticaData
    {

        /// <summary>The run ID of the running proc instance. This may be
        /// passed to /show/proc/status to obtain status information, or
        /// /kill/proc to kill the proc instance.  </summary>
        public string run_id { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class ExecuteProcResponse




}  // end namespace kinetica
