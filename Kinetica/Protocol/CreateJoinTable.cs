/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;

namespace kinetica
{
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.createJoinTable(CreateJoinTableRequest)">Kinetica.createJoinTable</see>.
    /// </summary>
    /// <remarks><para>Creates a table that is the result of a SQL JOIN.</para>
    /// <para>For join details and examples see: <a
    /// href="../../../concepts/joins/" target="_top">Joins</a>.  For
    /// limitations, see <a
    /// href="../../../concepts/joins/#limitations-cautions" target="_top">Join
    /// Limitations and Cautions</a>.</para></remarks>
    public class CreateJoinTableRequest : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="options" />.</summary>
        /// <remarks><para>Optional parameters.</para></remarks>
        public struct Options
        {
            /// <summary>If <see cref="Options.TRUE">TRUE</see>, a unique
            /// temporary table name will be generated in the sys_temp schema
            /// and used in place of <see cref="join_table_name" />.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string CREATE_TEMP_TABLE = "create_temp_table";

            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>[DEPRECATED--please specify the containing schema for
            /// the join as part of <see cref="join_table_name" /> and use <see
            /// cref="Kinetica.createSchema(CreateSchemaRequest)">Kinetica.createSchema</see>
            /// to create the schema if non-existent]  Name of a schema for the
            /// join.</summary>
            /// <remarks><para>If the schema is non-existent, it will be
            /// automatically created. The default value is ''.</para>
            /// </remarks>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>No longer used.</summary>
            public const string MAX_QUERY_DIMENSIONS = "max_query_dimensions";

            /// <summary>Use more memory to speed up the joining of tables.
            /// </summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string OPTIMIZE_LOOKUPS = "optimize_lookups";

            /// <summary>The <a href="../../../rm/concepts/#tier-strategies"
            /// target="_top">tier strategy</a> for the table and its columns.
            /// </summary>
            public const string STRATEGY_DEFINITION = "strategy_definition";

            /// <summary>Sets the <a href="../../../concepts/ttl/"
            /// target="_top">TTL</a> of the join table specified in <see
            /// cref="join_table_name" />.</summary>
            public const string TTL = "ttl";

            /// <summary>view this projection is part of.</summary>
            /// <remarks><para>The default value is ''.</para></remarks>
            public const string VIEW_ID = "view_id";

            /// <summary>Return a count of 0 for the join table for logging and
            /// for <see
            /// cref="Kinetica.showTable(ShowTableRequest)">Kinetica.showTable</see>;
            /// optimization needed for large overlapped equi-join stencils.
            /// </summary>
            /// <remarks><para>The default value is 'false'.</para></remarks>
            public const string NO_COUNT = "no_count";

            /// <summary>Maximum number of records per joined-chunk for this
            /// table.</summary>
            /// <remarks><para>Defaults to the gpudb.conf file chunk size
            /// </para></remarks>
            public const string CHUNK_SIZE = "chunk_size";

            /// <summary>Collect chunks with accumulated size less than
            /// chunk_size into a single chunk.</summary>
            /// <remarks><para>The default value is 'false'.</para></remarks>
            public const string ENABLE_VIRTUAL_CHUNKING = "enable_virtual_chunking";

            /// <summary>Maximum number of records per virtual-chunk.</summary>
            /// <remarks><para>When set, enables virtual chunking. Defaults to
            /// chunk_size if virtual chunking otherwise enabled.</para>
            /// </remarks>
            public const string MAX_VIRTUAL_CHUNK_SIZE = "max_virtual_chunk_size";

            /// <summary>Minimum number of records per virtual-chunk.</summary>
            /// <remarks><para>When set, enables virtual chunking. Defaults to
            /// chunk_size if virtual chunking otherwise enabled.</para>
            /// </remarks>
            public const string MIN_VIRTUAL_CHUNK_SIZE = "min_virtual_chunk_size";

            /// <summary>Allow using the lazy result store to cache computation
            /// of one side of a multichunk equi-join.</summary>
            /// <remarks><para> Reduces computation but also reduces
            /// parallelism to the number of chunks on the other side of the
            /// equi-join</para></remarks>
            public const string ENABLE_EQUI_JOIN_LAZY_RESULT_STORE = "enable_equi_join_lazy_result_store";

            /// <summary>Allow using the lazy result store to cache computation
            /// of one side of a multichunk predicate-equi-join.</summary>
            /// <remarks><para>Reduces computation but also reduces parallelism
            /// to the number of chunks on the other side of the equi-join
            /// </para></remarks>
            public const string ENABLE_PREDICATE_EQUI_JOIN_LAZY_RESULT_STORE = "enable_predicate_equi_join_lazy_result_store";

            /// <summary>Use equi-join to do primary key joins rather than
            /// using primary-key-index</summary>
            public const string ENABLE_PK_EQUI_JOIN = "enable_pk_equi_join";
        } // end struct Options

        /// <summary>Name of the join table to be created, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</summary>
        public string join_table_name { get; set; }

        /// <summary>The list of table names composing the join, each in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</summary>
        /// <remarks><para> Corresponds to a SQL statement FROM clause.</para>
        /// </remarks>
        public IList<string> table_names { get; set; } = new List<string>();

        /// <summary>List of member table columns or column expressions to be
        /// included in the join.</summary>
        /// <remarks><para>Columns can be prefixed with 'table_id.column_name',
        /// where 'table_id' is the table name or alias.  Columns can be
        /// aliased via the syntax 'column_name as alias'. Wild cards '*' can
        /// be used to include all columns across member tables or 'table_id.*'
        /// for all of a single table's columns.  Columns and column
        /// expressions composing the join must be uniquely named or
        /// aliased--therefore, the '*' wild card cannot be used if column
        /// names aren't unique across all tables.</para></remarks>
        public IList<string> column_names { get; set; } = new List<string>();

        /// <summary>An optional list of expressions to combine and filter the
        /// joined tables.</summary>
        /// <remarks><para> Corresponds to a SQL statement WHERE clause. For
        /// details see: <a href="../../../concepts/expressions/"
        /// target="_top">expressions</a>. The default value is an empty List.
        /// </para></remarks>
        public IList<string> expressions { get; set; } = new List<string>();

        /// <summary>Optional parameters.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see cref="Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <see
        ///         cref="join_table_name" />. This is always allowed even if
        ///         the caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="CreateJoinTableResponse.Info.QUALIFIED_JOIN_TABLE_NAME">QUALIFIED_JOIN_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the join as part of <see cref="join_table_name"
        ///         /> and use <see
        ///         cref="Kinetica.createSchema(CreateSchemaRequest)">Kinetica.createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the join. If the schema is non-existent, it will be
        ///         automatically created. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.MAX_QUERY_DIMENSIONS">MAX_QUERY_DIMENSIONS</see>:
        ///         </term>
        ///         <description>No longer used.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.OPTIMIZE_LOOKUPS">OPTIMIZE_LOOKUPS</see>:
        ///         </term>
        ///         <description>Use more memory to speed up the joining of
        ///         tables.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the join table specified in <see
        ///         cref="join_table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this projection is part of. The default
        ///         value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.NO_COUNT">NO_COUNT</see>:</term>
        ///         <description>Return a count of 0 for the join table for
        ///         logging and for <see
        ///         cref="Kinetica.showTable(ShowTableRequest)">Kinetica.showTable</see>;
        ///         optimization needed for large overlapped equi-join
        ///         stencils. The default value is 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of records per joined-chunk for
        ///         this table. Defaults to the gpudb.conf file chunk size
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.ENABLE_VIRTUAL_CHUNKING">ENABLE_VIRTUAL_CHUNKING</see>:
        ///         </term>
        ///         <description>Collect chunks with accumulated size less than
        ///         chunk_size into a single chunk. The default value is
        ///         'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.MAX_VIRTUAL_CHUNK_SIZE">MAX_VIRTUAL_CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of records per virtual-chunk.
        ///         When set, enables virtual chunking. Defaults to chunk_size
        ///         if virtual chunking otherwise enabled.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.MIN_VIRTUAL_CHUNK_SIZE">MIN_VIRTUAL_CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Minimum number of records per virtual-chunk.
        ///         When set, enables virtual chunking. Defaults to chunk_size
        ///         if virtual chunking otherwise enabled.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.ENABLE_EQUI_JOIN_LAZY_RESULT_STORE">ENABLE_EQUI_JOIN_LAZY_RESULT_STORE</see>:
        ///         </term>
        ///         <description>Allow using the lazy result store to cache
        ///         computation of one side of a multichunk equi-join.  Reduces
        ///         computation but also reduces parallelism to the number of
        ///         chunks on the other side of the equi-join</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.ENABLE_PREDICATE_EQUI_JOIN_LAZY_RESULT_STORE">ENABLE_PREDICATE_EQUI_JOIN_LAZY_RESULT_STORE</see>:
        ///         </term>
        ///         <description>Allow using the lazy result store to cache
        ///         computation of one side of a multichunk
        ///         predicate-equi-join. Reduces computation but also reduces
        ///         parallelism to the number of chunks on the other side of
        ///         the equi-join</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.ENABLE_PK_EQUI_JOIN">ENABLE_PK_EQUI_JOIN</see>:
        ///         </term>
        ///         <description>Use equi-join to do primary key joins rather
        ///         than using primary-key-index</description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();

        /// <summary>Constructs a CreateJoinTableRequest object with default
        /// parameters.</summary>
        public CreateJoinTableRequest() { }

        /// <summary>Constructs a CreateJoinTableRequest object with the
        /// specified parameters.</summary>
        ///
        /// <param name="join_table_name">Name of the join table to be created,
        /// in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="table_names">The list of table names composing the
        /// join, each in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Corresponds to a SQL
        /// statement FROM clause.</param>
        /// <param name="column_names">List of member table columns or column
        /// expressions to be included in the join. Columns can be prefixed
        /// with 'table_id.column_name', where 'table_id' is the table name or
        /// alias.  Columns can be aliased via the syntax 'column_name as
        /// alias'. Wild cards '*' can be used to include all columns across
        /// member tables or 'table_id.*' for all of a single table's columns.
        /// Columns and column expressions composing the join must be uniquely
        /// named or aliased--therefore, the '*' wild card cannot be used if
        /// column names aren't unique across all tables.</param>
        /// <param name="expressions">An optional list of expressions to
        /// combine and filter the joined tables.  Corresponds to a SQL
        /// statement WHERE clause. For details see: <a
        /// href="../../../concepts/expressions/"
        /// target="_top">expressions</a>. The default value is an empty List.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see cref="Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="join_table_name" />. This is always allowed even if
        ///         the caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="CreateJoinTableResponse.Info.QUALIFIED_JOIN_TABLE_NAME">QUALIFIED_JOIN_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the join as part of <paramref
        ///         name="join_table_name" /> and use <see
        ///         cref="Kinetica.createSchema(CreateSchemaRequest)">Kinetica.createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the join. If the schema is non-existent, it will be
        ///         automatically created. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.MAX_QUERY_DIMENSIONS">MAX_QUERY_DIMENSIONS</see>:
        ///         </term>
        ///         <description>No longer used.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.OPTIMIZE_LOOKUPS">OPTIMIZE_LOOKUPS</see>:
        ///         </term>
        ///         <description>Use more memory to speed up the joining of
        ///         tables.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the join table specified in
        ///         <paramref name="join_table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this projection is part of. The default
        ///         value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.NO_COUNT">NO_COUNT</see>:</term>
        ///         <description>Return a count of 0 for the join table for
        ///         logging and for <see
        ///         cref="Kinetica.showTable(ShowTableRequest)">Kinetica.showTable</see>;
        ///         optimization needed for large overlapped equi-join
        ///         stencils. The default value is 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of records per joined-chunk for
        ///         this table. Defaults to the gpudb.conf file chunk size
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.ENABLE_VIRTUAL_CHUNKING">ENABLE_VIRTUAL_CHUNKING</see>:
        ///         </term>
        ///         <description>Collect chunks with accumulated size less than
        ///         chunk_size into a single chunk. The default value is
        ///         'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.MAX_VIRTUAL_CHUNK_SIZE">MAX_VIRTUAL_CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of records per virtual-chunk.
        ///         When set, enables virtual chunking. Defaults to chunk_size
        ///         if virtual chunking otherwise enabled.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.MIN_VIRTUAL_CHUNK_SIZE">MIN_VIRTUAL_CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Minimum number of records per virtual-chunk.
        ///         When set, enables virtual chunking. Defaults to chunk_size
        ///         if virtual chunking otherwise enabled.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.ENABLE_EQUI_JOIN_LAZY_RESULT_STORE">ENABLE_EQUI_JOIN_LAZY_RESULT_STORE</see>:
        ///         </term>
        ///         <description>Allow using the lazy result store to cache
        ///         computation of one side of a multichunk equi-join.  Reduces
        ///         computation but also reduces parallelism to the number of
        ///         chunks on the other side of the equi-join</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.ENABLE_PREDICATE_EQUI_JOIN_LAZY_RESULT_STORE">ENABLE_PREDICATE_EQUI_JOIN_LAZY_RESULT_STORE</see>:
        ///         </term>
        ///         <description>Allow using the lazy result store to cache
        ///         computation of one side of a multichunk
        ///         predicate-equi-join. Reduces computation but also reduces
        ///         parallelism to the number of chunks on the other side of
        ///         the equi-join</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.ENABLE_PK_EQUI_JOIN">ENABLE_PK_EQUI_JOIN</see>:
        ///         </term>
        ///         <description>Use equi-join to do primary key joins rather
        ///         than using primary-key-index</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        public CreateJoinTableRequest( string join_table_name,
                                       IList<string> table_names,
                                       IList<string> column_names,
                                       IList<string> expressions = null,
                                       IDictionary<string, string> options = null)
        {
            this.join_table_name = join_table_name ?? "";
            this.table_names = table_names ?? new List<string>();
            this.column_names = column_names ?? new List<string>();
            this.expressions = expressions ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor
    } // end class CreateJoinTableRequest

    /// <summary>A set of results returned by <see
    /// cref="Kinetica.createJoinTable(CreateJoinTableRequest)">Kinetica.createJoinTable</see>.
    /// </summary>
    public class CreateJoinTableResponse : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="info" />.</summary>
        /// <remarks><para>Additional information.</para></remarks>
        public struct Info
        {
            /// <summary>The fully qualified name of the join table (i.e.
            /// including the schema)</summary>
            public const string QUALIFIED_JOIN_TABLE_NAME = "qualified_join_table_name";
        } // end struct Info

        /// <summary>Value of <see
        /// cref="CreateJoinTableRequest.join_table_name">join_table_name</see>.
        /// </summary>
        public string join_table_name { get; set; }

        /// <summary>The number of records in the join table filtered by the
        /// given select expression.</summary>
        public long count { get; set; }

        /// <summary>Additional information.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Info.QUALIFIED_JOIN_TABLE_NAME">QUALIFIED_JOIN_TABLE_NAME</see>:
        ///         </term>
        ///         <description>The fully qualified name of the join table
        ///         (i.e. including the schema)</description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();
    } // end class CreateJoinTableResponse
} // end namespace kinetica
