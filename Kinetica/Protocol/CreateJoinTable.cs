/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /create/jointable.
    /// <br />
    /// Creates a table that is the result of a SQL JOIN.  For details see: <a
    /// href="../../../../../concepts/joins.html" target="_top">join concept
    /// documentation</a>.</summary>
    public class CreateJoinTableRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// join table. If empty, then the join table will be a top-level
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>max_query_dimensions</term>
        ///         <description>The maximum number of tables in a joined table
        /// that can be accessed by a query and are not equated by a
        /// foreign-key to primary-key equality predicate</description>
        ///     </item>
        ///     <item>
        ///         <term>optimize_lookups</term>
        ///         <description>Use the applied filters to precalculate the
        /// lookup table to get data from the primary key sets</description>
        ///     </item>
        ///     <item>
        ///         <term>refresh_method</term>
        ///         <description>Method by which the join table can be
        /// refreshed when underlying member tables have changed. Values:
        /// manual, on_query, on_insert.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>refresh</term>
        ///         <description>Do a manual refresh of the join table if it
        /// exists - throws an error otherwise Values: no_refresh, refresh,
        /// full_refresh.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table specified in
        /// <paramref cref="CreateJoinTableRequest.join_table_name" />. The
        /// value must be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Name of a collection which is to contain the join
            /// table. If empty, then the join table will be a top-level
            /// table.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>The maximum number of tables in a joined table that
            /// can be accessed by a query and are not equated by a foreign-key
            /// to primary-key equality predicate</summary>
            public const string MAX_QUERY_DIMENSIONS = "max_query_dimensions";

            /// <summary>Use the applied filters to precalculate the lookup
            /// table to get data from the primary key sets</summary>
            public const string OPTIMIZE_LOOKUPS = "optimize_lookups";

            /// <summary>Method by which the join table can be refreshed when
            /// underlying member tables have changed. Values: manual,
            /// on_query, on_insert.
            /// </summary>
            public const string REFRESH_METHOD = "refresh_method";

            /// <summary>refresh only occurs when manually requested by calling
            /// this endpoint with refresh option set to 'refresh' or
            /// 'full_refresh'</summary>
            public const string MANUAL = "manual";

            /// <summary>incrementally refresh (refresh just those records
            /// added) whenever a new query is issued and new data is inserted
            /// into the base table.  A full refresh of all the records occurs
            /// when a new query is issued and there have been inserts to any
            /// non-base-tables since the last query</summary>
            public const string ON_QUERY = "on_query";

            /// <summary>incrementally refresh (refresh just those records
            /// added) whenever new data is inserted into a base table.  A full
            /// refresh of all the records occurs when a new query is issued
            /// and there have been inserts to any non-base-tables since the
            /// last query</summary>
            public const string ON_INSERT = "on_insert";

            /// <summary>incrementally refresh (refresh just those records
            /// added) if new data has been inserted into the base table.  A
            /// full refresh of all the records occurs if there have been
            /// inserts to any non-base-tables since the last refresh</summary>
            public const string REFRESH = "refresh";

            /// <summary>don't refresh</summary>
            public const string NO_REFRESH = "no_refresh";

            /// <summary>always refresh even if no new records have been added.
            /// Only refresh method guaranteed to do a full refresh (refresh
            /// all the records) if a delete or update has occurred since the
            /// last refresh.</summary>
            public const string FULL_REFRESH = "full_refresh";

            /// <summary>Sets the TTL of the table specified in <member
            /// name="join_table_name" />. The value must be the desired TTL in
            /// minutes.</summary>
            public const string TTL = "ttl";
        } // end struct Options


        /// <summary>Name of the join table to be created.  Has the same naming
        /// restrictions as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </summary>
        public string join_table_name { get; set; }

        /// <summary>The list of table names making up the joined set.
        /// Corresponds to a SQL statement FROM clause  </summary>
        public IList<string> table_names { get; set; } = new List<string>();

        /// <summary>List of columns to be included in the join table. Can be
        /// the column_names from the member sets if unique or can be prefixed
        /// by the table id as <id>.<column_name> where <id> is the table name
        /// or alias. Can be specified as aliased via the syntax '<column_name>
        /// as <alias>. Can use wild cards as '*' (include all columns), or
        /// <id>.* (include all columns from table with name or alias <id>)
        /// </summary>
        public IList<string> column_names { get; set; } = new List<string>();

        /// <summary>An optional list of expressions to combine and filter the
        /// joined set.  Corresponds to a SQL statement WHERE clause. For
        /// details see: <a href="../../../../concepts/expressions.html"
        /// target="_top">expressions</a>.  </summary>
        public IList<string> expressions { get; set; } = new List<string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// join table. If empty, then the join table will be a top-level
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>max_query_dimensions</term>
        ///         <description>The maximum number of tables in a joined table
        /// that can be accessed by a query and are not equated by a
        /// foreign-key to primary-key equality predicate</description>
        ///     </item>
        ///     <item>
        ///         <term>optimize_lookups</term>
        ///         <description>Use the applied filters to precalculate the
        /// lookup table to get data from the primary key sets</description>
        ///     </item>
        ///     <item>
        ///         <term>refresh_method</term>
        ///         <description>Method by which the join table can be
        /// refreshed when underlying member tables have changed. Values:
        /// manual, on_query, on_insert.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>refresh</term>
        ///         <description>Do a manual refresh of the join table if it
        /// exists - throws an error otherwise Values: no_refresh, refresh,
        /// full_refresh.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table specified in
        /// <paramref cref="CreateJoinTableRequest.join_table_name" />. The
        /// value must be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a CreateJoinTableRequest object with default
        /// parameters.</summary>
        public CreateJoinTableRequest() { }

        /// <summary>Constructs a CreateJoinTableRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="join_table_name">Name of the join table to be created.
        /// Has the same naming restrictions as <a
        /// href="../../../../concepts/tables.html" target="_top">tables</a>.
        /// </param>
        /// <param name="table_names">The list of table names making up the
        /// joined set.  Corresponds to a SQL statement FROM clause  </param>
        /// <param name="column_names">List of columns to be included in the
        /// join table. Can be the column_names from the member sets if unique
        /// or can be prefixed by the table id as <id>.<column_name> where <id>
        /// is the table name or alias. Can be specified as aliased via the
        /// syntax '<column_name> as <alias>. Can use wild cards as '*'
        /// (include all columns), or <id>.* (include all columns from table
        /// with name or alias <id>)  </param>
        /// <param name="expressions">An optional list of expressions to
        /// combine and filter the joined set.  Corresponds to a SQL statement
        /// WHERE clause. For details see: <a
        /// href="../../../../concepts/expressions.html"
        /// target="_top">expressions</a>.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// join table. If empty, then the join table will be a top-level
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>max_query_dimensions</term>
        ///         <description>The maximum number of tables in a joined table
        /// that can be accessed by a query and are not equated by a
        /// foreign-key to primary-key equality predicate</description>
        ///     </item>
        ///     <item>
        ///         <term>optimize_lookups</term>
        ///         <description>Use the applied filters to precalculate the
        /// lookup table to get data from the primary key sets</description>
        ///     </item>
        ///     <item>
        ///         <term>refresh_method</term>
        ///         <description>Method by which the join table can be
        /// refreshed when underlying member tables have changed. Values:
        /// manual, on_query, on_insert.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>refresh</term>
        ///         <description>Do a manual refresh of the join table if it
        /// exists - throws an error otherwise Values: no_refresh, refresh,
        /// full_refresh.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table specified in
        /// <paramref cref="CreateJoinTableRequest.join_table_name" />. The
        /// value must be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public CreateJoinTableRequest( string join_table_name,
                                       IList<string> table_names = null,
                                       IList<string> column_names = null,
                                       IList<string> expressions = null,
                                       IDictionary<string, string> options = null)
        {
            this.join_table_name = join_table_name ?? "";
            this.table_names = table_names ?? new List<string>();
            this.column_names = column_names ?? new List<string>();
            this.expressions = expressions ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class CreateJoinTableRequest



    /// <summary>A set of results returned by /create/jointable.</summary>
    public class CreateJoinTableResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="CreateJoinTableRequest.join_table_name" />.  </summary>
        public string join_table_name { get; set; }

        /// <summary>The number of records in the join table filtered by the
        /// given select expression.  </summary>
        public long count { get; set; }

    } // end class CreateJoinTableResponse




}  // end namespace kinetica
