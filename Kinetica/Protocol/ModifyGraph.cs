/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.modifyGraph(string,IList{string},IList{string},IList{string},IList{string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Update an existing graph network using given nodes, edges, weights,
    /// restrictions, and options.
    /// <br />
    /// IMPORTANT: It's highly recommended that you review the <a
    /// href="../../graph_solver/network_graph_solver.html"
    /// target="_top">Network Graphs & Solvers</a> concepts documentation, the
    /// <a href="../../graph_solver/examples/graph_rest_guide.html"
    /// target="_top">Graph REST Tutorial</a>, and/or some <a
    /// href="../../graph_solver/examples.html" target="_top">graph
    /// examples</a> before using this endpoint.</summary>
    public class ModifyGraphRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// graph.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.EXPORT_CREATE_RESULTS">EXPORT_CREATE_RESULTS</see>:</term>
        ///         <description>If set to <i>true</i>, returns the graph
        /// topology in the response as arrays.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a 'EDGE_WKTLINE'
        /// column identifier to the specified <i>graph_table</i> so the graph
        /// can be viewed via WMS; for social and non-geospatial graphs, the
        /// 'EDGE_WKTLINE' column identifier will be populated with spatial
        /// coordinates derived from a flattening layout algorithm so the graph
        /// can still be viewed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be saved
        /// in the persist directory (see the <a href="../../config/index.html"
        /// target="_top">config reference</a> for more information). If set to
        /// <i>false</i>, the graph will be removed when the graph server is
        /// shutdown.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ADD_TABLE_MONITOR">ADD_TABLE_MONITOR</see>:</term>
        ///         <description>Adds a table monitor to every table used in
        /// the creation of the graph; this table monitor will trigger the
        /// graph to update dynamically upon inserts to the source table(s).
        /// Note that upon database restart, if <i>save_persist</i> is also set
        /// to <i>true</i>, the graph will be fully reconstructed and the table
        /// monitors will be reattached. For more details on table monitors,
        /// see /create/tablemonitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>:</term>
        ///         <description>If specified, the created graph is also
        /// created as a table with the given name and following identifier
        /// columns: 'EDGE_ID', 'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left
        /// blank, no table is created.  The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.REMOVE_LABEL_ONLY">REMOVE_LABEL_ONLY</see>:</term>
        ///         <description>When RESTRICTIONS on labeled entities
        /// requested, if set to true this will NOT delete the entity but only
        /// the label associated with the entity. Otherwise (default), it'll
        /// delete the label AND the entity.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ADD_TURNS">ADD_TURNS</see>:</term>
        ///         <description>Adds dummy 'pillowed' edges around
        /// intersection nodes where there are more than three edges so that
        /// additional weight penalties can be imposed by the solve endpoints.
        /// (increases the total number of edges).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TURN_ANGLE">TURN_ANGLE</see>:</term>
        ///         <description>Value in degrees modifies the thresholds for
        /// attributing right, left, sharp turns, and intersections. It is the
        /// vertical deviation angle from the incoming edge to the intersection
        /// node. The larger the value, the larger the threshold for sharp
        /// turns and intersections; the smaller the value, the larger the
        /// threshold for right and left turns; 0 < turn_angle < 90.  The
        /// default value is '60'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Value-based restriction comparison. Any node or edge
            /// with a RESTRICTIONS_VALUECOMPARED value greater than the
            /// <i>restriction_threshold_value</i> will not be included in the
            /// graph.</summary>
            public const string RESTRICTION_THRESHOLD_VALUE = "restriction_threshold_value";

            /// <summary>If set to <i>true</i>, returns the graph topology in
            /// the response as arrays.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string EXPORT_CREATE_RESULTS = "export_create_results";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If set to <i>true</i>, adds a 'EDGE_WKTLINE' column
            /// identifier to the specified <i>graph_table</i> so the graph can
            /// be viewed via WMS; for social and non-geospatial graphs, the
            /// 'EDGE_WKTLINE' column identifier will be populated with spatial
            /// coordinates derived from a flattening layout algorithm so the
            /// graph can still be viewed.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ENABLE_GRAPH_DRAW = "enable_graph_draw";

            /// <summary>If set to <i>true</i>, the graph will be saved in the
            /// persist directory (see the <a href="../../config/index.html"
            /// target="_top">config reference</a> for more information). If
            /// set to <i>false</i>, the graph will be removed when the graph
            /// server is shutdown.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string SAVE_PERSIST = "save_persist";

            /// <summary>Adds a table monitor to every table used in the
            /// creation of the graph; this table monitor will trigger the
            /// graph to update dynamically upon inserts to the source
            /// table(s). Note that upon database restart, if
            /// <i>save_persist</i> is also set to <i>true</i>, the graph will
            /// be fully reconstructed and the table monitors will be
            /// reattached. For more details on table monitors, see <see
            /// cref="Kinetica.createTableMonitor(string,IDictionary{string, string})"
            /// />.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ADD_TABLE_MONITOR = "add_table_monitor";

            /// <summary>If specified, the created graph is also created as a
            /// table with the given name and following identifier columns:
            /// 'EDGE_ID', 'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left blank, no
            /// table is created.  The default value is ''.</summary>
            public const string GRAPH_TABLE = "graph_table";

            /// <summary>When RESTRICTIONS on labeled entities requested, if
            /// set to true this will NOT delete the entity but only the label
            /// associated with the entity. Otherwise (default), it'll delete
            /// the label AND the entity.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string REMOVE_LABEL_ONLY = "remove_label_only";

            /// <summary>Adds dummy 'pillowed' edges around intersection nodes
            /// where there are more than three edges so that additional weight
            /// penalties can be imposed by the solve endpoints. (increases the
            /// total number of edges).
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ADD_TURNS = "add_turns";

            /// <summary>Value in degrees modifies the thresholds for
            /// attributing right, left, sharp turns, and intersections. It is
            /// the vertical deviation angle from the incoming edge to the
            /// intersection node. The larger the value, the larger the
            /// threshold for sharp turns and intersections; the smaller the
            /// value, the larger the threshold for right and left turns; 0 <
            /// turn_angle < 90.  The default value is '60'.</summary>
            public const string TURN_ANGLE = "turn_angle";
        } // end struct Options


        /// <summary>Name of the graph resource to modify.  </summary>
        public string graph_name { get; set; }

        /// <summary>Nodes with which to update existing <paramref
        /// cref="ModifyGraphRequest.nodes" /> in graph specified by <paramref
        /// cref="ModifyGraphRequest.graph_name" />. Review <a
        /// href="../../graph_solver/network_graph_solver.html#nodes"
        /// target="_top">Nodes</a> for more information. Nodes must be
        /// specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS NODE_ID',
        /// expressions, e.g., 'ST_MAKEPOINT(column1, column2) AS
        /// NODE_WKTPOINT', or raw values, e.g., '{9, 10, 11} AS NODE_ID'. If
        /// using raw values in an identifier combination, the number of values
        /// specified must match across the combination. Identifier
        /// combination(s) do not have to match the method used to create the
        /// graph, e.g., if column names were specified to create the graph,
        /// expressions or raw values could also be used to modify the graph.
        /// </summary>
        public IList<string> nodes { get; set; } = new List<string>();

        /// <summary>Edges with which to update existing <paramref
        /// cref="ModifyGraphRequest.edges" /> in graph specified by <paramref
        /// cref="ModifyGraphRequest.graph_name" />. Review <a
        /// href="../../graph_solver/network_graph_solver.html#edges"
        /// target="_top">Edges</a> for more information. Edges must be
        /// specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS EDGE_ID',
        /// expressions, e.g., 'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or
        /// raw values, e.g., "{'family', 'coworker'} AS EDGE_LABEL". If using
        /// raw values in an identifier combination, the number of values
        /// specified must match across the combination. Identifier
        /// combination(s) do not have to match the method used to create the
        /// graph, e.g., if column names were specified to create the graph,
        /// expressions or raw values could also be used to modify the graph.
        /// </summary>
        public IList<string> edges { get; set; } = new List<string>();

        /// <summary>Weights with which to update existing <paramref
        /// cref="ModifyGraphRequest.weights" /> in graph specified by
        /// <paramref cref="ModifyGraphRequest.graph_name" />. Review <a
        /// href="../../graph_solver/network_graph_solver.html#graph-weights"
        /// target="_top">Weights</a> for more information. Weights must be
        /// specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS WEIGHTS_EDGE_ID',
        /// expressions, e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or
        /// raw values, e.g., '{4, 15} AS WEIGHTS_VALUESPECIFIED'. If using raw
        /// values in an identifier combination, the number of values specified
        /// must match across the combination. Identifier combination(s) do not
        /// have to match the method used to create the graph, e.g., if column
        /// names were specified to create the graph, expressions or raw values
        /// could also be used to modify the graph.  </summary>
        public IList<string> weights { get; set; } = new List<string>();

        /// <summary>Restrictions with which to update existing <paramref
        /// cref="ModifyGraphRequest.restrictions" /> in graph specified by
        /// <paramref cref="ModifyGraphRequest.graph_name" />. Review <a
        /// href="../../graph_solver/network_graph_solver.html#graph-restrictions"
        /// target="_top">Restrictions</a> for more information. Restrictions
        /// must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED', or raw values, e.g., '{0, 0, 0, 1} AS
        /// RESTRICTIONS_ONOFFCOMPARED'. If using raw values in an identifier
        /// combination, the number of values specified must match across the
        /// combination. Identifier combination(s) do not have to match the
        /// method used to create the graph, e.g., if column names were
        /// specified to create the graph, expressions or raw values could also
        /// be used to modify the graph.  </summary>
        public IList<string> restrictions { get; set; } = new List<string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// graph.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.EXPORT_CREATE_RESULTS">EXPORT_CREATE_RESULTS</see>:</term>
        ///         <description>If set to <i>true</i>, returns the graph
        /// topology in the response as arrays.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a 'EDGE_WKTLINE'
        /// column identifier to the specified <i>graph_table</i> so the graph
        /// can be viewed via WMS; for social and non-geospatial graphs, the
        /// 'EDGE_WKTLINE' column identifier will be populated with spatial
        /// coordinates derived from a flattening layout algorithm so the graph
        /// can still be viewed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be saved
        /// in the persist directory (see the <a href="../../config/index.html"
        /// target="_top">config reference</a> for more information). If set to
        /// <i>false</i>, the graph will be removed when the graph server is
        /// shutdown.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ADD_TABLE_MONITOR">ADD_TABLE_MONITOR</see>:</term>
        ///         <description>Adds a table monitor to every table used in
        /// the creation of the graph; this table monitor will trigger the
        /// graph to update dynamically upon inserts to the source table(s).
        /// Note that upon database restart, if <i>save_persist</i> is also set
        /// to <i>true</i>, the graph will be fully reconstructed and the table
        /// monitors will be reattached. For more details on table monitors,
        /// see /create/tablemonitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>:</term>
        ///         <description>If specified, the created graph is also
        /// created as a table with the given name and following identifier
        /// columns: 'EDGE_ID', 'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left
        /// blank, no table is created.  The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.REMOVE_LABEL_ONLY">REMOVE_LABEL_ONLY</see>:</term>
        ///         <description>When RESTRICTIONS on labeled entities
        /// requested, if set to true this will NOT delete the entity but only
        /// the label associated with the entity. Otherwise (default), it'll
        /// delete the label AND the entity.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ADD_TURNS">ADD_TURNS</see>:</term>
        ///         <description>Adds dummy 'pillowed' edges around
        /// intersection nodes where there are more than three edges so that
        /// additional weight penalties can be imposed by the solve endpoints.
        /// (increases the total number of edges).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TURN_ANGLE">TURN_ANGLE</see>:</term>
        ///         <description>Value in degrees modifies the thresholds for
        /// attributing right, left, sharp turns, and intersections. It is the
        /// vertical deviation angle from the incoming edge to the intersection
        /// node. The larger the value, the larger the threshold for sharp
        /// turns and intersections; the smaller the value, the larger the
        /// threshold for right and left turns; 0 < turn_angle < 90.  The
        /// default value is '60'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a ModifyGraphRequest object with default
        /// parameters.</summary>
        public ModifyGraphRequest() { }

        /// <summary>Constructs a ModifyGraphRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="graph_name">Name of the graph resource to modify.
        /// </param>
        /// <param name="nodes">Nodes with which to update existing <paramref
        /// cref="ModifyGraphRequest.nodes" /> in graph specified by <paramref
        /// cref="ModifyGraphRequest.graph_name" />. Review <a
        /// href="../../graph_solver/network_graph_solver.html#nodes"
        /// target="_top">Nodes</a> for more information. Nodes must be
        /// specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS NODE_ID',
        /// expressions, e.g., 'ST_MAKEPOINT(column1, column2) AS
        /// NODE_WKTPOINT', or raw values, e.g., '{9, 10, 11} AS NODE_ID'. If
        /// using raw values in an identifier combination, the number of values
        /// specified must match across the combination. Identifier
        /// combination(s) do not have to match the method used to create the
        /// graph, e.g., if column names were specified to create the graph,
        /// expressions or raw values could also be used to modify the graph.
        /// </param>
        /// <param name="edges">Edges with which to update existing <paramref
        /// cref="ModifyGraphRequest.edges" /> in graph specified by <paramref
        /// cref="ModifyGraphRequest.graph_name" />. Review <a
        /// href="../../graph_solver/network_graph_solver.html#edges"
        /// target="_top">Edges</a> for more information. Edges must be
        /// specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS EDGE_ID',
        /// expressions, e.g., 'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or
        /// raw values, e.g., "{'family', 'coworker'} AS EDGE_LABEL". If using
        /// raw values in an identifier combination, the number of values
        /// specified must match across the combination. Identifier
        /// combination(s) do not have to match the method used to create the
        /// graph, e.g., if column names were specified to create the graph,
        /// expressions or raw values could also be used to modify the graph.
        /// </param>
        /// <param name="weights">Weights with which to update existing
        /// <paramref cref="ModifyGraphRequest.weights" /> in graph specified
        /// by <paramref cref="ModifyGraphRequest.graph_name" />. Review <a
        /// href="../../graph_solver/network_graph_solver.html#graph-weights"
        /// target="_top">Weights</a> for more information. Weights must be
        /// specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS WEIGHTS_EDGE_ID',
        /// expressions, e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or
        /// raw values, e.g., '{4, 15} AS WEIGHTS_VALUESPECIFIED'. If using raw
        /// values in an identifier combination, the number of values specified
        /// must match across the combination. Identifier combination(s) do not
        /// have to match the method used to create the graph, e.g., if column
        /// names were specified to create the graph, expressions or raw values
        /// could also be used to modify the graph.  </param>
        /// <param name="restrictions">Restrictions with which to update
        /// existing <paramref cref="ModifyGraphRequest.restrictions" /> in
        /// graph specified by <paramref cref="ModifyGraphRequest.graph_name"
        /// />. Review <a
        /// href="../../graph_solver/network_graph_solver.html#graph-restrictions"
        /// target="_top">Restrictions</a> for more information. Restrictions
        /// must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED', or raw values, e.g., '{0, 0, 0, 1} AS
        /// RESTRICTIONS_ONOFFCOMPARED'. If using raw values in an identifier
        /// combination, the number of values specified must match across the
        /// combination. Identifier combination(s) do not have to match the
        /// method used to create the graph, e.g., if column names were
        /// specified to create the graph, expressions or raw values could also
        /// be used to modify the graph.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// graph.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.EXPORT_CREATE_RESULTS">EXPORT_CREATE_RESULTS</see>:</term>
        ///         <description>If set to <i>true</i>, returns the graph
        /// topology in the response as arrays.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a 'EDGE_WKTLINE'
        /// column identifier to the specified <i>graph_table</i> so the graph
        /// can be viewed via WMS; for social and non-geospatial graphs, the
        /// 'EDGE_WKTLINE' column identifier will be populated with spatial
        /// coordinates derived from a flattening layout algorithm so the graph
        /// can still be viewed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be saved
        /// in the persist directory (see the <a href="../../config/index.html"
        /// target="_top">config reference</a> for more information). If set to
        /// <i>false</i>, the graph will be removed when the graph server is
        /// shutdown.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ADD_TABLE_MONITOR">ADD_TABLE_MONITOR</see>:</term>
        ///         <description>Adds a table monitor to every table used in
        /// the creation of the graph; this table monitor will trigger the
        /// graph to update dynamically upon inserts to the source table(s).
        /// Note that upon database restart, if <i>save_persist</i> is also set
        /// to <i>true</i>, the graph will be fully reconstructed and the table
        /// monitors will be reattached. For more details on table monitors,
        /// see /create/tablemonitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>:</term>
        ///         <description>If specified, the created graph is also
        /// created as a table with the given name and following identifier
        /// columns: 'EDGE_ID', 'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left
        /// blank, no table is created.  The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.REMOVE_LABEL_ONLY">REMOVE_LABEL_ONLY</see>:</term>
        ///         <description>When RESTRICTIONS on labeled entities
        /// requested, if set to true this will NOT delete the entity but only
        /// the label associated with the entity. Otherwise (default), it'll
        /// delete the label AND the entity.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.ADD_TURNS">ADD_TURNS</see>:</term>
        ///         <description>Adds dummy 'pillowed' edges around
        /// intersection nodes where there are more than three edges so that
        /// additional weight penalties can be imposed by the solve endpoints.
        /// (increases the total number of edges).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ModifyGraphRequest.Options.TURN_ANGLE">TURN_ANGLE</see>:</term>
        ///         <description>Value in degrees modifies the thresholds for
        /// attributing right, left, sharp turns, and intersections. It is the
        /// vertical deviation angle from the incoming edge to the intersection
        /// node. The larger the value, the larger the threshold for sharp
        /// turns and intersections; the smaller the value, the larger the
        /// threshold for right and left turns; 0 < turn_angle < 90.  The
        /// default value is '60'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public ModifyGraphRequest( string graph_name,
                                   IList<string> nodes,
                                   IList<string> edges,
                                   IList<string> weights,
                                   IList<string> restrictions,
                                   IDictionary<string, string> options = null)
        {
            this.graph_name = graph_name ?? "";
            this.nodes = nodes ?? new List<string>();
            this.edges = edges ?? new List<string>();
            this.weights = weights ?? new List<string>();
            this.restrictions = restrictions ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class ModifyGraphRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.modifyGraph(string,IList{string},IList{string},IList{string},IList{string},IDictionary{string, string})"
    /// />.</summary>
    public class ModifyGraphResponse : KineticaData
    {

        /// <summary>Total number of nodes in the graph.  </summary>
        public long num_nodes { get; set; }

        /// <summary>Total number of edges in the graph.  </summary>
        public long num_edges { get; set; }

        /// <summary>Edges given as pairs of node indices. Only populated if
        /// <i>export_create_results</i> is set to <i>true</i>.  </summary>
        public IList<long> edges_ids { get; set; } = new List<long>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class ModifyGraphResponse




}  // end namespace kinetica
