/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminAlterHost(string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Alter properties on an existing host in the cluster. Currently, the
    /// only property that can be altered is a hosts ability to accept failover
    /// processes.</summary>
    public class AdminAlterHostRequest : KineticaData
    {

        /// <summary>Optional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.ACCEPTS_FAILOVER">ACCEPTS_FAILOVER</see>:</term>
        ///         <description>If set to <i>true</i>, the host will accept
        /// processes (ranks, graph server, etc.) in the event of a failover on
        /// another node in the cluster. See <a href="../../../n_plus_1/"
        /// target="_top">Cluster Resilience</a> for more information.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAlterHostRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If set to <i>true</i>, the host will accept processes
            /// (ranks, graph server, etc.) in the event of a failover on
            /// another node in the cluster. See <a href="../../../n_plus_1/"
            /// target="_top">Cluster Resilience</a> for more information.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AdminAlterHostRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AdminAlterHostRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AdminAlterHostRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ACCEPTS_FAILOVER = "accepts_failover";
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct Options


        /// <summary>Identifies the host this applies to. Can be the host
        /// address, or formatted as 'hostN' where N is the host number as
        /// specified in gpudb.conf  </summary>
        public string host { get; set; }

        /// <summary>Optional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.ACCEPTS_FAILOVER">ACCEPTS_FAILOVER</see>:</term>
        ///         <description>If set to <i>true</i>, the host will accept
        /// processes (ranks, graph server, etc.) in the event of a failover on
        /// another node in the cluster. See <a href="../../../n_plus_1/"
        /// target="_top">Cluster Resilience</a> for more information.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAlterHostRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AdminAlterHostRequest object with default
        /// parameters.</summary>
        public AdminAlterHostRequest() { }

        /// <summary>Constructs an AdminAlterHostRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="host">Identifies the host this applies to. Can be the
        /// host address, or formatted as 'hostN' where N is the host number as
        /// specified in gpudb.conf  </param>
        /// <param name="options">Optional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.ACCEPTS_FAILOVER">ACCEPTS_FAILOVER</see>:</term>
        ///         <description>If set to <i>true</i>, the host will accept
        /// processes (ranks, graph server, etc.) in the event of a failover on
        /// another node in the cluster. See <a href="../../../n_plus_1/"
        /// target="_top">Cluster Resilience</a> for more information.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterHostRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAlterHostRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public AdminAlterHostRequest( string host,
                                      IDictionary<string, string> options = null)
        {
            this.host = host ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AdminAlterHostRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminAlterHost(string,IDictionary{string, string})"
    /// />.</summary>
    public class AdminAlterHostResponse : KineticaData
    {

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AdminAlterHostResponse




}  // end namespace kinetica
