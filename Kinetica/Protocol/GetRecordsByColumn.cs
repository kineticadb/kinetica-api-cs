/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /get/records/bycolumn.
    /// <br />
    /// For a given table, retrieves the values of the given columns within a
    /// given range. It returns maps of column name to the vector of values for
    /// each supported data type (double, float, long, int and string). This
    /// operation supports pagination feature, i.e. values that are retrieved
    /// are those associated with the indices between the start (offset) and
    /// end value (offset + limit) parameters (inclusive). If there are
    /// num_points values in the table then each of the indices between 0 and
    /// num_points-1 retrieves a unique value.
    /// <br />
    /// Note that when using the pagination feature, if the table (or the
    /// underlying table in case of a view) is updated (records are inserted,
    /// deleted or modified) the records or values retrieved may differ between
    /// calls (discontiguous or overlap) based on the type of the update.
    /// <br />
    /// The response is returned as a dynamic schema. For details see: <a
    /// href="../../../../../concepts/dynamic_schemas.html"
    /// target="_top">dynamic schemas documentation</a>.</summary>
    public class GetRecordsByColumnRequest : KineticaData
    {

        /// <summary>Specifies the encoding for returned records; either
        /// 'binary' or 'json'. Values: binary, json.
        /// <br />
        /// A set of string constants for the parameter <member name="encoding"
        /// />.</summary>
        public struct Encoding
        {
            public const string BINARY = "binary";
            public const string JSON = "json";
        } // end struct Encoding


        /// <summary>
        /// <list type="bullet">
        ///     <item>
        ///         <term>expression</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_by</term>
        ///         <description>Optional column that the data should be sorted
        /// by. Empty by default (i.e. no sorting is applied).</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_order</term>
        ///         <description>String indicating how the returned values
        /// should be sorted - ascending or descending. Default is 'ascending'.
        /// If sort_order is provided, sort_by has to be provided. Values:
        /// ascending, descending.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>order_by</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="GetRecordsByColumnRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Optional filter expression to apply to the
            /// table.</summary>
            public const string EXPRESSION = "expression";

            /// <summary>Optional column that the data should be sorted by.
            /// Empty by default (i.e. no sorting is applied).</summary>
            public const string SORT_BY = "sort_by";

            /// <summary>String indicating how the returned values should be
            /// sorted - ascending or descending. Default is 'ascending'. If
            /// sort_order is provided, sort_by has to be provided. Values:
            /// ascending, descending.
            /// </summary>
            public const string SORT_ORDER = "sort_order";
            public const string ASCENDING = "ascending";
            public const string DESCENDING = "descending";

            /// <summary>Comma-separated list of the columns to be sorted by;
            /// e.g. 'timestamp asc, x desc'.  The columns specified must be
            /// present in <member name="column_names" />.  If any alias is
            /// given for any column name, the alias must be used, rather than
            /// the original column name.</summary>
            public const string ORDER_BY = "order_by";
        } // end struct Options


        /// <summary>Name of the table on which this operation will be
        /// performed. The table cannot be a parent set.  </summary>
        public string table_name { get; set; }

        /// <summary>The list of column values to retrieve.  </summary>
        public IList<string> column_names { get; set; } = new List<string>();

        /// <summary>A positive integer indicating the number of initial
        /// results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </summary>
        public long offset { get; set; }

        /// <summary>A positive integer indicating the maximum number of
        /// results to be returned (if not provided the default is 10000), or
        /// END_OF_SET (-9999) to indicate that the maximum number of results
        /// allowed by the server should be returned.  </summary>
        public long limit { get; set; }

        /// <summary>Specifies the encoding for returned records; either
        /// 'binary' or 'json'. Values: binary, json.
        ///   </summary>
        public string encoding { get; set; } = Encoding.BINARY;

        /// <summary>
        /// <list type="bullet">
        ///     <item>
        ///         <term>expression</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_by</term>
        ///         <description>Optional column that the data should be sorted
        /// by. Empty by default (i.e. no sorting is applied).</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_order</term>
        ///         <description>String indicating how the returned values
        /// should be sorted - ascending or descending. Default is 'ascending'.
        /// If sort_order is provided, sort_by has to be provided. Values:
        /// ascending, descending.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>order_by</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="GetRecordsByColumnRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a GetRecordsByColumnRequest object with default
        /// parameters.</summary>
        public GetRecordsByColumnRequest() { }

        /// <summary>Constructs a GetRecordsByColumnRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table on which this operation
        /// will be performed. The table cannot be a parent set.  </param>
        /// <param name="column_names">The list of column values to retrieve.
        /// </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned (if not provided the default is
        /// 10000), or END_OF_SET (-9999) to indicate that the maximum number
        /// of results allowed by the server should be returned.  </param>
        /// <param name="options">
        /// <list type="bullet">
        ///     <item>
        ///         <term>expression</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_by</term>
        ///         <description>Optional column that the data should be sorted
        /// by. Empty by default (i.e. no sorting is applied).</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_order</term>
        ///         <description>String indicating how the returned values
        /// should be sorted - ascending or descending. Default is 'ascending'.
        /// If sort_order is provided, sort_by has to be provided. Values:
        /// ascending, descending.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>order_by</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="GetRecordsByColumnRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public GetRecordsByColumnRequest( string table_name,
                                          IList<string> column_names,
                                          long offset,
                                          long limit,
                                          IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.column_names = column_names ?? new List<string>();
            this.offset = offset;
            this.limit = limit;
            this.encoding = Encoding.BINARY;
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor


        /// <summary>Constructs a GetRecordsByColumnRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table on which this operation
        /// will be performed. The table cannot be a parent set.  </param>
        /// <param name="column_names">The list of column values to retrieve.
        /// </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned (if not provided the default is
        /// 10000), or END_OF_SET (-9999) to indicate that the maximum number
        /// of results allowed by the server should be returned.  </param>
        /// <param name="encoding">Specifies the encoding for returned records;
        /// either 'binary' or 'json'. Values: binary, json.
        ///   </param>
        /// <param name="options">
        /// <list type="bullet">
        ///     <item>
        ///         <term>expression</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_by</term>
        ///         <description>Optional column that the data should be sorted
        /// by. Empty by default (i.e. no sorting is applied).</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_order</term>
        ///         <description>String indicating how the returned values
        /// should be sorted - ascending or descending. Default is 'ascending'.
        /// If sort_order is provided, sort_by has to be provided. Values:
        /// ascending, descending.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>order_by</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="GetRecordsByColumnRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public GetRecordsByColumnRequest( string table_name,
                                          IList<string> column_names,
                                          long offset,
                                          long limit,
                                          string encoding = null,
                                          IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.column_names = column_names ?? new List<string>();
            this.offset = offset;
            this.limit = limit;
            this.encoding = encoding ?? Encoding.BINARY;
            this.options = options ?? new Dictionary<string, string>();
        } // end full constructor

    } // end class GetRecordsByColumnRequest



    /// <summary>A set of results returned by /get/records/bycolumn.</summary>
    public class RawGetRecordsByColumnResponse : KineticaData
    {

        /// <summary>The same table name as was passed in the parameter list.
        /// </summary>
        public string table_name { get; set; }

        /// <summary>Avro schema of <member name="binary_encoded_response" />
        /// or <member name="json_encoded_response" />.  </summary>
        public string response_schema_str { get; set; }

        /// <summary>Avro binary encoded response.  </summary>
        public byte[] binary_encoded_response { get; set; }

        /// <summary>Avro JSON encoded response.  </summary>
        public string json_encoded_response { get; set; }

        /// <summary>Total/Filtered number of records.  </summary>
        public long total_number_of_records { get; set; }

        /// <summary>Too many records. Returned a partial set.  </summary>
        public bool has_more_records { get; set; }

    } // end class RawGetRecordsByColumnResponse



    /// <summary>A set of results returned by /get/records/bycolumn.</summary>
    public class GetRecordsByColumnResponse : KineticaData
    {

        /// <summary>The same table name as was passed in the parameter list.
        /// </summary>
        public string table_name { get; set; }

        /// <summary>Avro binary encoded response.  </summary>
        public IList<KineticaRecord> data { get; set; } = new List<KineticaRecord>();

        /// <summary>Total/Filtered number of records.  </summary>
        public long total_number_of_records { get; set; }

        /// <summary>Too many records. Returned a partial set.  </summary>
        public bool has_more_records { get; set; }

    } // end class GetRecordsByColumnResponse




}  // end namespace kinetica
