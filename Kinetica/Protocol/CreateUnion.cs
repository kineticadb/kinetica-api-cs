/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /create/union.
    /// <br />
    /// Creates a table that is the concatenation of one or more existing
    /// tables. It is equivalent to the SQL UNION ALL operator.  Non-charN
    /// 'string' and 'bytes' column types cannot be included in a union,
    /// neither can columns with the property 'store_only'.</summary>
    public class CreateUnionRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// union. If empty, then the union will be a top-level
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>materialize_on_gpu</term>
        ///         <description>If 'true' then the columns of the union will
        /// be cached on the GPU. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>mode</term>
        ///         <description>If 'merge_views' then this operation will
        /// merge (i.e. union) the provided views. All 'table_names' must be
        /// views from the same underlying base table. Values: union_all,
        /// union, union_distinct, except, intersect, merge_views.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table specified in
        /// <paramref cref="CreateUnionRequest.table_name" />. The value must
        /// be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Name of a collection which is to contain the union. If
            /// empty, then the union will be a top-level table.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>If 'true' then the columns of the union will be cached
            /// on the GPU. Values: true, false.
            /// </summary>
            public const string MATERIALIZE_ON_GPU = "materialize_on_gpu";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If 'merge_views' then this operation will merge (i.e.
            /// union) the provided views. All 'table_names' must be views from
            /// the same underlying base table. Values: union_all, union,
            /// union_distinct, except, intersect, merge_views.
            /// </summary>
            public const string MODE = "mode";

            /// <summary>Retains all rows from the specified tables.</summary>
            public const string UNION_ALL = "union_all";

            /// <summary>Retains all unique rows from the specified tables
            /// (synonym for 'union_distinct').</summary>
            public const string UNION = "union";

            /// <summary>Retains all unique rows from the specified
            /// tables.</summary>
            public const string UNION_DISTINCT = "union_distinct";

            /// <summary>Retains all unique rows from the first table that do
            /// not appear in the second table (only works on 2
            /// tables).</summary>
            public const string EXCEPT = "except";

            /// <summary>Retains all unique rows that appear in both of the
            /// specified tables (only works on 2 tables).</summary>
            public const string INTERSECT = "intersect";

            /// <summary>Merge (union) 2 or more views of the same base table
            /// into a new view.</summary>
            public const string MERGE_VIEWS = "merge_views";

            /// <summary>Sets the TTL of the table specified in <member
            /// name="table_name" />. The value must be the desired TTL in
            /// minutes.</summary>
            public const string TTL = "ttl";
        } // end struct Options


        /// <summary>Name of the table to be created. Has the same naming
        /// restrictions as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </summary>
        public string table_name { get; set; }

        /// <summary>The list of table names making up the union. Must contain
        /// the names of one or more existing tables.  </summary>
        public IList<string> table_names { get; set; } = new List<string>();

        /// <summary>The list of columns from each of the corresponding input
        /// tables.  </summary>
        public IList<IList<string>> input_column_names { get; set; } = new List<IList<string>>();

        /// <summary>The list of names of the columns to be stored in the
        /// union.  </summary>
        public IList<string> output_column_names { get; set; } = new List<string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// union. If empty, then the union will be a top-level
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>materialize_on_gpu</term>
        ///         <description>If 'true' then the columns of the union will
        /// be cached on the GPU. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>mode</term>
        ///         <description>If 'merge_views' then this operation will
        /// merge (i.e. union) the provided views. All 'table_names' must be
        /// views from the same underlying base table. Values: union_all,
        /// union, union_distinct, except, intersect, merge_views.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table specified in
        /// <paramref cref="CreateUnionRequest.table_name" />. The value must
        /// be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a CreateUnionRequest object with default
        /// parameters.</summary>
        public CreateUnionRequest() { }

        /// <summary>Constructs a CreateUnionRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table to be created. Has the
        /// same naming restrictions as <a
        /// href="../../../../concepts/tables.html" target="_top">tables</a>.
        /// </param>
        /// <param name="table_names">The list of table names making up the
        /// union. Must contain the names of one or more existing tables.
        /// </param>
        /// <param name="input_column_names">The list of columns from each of
        /// the corresponding input tables.  </param>
        /// <param name="output_column_names">The list of names of the columns
        /// to be stored in the union.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// union. If empty, then the union will be a top-level
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>materialize_on_gpu</term>
        ///         <description>If 'true' then the columns of the union will
        /// be cached on the GPU. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>mode</term>
        ///         <description>If 'merge_views' then this operation will
        /// merge (i.e. union) the provided views. All 'table_names' must be
        /// views from the same underlying base table. Values: union_all,
        /// union, union_distinct, except, intersect, merge_views.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table specified in
        /// <paramref cref="CreateUnionRequest.table_name" />. The value must
        /// be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public CreateUnionRequest( string table_name,
                                   IList<string> table_names,
                                   IList<IList<string>> input_column_names,
                                   IList<string> output_column_names,
                                   IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.table_names = table_names ?? new List<string>();
            this.input_column_names = input_column_names ?? new List<IList<string>>();
            this.output_column_names = output_column_names ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class CreateUnionRequest



    /// <summary>A set of results returned by /create/union.</summary>
    public class CreateUnionResponse : KineticaData
    {

        /// <summary>Value of <paramref cref="CreateUnionRequest.table_name"
        /// />.  </summary>
        public string table_name { get; set; }

    } // end class CreateUnionResponse




}  // end namespace kinetica
