/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminAddNode(string,int,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Add a new node to the GPUdb cluster. By default this will only add the
    /// node to the cluster but will not be assigned any data shards. Set the
    /// <i>reshard</i> option to <i>true</i> to move some shards from the other
    /// nodes in the cluster to this node.</summary>
    public class AdminAddNodeRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.RESHARD">RESHARD</see>:</term>
        ///         <description>If <i>true</i>, then some of the shards from
        /// all the existing nodes will be moved to the new node being added.
        /// Note that for big clusters, this data transfer could be time
        /// consuming and also result in delay in responding to queries for
        /// busy clusters.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>true</i>, then some of the shards from all the
            /// existing nodes will be moved to the new node being added. Note
            /// that for big clusters, this data transfer could be time
            /// consuming and also result in delay in responding to queries for
            /// busy clusters.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AdminAddNodeRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see>.</summary>
            public const string RESHARD = "reshard";
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct Options


        /// <summary>host name of the node being added to the system.
        /// </summary>
        public string host_name { get; set; }
        public int gpu_index { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.RESHARD">RESHARD</see>:</term>
        ///         <description>If <i>true</i>, then some of the shards from
        /// all the existing nodes will be moved to the new node being added.
        /// Note that for big clusters, this data transfer could be time
        /// consuming and also result in delay in responding to queries for
        /// busy clusters.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AdminAddNodeRequest object with default
        /// parameters.</summary>
        public AdminAddNodeRequest() { }

        /// <summary>Constructs an AdminAddNodeRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="host_name">host name of the node being added to the
        /// system.  </param>
        /// <param name="gpu_index"></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.RESHARD">RESHARD</see>:</term>
        ///         <description>If <i>true</i>, then some of the shards from
        /// all the existing nodes will be moved to the new node being added.
        /// Note that for big clusters, this data transfer could be time
        /// consuming and also result in delay in responding to queries for
        /// busy clusters.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public AdminAddNodeRequest( string host_name,
                                    int gpu_index,
                                    IDictionary<string, string> options = null)
        {
            this.host_name = host_name ?? "";
            this.gpu_index = gpu_index;
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AdminAddNodeRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminAddNode(string,int,IDictionary{string, string})"
    /// />.</summary>
    public class AdminAddNodeResponse : KineticaData
    {

        /// <summary>number assigned to the newly added rank  </summary>
        public int rank { get; set; }

    } // end class AdminAddNodeResponse




}  // end namespace kinetica
