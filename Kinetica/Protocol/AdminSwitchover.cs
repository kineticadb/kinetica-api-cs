/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminSwitchover(IList{string},IList{string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Manually switch over one or more processes to another host. Individual
    /// ranks or entire hosts may be moved to another host.</summary>
    public class AdminSwitchoverRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, only validation checks
        /// will be performed. Nothing is switched over.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If set to <i>true</i>, only validation checks will be
            /// performed. Nothing is switched over.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AdminSwitchoverRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see>.</summary>
            public const string DRY_RUN = "dry_run";
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct Options


        /// <summary>Indicates the process identifier to switch over to another
        /// host. Options are
        /// 'hostN' and 'rankN' where 'N' corresponds to the number associated
        /// with a host or rank in the
        /// <a href="../../../config/#config-main-network"
        /// target="_top">Network</a> section of the gpudb.conf file; e.g.,
        /// 'host[N].address' or 'rank[N].host'. If 'hostN' is provided, all
        /// processes on that host will be
        /// moved to another host. Each entry in this array will be switched
        /// over to the corresponding host
        /// entry at the same index in <paramref
        /// cref="AdminSwitchoverRequest.destinations" />.  </summary>
        public IList<string> processes { get; set; } = new List<string>();

        /// <summary>Indicates to which host to switch over each corresponding
        /// process given in
        /// <paramref cref="AdminSwitchoverRequest.processes" />. Each index
        /// must be specified as 'hostN' where 'N' corresponds to the number
        /// associated with a host or rank in the <a
        /// href="../../../config/#config-main-network"
        /// target="_top">Network</a> section of the
        /// gpudb.conf file; e.g., 'host[N].address'. Each entry in this array
        /// will receive the corresponding
        /// process entry at the same index in <paramref
        /// cref="AdminSwitchoverRequest.processes" />.  </summary>
        public IList<string> destinations { get; set; } = new List<string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, only validation checks
        /// will be performed. Nothing is switched over.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AdminSwitchoverRequest object with default
        /// parameters.</summary>
        public AdminSwitchoverRequest() { }

        /// <summary>Constructs an AdminSwitchoverRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="processes">Indicates the process identifier to switch
        /// over to another host. Options are
        /// 'hostN' and 'rankN' where 'N' corresponds to the number associated
        /// with a host or rank in the
        /// <a href="../../../config/#config-main-network"
        /// target="_top">Network</a> section of the gpudb.conf file; e.g.,
        /// 'host[N].address' or 'rank[N].host'. If 'hostN' is provided, all
        /// processes on that host will be
        /// moved to another host. Each entry in this array will be switched
        /// over to the corresponding host
        /// entry at the same index in <paramref
        /// cref="AdminSwitchoverRequest.destinations" />.  </param>
        /// <param name="destinations">Indicates to which host to switch over
        /// each corresponding process given in
        /// <paramref cref="AdminSwitchoverRequest.processes" />. Each index
        /// must be specified as 'hostN' where 'N' corresponds to the number
        /// associated with a host or rank in the <a
        /// href="../../../config/#config-main-network"
        /// target="_top">Network</a> section of the
        /// gpudb.conf file; e.g., 'host[N].address'. Each entry in this array
        /// will receive the corresponding
        /// process entry at the same index in <paramref
        /// cref="AdminSwitchoverRequest.processes" />.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, only validation checks
        /// will be performed. Nothing is switched over.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public AdminSwitchoverRequest( IList<string> processes,
                                       IList<string> destinations,
                                       IDictionary<string, string> options = null)
        {
            this.processes = processes ?? new List<string>();
            this.destinations = destinations ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AdminSwitchoverRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminSwitchover(IList{string},IList{string},IDictionary{string, string})"
    /// />.</summary>
    public class AdminSwitchoverResponse : KineticaData
    {

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AdminSwitchoverResponse




}  // end namespace kinetica
