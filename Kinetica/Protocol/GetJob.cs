/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.getJob(long,IDictionary{string, string})" />.
    /// <br />
    /// Get the status and result of asynchronously running job.  See the <see
    /// cref="Kinetica.createJob(string,string,byte[],string,IDictionary{string, string})"
    /// /> for starting an asynchronous job.  Some fields of the response are
    /// filled only after the submitted job has finished execution.</summary>
    public class GetJobRequest : KineticaData
    {

        /// <summary>A unique identifier for the job whose status and result is
        /// to be fetched.  </summary>
        public long job_id { get; set; }

        /// <summary>Optional parameters.  The default value is an empty {@link
        /// Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a GetJobRequest object with default
        /// parameters.</summary>
        public GetJobRequest() { }

        /// <summary>Constructs a GetJobRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="job_id">A unique identifier for the job whose status
        /// and result is to be fetched.  </param>
        /// <param name="options">Optional parameters.  The default value is an
        /// empty {@link Dictionary}.</param>
        /// 
        public GetJobRequest( long job_id,
                              IDictionary<string, string> options = null)
        {
            this.job_id = job_id;
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class GetJobRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.getJob(long,IDictionary{string, string})"
    /// />.</summary>
    public class GetJobResponse : KineticaData
    {

        /// <summary>Status of the submitted job.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.JobStatus.RUNNING">RUNNING</see>:</term>
        ///         <description>The job is currently executing.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.JobStatus.DONE">DONE</see>:</term>
        ///         <description>The job execution has successfully completed
        /// and the response is included in the <member name="job_response" />
        /// or <member name="job_response_str" /> field</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.JobStatus.ERROR">ERROR</see>:</term>
        ///         <description>The job was attempted, but an error was
        /// encountered.  The <member name="status_map" /> contains the details
        /// of the error in error_message</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.JobStatus.CANCELLED">CANCELLED</see>:</term>
        ///         <description>Job cancellation was requested while the
        /// execution was in progress.</description>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <member
        /// name="job_status" />.</summary>
        public struct JobStatus
        {

            /// <summary>The job is currently executing.</summary>
            public const string RUNNING = "RUNNING";

            /// <summary>The job execution has successfully completed and the
            /// response is included in the <member name="job_response" /> or
            /// <member name="job_response_str" /> field</summary>
            public const string DONE = "DONE";

            /// <summary>The job was attempted, but an error was encountered.
            /// The <member name="status_map" /> contains the details of the
            /// error in error_message</summary>
            public const string ERROR = "ERROR";

            /// <summary>Job cancellation was requested while the execution was
            /// in progress.</summary>
            public const string CANCELLED = "CANCELLED";
        } // end struct JobStatus


        /// <summary>The encoding of the job result (contained in <member
        /// name="job_response" /> or <member name="job_response_str" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.ResponseEncoding.BINARY">BINARY</see>:</term>
        ///         <description>The job result is binary-encoded.  It is
        /// contained in <member name="job_response" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.ResponseEncoding.JSON">JSON</see>:</term>
        ///         <description>The job result is json-encoded.  It is
        /// contained in <member name="job_response_str" />.</description>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <member
        /// name="response_encoding" />.</summary>
        public struct ResponseEncoding
        {

            /// <summary>The job result is binary-encoded.  It is contained in
            /// <member name="job_response" />.</summary>
            public const string BINARY = "binary";

            /// <summary>The job result is json-encoded.  It is contained in
            /// <member name="job_response_str" />.</summary>
            public const string JSON = "json";
        } // end struct ResponseEncoding


        /// <summary>Map of various status strings for the executed job.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.StatusMap.ERROR_MESSAGE">ERROR_MESSAGE</see>:</term>
        ///         <description>Explains what error occurred while running the
        /// job asynchronously.  This entry only exists when the job status is
        /// <i>ERROR</i>.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member
        /// name="status_map" />.</summary>
        public struct StatusMap
        {

            /// <summary>Explains what error occurred while running the job
            /// asynchronously.  This entry only exists when the job status is
            /// <i>ERROR</i>.</summary>
            public const string ERROR_MESSAGE = "error_message";
        } // end struct StatusMap


        /// <summary>The endpoint which is being executed asynchronously.  E.g.
        /// '/alter/table'.  </summary>
        public string endpoint { get; set; }

        /// <summary>Status of the submitted job.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.JobStatus.RUNNING">RUNNING</see>:</term>
        ///         <description>The job is currently executing.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.JobStatus.DONE">DONE</see>:</term>
        ///         <description>The job execution has successfully completed
        /// and the response is included in the <member name="job_response" />
        /// or <member name="job_response_str" /> field</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.JobStatus.ERROR">ERROR</see>:</term>
        ///         <description>The job was attempted, but an error was
        /// encountered.  The <member name="status_map" /> contains the details
        /// of the error in error_message</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.JobStatus.CANCELLED">CANCELLED</see>:</term>
        ///         <description>Job cancellation was requested while the
        /// execution was in progress.</description>
        ///     </item>
        /// </list>  </summary>
        public string job_status { get; set; }

        /// <summary>True if the end point is still executing.  </summary>
        public bool running { get; set; }

        /// <summary>Approximate percentage of the job completed.  </summary>
        public int progress { get; set; }

        /// <summary>True if the job execution completed and no errors were
        /// encountered.  </summary>
        public bool successful { get; set; }

        /// <summary>The encoding of the job result (contained in <member
        /// name="job_response" /> or <member name="job_response_str" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.ResponseEncoding.BINARY">BINARY</see>:</term>
        ///         <description>The job result is binary-encoded.  It is
        /// contained in <member name="job_response" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.ResponseEncoding.JSON">JSON</see>:</term>
        ///         <description>The job result is json-encoded.  It is
        /// contained in <member name="job_response_str" />.</description>
        ///     </item>
        /// </list>  </summary>
        public string response_encoding { get; set; }

        /// <summary>The binary-encoded response of the job.  This field is
        /// populated only when the job has completed and <member
        /// name="response_encoding" /> is <i>binary</i>  </summary>
        public byte[] job_response { get; set; }

        /// <summary>The json-encoded response of the job.  This field is
        /// populated only when the job has completed and <member
        /// name="response_encoding" /> is <i>json</i>  </summary>
        public string job_response_str { get; set; }

        /// <summary>Map of various status strings for the executed job.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetJobResponse.StatusMap.ERROR_MESSAGE">ERROR_MESSAGE</see>:</term>
        ///         <description>Explains what error occurred while running the
        /// job asynchronously.  This entry only exists when the job status is
        /// <i>ERROR</i>.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> status_map { get; set; } = new Dictionary<string, string>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class GetJobResponse




}  // end namespace kinetica
