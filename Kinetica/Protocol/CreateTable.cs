/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /create/table.
    /// <br />
    /// Creates a new table or collection. If a new table is being created, the
    /// type of the table is given by <member name="type_id" />, which must the
    /// be the ID of a currently registered type (i.e. one created via
    /// /create/type). The table will be created inside a collection if the
    /// option <i>collection_name</i> is specified. If that collection does not
    /// already exist, it will be created.
    /// <br />
    /// To create a new collection, specify the name of the collection in
    /// <member name="table_name" /> and set the <i>is_collection</i> option to
    /// <i>true</i>; <member name="type_id" /> will be ignored.</summary>
    public class CreateTableRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>no_error_if_exists</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If empty, then the newly created table will be
        /// a top-level table. If the collection does not allow duplicate types
        /// and it contains a table of the same type as the given one, then
        /// this table creation request will fail.</description>
        ///     </item>
        ///     <item>
        ///         <term>is_collection</term>
        ///         <description>Indicates whether the new table to be created
        /// will be a collection. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>disallow_homogeneous_tables</term>
        ///         <description>For a collection, indicates whether the
        /// collection prohibits containment of multiple tables of exactly the
        /// same data type. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>is_replicated</term>
        ///         <description>For a table, indicates whether the table is to
        /// be replicated to all the database ranks. This may be necessary when
        /// the table is to be joined with other tables in a query. Values:
        /// true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>foreign_keys</term>
        ///         <description>Semicolon-separated list of foreign key
        /// constraints, of the format 'source_column references
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>true</i>, prevents an error from occurring if
            /// the table already exists and is of the given type.  If a table
            /// with the same ID but a different type exists, it is still an
            /// error. Values: true, false.
            /// </summary>
            public const string NO_ERROR_IF_EXISTS = "no_error_if_exists";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Name of a collection which is to contain the newly
            /// created table. If empty, then the newly created table will be a
            /// top-level table. If the collection does not allow duplicate
            /// types and it contains a table of the same type as the given
            /// one, then this table creation request will fail.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>Indicates whether the new table to be created will be
            /// a collection. Values: true, false.
            /// </summary>
            public const string IS_COLLECTION = "is_collection";

            /// <summary>For a collection, indicates whether the collection
            /// prohibits containment of multiple tables of exactly the same
            /// data type. Values: true, false.
            /// </summary>
            public const string DISALLOW_HOMOGENEOUS_TABLES = "disallow_homogeneous_tables";

            /// <summary>For a table, indicates whether the table is to be
            /// replicated to all the database ranks. This may be necessary
            /// when the table is to be joined with other tables in a query.
            /// Values: true, false.
            /// </summary>
            public const string IS_REPLICATED = "is_replicated";

            /// <summary>Semicolon-separated list of foreign key constraints,
            /// of the format 'source_column references
            /// target_table(primary_key_column)'.</summary>
            public const string FOREIGN_KEYS = "foreign_keys";
        } // end struct Options


        /// <summary>Name of the table to be created. Error for requests with
        /// existing table of the same name and type id may be suppressed by
        /// using the <i>no_error_if_exists</i> option.  See <a
        /// href="../../../../concepts/tables.html" target="_top">Tables</a>
        /// for naming restrictions.  </summary>
        public string table_name { get; set; }

        /// <summary>ID of a currently registered type. All objects added to
        /// the newly created table will be of this type.  Ignored if
        /// <i>is_collection</i> is <i>true</i>.  </summary>
        public string type_id { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>no_error_if_exists</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If empty, then the newly created table will be
        /// a top-level table. If the collection does not allow duplicate types
        /// and it contains a table of the same type as the given one, then
        /// this table creation request will fail.</description>
        ///     </item>
        ///     <item>
        ///         <term>is_collection</term>
        ///         <description>Indicates whether the new table to be created
        /// will be a collection. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>disallow_homogeneous_tables</term>
        ///         <description>For a collection, indicates whether the
        /// collection prohibits containment of multiple tables of exactly the
        /// same data type. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>is_replicated</term>
        ///         <description>For a table, indicates whether the table is to
        /// be replicated to all the database ranks. This may be necessary when
        /// the table is to be joined with other tables in a query. Values:
        /// true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>foreign_keys</term>
        ///         <description>Semicolon-separated list of foreign key
        /// constraints, of the format 'source_column references
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a CreateTableRequest object with default
        /// parameters.</summary>
        public CreateTableRequest() { }

        /// <summary>Constructs a CreateTableRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table to be created. Error for
        /// requests with existing table of the same name and type id may be
        /// suppressed by using the <i>no_error_if_exists</i> option.  See <a
        /// href="../../../../concepts/tables.html" target="_top">Tables</a>
        /// for naming restrictions.  </param>
        /// <param name="type_id">ID of a currently registered type. All
        /// objects added to the newly created table will be of this type.
        /// Ignored if <i>is_collection</i> is <i>true</i>.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>no_error_if_exists</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If empty, then the newly created table will be
        /// a top-level table. If the collection does not allow duplicate types
        /// and it contains a table of the same type as the given one, then
        /// this table creation request will fail.</description>
        ///     </item>
        ///     <item>
        ///         <term>is_collection</term>
        ///         <description>Indicates whether the new table to be created
        /// will be a collection. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>disallow_homogeneous_tables</term>
        ///         <description>For a collection, indicates whether the
        /// collection prohibits containment of multiple tables of exactly the
        /// same data type. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>is_replicated</term>
        ///         <description>For a table, indicates whether the table is to
        /// be replicated to all the database ranks. This may be necessary when
        /// the table is to be joined with other tables in a query. Values:
        /// true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>foreign_keys</term>
        ///         <description>Semicolon-separated list of foreign key
        /// constraints, of the format 'source_column references
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public CreateTableRequest( string table_name,
                                   string type_id,
                                   IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.type_id = type_id ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class CreateTableRequest



    /// <summary>A set of results returned by /create/table.</summary>
    public class CreateTableResponse : KineticaData
    {

        /// <summary>Value of <paramref cref="CreateTableRequest.table_name"
        /// />.  </summary>
        public string table_name { get; set; }

        /// <summary>Value of <paramref cref="CreateTableRequest.type_id" />.
        /// </summary>
        public string type_id { get; set; }

        /// <summary>Indicates if the created entity is a collection.
        /// </summary>
        public bool is_collection { get; set; }

    } // end class CreateTableResponse




}  // end namespace kinetica
