/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /create/projection.
    /// <br />
    /// Creates a new projection of an existing table.  A projection represents
    /// a subset of the columns (potentially including derived columns) of a
    /// table.</summary>
    public class CreateProjectionRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection to which the projection
        /// is to be assigned as a child. If the collection provided is
        /// non-existent, the collection will be automatically
        /// created.</description>
        ///     </item>
        ///     <item>
        ///         <term>expression</term>
        ///         <description>An optional filter expression to be applied to
        /// the source table prior to the projection.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of records to keep.</description>
        ///     </item>
        ///     <item>
        ///         <term>order_by</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="CreateProjectionRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        ///     <item>
        ///         <term>materialize_on_gpu</term>
        ///         <description>If 'true' then the columns of the projection
        /// will be cached on the GPU. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table, view, or collection
        /// specified in <paramref cref="CreateProjectionRequest.table_name"
        /// />. The value must be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Name of a collection to which the projection is to be
            /// assigned as a child. If the collection provided is
            /// non-existent, the collection will be automatically
            /// created.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>An optional filter expression to be applied to the
            /// source table prior to the projection.</summary>
            public const string EXPRESSION = "expression";

            /// <summary>The number of records to keep.</summary>
            public const string LIMIT = "limit";

            /// <summary>Comma-separated list of the columns to be sorted by;
            /// e.g. 'timestamp asc, x desc'.  The columns specified must be
            /// present in <member name="column_names" />.  If any alias is
            /// given for any column name, the alias must be used, rather than
            /// the original column name.</summary>
            public const string ORDER_BY = "order_by";

            /// <summary>If 'true' then the columns of the projection will be
            /// cached on the GPU. Values: true, false.
            /// </summary>
            public const string MATERIALIZE_ON_GPU = "materialize_on_gpu";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Sets the TTL of the table, view, or collection
            /// specified in <member name="table_name" />. The value must be
            /// the desired TTL in minutes.</summary>
            public const string TTL = "ttl";
        } // end struct Options


        /// <summary>Name of the existing table on which the projection is to
        /// be applied.  </summary>
        public string table_name { get; set; }

        /// <summary>Name of the projection to be created. Has the same naming
        /// restrictions as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </summary>
        public string projection_name { get; set; }

        /// <summary>List of columns from <paramref
        /// cref="CreateProjectionRequest.table_name" /> to be included in the
        /// projection. Can include derived columns. Can be specified as
        /// aliased via the syntax '<column_name> as <alias>.  </summary>
        public IList<string> column_names { get; set; } = new List<string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection to which the projection
        /// is to be assigned as a child. If the collection provided is
        /// non-existent, the collection will be automatically
        /// created.</description>
        ///     </item>
        ///     <item>
        ///         <term>expression</term>
        ///         <description>An optional filter expression to be applied to
        /// the source table prior to the projection.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of records to keep.</description>
        ///     </item>
        ///     <item>
        ///         <term>order_by</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="CreateProjectionRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        ///     <item>
        ///         <term>materialize_on_gpu</term>
        ///         <description>If 'true' then the columns of the projection
        /// will be cached on the GPU. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table, view, or collection
        /// specified in <paramref cref="CreateProjectionRequest.table_name"
        /// />. The value must be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a CreateProjectionRequest object with default
        /// parameters.</summary>
        public CreateProjectionRequest() { }

        /// <summary>Constructs a CreateProjectionRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the existing table on which the
        /// projection is to be applied.  </param>
        /// <param name="projection_name">Name of the projection to be created.
        /// Has the same naming restrictions as <a
        /// href="../../../../concepts/tables.html" target="_top">tables</a>.
        /// </param>
        /// <param name="column_names">List of columns from <paramref
        /// cref="CreateProjectionRequest.table_name" /> to be included in the
        /// projection. Can include derived columns. Can be specified as
        /// aliased via the syntax '<column_name> as <alias>.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>collection_name</term>
        ///         <description>Name of a collection to which the projection
        /// is to be assigned as a child. If the collection provided is
        /// non-existent, the collection will be automatically
        /// created.</description>
        ///     </item>
        ///     <item>
        ///         <term>expression</term>
        ///         <description>An optional filter expression to be applied to
        /// the source table prior to the projection.</description>
        ///     </item>
        ///     <item>
        ///         <term>limit</term>
        ///         <description>The number of records to keep.</description>
        ///     </item>
        ///     <item>
        ///         <term>order_by</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="CreateProjectionRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        ///     <item>
        ///         <term>materialize_on_gpu</term>
        ///         <description>If 'true' then the columns of the projection
        /// will be cached on the GPU. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>ttl</term>
        ///         <description>Sets the TTL of the table, view, or collection
        /// specified in <paramref cref="CreateProjectionRequest.table_name"
        /// />. The value must be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public CreateProjectionRequest( string table_name,
                                        string projection_name,
                                        IList<string> column_names,
                                        IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.projection_name = projection_name ?? "";
            this.column_names = column_names ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class CreateProjectionRequest



    /// <summary>A set of results returned by /create/projection.</summary>
    public class CreateProjectionResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="CreateProjectionRequest.projection_name" />.  </summary>
        public string projection_name { get; set; }

    } // end class CreateProjectionResponse




}  // end namespace kinetica
