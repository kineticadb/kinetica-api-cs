/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;

namespace kinetica
{
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.createBackup(CreateBackupRequest)">Kinetica.createBackup</see>.
    /// </summary>
    /// <remarks><para>Creates a database backup containing a current snapshot
    /// of existing objects.</para></remarks>
    public class CreateBackupRequest : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="backup_type" />.</summary>
        /// <remarks><para>Type of backup to create</para></remarks>
        public struct BackupType
        {
            public const string INCREMENTAL = "incremental";
            public const string DIFFERENTIAL = "differential";
            public const string FULL = "full";
        } // end struct BackupType

        /// <summary>A set of string constants for the parameter <see
        /// cref="backup_objects_map" />.</summary>
        /// <remarks><para>Map of objects to be captured in the backup. Error
        /// if empty and creating full backup. Error if non-empty when creating
        /// an incremental or differential backup.</para></remarks>
        public struct BackupObjectsMap
        {
            /// <summary>All object types in a schema (excludes permissions,
            /// system configuration, host secret key, KiFS directories and
            /// user defined functions)</summary>
            public const string ALL = "all";

            /// <summary>Database Table</summary>
            public const string TABLE = "table";

            /// <summary>Credential</summary>
            public const string CREDENTIAL = "credential";

            /// <summary>Context</summary>
            public const string CONTEXT = "context";

            /// <summary>Data Sink</summary>
            public const string DATASINK = "datasink";

            /// <summary>Data Source</summary>
            public const string DATASOURCE = "datasource";

            /// <summary>SQL Procedure</summary>
            public const string STORED_PROCEDURE = "stored_procedure";

            /// <summary>Table Monitor (Stream)</summary>
            public const string MONITOR = "monitor";

            /// <summary>User (internal and external) and associated
            /// permissions</summary>
            public const string USER = "user";

            /// <summary>Role, role members (roles or users, recursively) and
            /// associated permissions</summary>
            public const string ROLE = "role";

            /// <summary>If <see cref="BackupObjectsMap.TRUE">TRUE</see>,
            /// backup the database configuration file.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="BackupObjectsMap.FALSE">FALSE</see>
            ///         </term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="BackupObjectsMap.TRUE">TRUE</see>
            ///         </term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="BackupObjectsMap.FALSE">FALSE</see>.</para></remarks>
            public const string CONFIGURATION = "configuration";

            public const string FALSE = "false";
            public const string TRUE = "true";
        } // end struct BackupObjectsMap

        /// <summary>A set of string constants for the parameter <see
        /// cref="options" />.</summary>
        /// <remarks><para>Optional parameters.</para></remarks>
        public struct Options
        {
            /// <summary>Comments to store with this backup</summary>
            public const string COMMENT = "comment";

            /// <summary>Calculate checksum for backup files.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see cref="Options.TRUE">TRUE</see>.
            /// </para></remarks>
            public const string CHECKSUM = "checksum";

            public const string FALSE = "false";
            public const string TRUE = "true";

            /// <summary>Only save the DDL, do not backup table data.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string DDL_ONLY = "ddl_only";

            /// <summary>Maximum number of incremental backups to keep.
            /// </summary>
            /// <remarks><para>The default value is '-1'.</para></remarks>
            public const string MAX_INCREMENTAL_BACKUPS_TO_KEEP = "max_incremental_backups_to_keep";

            /// <summary>When the backup type is differential, delete any
            /// intermediate incremental or differential backups.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string DELETE_INTERMEDIATE_BACKUPS = "delete_intermediate_backups";

            /// <summary>Replace the existing backup object with a new full
            /// backup if it already exists.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string RECREATE = "recreate";

            /// <summary>Dry run of backup.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string DRY_RUN = "dry_run";
        } // end struct Options

        /// <summary>Name for this backup object.</summary>
        /// <remarks><para>If the backup object already exists, only an
        /// incremental or differential backup can be made, unless recreate is
        /// specified</para></remarks>
        public string backup_name { get; set; }

        /// <summary>Type of backup to create.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="BackupType.INCREMENTAL">INCREMENTAL</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupType.DIFFERENTIAL">DIFFERENTIAL</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupType.FULL">FULL</see></term>
        ///     </item>
        /// </list></remarks>
        public string backup_type { get; set; }

        /// <summary>Map of objects to be captured in the backup.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.ALL">ALL</see>:</term>
        ///         <description>All object types in a schema (excludes
        ///         permissions, system configuration, host secret key, KiFS
        ///         directories and user defined functions)</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.TABLE">TABLE</see>:
        ///         </term>
        ///         <description>Database Table</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupObjectsMap.CREDENTIAL">CREDENTIAL</see>:</term>
        ///         <description>Credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.CONTEXT">CONTEXT</see>:
        ///         </term>
        ///         <description>Context</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.DATASINK">DATASINK</see>:
        ///         </term>
        ///         <description>Data Sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupObjectsMap.DATASOURCE">DATASOURCE</see>:</term>
        ///         <description>Data Source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupObjectsMap.STORED_PROCEDURE">STORED_PROCEDURE</see>:
        ///         </term>
        ///         <description>SQL Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.MONITOR">MONITOR</see>:
        ///         </term>
        ///         <description>Table Monitor (Stream)</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.USER">USER</see>:</term>
        ///         <description>User (internal and external) and associated
        ///         permissions</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.ROLE">ROLE</see>:</term>
        ///         <description>Role, role members (roles or users,
        ///         recursively) and associated permissions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupObjectsMap.CONFIGURATION">CONFIGURATION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="BackupObjectsMap.TRUE">TRUE</see>, backup the
        ///         database configuration file.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="BackupObjectsMap.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="BackupObjectsMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="BackupObjectsMap.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list></remarks>
        public IDictionary<string, string> backup_objects_map { get; set; } = new Dictionary<string, string>();

        /// <summary>Datasink where backup will be stored.</summary>
        public string datasink_name { get; set; }

        /// <summary>Optional parameters.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see cref="Options.COMMENT">COMMENT</see>:</term>
        ///         <description>Comments to store with this backup
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.CHECKSUM">CHECKSUM</see>:</term>
        ///         <description>Calculate checksum for backup files.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.DDL_ONLY">DDL_ONLY</see>:</term>
        ///         <description>Only save the DDL, do not backup table data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.MAX_INCREMENTAL_BACKUPS_TO_KEEP">MAX_INCREMENTAL_BACKUPS_TO_KEEP</see>:
        ///         </term>
        ///         <description>Maximum number of incremental backups to keep.
        ///         The default value is '-1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.DELETE_INTERMEDIATE_BACKUPS">DELETE_INTERMEDIATE_BACKUPS</see>:
        ///         </term>
        ///         <description>When the backup type is differential, delete
        ///         any intermediate incremental or differential backups. This
        ///         overrides <see
        ///         cref="Options.MAX_INCREMENTAL_BACKUPS_TO_KEEP">MAX_INCREMENTAL_BACKUPS_TO_KEEP</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.RECREATE">RECREATE</see>:</term>
        ///         <description>Replace the existing backup object with a new
        ///         full backup if it already exists.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>Dry run of backup.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();

        /// <summary>Constructs a CreateBackupRequest object with default
        /// parameters.</summary>
        public CreateBackupRequest() { }

        /// <summary>Constructs a CreateBackupRequest object with the specified
        /// parameters.</summary>
        ///
        /// <param name="backup_name">Name for this backup object. If the
        /// backup object already exists, only an incremental or differential
        /// backup can be made, unless recreate is specified</param>
        /// <param name="backup_type">Type of backup to create.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="BackupType.INCREMENTAL">INCREMENTAL</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupType.DIFFERENTIAL">DIFFERENTIAL</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupType.FULL">FULL</see></term>
        ///     </item>
        /// </list></param>
        /// <param name="backup_objects_map">Map of objects to be captured in
        /// the backup. Error if empty and creating full backup. Error if
        /// non-empty when creating an incremental or differential backup.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.ALL">ALL</see>:</term>
        ///         <description>All object types in a schema (excludes
        ///         permissions, system configuration, host secret key, KiFS
        ///         directories and user defined functions)</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.TABLE">TABLE</see>:
        ///         </term>
        ///         <description>Database Table</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupObjectsMap.CREDENTIAL">CREDENTIAL</see>:</term>
        ///         <description>Credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.CONTEXT">CONTEXT</see>:
        ///         </term>
        ///         <description>Context</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.DATASINK">DATASINK</see>:
        ///         </term>
        ///         <description>Data Sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupObjectsMap.DATASOURCE">DATASOURCE</see>:</term>
        ///         <description>Data Source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupObjectsMap.STORED_PROCEDURE">STORED_PROCEDURE</see>:
        ///         </term>
        ///         <description>SQL Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.MONITOR">MONITOR</see>:
        ///         </term>
        ///         <description>Table Monitor (Stream)</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.USER">USER</see>:</term>
        ///         <description>User (internal and external) and associated
        ///         permissions</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="BackupObjectsMap.ROLE">ROLE</see>:</term>
        ///         <description>Role, role members (roles or users,
        ///         recursively) and associated permissions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="BackupObjectsMap.CONFIGURATION">CONFIGURATION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="BackupObjectsMap.TRUE">TRUE</see>, backup the
        ///         database configuration file.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="BackupObjectsMap.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="BackupObjectsMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="BackupObjectsMap.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list></param>
        /// <param name="datasink_name">Datasink where backup will be stored.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="Options.COMMENT">COMMENT</see>:</term>
        ///         <description>Comments to store with this backup
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.CHECKSUM">CHECKSUM</see>:</term>
        ///         <description>Calculate checksum for backup files.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.DDL_ONLY">DDL_ONLY</see>:</term>
        ///         <description>Only save the DDL, do not backup table data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.MAX_INCREMENTAL_BACKUPS_TO_KEEP">MAX_INCREMENTAL_BACKUPS_TO_KEEP</see>:
        ///         </term>
        ///         <description>Maximum number of incremental backups to keep.
        ///         The default value is '-1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.DELETE_INTERMEDIATE_BACKUPS">DELETE_INTERMEDIATE_BACKUPS</see>:
        ///         </term>
        ///         <description>When the backup type is differential, delete
        ///         any intermediate incremental or differential backups. This
        ///         overrides <see
        ///         cref="Options.MAX_INCREMENTAL_BACKUPS_TO_KEEP">MAX_INCREMENTAL_BACKUPS_TO_KEEP</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.RECREATE">RECREATE</see>:</term>
        ///         <description>Replace the existing backup object with a new
        ///         full backup if it already exists.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>Dry run of backup.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        public CreateBackupRequest( string backup_name,
                                    string backup_type,
                                    IDictionary<string, string> backup_objects_map,
                                    string datasink_name,
                                    IDictionary<string, string> options = null)
        {
            this.backup_name = backup_name ?? "";
            this.backup_type = backup_type ?? "";
            this.backup_objects_map = backup_objects_map ?? new Dictionary<string, string>();
            this.datasink_name = datasink_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor
    } // end class CreateBackupRequest

    /// <summary>A set of results returned by <see
    /// cref="Kinetica.createBackup(CreateBackupRequest)">Kinetica.createBackup</see>.
    /// </summary>
    public class CreateBackupResponse : KineticaData
    {
        /// <summary>Value of <see
        /// cref="CreateBackupRequest.backup_name">backup_name</see>.</summary>
        public string backup_name { get; set; }

        /// <summary>Backup ID.</summary>
        public long backup_id { get; set; }

        /// <summary>Total size of all files copied for this snapshot</summary>
        public long copied_bytes { get; set; }

        /// <summary>Total number of files copied for this snapshot</summary>
        public long copied_files { get; set; }

        /// <summary>Total number of records in all files copied for this
        /// snapshot</summary>
        public long copied_records { get; set; }

        /// <summary>Total number of records that can be restored from this
        /// snapshot</summary>
        public long total_number_of_records { get; set; }

        /// <summary>Additional information.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();
    } // end class CreateBackupResponse
} // end namespace kinetica
