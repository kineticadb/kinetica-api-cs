/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.filterByAreaGeometry(string,string,string,IList{double},IList{double},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Calculates which geospatial geometry objects from a table intersect
    /// a named area of interest (NAI/polygon). The operation is synchronous,
    /// meaning
    /// that a response will not be returned until all the matching objects are
    /// fully
    /// available. The response payload provides the count of the resulting
    /// set. A new
    /// resultant set (view) which satisfies the input NAI restriction
    /// specification is
    /// created with the name <see cref="view_name" /> passed in as part of the
    /// input.</summary>
    public class FilterByAreaGeometryRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByAreaGeometryRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>[DEPRECATED--please specify the containing
        /// schema for the view as part of <paramref
        /// cref="FilterByAreaGeometryRequest.view_name" /> and use
        /// /create/schema to create the schema if non-existent]  The schema
        /// for the newly created view. If the schema is non-existent, it will
        /// be automatically created.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>[DEPRECATED--please specify the containing schema for
            /// the view as part of <see cref="view_name" /> and use <see
            /// cref="Kinetica.createSchema(string,IDictionary{string, string})"
            /// /> to create the schema if non-existent]  The schema for the
            /// newly created view. If the schema is non-existent, it will be
            /// automatically created.</summary>
            public const string COLLECTION_NAME = "collection_name";
        } // end struct Options


        /// <summary>Name of the table to filter, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  This may be the name of a
        /// table or a view (when chaining queries).  </summary>
        public string table_name { get; set; }

        /// <summary>If provided, then this will be the name of the view
        /// containing the results, in [schema_name.]view_name format, using
        /// standard <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view.  The default value is ''.</summary>
        public string view_name { get; set; } = "";

        /// <summary>Name of the geospatial geometry column to be filtered.
        /// </summary>
        public string column_name { get; set; }

        /// <summary>List of x coordinates of the vertices of the polygon
        /// representing the area to be filtered.  </summary>
        public IList<double> x_vector { get; set; } = new List<double>();

        /// <summary>List of y coordinates of the vertices of the polygon
        /// representing the area to be filtered.  </summary>
        public IList<double> y_vector { get; set; } = new List<double>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByAreaGeometryRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>[DEPRECATED--please specify the containing
        /// schema for the view as part of <paramref
        /// cref="FilterByAreaGeometryRequest.view_name" /> and use
        /// /create/schema to create the schema if non-existent]  The schema
        /// for the newly created view. If the schema is non-existent, it will
        /// be automatically created.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a FilterByAreaGeometryRequest object with
        /// default parameters.</summary>
        public FilterByAreaGeometryRequest() { }

        /// <summary>Constructs a FilterByAreaGeometryRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table to filter, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  This may be the name of a
        /// table or a view (when chaining queries).  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view.  The default value is ''.</param>
        /// <param name="column_name">Name of the geospatial geometry column to
        /// be filtered.  </param>
        /// <param name="x_vector">List of x coordinates of the vertices of the
        /// polygon representing the area to be filtered.  </param>
        /// <param name="y_vector">List of y coordinates of the vertices of the
        /// polygon representing the area to be filtered.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByAreaGeometryRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>[DEPRECATED--please specify the containing
        /// schema for the view as part of <paramref
        /// cref="FilterByAreaGeometryRequest.view_name" /> and use
        /// /create/schema to create the schema if non-existent]  The schema
        /// for the newly created view. If the schema is non-existent, it will
        /// be automatically created.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public FilterByAreaGeometryRequest( string table_name,
                                            string view_name,
                                            string column_name,
                                            IList<double> x_vector,
                                            IList<double> y_vector,
                                            IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.view_name = view_name ?? "";
            this.column_name = column_name ?? "";
            this.x_vector = x_vector ?? new List<double>();
            this.y_vector = y_vector ?? new List<double>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class FilterByAreaGeometryRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.filterByAreaGeometry(string,string,string,IList{double},IList{double},IDictionary{string, string})"
    /// />.</summary>
    public class FilterByAreaGeometryResponse : KineticaData
    {

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByAreaGeometryResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>:</term>
        ///         <description>The fully qualified name of the view (i.e.
        /// including the schema)</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <member name="info"
        /// />.</summary>
        public struct Info
        {

            /// <summary>The fully qualified name of the view (i.e. including
            /// the schema)</summary>
            public const string QUALIFIED_VIEW_NAME = "qualified_view_name";
        } // end struct Info


        /// <summary>The number of records passing the area filter.  </summary>
        public long count { get; set; }

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByAreaGeometryResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>:</term>
        ///         <description>The fully qualified name of the view (i.e.
        /// including the schema)</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class FilterByAreaGeometryResponse




}  // end namespace kinetica
