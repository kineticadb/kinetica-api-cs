/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.insertRecordsFromFiles(string,IList{string},IDictionary{string, string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// </summary>
    public class InsertRecordsFromFilesRequest : KineticaData
    {

        /// <summary>see options in create_table_request
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:</term>
        ///         <description>Optional: ID of a currently registered type.
        /// The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If the collection provided is non-existent,
        /// the collection will be automatically created. If empty, then the
        /// newly created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_COLLECTION">IS_COLLECTION</see>:</term>
        ///         <description>Indicates whether the new table to be created
        /// will be a collection.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.DISALLOW_HOMOGENEOUS_TABLES">DISALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>No longer supported; value will be ignored.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>For a table, affects the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the table's data.  If
        /// true and the given type has no explicit <a
        /// href="../../concepts/tables.html#shard-key" target="_top">shard
        /// key</a> defined, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#sharding"
        /// target="_top">sharded</a> according to the shard key specified in
        /// the given @{create_table_options.type_id}, or <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>, if no shard key is specified.
        /// Note that a type containing a shard key cannot be used to create a
        /// replicated table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:</term>
        ///         <description>Semicolon-separated list of <a
        /// href="../../concepts/tables.html#foreign-keys"
        /// target="_top">foreign keys</a>, of the format '(source_column_name
        /// [, ...]) references target_table_name(primary_key_column_name [,
        /// ...]) [as foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:</term>
        ///         <description>Foreign shard key of the format 'source_column
        /// references shard_by_column from
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:</term>
        ///         <description><a
        /// href="../../concepts/tables.html#partitioning"
        /// target="_top">Partitioning</a> scheme to use.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a>.</description>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:</term>
        ///         <description>Comma-separated list of partition keys, which
        /// are the columns or column expressions by which records will be
        /// assigned to partitions defined by
        /// <i>partition_definitions</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:</term>
        ///         <description>Comma-separated list of partition definitions,
        /// whose format depends on the choice of <i>partition_type</i>.  See
        /// <a href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>, or <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a> for example
        /// formats.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:</term>
        ///         <description>If true, a new partition will be created for
        /// values which don't fall into an existing partition.  Currently only
        /// supported for <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitions</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TTL">TTL</see>:</term>
        ///         <description>For a table, sets the <a
        /// href="../../concepts/ttl.html" target="_top">TTL</a> of the table
        /// specified in <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:</term>
        ///         <description>For a table, indicates whether the table is an
        /// in-memory table. A result table cannot contain store_only,
        /// text_search, or string columns (charN columns are acceptable), and
        /// it will not be retained if the server is restarted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>The <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns. See <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../rm/usage.html#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see
        /// cref="create_table_options" />.</summary>
        public struct CreateTableOptions
        {

            /// <summary>Optional: ID of a currently registered type.  The
            /// default value is ''.</summary>
            public const string TYPE_ID = "type_id";

            /// <summary>If <i>true</i>, prevents an error from occurring if
            /// the table already exists and is of the given type.  If a table
            /// with the same ID but a different type exists, it is still an
            /// error.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string NO_ERROR_IF_EXISTS = "no_error_if_exists";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Name of a collection which is to contain the newly
            /// created table. If the collection provided is non-existent, the
            /// collection will be automatically created. If empty, then the
            /// newly created table will be a top-level table.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>Indicates whether the new table to be created will be
            /// a collection.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string IS_COLLECTION = "is_collection";

            /// <summary>No longer supported; value will be ignored.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string DISALLOW_HOMOGENEOUS_TABLES = "disallow_homogeneous_tables";

            /// <summary>For a table, affects the <a
            /// href="../../concepts/tables.html#distribution"
            /// target="_top">distribution scheme</a> for the table's data.  If
            /// true and the given type has no explicit <a
            /// href="../../concepts/tables.html#shard-key" target="_top">shard
            /// key</a> defined, the table will be <a
            /// href="../../concepts/tables.html#replication"
            /// target="_top">replicated</a>.  If false, the table will be <a
            /// href="../../concepts/tables.html#sharding"
            /// target="_top">sharded</a> according to the shard key specified
            /// in the given @{create_table_options.type_id}, or <a
            /// href="../../concepts/tables.html#random-sharding"
            /// target="_top">randomly sharded</a>, if no shard key is
            /// specified.  Note that a type containing a shard key cannot be
            /// used to create a replicated table.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string IS_REPLICATED = "is_replicated";

            /// <summary>Semicolon-separated list of <a
            /// href="../../concepts/tables.html#foreign-keys"
            /// target="_top">foreign keys</a>, of the format
            /// '(source_column_name [, ...]) references
            /// target_table_name(primary_key_column_name [, ...]) [as
            /// foreign_key_name]'.</summary>
            public const string FOREIGN_KEYS = "foreign_keys";

            /// <summary>Foreign shard key of the format 'source_column
            /// references shard_by_column from
            /// target_table(primary_key_column)'.</summary>
            public const string FOREIGN_SHARD_KEY = "foreign_shard_key";

            /// <summary><a href="../../concepts/tables.html#partitioning"
            /// target="_top">Partitioning</a> scheme to use.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:</term>
            ///         <description>Use <a
            /// href="../../concepts/tables.html#partitioning-by-range"
            /// target="_top">range partitioning</a>.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:</term>
            ///         <description>Use <a
            /// href="../../concepts/tables.html#partitioning-by-interval"
            /// target="_top">interval partitioning</a>.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:</term>
            ///         <description>Use <a
            /// href="../../concepts/tables.html#partitioning-by-list"
            /// target="_top">list partitioning</a>.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:</term>
            ///         <description>Use <a
            /// href="../../concepts/tables.html#partitioning-by-hash"
            /// target="_top">hash partitioning</a>.</description>
            ///     </item>
            /// </list></summary>
            public const string PARTITION_TYPE = "partition_type";

            /// <summary>Use <a
            /// href="../../concepts/tables.html#partitioning-by-range"
            /// target="_top">range partitioning</a>.</summary>
            public const string RANGE = "RANGE";

            /// <summary>Use <a
            /// href="../../concepts/tables.html#partitioning-by-interval"
            /// target="_top">interval partitioning</a>.</summary>
            public const string INTERVAL = "INTERVAL";

            /// <summary>Use <a
            /// href="../../concepts/tables.html#partitioning-by-list"
            /// target="_top">list partitioning</a>.</summary>
            public const string LIST = "LIST";

            /// <summary>Use <a
            /// href="../../concepts/tables.html#partitioning-by-hash"
            /// target="_top">hash partitioning</a>.</summary>
            public const string HASH = "HASH";

            /// <summary>Comma-separated list of partition keys, which are the
            /// columns or column expressions by which records will be assigned
            /// to partitions defined by
            /// <i>partition_definitions</i>.</summary>
            public const string PARTITION_KEYS = "partition_keys";

            /// <summary>Comma-separated list of partition definitions, whose
            /// format depends on the choice of <i>partition_type</i>.  See <a
            /// href="../../concepts/tables.html#partitioning-by-range"
            /// target="_top">range partitioning</a>, <a
            /// href="../../concepts/tables.html#partitioning-by-interval"
            /// target="_top">interval partitioning</a>, <a
            /// href="../../concepts/tables.html#partitioning-by-list"
            /// target="_top">list partitioning</a>, or <a
            /// href="../../concepts/tables.html#partitioning-by-hash"
            /// target="_top">hash partitioning</a> for example
            /// formats.</summary>
            public const string PARTITION_DEFINITIONS = "partition_definitions";

            /// <summary>If true, a new partition will be created for values
            /// which don't fall into an existing partition.  Currently only
            /// supported for <a
            /// href="../../concepts/tables.html#partitioning-by-list"
            /// target="_top">list partitions</a>.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string IS_AUTOMATIC_PARTITION = "is_automatic_partition";

            /// <summary>For a table, sets the <a
            /// href="../../concepts/ttl.html" target="_top">TTL</a> of the
            /// table specified in <see cref="table_name" />.</summary>
            public const string TTL = "ttl";

            /// <summary>Indicates the number of records per chunk to be used
            /// for this table.</summary>
            public const string CHUNK_SIZE = "chunk_size";

            /// <summary>For a table, indicates whether the table is an
            /// in-memory table. A result table cannot contain store_only,
            /// text_search, or string columns (charN columns are acceptable),
            /// and it will not be retained if the server is restarted.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string IS_RESULT_TABLE = "is_result_table";

            /// <summary>The <a href="../../rm/concepts.html#tier-strategies"
            /// target="_top">tier strategy</a> for the table and its columns.
            /// See <a href="../../rm/concepts.html#tier-strategies"
            /// target="_top">tier strategy usage</a> for format and <a
            /// href="../../rm/usage.html#tier-strategies" target="_top">tier
            /// strategy examples</a> for examples.</summary>
            public const string STRATEGY_DEFINITION = "strategy_definition";
        } // end struct CreateTableOptions


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PARQUET">PARQUET</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.LOADING_MODE">LOADING_MODE</see>:</term>
        ///         <description>specifies how to divide up data loading among
        /// nodes
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:</term>
        ///         <description>head node loads all data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:</term>
        ///         <description>worker nodes load all data, all nodes can see
        /// all files and loading is divided up internally</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:</term>
        ///         <description>each worker node loads the files that it
        /// sees</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:</term>
        ///         <description>tries to parse all lines: nulls are inserted
        /// for missing tokens and extra tokens are ignored. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:</term>
        ///         <description>Drops malformed lines/rows
        /// entirely.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:</term>
        ///         <description>Aborts ingest when it encounters an
        /// error.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:</term>
        ///         <description>number of records per batch when loading from
        /// file</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:</term>
        ///         <description>json map of colname to map of format to
        /// value</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:</term>
        ///         <description>json map of format to value</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>Walk through the files and determine number of
        /// valid records.  Does not load data. Applies the error handling mode
        /// to determine valid behavior
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>no dry run</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>do a dry run</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:</term>
        ///         <description>Delimiter for csv fields and header row. Must
        /// be a single character.  The default value is ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:</term>
        ///         <description>Delimiter for column properties in csv header
        /// row.  The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:</term>
        ///         <description>Optionally used to specify a subset of columns
        /// to load, instead of loading all columns in the file.
        /// The columns to use are delimited by a comma. Column numbers can be
        /// specified discretely or as a range e.g. '1 .. 4' refers to the
        /// first through fourth columns.
        /// For example, a value of '5,3,1..2' will create a table with the
        /// first column in the table being the fifth column in the file,
        /// followed by third column in the file, then the first column, and
        /// lastly the second column.
        /// Additionally, if the file(s) have a header, names matching the file
        /// header names may be provided instead of numbers. Ranges are not
        /// supported.
        /// For example, a value of 'C, B, A' will create a three column table
        /// with column C, followed by column B, followed by column
        /// A.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:</term>
        ///         <description>ignore all lines starting with the comment
        /// value.  The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:</term>
        ///         <description>value to treat as null.  The default value is
        /// ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:</term>
        ///         <description>quote character, defaults to a double-quote
        /// i.e. ".Set an empty string to not have a quote character. Must be a
        /// single character.  The default value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:</term>
        ///         <description>escape character, defaults to no escaping.
        /// Must be a single character</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.PARQUET">PARQUET</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.</summary>
            public const string FILE_TYPE = "file_type";
            public const string DELIMITED_TEXT = "delimited_text";
            public const string PARQUET = "parquet";

            /// <summary>specifies how to divide up data loading among nodes
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:</term>
            ///         <description>head node loads all data</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:</term>
            ///         <description>worker nodes load all data, all nodes can
            /// see all files and loading is divided up
            /// internally</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:</term>
            ///         <description>each worker node loads the files that it
            /// sees</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.</summary>
            public const string LOADING_MODE = "loading_mode";

            /// <summary>head node loads all data</summary>
            public const string HEAD = "head";

            /// <summary>worker nodes load all data, all nodes can see all
            /// files and loading is divided up internally</summary>
            public const string DISTRIBUTED_SHARED = "distributed_shared";

            /// <summary>each worker node loads the files that it
            /// sees</summary>
            public const string DISTRIBUTED_LOCAL = "distributed_local";

            /// <summary>
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:</term>
            ///         <description>tries to parse all lines: nulls are
            /// inserted for missing tokens and extra tokens are ignored.
            /// </description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:</term>
            ///         <description>Drops malformed lines/rows
            /// entirely.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:</term>
            ///         <description>Aborts ingest when it encounters an
            /// error.</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>.</summary>
            public const string ERROR_HANDLING = "error_handling";

            /// <summary>tries to parse all lines: nulls are inserted for
            /// missing tokens and extra tokens are ignored. </summary>
            public const string PERMISSIVE = "permissive";

            /// <summary>Drops malformed lines/rows entirely.</summary>
            public const string IGNORE_BAD_RECORDS = "ignore_bad_records";

            /// <summary>Aborts ingest when it encounters an error.</summary>
            public const string ABORT = "abort";

            /// <summary>
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</summary>
            public const string TRUNCATE_TABLE = "truncate_table";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>number of records per batch when loading from
            /// file</summary>
            public const string BATCH_SIZE = "batch_size";

            /// <summary>json map of colname to map of format to
            /// value</summary>
            public const string COLUMN_FORMATS = "column_formats";

            /// <summary>json map of format to value</summary>
            public const string DEFAULT_COLUMN_FORMATS = "default_column_formats";

            /// <summary>Walk through the files and determine number of valid
            /// records.  Does not load data. Applies the error handling mode
            /// to determine valid behavior
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>:</term>
            ///         <description>no dry run</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>:</term>
            ///         <description>do a dry run</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</summary>
            public const string DRY_RUN = "dry_run";

            /// <summary>
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.</summary>
            public const string TEXT_HAS_HEADER = "text_has_header";

            /// <summary>Delimiter for csv fields and header row. Must be a
            /// single character.  The default value is ','.</summary>
            public const string TEXT_DELIMITER = "text_delimiter";

            /// <summary>Delimiter for column properties in csv header row.
            /// The default value is '|'.</summary>
            public const string TEXT_HEADER_PROPERTY_DELIMITER = "text_header_property_delimiter";

            /// <summary>Optionally used to specify a subset of columns to
            /// load, instead of loading all columns in the file.
            /// The columns to use are delimited by a comma. Column numbers can
            /// be specified discretely or as a range e.g. '1 .. 4' refers to
            /// the first through fourth columns.
            /// For example, a value of '5,3,1..2' will create a table with the
            /// first column in the table being the fifth column in the file,
            /// followed by third column in the file, then the first column,
            /// and lastly the second column.
            /// Additionally, if the file(s) have a header, names matching the
            /// file header names may be provided instead of numbers. Ranges
            /// are not supported.
            /// For example, a value of 'C, B, A' will create a three column
            /// table with column C, followed by column B, followed by column
            /// A.</summary>
            public const string COLUMNS_TO_LOAD = "columns_to_load";

            /// <summary>ignore all lines starting with the comment value.  The
            /// default value is '#'.</summary>
            public const string TEXT_COMMENT_STRING = "text_comment_string";

            /// <summary>value to treat as null.  The default value is
            /// ''.</summary>
            public const string TEXT_NULL_STRING = "text_null_string";

            /// <summary>quote character, defaults to a double-quote i.e. ".Set
            /// an empty string to not have a quote character. Must be a single
            /// character.  The default value is '"'.</summary>
            public const string TEXT_QUOTE_CHARACTER = "text_quote_character";

            /// <summary>escape character, defaults to no escaping. Must be a
            /// single character</summary>
            public const string TEXT_ESCAPE_CHARACTER = "text_escape_character";
        } // end struct Options

        public string table_name { get; set; }

        /// <summary>(can have wildcards) -- array of strings (can be relative
        /// paths)  </summary>
        public IList<string> filepaths { get; set; } = new List<string>();

        /// <summary>see options in create_table_request
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:</term>
        ///         <description>Optional: ID of a currently registered type.
        /// The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If the collection provided is non-existent,
        /// the collection will be automatically created. If empty, then the
        /// newly created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_COLLECTION">IS_COLLECTION</see>:</term>
        ///         <description>Indicates whether the new table to be created
        /// will be a collection.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.DISALLOW_HOMOGENEOUS_TABLES">DISALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>No longer supported; value will be ignored.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>For a table, affects the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the table's data.  If
        /// true and the given type has no explicit <a
        /// href="../../concepts/tables.html#shard-key" target="_top">shard
        /// key</a> defined, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#sharding"
        /// target="_top">sharded</a> according to the shard key specified in
        /// the given @{create_table_options.type_id}, or <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>, if no shard key is specified.
        /// Note that a type containing a shard key cannot be used to create a
        /// replicated table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:</term>
        ///         <description>Semicolon-separated list of <a
        /// href="../../concepts/tables.html#foreign-keys"
        /// target="_top">foreign keys</a>, of the format '(source_column_name
        /// [, ...]) references target_table_name(primary_key_column_name [,
        /// ...]) [as foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:</term>
        ///         <description>Foreign shard key of the format 'source_column
        /// references shard_by_column from
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:</term>
        ///         <description><a
        /// href="../../concepts/tables.html#partitioning"
        /// target="_top">Partitioning</a> scheme to use.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a>.</description>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:</term>
        ///         <description>Comma-separated list of partition keys, which
        /// are the columns or column expressions by which records will be
        /// assigned to partitions defined by
        /// <i>partition_definitions</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:</term>
        ///         <description>Comma-separated list of partition definitions,
        /// whose format depends on the choice of <i>partition_type</i>.  See
        /// <a href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>, or <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a> for example
        /// formats.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:</term>
        ///         <description>If true, a new partition will be created for
        /// values which don't fall into an existing partition.  Currently only
        /// supported for <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitions</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TTL">TTL</see>:</term>
        ///         <description>For a table, sets the <a
        /// href="../../concepts/ttl.html" target="_top">TTL</a> of the table
        /// specified in <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:</term>
        ///         <description>For a table, indicates whether the table is an
        /// in-memory table. A result table cannot contain store_only,
        /// text_search, or string columns (charN columns are acceptable), and
        /// it will not be retained if the server is restarted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>The <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns. See <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../rm/usage.html#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> create_table_options { get; set; } = new Dictionary<string, string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PARQUET">PARQUET</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.LOADING_MODE">LOADING_MODE</see>:</term>
        ///         <description>specifies how to divide up data loading among
        /// nodes
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:</term>
        ///         <description>head node loads all data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:</term>
        ///         <description>worker nodes load all data, all nodes can see
        /// all files and loading is divided up internally</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:</term>
        ///         <description>each worker node loads the files that it
        /// sees</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:</term>
        ///         <description>tries to parse all lines: nulls are inserted
        /// for missing tokens and extra tokens are ignored. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:</term>
        ///         <description>Drops malformed lines/rows
        /// entirely.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:</term>
        ///         <description>Aborts ingest when it encounters an
        /// error.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:</term>
        ///         <description>number of records per batch when loading from
        /// file</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:</term>
        ///         <description>json map of colname to map of format to
        /// value</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:</term>
        ///         <description>json map of format to value</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>Walk through the files and determine number of
        /// valid records.  Does not load data. Applies the error handling mode
        /// to determine valid behavior
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>no dry run</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>do a dry run</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:</term>
        ///         <description>Delimiter for csv fields and header row. Must
        /// be a single character.  The default value is ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:</term>
        ///         <description>Delimiter for column properties in csv header
        /// row.  The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:</term>
        ///         <description>Optionally used to specify a subset of columns
        /// to load, instead of loading all columns in the file.
        /// The columns to use are delimited by a comma. Column numbers can be
        /// specified discretely or as a range e.g. '1 .. 4' refers to the
        /// first through fourth columns.
        /// For example, a value of '5,3,1..2' will create a table with the
        /// first column in the table being the fifth column in the file,
        /// followed by third column in the file, then the first column, and
        /// lastly the second column.
        /// Additionally, if the file(s) have a header, names matching the file
        /// header names may be provided instead of numbers. Ranges are not
        /// supported.
        /// For example, a value of 'C, B, A' will create a three column table
        /// with column C, followed by column B, followed by column
        /// A.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:</term>
        ///         <description>ignore all lines starting with the comment
        /// value.  The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:</term>
        ///         <description>value to treat as null.  The default value is
        /// ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:</term>
        ///         <description>quote character, defaults to a double-quote
        /// i.e. ".Set an empty string to not have a quote character. Must be a
        /// single character.  The default value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:</term>
        ///         <description>escape character, defaults to no escaping.
        /// Must be a single character</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an InsertRecordsFromFilesRequest object with
        /// default parameters.</summary>
        public InsertRecordsFromFilesRequest() { }

        /// <summary>Constructs an InsertRecordsFromFilesRequest object with
        /// the specified parameters.</summary>
        /// 
        /// <param name="table_name"></param>
        /// <param name="filepaths">(can have wildcards) -- array of strings
        /// (can be relative paths)  </param>
        /// <param name="create_table_options">see options in
        /// create_table_request
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:</term>
        ///         <description>Optional: ID of a currently registered type.
        /// The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If the collection provided is non-existent,
        /// the collection will be automatically created. If empty, then the
        /// newly created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_COLLECTION">IS_COLLECTION</see>:</term>
        ///         <description>Indicates whether the new table to be created
        /// will be a collection.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.DISALLOW_HOMOGENEOUS_TABLES">DISALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>No longer supported; value will be ignored.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>For a table, affects the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the table's data.  If
        /// true and the given type has no explicit <a
        /// href="../../concepts/tables.html#shard-key" target="_top">shard
        /// key</a> defined, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#sharding"
        /// target="_top">sharded</a> according to the shard key specified in
        /// the given @{create_table_options.type_id}, or <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>, if no shard key is specified.
        /// Note that a type containing a shard key cannot be used to create a
        /// replicated table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:</term>
        ///         <description>Semicolon-separated list of <a
        /// href="../../concepts/tables.html#foreign-keys"
        /// target="_top">foreign keys</a>, of the format '(source_column_name
        /// [, ...]) references target_table_name(primary_key_column_name [,
        /// ...]) [as foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:</term>
        ///         <description>Foreign shard key of the format 'source_column
        /// references shard_by_column from
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:</term>
        ///         <description><a
        /// href="../../concepts/tables.html#partitioning"
        /// target="_top">Partitioning</a> scheme to use.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a>.</description>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:</term>
        ///         <description>Comma-separated list of partition keys, which
        /// are the columns or column expressions by which records will be
        /// assigned to partitions defined by
        /// <i>partition_definitions</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:</term>
        ///         <description>Comma-separated list of partition definitions,
        /// whose format depends on the choice of <i>partition_type</i>.  See
        /// <a href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>, or <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a> for example
        /// formats.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:</term>
        ///         <description>If true, a new partition will be created for
        /// values which don't fall into an existing partition.  Currently only
        /// supported for <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitions</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TTL">TTL</see>:</term>
        ///         <description>For a table, sets the <a
        /// href="../../concepts/ttl.html" target="_top">TTL</a> of the table
        /// specified in <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:</term>
        ///         <description>For a table, indicates whether the table is an
        /// in-memory table. A result table cannot contain store_only,
        /// text_search, or string columns (charN columns are acceptable), and
        /// it will not be retained if the server is restarted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>The <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns. See <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../rm/usage.html#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PARQUET">PARQUET</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.LOADING_MODE">LOADING_MODE</see>:</term>
        ///         <description>specifies how to divide up data loading among
        /// nodes
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:</term>
        ///         <description>head node loads all data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:</term>
        ///         <description>worker nodes load all data, all nodes can see
        /// all files and loading is divided up internally</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:</term>
        ///         <description>each worker node loads the files that it
        /// sees</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:</term>
        ///         <description>tries to parse all lines: nulls are inserted
        /// for missing tokens and extra tokens are ignored. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:</term>
        ///         <description>Drops malformed lines/rows
        /// entirely.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:</term>
        ///         <description>Aborts ingest when it encounters an
        /// error.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:</term>
        ///         <description>number of records per batch when loading from
        /// file</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:</term>
        ///         <description>json map of colname to map of format to
        /// value</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:</term>
        ///         <description>json map of format to value</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>Walk through the files and determine number of
        /// valid records.  Does not load data. Applies the error handling mode
        /// to determine valid behavior
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>no dry run</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>do a dry run</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:</term>
        ///         <description>Delimiter for csv fields and header row. Must
        /// be a single character.  The default value is ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:</term>
        ///         <description>Delimiter for column properties in csv header
        /// row.  The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:</term>
        ///         <description>Optionally used to specify a subset of columns
        /// to load, instead of loading all columns in the file.
        /// The columns to use are delimited by a comma. Column numbers can be
        /// specified discretely or as a range e.g. '1 .. 4' refers to the
        /// first through fourth columns.
        /// For example, a value of '5,3,1..2' will create a table with the
        /// first column in the table being the fifth column in the file,
        /// followed by third column in the file, then the first column, and
        /// lastly the second column.
        /// Additionally, if the file(s) have a header, names matching the file
        /// header names may be provided instead of numbers. Ranges are not
        /// supported.
        /// For example, a value of 'C, B, A' will create a three column table
        /// with column C, followed by column B, followed by column
        /// A.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:</term>
        ///         <description>ignore all lines starting with the comment
        /// value.  The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:</term>
        ///         <description>value to treat as null.  The default value is
        /// ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:</term>
        ///         <description>quote character, defaults to a double-quote
        /// i.e. ".Set an empty string to not have a quote character. Must be a
        /// single character.  The default value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:</term>
        ///         <description>escape character, defaults to no escaping.
        /// Must be a single character</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public InsertRecordsFromFilesRequest( string table_name,
                                              IList<string> filepaths,
                                              IDictionary<string, string> create_table_options = null,
                                              IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.filepaths = filepaths ?? new List<string>();
            this.create_table_options = create_table_options ?? new Dictionary<string, string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class InsertRecordsFromFilesRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.insertRecordsFromFiles(string,IList{string},IDictionary{string, string},IDictionary{string, string})"
    /// />.</summary>
    public class InsertRecordsFromFilesResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" />.  </summary>
        public string table_name { get; set; }
        public string type_id { get; set; }

        /// <summary>number of records inserted  </summary>
        public long count_inserted { get; set; }

        /// <summary>number of records skipped, when running in a non-abort
        /// error handling mode  </summary>
        public long count_skipped { get; set; }

        /// <summary>number of records updated.  The default value is
        /// -1.</summary>
        public long count_updated { get; set; } = -1;

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class InsertRecordsFromFilesResponse




}  // end namespace kinetica
