/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.insertRecordsFromFiles(string,IList{string},IDictionary{string, string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Reads from one or more files located on the server and inserts the data
    /// into a new or existing table.
    /// <br />
    /// For CSV files, there are two loading schemes: positional and
    /// name-based. The name-based loading scheme is enabled when the file has
    /// a header present and <i>text_has_header</i> is set to <i>true</i>. In
    /// this scheme, the source file(s) field names must match the target
    /// table's column names exactly; however, the source file can have more
    /// fields than the target table has columns. If <i>error_handling</i> is
    /// set to <i>permissive</i>, the source file can have fewer fields than
    /// the target table has columns. If the name-based loading scheme is being
    /// used, names matching the file header's names may be provided to
    /// <i>columns_to_load</i> instead of numbers, but ranges are not
    /// supported.
    /// <br />
    /// Returns once all files are processed.</summary>
    public class InsertRecordsFromFilesRequest : KineticaData
    {

        /// <summary>Options used when creating a new table.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:</term>
        ///         <description>ID of a currently registered <a
        /// href="../../concepts/types.html" target="_top">type</a>.  The
        /// default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If the collection provided is non-existent,
        /// the collection will be automatically created. If empty, then the
        /// newly created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>For a table, affects the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the table's data.  If
        /// true and the given type has no explicit <a
        /// href="../../concepts/tables.html#shard-key" target="_top">shard
        /// key</a> defined, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#sharding"
        /// target="_top">sharded</a> according to the shard key specified in
        /// the given <i>type_id</i>, or <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>, if no shard key is specified.
        /// Note that a type containing a shard key cannot be used to create a
        /// replicated table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:</term>
        ///         <description>Semicolon-separated list of <a
        /// href="../../concepts/tables.html#foreign-keys"
        /// target="_top">foreign keys</a>, of the format '(source_column_name
        /// [, ...]) references target_table_name(primary_key_column_name [,
        /// ...]) [as foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:</term>
        ///         <description>Foreign shard key of the format 'source_column
        /// references shard_by_column from
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:</term>
        ///         <description><a
        /// href="../../concepts/tables.html#partitioning"
        /// target="_top">Partitioning</a> scheme to use.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a>.</description>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:</term>
        ///         <description>Comma-separated list of partition keys, which
        /// are the columns or column expressions by which records will be
        /// assigned to partitions defined by
        /// <i>partition_definitions</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:</term>
        ///         <description>Comma-separated list of partition definitions,
        /// whose format depends on the choice of <i>partition_type</i>.  See
        /// <a href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>, or <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a> for example
        /// formats.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:</term>
        ///         <description>If true, a new partition will be created for
        /// values which don't fall into an existing partition.  Currently only
        /// supported for <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitions</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TTL">TTL</see>:</term>
        ///         <description>For a table, sets the <a
        /// href="../../concepts/ttl.html" target="_top">TTL</a> of the table
        /// specified in <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:</term>
        ///         <description>For a table, indicates whether the table is an
        /// in-memory table. A result table cannot contain store_only,
        /// text_search, or string columns (charN columns are acceptable), and
        /// it will not be retained if the server is restarted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>The <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns. See <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../rm/usage.html#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see
        /// cref="create_table_options" />.</summary>
        public struct CreateTableOptions
        {

            /// <summary>ID of a currently registered <a
            /// href="../../concepts/types.html" target="_top">type</a>.  The
            /// default value is ''.</summary>
            public const string TYPE_ID = "type_id";

            /// <summary>If <i>true</i>, prevents an error from occurring if
            /// the table already exists and is of the given type.  If a table
            /// with the same ID but a different type exists, it is still an
            /// error.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string NO_ERROR_IF_EXISTS = "no_error_if_exists";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Name of a collection which is to contain the newly
            /// created table. If the collection provided is non-existent, the
            /// collection will be automatically created. If empty, then the
            /// newly created table will be a top-level table.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>For a table, affects the <a
            /// href="../../concepts/tables.html#distribution"
            /// target="_top">distribution scheme</a> for the table's data.  If
            /// true and the given type has no explicit <a
            /// href="../../concepts/tables.html#shard-key" target="_top">shard
            /// key</a> defined, the table will be <a
            /// href="../../concepts/tables.html#replication"
            /// target="_top">replicated</a>.  If false, the table will be <a
            /// href="../../concepts/tables.html#sharding"
            /// target="_top">sharded</a> according to the shard key specified
            /// in the given <i>type_id</i>, or <a
            /// href="../../concepts/tables.html#random-sharding"
            /// target="_top">randomly sharded</a>, if no shard key is
            /// specified.  Note that a type containing a shard key cannot be
            /// used to create a replicated table.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string IS_REPLICATED = "is_replicated";

            /// <summary>Semicolon-separated list of <a
            /// href="../../concepts/tables.html#foreign-keys"
            /// target="_top">foreign keys</a>, of the format
            /// '(source_column_name [, ...]) references
            /// target_table_name(primary_key_column_name [, ...]) [as
            /// foreign_key_name]'.</summary>
            public const string FOREIGN_KEYS = "foreign_keys";

            /// <summary>Foreign shard key of the format 'source_column
            /// references shard_by_column from
            /// target_table(primary_key_column)'.</summary>
            public const string FOREIGN_SHARD_KEY = "foreign_shard_key";

            /// <summary><a href="../../concepts/tables.html#partitioning"
            /// target="_top">Partitioning</a> scheme to use.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:</term>
            ///         <description>Use <a
            /// href="../../concepts/tables.html#partitioning-by-range"
            /// target="_top">range partitioning</a>.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:</term>
            ///         <description>Use <a
            /// href="../../concepts/tables.html#partitioning-by-interval"
            /// target="_top">interval partitioning</a>.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:</term>
            ///         <description>Use <a
            /// href="../../concepts/tables.html#partitioning-by-list"
            /// target="_top">list partitioning</a>.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:</term>
            ///         <description>Use <a
            /// href="../../concepts/tables.html#partitioning-by-hash"
            /// target="_top">hash partitioning</a>.</description>
            ///     </item>
            /// </list></summary>
            public const string PARTITION_TYPE = "partition_type";

            /// <summary>Use <a
            /// href="../../concepts/tables.html#partitioning-by-range"
            /// target="_top">range partitioning</a>.</summary>
            public const string RANGE = "RANGE";

            /// <summary>Use <a
            /// href="../../concepts/tables.html#partitioning-by-interval"
            /// target="_top">interval partitioning</a>.</summary>
            public const string INTERVAL = "INTERVAL";

            /// <summary>Use <a
            /// href="../../concepts/tables.html#partitioning-by-list"
            /// target="_top">list partitioning</a>.</summary>
            public const string LIST = "LIST";

            /// <summary>Use <a
            /// href="../../concepts/tables.html#partitioning-by-hash"
            /// target="_top">hash partitioning</a>.</summary>
            public const string HASH = "HASH";

            /// <summary>Comma-separated list of partition keys, which are the
            /// columns or column expressions by which records will be assigned
            /// to partitions defined by
            /// <i>partition_definitions</i>.</summary>
            public const string PARTITION_KEYS = "partition_keys";

            /// <summary>Comma-separated list of partition definitions, whose
            /// format depends on the choice of <i>partition_type</i>.  See <a
            /// href="../../concepts/tables.html#partitioning-by-range"
            /// target="_top">range partitioning</a>, <a
            /// href="../../concepts/tables.html#partitioning-by-interval"
            /// target="_top">interval partitioning</a>, <a
            /// href="../../concepts/tables.html#partitioning-by-list"
            /// target="_top">list partitioning</a>, or <a
            /// href="../../concepts/tables.html#partitioning-by-hash"
            /// target="_top">hash partitioning</a> for example
            /// formats.</summary>
            public const string PARTITION_DEFINITIONS = "partition_definitions";

            /// <summary>If true, a new partition will be created for values
            /// which don't fall into an existing partition.  Currently only
            /// supported for <a
            /// href="../../concepts/tables.html#partitioning-by-list"
            /// target="_top">list partitions</a>.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string IS_AUTOMATIC_PARTITION = "is_automatic_partition";

            /// <summary>For a table, sets the <a
            /// href="../../concepts/ttl.html" target="_top">TTL</a> of the
            /// table specified in <see cref="table_name" />.</summary>
            public const string TTL = "ttl";

            /// <summary>Indicates the number of records per chunk to be used
            /// for this table.</summary>
            public const string CHUNK_SIZE = "chunk_size";

            /// <summary>For a table, indicates whether the table is an
            /// in-memory table. A result table cannot contain store_only,
            /// text_search, or string columns (charN columns are acceptable),
            /// and it will not be retained if the server is restarted.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</summary>
            public const string IS_RESULT_TABLE = "is_result_table";

            /// <summary>The <a href="../../rm/concepts.html#tier-strategies"
            /// target="_top">tier strategy</a> for the table and its columns.
            /// See <a href="../../rm/concepts.html#tier-strategies"
            /// target="_top">tier strategy usage</a> for format and <a
            /// href="../../rm/usage.html#tier-strategies" target="_top">tier
            /// strategy examples</a> for examples.</summary>
            public const string STRATEGY_DEFINITION = "strategy_definition";
        } // end struct CreateTableOptions


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:</term>
        ///         <description>Specifies number of records to process before
        /// inserting.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:</term>
        ///         <description>For each target column specified, applies the
        /// column-property-bound format to the source data loaded into that
        /// column.  Each column format will contain a mapping of one or more
        /// of its column properties to an appropriate format for each
        /// property.  Currently supported column properties include date,
        /// time, & datetime. The parameter value must be formatted as a JSON
        /// string of maps of column names to maps of column properties to
        /// their corresponding column formats, e.g., { "order_date" : { "date"
        /// : "%Y.%m.%d" }, "order_time" : { "time" : "%H:%M:%S" } }.  See
        /// <i>default_column_formats</i> for valid format
        /// syntax.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies a comma-delimited list of column positions or names
        /// to load instead of loading all columns in the file(s); if more than
        /// one file is being loaded, the list of columns will apply to all
        /// files. Column numbers can be specified discretely or as a range,
        /// e.g., a value of '5,7,1..3' will create a table with the first
        /// column in the table being the fifth column in the file, followed by
        /// seventh column in the file, then the first column through the
        /// fourth column in the file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:</term>
        ///         <description>Specifies the default format to be applied to
        /// source data loaded into columns with the corresponding column
        /// property.  This default column-property-bound format can be
        /// overridden by specifying a column property & format for a given
        /// target column in <i>column_formats</i>. For each specified
        /// annotation, the format will apply to all columns with that
        /// annotation unless a custom <i>column_formats</i> for that
        /// annotation is specified. The parameter value must be formatted as a
        /// JSON string that is a map of column properties to their respective
        /// column formats, e.g., { "date" : "%Y.%m.%d", "time" : "%H:%M:%S" }.
        /// Column formats are specified as a string of control characters and
        /// plain text. The supported control characters are 'Y', 'm', 'd',
        /// 'H', 'M', 'S', and 's', which follow the Linux 'strptime()'
        /// specification, as well as 's', which specifies seconds and
        /// fractional seconds (though the fractional component will be
        /// truncated past milliseconds). Formats for the 'date' annotation
        /// must include the 'Y', 'm', and 'd' control characters. Formats for
        /// the 'time' annotation must include the 'H', 'M', and either 'S' or
        /// 's' (but not both) control characters. Formats for the 'datetime'
        /// annotation meet both the 'date' and 'time' control character
        /// requirements. For example, '{"datetime" : "%m/%d/%Y %H:%M:%S" }'
        /// would be used to interpret text as "05/04/2000
        /// 12:12:11"</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be
        /// inserted but the file will be read with the applied
        /// <i>error_handling</i> mode and the number of valid records that
        /// would be normally inserted are returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:</term>
        ///         <description>Specifies how errors should be handled upon
        /// insertion.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:</term>
        ///         <description>Records with missing columns are populated
        /// with nulls if possible; otherwise, the malformed records are
        /// skipped.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:</term>
        ///         <description>Malformed records are skipped.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:</term>
        ///         <description>Stops current insertion and aborts entire
        /// operation when an error is encountered.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>:</term>
        ///         <description>File type for the file(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>:</term>
        ///         <description>Indicates the file(s) are in delimited text
        /// format, e.g., CSV, TSV, PSV, etc.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.LOADING_MODE">LOADING_MODE</see>:</term>
        ///         <description>Specifies how to divide data loading among
        /// nodes.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:</term>
        ///         <description>The head node loads all data. All files must
        /// be available on the head node.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:</term>
        ///         <description>The worker nodes coordinate loading a set of
        /// files that are available to all of them. All files must be
        /// available on all nodes. This option is best when there is a shared
        /// file system.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:</term>
        ///         <description>Each worker node loads all files that are
        /// available to it. This option is best when each worker node has its
        /// own file system.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. All lines in the file(s) starting with the provided string
        /// are ignored. The comment string has no effect unless it appears at
        /// the beginning of a line.  The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies the delimiter for values and columns in the header
        /// row (if present). Must be a single character.  The default value is
        /// ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only.  The character used in the file(s) to escape certain
        /// character sequences in text. For example, the escape character
        /// followed by a literal 'n' escapes to a newline character within the
        /// field. Can be used within quoted string to escape a quote
        /// character. An empty value for this option does not specify an
        /// escape character.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Indicates whether the delimited text files have a header row.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies the delimiter for column properties in the header
        /// row (if present). Cannot be set to same value as text_delimiter.
        /// The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. The value in the file(s) to treat as a null value in the
        /// database.  The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. The quote character used in the file(s), typically
        /// encompassing a field value. The character must appear at beginning
        /// and end of field to take effect. Delimiters within quoted fields
        /// are not treated as delimiters. Within a quoted field, double quotes
        /// (") can be used to escape a single literal quote character. To not
        /// have a quote character, specify an empty string ("").  The default
        /// value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:</term>
        ///         <description>If set to <i>true</i>, truncates the table
        /// specified by <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" /> prior to loading
        /// the file(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Specifies number of records to process before
            /// inserting.</summary>
            public const string BATCH_SIZE = "batch_size";

            /// <summary>For each target column specified, applies the
            /// column-property-bound format to the source data loaded into
            /// that column.  Each column format will contain a mapping of one
            /// or more of its column properties to an appropriate format for
            /// each property.  Currently supported column properties include
            /// date, time, & datetime. The parameter value must be formatted
            /// as a JSON string of maps of column names to maps of column
            /// properties to their corresponding column formats, e.g., {
            /// "order_date" : { "date" : "%Y.%m.%d" }, "order_time" : { "time"
            /// : "%H:%M:%S" } }.  See <i>default_column_formats</i> for valid
            /// format syntax.</summary>
            public const string COLUMN_FORMATS = "column_formats";

            /// <summary>For <i>delimited_text</i> <i>file_type</i> only.
            /// Specifies a comma-delimited list of column positions or names
            /// to load instead of loading all columns in the file(s); if more
            /// than one file is being loaded, the list of columns will apply
            /// to all files. Column numbers can be specified discretely or as
            /// a range, e.g., a value of '5,7,1..3' will create a table with
            /// the first column in the table being the fifth column in the
            /// file, followed by seventh column in the file, then the first
            /// column through the fourth column in the file.</summary>
            public const string COLUMNS_TO_LOAD = "columns_to_load";

            /// <summary>Specifies the default format to be applied to source
            /// data loaded into columns with the corresponding column
            /// property.  This default column-property-bound format can be
            /// overridden by specifying a column property & format for a given
            /// target column in <i>column_formats</i>. For each specified
            /// annotation, the format will apply to all columns with that
            /// annotation unless a custom <i>column_formats</i> for that
            /// annotation is specified. The parameter value must be formatted
            /// as a JSON string that is a map of column properties to their
            /// respective column formats, e.g., { "date" : "%Y.%m.%d", "time"
            /// : "%H:%M:%S" }. Column formats are specified as a string of
            /// control characters and plain text. The supported control
            /// characters are 'Y', 'm', 'd', 'H', 'M', 'S', and 's', which
            /// follow the Linux 'strptime()' specification, as well as 's',
            /// which specifies seconds and fractional seconds (though the
            /// fractional component will be truncated past milliseconds).
            /// Formats for the 'date' annotation must include the 'Y', 'm',
            /// and 'd' control characters. Formats for the 'time' annotation
            /// must include the 'H', 'M', and either 'S' or 's' (but not both)
            /// control characters. Formats for the 'datetime' annotation meet
            /// both the 'date' and 'time' control character requirements. For
            /// example, '{"datetime" : "%m/%d/%Y %H:%M:%S" }' would be used to
            /// interpret text as "05/04/2000 12:12:11"</summary>
            public const string DEFAULT_COLUMN_FORMATS = "default_column_formats";

            /// <summary>If set to <i>true</i>, no data will be inserted but
            /// the file will be read with the applied <i>error_handling</i>
            /// mode and the number of valid records that would be normally
            /// inserted are returned.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</summary>
            public const string DRY_RUN = "dry_run";
            public const string FALSE = "false";
            public const string TRUE = "true";

            /// <summary>Specifies how errors should be handled upon insertion.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:</term>
            ///         <description>Records with missing columns are populated
            /// with nulls if possible; otherwise, the malformed records are
            /// skipped.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:</term>
            ///         <description>Malformed records are
            /// skipped.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:</term>
            ///         <description>Stops current insertion and aborts entire
            /// operation when an error is encountered.</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>.</summary>
            public const string ERROR_HANDLING = "error_handling";

            /// <summary>Records with missing columns are populated with nulls
            /// if possible; otherwise, the malformed records are
            /// skipped.</summary>
            public const string PERMISSIVE = "permissive";

            /// <summary>Malformed records are skipped.</summary>
            public const string IGNORE_BAD_RECORDS = "ignore_bad_records";

            /// <summary>Stops current insertion and aborts entire operation
            /// when an error is encountered.</summary>
            public const string ABORT = "abort";

            /// <summary>File type for the file(s).
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>:</term>
            ///         <description>Indicates the file(s) are in delimited
            /// text format, e.g., CSV, TSV, PSV, etc.</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.</summary>
            public const string FILE_TYPE = "file_type";

            /// <summary>Indicates the file(s) are in delimited text format,
            /// e.g., CSV, TSV, PSV, etc.</summary>
            public const string DELIMITED_TEXT = "delimited_text";

            /// <summary>Specifies how to divide data loading among nodes.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:</term>
            ///         <description>The head node loads all data. All files
            /// must be available on the head node.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:</term>
            ///         <description>The worker nodes coordinate loading a set
            /// of files that are available to all of them. All files must be
            /// available on all nodes. This option is best when there is a
            /// shared file system.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:</term>
            ///         <description>Each worker node loads all files that are
            /// available to it. This option is best when each worker node has
            /// its own file system.</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.</summary>
            public const string LOADING_MODE = "loading_mode";

            /// <summary>The head node loads all data. All files must be
            /// available on the head node.</summary>
            public const string HEAD = "head";

            /// <summary>The worker nodes coordinate loading a set of files
            /// that are available to all of them. All files must be available
            /// on all nodes. This option is best when there is a shared file
            /// system.</summary>
            public const string DISTRIBUTED_SHARED = "distributed_shared";

            /// <summary>Each worker node loads all files that are available to
            /// it. This option is best when each worker node has its own file
            /// system.</summary>
            public const string DISTRIBUTED_LOCAL = "distributed_local";

            /// <summary>For <i>delimited_text</i> <i>file_type</i> only. All
            /// lines in the file(s) starting with the provided string are
            /// ignored. The comment string has no effect unless it appears at
            /// the beginning of a line.  The default value is '#'.</summary>
            public const string TEXT_COMMENT_STRING = "text_comment_string";

            /// <summary>For <i>delimited_text</i> <i>file_type</i> only.
            /// Specifies the delimiter for values and columns in the header
            /// row (if present). Must be a single character.  The default
            /// value is ','.</summary>
            public const string TEXT_DELIMITER = "text_delimiter";

            /// <summary>For <i>delimited_text</i> <i>file_type</i> only.  The
            /// character used in the file(s) to escape certain character
            /// sequences in text. For example, the escape character followed
            /// by a literal 'n' escapes to a newline character within the
            /// field. Can be used within quoted string to escape a quote
            /// character. An empty value for this option does not specify an
            /// escape character.</summary>
            public const string TEXT_ESCAPE_CHARACTER = "text_escape_character";

            /// <summary>For <i>delimited_text</i> <i>file_type</i> only.
            /// Indicates whether the delimited text files have a header row.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.</summary>
            public const string TEXT_HAS_HEADER = "text_has_header";

            /// <summary>For <i>delimited_text</i> <i>file_type</i> only.
            /// Specifies the delimiter for column properties in the header row
            /// (if present). Cannot be set to same value as text_delimiter.
            /// The default value is '|'.</summary>
            public const string TEXT_HEADER_PROPERTY_DELIMITER = "text_header_property_delimiter";

            /// <summary>For <i>delimited_text</i> <i>file_type</i> only. The
            /// value in the file(s) to treat as a null value in the database.
            /// The default value is ''.</summary>
            public const string TEXT_NULL_STRING = "text_null_string";

            /// <summary>For <i>delimited_text</i> <i>file_type</i> only. The
            /// quote character used in the file(s), typically encompassing a
            /// field value. The character must appear at beginning and end of
            /// field to take effect. Delimiters within quoted fields are not
            /// treated as delimiters. Within a quoted field, double quotes (")
            /// can be used to escape a single literal quote character. To not
            /// have a quote character, specify an empty string ("").  The
            /// default value is '"'.</summary>
            public const string TEXT_QUOTE_CHARACTER = "text_quote_character";

            /// <summary>If set to <i>true</i>, truncates the table specified
            /// by <see cref="table_name" /> prior to loading the file(s).
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</summary>
            public const string TRUNCATE_TABLE = "truncate_table";
        } // end struct Options


        /// <summary>Name of the table into which the data will be inserted. If
        /// the table does not exist, the table will be created using either an
        /// existing <i>type_id</i> or the type inferred from the file.
        /// </summary>
        public string table_name { get; set; }

        /// <summary>Absolute or relative filepath(s) from where files will be
        /// loaded. Relative filepaths are relative to the defined <a
        /// href="../../config/index.html#external-files"
        /// target="_top">external_files_directory</a> parameter in the server
        /// configuration. The filepaths may include wildcards (*). If the
        /// first path ends in .tsv, the text delimiter will be defaulted to a
        /// tab character. If the first path ends in .psv, the text delimiter
        /// will be defaulted to a pipe character (|).  </summary>
        public IList<string> filepaths { get; set; } = new List<string>();

        /// <summary>Options used when creating a new table.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:</term>
        ///         <description>ID of a currently registered <a
        /// href="../../concepts/types.html" target="_top">type</a>.  The
        /// default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If the collection provided is non-existent,
        /// the collection will be automatically created. If empty, then the
        /// newly created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>For a table, affects the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the table's data.  If
        /// true and the given type has no explicit <a
        /// href="../../concepts/tables.html#shard-key" target="_top">shard
        /// key</a> defined, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#sharding"
        /// target="_top">sharded</a> according to the shard key specified in
        /// the given <i>type_id</i>, or <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>, if no shard key is specified.
        /// Note that a type containing a shard key cannot be used to create a
        /// replicated table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:</term>
        ///         <description>Semicolon-separated list of <a
        /// href="../../concepts/tables.html#foreign-keys"
        /// target="_top">foreign keys</a>, of the format '(source_column_name
        /// [, ...]) references target_table_name(primary_key_column_name [,
        /// ...]) [as foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:</term>
        ///         <description>Foreign shard key of the format 'source_column
        /// references shard_by_column from
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:</term>
        ///         <description><a
        /// href="../../concepts/tables.html#partitioning"
        /// target="_top">Partitioning</a> scheme to use.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a>.</description>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:</term>
        ///         <description>Comma-separated list of partition keys, which
        /// are the columns or column expressions by which records will be
        /// assigned to partitions defined by
        /// <i>partition_definitions</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:</term>
        ///         <description>Comma-separated list of partition definitions,
        /// whose format depends on the choice of <i>partition_type</i>.  See
        /// <a href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>, or <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a> for example
        /// formats.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:</term>
        ///         <description>If true, a new partition will be created for
        /// values which don't fall into an existing partition.  Currently only
        /// supported for <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitions</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TTL">TTL</see>:</term>
        ///         <description>For a table, sets the <a
        /// href="../../concepts/ttl.html" target="_top">TTL</a> of the table
        /// specified in <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:</term>
        ///         <description>For a table, indicates whether the table is an
        /// in-memory table. A result table cannot contain store_only,
        /// text_search, or string columns (charN columns are acceptable), and
        /// it will not be retained if the server is restarted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>The <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns. See <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../rm/usage.html#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> create_table_options { get; set; } = new Dictionary<string, string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:</term>
        ///         <description>Specifies number of records to process before
        /// inserting.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:</term>
        ///         <description>For each target column specified, applies the
        /// column-property-bound format to the source data loaded into that
        /// column.  Each column format will contain a mapping of one or more
        /// of its column properties to an appropriate format for each
        /// property.  Currently supported column properties include date,
        /// time, & datetime. The parameter value must be formatted as a JSON
        /// string of maps of column names to maps of column properties to
        /// their corresponding column formats, e.g., { "order_date" : { "date"
        /// : "%Y.%m.%d" }, "order_time" : { "time" : "%H:%M:%S" } }.  See
        /// <i>default_column_formats</i> for valid format
        /// syntax.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies a comma-delimited list of column positions or names
        /// to load instead of loading all columns in the file(s); if more than
        /// one file is being loaded, the list of columns will apply to all
        /// files. Column numbers can be specified discretely or as a range,
        /// e.g., a value of '5,7,1..3' will create a table with the first
        /// column in the table being the fifth column in the file, followed by
        /// seventh column in the file, then the first column through the
        /// fourth column in the file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:</term>
        ///         <description>Specifies the default format to be applied to
        /// source data loaded into columns with the corresponding column
        /// property.  This default column-property-bound format can be
        /// overridden by specifying a column property & format for a given
        /// target column in <i>column_formats</i>. For each specified
        /// annotation, the format will apply to all columns with that
        /// annotation unless a custom <i>column_formats</i> for that
        /// annotation is specified. The parameter value must be formatted as a
        /// JSON string that is a map of column properties to their respective
        /// column formats, e.g., { "date" : "%Y.%m.%d", "time" : "%H:%M:%S" }.
        /// Column formats are specified as a string of control characters and
        /// plain text. The supported control characters are 'Y', 'm', 'd',
        /// 'H', 'M', 'S', and 's', which follow the Linux 'strptime()'
        /// specification, as well as 's', which specifies seconds and
        /// fractional seconds (though the fractional component will be
        /// truncated past milliseconds). Formats for the 'date' annotation
        /// must include the 'Y', 'm', and 'd' control characters. Formats for
        /// the 'time' annotation must include the 'H', 'M', and either 'S' or
        /// 's' (but not both) control characters. Formats for the 'datetime'
        /// annotation meet both the 'date' and 'time' control character
        /// requirements. For example, '{"datetime" : "%m/%d/%Y %H:%M:%S" }'
        /// would be used to interpret text as "05/04/2000
        /// 12:12:11"</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be
        /// inserted but the file will be read with the applied
        /// <i>error_handling</i> mode and the number of valid records that
        /// would be normally inserted are returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:</term>
        ///         <description>Specifies how errors should be handled upon
        /// insertion.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:</term>
        ///         <description>Records with missing columns are populated
        /// with nulls if possible; otherwise, the malformed records are
        /// skipped.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:</term>
        ///         <description>Malformed records are skipped.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:</term>
        ///         <description>Stops current insertion and aborts entire
        /// operation when an error is encountered.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>:</term>
        ///         <description>File type for the file(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>:</term>
        ///         <description>Indicates the file(s) are in delimited text
        /// format, e.g., CSV, TSV, PSV, etc.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.LOADING_MODE">LOADING_MODE</see>:</term>
        ///         <description>Specifies how to divide data loading among
        /// nodes.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:</term>
        ///         <description>The head node loads all data. All files must
        /// be available on the head node.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:</term>
        ///         <description>The worker nodes coordinate loading a set of
        /// files that are available to all of them. All files must be
        /// available on all nodes. This option is best when there is a shared
        /// file system.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:</term>
        ///         <description>Each worker node loads all files that are
        /// available to it. This option is best when each worker node has its
        /// own file system.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. All lines in the file(s) starting with the provided string
        /// are ignored. The comment string has no effect unless it appears at
        /// the beginning of a line.  The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies the delimiter for values and columns in the header
        /// row (if present). Must be a single character.  The default value is
        /// ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only.  The character used in the file(s) to escape certain
        /// character sequences in text. For example, the escape character
        /// followed by a literal 'n' escapes to a newline character within the
        /// field. Can be used within quoted string to escape a quote
        /// character. An empty value for this option does not specify an
        /// escape character.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Indicates whether the delimited text files have a header row.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies the delimiter for column properties in the header
        /// row (if present). Cannot be set to same value as text_delimiter.
        /// The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. The value in the file(s) to treat as a null value in the
        /// database.  The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. The quote character used in the file(s), typically
        /// encompassing a field value. The character must appear at beginning
        /// and end of field to take effect. Delimiters within quoted fields
        /// are not treated as delimiters. Within a quoted field, double quotes
        /// (") can be used to escape a single literal quote character. To not
        /// have a quote character, specify an empty string ("").  The default
        /// value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:</term>
        ///         <description>If set to <i>true</i>, truncates the table
        /// specified by <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" /> prior to loading
        /// the file(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an InsertRecordsFromFilesRequest object with
        /// default parameters.</summary>
        public InsertRecordsFromFilesRequest() { }

        /// <summary>Constructs an InsertRecordsFromFilesRequest object with
        /// the specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table into which the data will
        /// be inserted. If the table does not exist, the table will be created
        /// using either an existing <i>type_id</i> or the type inferred from
        /// the file.  </param>
        /// <param name="filepaths">Absolute or relative filepath(s) from where
        /// files will be loaded. Relative filepaths are relative to the
        /// defined <a href="../../config/index.html#external-files"
        /// target="_top">external_files_directory</a> parameter in the server
        /// configuration. The filepaths may include wildcards (*). If the
        /// first path ends in .tsv, the text delimiter will be defaulted to a
        /// tab character. If the first path ends in .psv, the text delimiter
        /// will be defaulted to a pipe character (|).  </param>
        /// <param name="create_table_options">Options used when creating a new
        /// table.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:</term>
        ///         <description>ID of a currently registered <a
        /// href="../../concepts/types.html" target="_top">type</a>.  The
        /// default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If the collection provided is non-existent,
        /// the collection will be automatically created. If empty, then the
        /// newly created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>For a table, affects the <a
        /// href="../../concepts/tables.html#distribution"
        /// target="_top">distribution scheme</a> for the table's data.  If
        /// true and the given type has no explicit <a
        /// href="../../concepts/tables.html#shard-key" target="_top">shard
        /// key</a> defined, the table will be <a
        /// href="../../concepts/tables.html#replication"
        /// target="_top">replicated</a>.  If false, the table will be <a
        /// href="../../concepts/tables.html#sharding"
        /// target="_top">sharded</a> according to the shard key specified in
        /// the given <i>type_id</i>, or <a
        /// href="../../concepts/tables.html#random-sharding"
        /// target="_top">randomly sharded</a>, if no shard key is specified.
        /// Note that a type containing a shard key cannot be used to create a
        /// replicated table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:</term>
        ///         <description>Semicolon-separated list of <a
        /// href="../../concepts/tables.html#foreign-keys"
        /// target="_top">foreign keys</a>, of the format '(source_column_name
        /// [, ...]) references target_table_name(primary_key_column_name [,
        /// ...]) [as foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:</term>
        ///         <description>Foreign shard key of the format 'source_column
        /// references shard_by_column from
        /// target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:</term>
        ///         <description><a
        /// href="../../concepts/tables.html#partitioning"
        /// target="_top">Partitioning</a> scheme to use.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:</term>
        ///         <description>Use <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a>.</description>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:</term>
        ///         <description>Comma-separated list of partition keys, which
        /// are the columns or column expressions by which records will be
        /// assigned to partitions defined by
        /// <i>partition_definitions</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:</term>
        ///         <description>Comma-separated list of partition definitions,
        /// whose format depends on the choice of <i>partition_type</i>.  See
        /// <a href="../../concepts/tables.html#partitioning-by-range"
        /// target="_top">range partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-interval"
        /// target="_top">interval partitioning</a>, <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitioning</a>, or <a
        /// href="../../concepts/tables.html#partitioning-by-hash"
        /// target="_top">hash partitioning</a> for example
        /// formats.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:</term>
        ///         <description>If true, a new partition will be created for
        /// values which don't fall into an existing partition.  Currently only
        /// supported for <a
        /// href="../../concepts/tables.html#partitioning-by-list"
        /// target="_top">list partitions</a>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TTL">TTL</see>:</term>
        ///         <description>For a table, sets the <a
        /// href="../../concepts/ttl.html" target="_top">TTL</a> of the table
        /// specified in <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Indicates the number of records per chunk to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:</term>
        ///         <description>For a table, indicates whether the table is an
        /// in-memory table. A result table cannot contain store_only,
        /// text_search, or string columns (charN columns are acceptable), and
        /// it will not be retained if the server is restarted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>The <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns. See <a
        /// href="../../rm/concepts.html#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../rm/usage.html#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:</term>
        ///         <description>Specifies number of records to process before
        /// inserting.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:</term>
        ///         <description>For each target column specified, applies the
        /// column-property-bound format to the source data loaded into that
        /// column.  Each column format will contain a mapping of one or more
        /// of its column properties to an appropriate format for each
        /// property.  Currently supported column properties include date,
        /// time, & datetime. The parameter value must be formatted as a JSON
        /// string of maps of column names to maps of column properties to
        /// their corresponding column formats, e.g., { "order_date" : { "date"
        /// : "%Y.%m.%d" }, "order_time" : { "time" : "%H:%M:%S" } }.  See
        /// <i>default_column_formats</i> for valid format
        /// syntax.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies a comma-delimited list of column positions or names
        /// to load instead of loading all columns in the file(s); if more than
        /// one file is being loaded, the list of columns will apply to all
        /// files. Column numbers can be specified discretely or as a range,
        /// e.g., a value of '5,7,1..3' will create a table with the first
        /// column in the table being the fifth column in the file, followed by
        /// seventh column in the file, then the first column through the
        /// fourth column in the file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:</term>
        ///         <description>Specifies the default format to be applied to
        /// source data loaded into columns with the corresponding column
        /// property.  This default column-property-bound format can be
        /// overridden by specifying a column property & format for a given
        /// target column in <i>column_formats</i>. For each specified
        /// annotation, the format will apply to all columns with that
        /// annotation unless a custom <i>column_formats</i> for that
        /// annotation is specified. The parameter value must be formatted as a
        /// JSON string that is a map of column properties to their respective
        /// column formats, e.g., { "date" : "%Y.%m.%d", "time" : "%H:%M:%S" }.
        /// Column formats are specified as a string of control characters and
        /// plain text. The supported control characters are 'Y', 'm', 'd',
        /// 'H', 'M', 'S', and 's', which follow the Linux 'strptime()'
        /// specification, as well as 's', which specifies seconds and
        /// fractional seconds (though the fractional component will be
        /// truncated past milliseconds). Formats for the 'date' annotation
        /// must include the 'Y', 'm', and 'd' control characters. Formats for
        /// the 'time' annotation must include the 'H', 'M', and either 'S' or
        /// 's' (but not both) control characters. Formats for the 'datetime'
        /// annotation meet both the 'date' and 'time' control character
        /// requirements. For example, '{"datetime" : "%m/%d/%Y %H:%M:%S" }'
        /// would be used to interpret text as "05/04/2000
        /// 12:12:11"</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>If set to <i>true</i>, no data will be
        /// inserted but the file will be read with the applied
        /// <i>error_handling</i> mode and the number of valid records that
        /// would be normally inserted are returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:</term>
        ///         <description>Specifies how errors should be handled upon
        /// insertion.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:</term>
        ///         <description>Records with missing columns are populated
        /// with nulls if possible; otherwise, the malformed records are
        /// skipped.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:</term>
        ///         <description>Malformed records are skipped.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:</term>
        ///         <description>Stops current insertion and aborts entire
        /// operation when an error is encountered.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>:</term>
        ///         <description>File type for the file(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>:</term>
        ///         <description>Indicates the file(s) are in delimited text
        /// format, e.g., CSV, TSV, PSV, etc.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.LOADING_MODE">LOADING_MODE</see>:</term>
        ///         <description>Specifies how to divide data loading among
        /// nodes.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:</term>
        ///         <description>The head node loads all data. All files must
        /// be available on the head node.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:</term>
        ///         <description>The worker nodes coordinate loading a set of
        /// files that are available to all of them. All files must be
        /// available on all nodes. This option is best when there is a shared
        /// file system.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:</term>
        ///         <description>Each worker node loads all files that are
        /// available to it. This option is best when each worker node has its
        /// own file system.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. All lines in the file(s) starting with the provided string
        /// are ignored. The comment string has no effect unless it appears at
        /// the beginning of a line.  The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies the delimiter for values and columns in the header
        /// row (if present). Must be a single character.  The default value is
        /// ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only.  The character used in the file(s) to escape certain
        /// character sequences in text. For example, the escape character
        /// followed by a literal 'n' escapes to a newline character within the
        /// field. Can be used within quoted string to escape a quote
        /// character. An empty value for this option does not specify an
        /// escape character.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Indicates whether the delimited text files have a header row.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. Specifies the delimiter for column properties in the header
        /// row (if present). Cannot be set to same value as text_delimiter.
        /// The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. The value in the file(s) to treat as a null value in the
        /// database.  The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:</term>
        ///         <description>For <i>delimited_text</i> <i>file_type</i>
        /// only. The quote character used in the file(s), typically
        /// encompassing a field value. The character must appear at beginning
        /// and end of field to take effect. Delimiters within quoted fields
        /// are not treated as delimiters. Within a quoted field, double quotes
        /// (") can be used to escape a single literal quote character. To not
        /// have a quote character, specify an empty string ("").  The default
        /// value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:</term>
        ///         <description>If set to <i>true</i>, truncates the table
        /// specified by <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" /> prior to loading
        /// the file(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public InsertRecordsFromFilesRequest( string table_name,
                                              IList<string> filepaths,
                                              IDictionary<string, string> create_table_options = null,
                                              IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.filepaths = filepaths ?? new List<string>();
            this.create_table_options = create_table_options ?? new Dictionary<string, string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class InsertRecordsFromFilesRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.insertRecordsFromFiles(string,IList{string},IDictionary{string, string},IDictionary{string, string})"
    /// />.</summary>
    public class InsertRecordsFromFilesResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="InsertRecordsFromFilesRequest.table_name" />.  </summary>
        public string table_name { get; set; }

        /// <summary>Type ID for the table.  </summary>
        public string type_id { get; set; }

        /// <summary>Number of records inserted.  </summary>
        public long count_inserted { get; set; }

        /// <summary>Number of records skipped when not running in <i>abort</i>
        /// error handling mode.  </summary>
        public long count_skipped { get; set; }

        /// <summary>Number of records updated.  The default value is
        /// -1.</summary>
        public long count_updated { get; set; } = -1;

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class InsertRecordsFromFilesResponse




}  // end namespace kinetica
