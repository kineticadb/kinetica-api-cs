/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /show/proc.
    /// <br />
    /// Shows information about a proc.</summary>
    public class ShowProcRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>include_files</term>
        ///         <description>If set to <i>true</i>, the files that make up
        /// the proc will be returned. If set to <i>false</i>, the files will
        /// not be returned. Values: true, false.
        /// </description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If set to <i>true</i>, the files that make up the proc
            /// will be returned. If set to <i>false</i>, the files will not be
            /// returned. Values: true, false.
            /// </summary>
            public const string INCLUDE_FILES = "include_files";
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct Options


        /// <summary>Name of the proc to show information about. If specified,
        /// must be the name of a currently existing proc. If not specified,
        /// information about all procs will be returned.  </summary>
        public string proc_name { get; set; } = "";

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>include_files</term>
        ///         <description>If set to <i>true</i>, the files that make up
        /// the proc will be returned. If set to <i>false</i>, the files will
        /// not be returned. Values: true, false.
        /// </description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a ShowProcRequest object with default
        /// parameters.</summary>
        public ShowProcRequest() { }

        /// <summary>Constructs a ShowProcRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="proc_name">Name of the proc to show information about.
        /// If specified, must be the name of a currently existing proc. If not
        /// specified, information about all procs will be returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>include_files</term>
        ///         <description>If set to <i>true</i>, the files that make up
        /// the proc will be returned. If set to <i>false</i>, the files will
        /// not be returned. Values: true, false.
        /// </description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public ShowProcRequest( string proc_name = null,
                                IDictionary<string, string> options = null)
        {
            this.proc_name = proc_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class ShowProcRequest



    /// <summary>A set of results returned by /show/proc.</summary>
    public class ShowProcResponse : KineticaData
    {

        /// <summary>The execution modes of the procs named in <member
        /// name="proc_names" />. Values: .
        /// <br />
        /// A set of string constants for the parameter <member
        /// name="execution_modes" />.</summary>
        public struct ExecutionModes
        {

            /// <summary>Distributed</summary>
            public const string DISTRIBUTED = "distributed";

            /// <summary>Nondistributed</summary>
            public const string NONDISTRIBUTED = "nondistributed";
        } // end struct ExecutionModes


        /// <summary>The proc names.  </summary>
        public IList<string> proc_names { get; set; } = new List<string>();

        /// <summary>The execution modes of the procs named in <member
        /// name="proc_names" />. Values: .
        ///   </summary>
        public IList<string> execution_modes { get; set; } = new List<string>();

        /// <summary>Maps of the files that make up the procs named in <member
        /// name="proc_names" />.  </summary>
        public IList<IDictionary<string, byte[]>> files { get; set; } = new List<IDictionary<string, byte[]>>();

        /// <summary>The commands (excluding arguments) that will be invoked
        /// when the procs named in <member name="proc_names" /> are executed.
        /// </summary>
        public IList<string> commands { get; set; } = new List<string>();

        /// <summary>Arrays of command-line arguments that will be passed to
        /// the procs named in <member name="proc_names" /> when executed.
        /// </summary>
        public IList<IList<string>> args { get; set; } = new List<IList<string>>();

        /// <summary>The optional parameters for the procs named in <member
        /// name="proc_names" />.  </summary>
        public IList<IDictionary<string, string>> options { get; set; } = new List<IDictionary<string, string>>();

    } // end class ShowProcResponse




}  // end namespace kinetica
