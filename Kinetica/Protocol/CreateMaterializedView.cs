/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.createMaterializedView(string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Initiates the process of creating a materialized view, reserving the
    /// view's name to prevent other views or tables from being created with
    /// that name.
    /// <br />
    /// For materialized view details and examples, see <a
    /// href="../../concepts/materialized_views.html"
    /// target="_top">Materialized Views</a>.
    /// <br />
    /// The response contains <member name="view_id" />, which is used to tag
    /// each subsequent operation (projection, union, group-by, filter, or
    /// join) that will compose the view.</summary>
    public class CreateMaterializedViewRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created view. If the collection provided is non-existent, the
        /// collection will be automatically created. If empty, then the newly
        /// created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">TTL</a> of the table specified in <paramref
        /// cref="CreateMaterializedViewRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.PERSIST">PERSIST</see>:</term>
        ///         <description>If <i>true</i>, then the materialized view
        /// specified in <paramref
        /// cref="CreateMaterializedViewRequest.table_name" /> will be
        /// persisted and will not expire unless a <i>ttl</i> is specified.
        /// If <i>false</i>, then the materialized view will be an in-memory
        /// table and will expire unless a <i>ttl</i> is specified otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>:</term>
        ///         <description>Method by which the join can be refreshed when
        /// the data in underlying member tables have changed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>:</term>
        ///         <description>Refresh only occurs when manually requested by
        /// calling alter_table with action refresh_view</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.ON_QUERY">ON_QUERY</see>:</term>
        ///         <description>Incrementally refresh (refresh just those
        /// records added) whenever a new query is issued and new data is
        /// inserted into the base table.  A full refresh of all the records
        /// occurs when a new query is issued and there have been inserts to
        /// any non-base-tables since the last query</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.ON_CHANGE">ON_CHANGE</see>:</term>
        ///         <description>If possible, incrementally refresh (refresh
        /// just those records added) whenever an insert, update, delete or
        /// refresh of input table is done.  A full refresh on_query is done if
        /// an incremental refresh is not possible. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.PERIODIC">PERIODIC</see>:</term>
        ///         <description>Refresh table periodically at rate specified
        /// by refresh_period option</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_PERIOD">REFRESH_PERIOD</see>:</term>
        ///         <description>When refresh_method is periodic specifies the
        /// period in seconds at which refresh occurs</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_START_TIME">REFRESH_START_TIME</see>:</term>
        ///         <description>First time at which a periodic refresh is to
        /// be done.  Value is a datatime string with format YYYY-MM-DD
        /// HH:MM:SS.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Name of a collection which is to contain the newly
            /// created view. If the collection provided is non-existent, the
            /// collection will be automatically created. If empty, then the
            /// newly created table will be a top-level table.</summary>
            public const string COLLECTION_NAME = "collection_name";

            /// <summary>Sets the <a href="../../concepts/ttl.html"
            /// target="_top">TTL</a> of the table specified in <see
            /// cref="table_name" />.</summary>
            public const string TTL = "ttl";

            /// <summary>If <i>true</i>, then the materialized view specified
            /// in <see cref="table_name" /> will be persisted and will not
            /// expire unless a <i>ttl</i> is specified.   If <i>false</i>,
            /// then the materialized view will be an in-memory table and will
            /// expire unless a <i>ttl</i> is specified otherwise.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateMaterializedViewRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see>.</summary>
            public const string PERSIST = "persist";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Method by which the join can be refreshed when the
            /// data in underlying member tables have changed.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>:</term>
            ///         <description>Refresh only occurs when manually
            /// requested by calling alter_table with action
            /// refresh_view</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateMaterializedViewRequest.Options.ON_QUERY">ON_QUERY</see>:</term>
            ///         <description>Incrementally refresh (refresh just those
            /// records added) whenever a new query is issued and new data is
            /// inserted into the base table.  A full refresh of all the
            /// records occurs when a new query is issued and there have been
            /// inserts to any non-base-tables since the last
            /// query</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateMaterializedViewRequest.Options.ON_CHANGE">ON_CHANGE</see>:</term>
            ///         <description>If possible, incrementally refresh
            /// (refresh just those records added) whenever an insert, update,
            /// delete or refresh of input table is done.  A full refresh
            /// on_query is done if an incremental refresh is not possible.
            /// </description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateMaterializedViewRequest.Options.PERIODIC">PERIODIC</see>:</term>
            ///         <description>Refresh table periodically at rate
            /// specified by refresh_period option</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>.</summary>
            public const string REFRESH_METHOD = "refresh_method";

            /// <summary>Refresh only occurs when manually requested by calling
            /// alter_table with action refresh_view</summary>
            public const string MANUAL = "manual";

            /// <summary>Incrementally refresh (refresh just those records
            /// added) whenever a new query is issued and new data is inserted
            /// into the base table.  A full refresh of all the records occurs
            /// when a new query is issued and there have been inserts to any
            /// non-base-tables since the last query</summary>
            public const string ON_QUERY = "on_query";

            /// <summary>If possible, incrementally refresh (refresh just those
            /// records added) whenever an insert, update, delete or refresh of
            /// input table is done.  A full refresh on_query is done if an
            /// incremental refresh is not possible. </summary>
            public const string ON_CHANGE = "on_change";

            /// <summary>Refresh table periodically at rate specified by
            /// refresh_period option</summary>
            public const string PERIODIC = "periodic";

            /// <summary>When refresh_method is periodic specifies the period
            /// in seconds at which refresh occurs</summary>
            public const string REFRESH_PERIOD = "refresh_period";

            /// <summary>First time at which a periodic refresh is to be done.
            /// Value is a datatime string with format YYYY-MM-DD
            /// HH:MM:SS.</summary>
            public const string REFRESH_START_TIME = "refresh_start_time";
        } // end struct Options


        /// <summary>Name of the table to be created that is the top-level
        /// table of the materialized view.  </summary>
        public string table_name { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created view. If the collection provided is non-existent, the
        /// collection will be automatically created. If empty, then the newly
        /// created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">TTL</a> of the table specified in <paramref
        /// cref="CreateMaterializedViewRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.PERSIST">PERSIST</see>:</term>
        ///         <description>If <i>true</i>, then the materialized view
        /// specified in <paramref
        /// cref="CreateMaterializedViewRequest.table_name" /> will be
        /// persisted and will not expire unless a <i>ttl</i> is specified.
        /// If <i>false</i>, then the materialized view will be an in-memory
        /// table and will expire unless a <i>ttl</i> is specified otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>:</term>
        ///         <description>Method by which the join can be refreshed when
        /// the data in underlying member tables have changed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>:</term>
        ///         <description>Refresh only occurs when manually requested by
        /// calling alter_table with action refresh_view</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.ON_QUERY">ON_QUERY</see>:</term>
        ///         <description>Incrementally refresh (refresh just those
        /// records added) whenever a new query is issued and new data is
        /// inserted into the base table.  A full refresh of all the records
        /// occurs when a new query is issued and there have been inserts to
        /// any non-base-tables since the last query</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.ON_CHANGE">ON_CHANGE</see>:</term>
        ///         <description>If possible, incrementally refresh (refresh
        /// just those records added) whenever an insert, update, delete or
        /// refresh of input table is done.  A full refresh on_query is done if
        /// an incremental refresh is not possible. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.PERIODIC">PERIODIC</see>:</term>
        ///         <description>Refresh table periodically at rate specified
        /// by refresh_period option</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_PERIOD">REFRESH_PERIOD</see>:</term>
        ///         <description>When refresh_method is periodic specifies the
        /// period in seconds at which refresh occurs</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_START_TIME">REFRESH_START_TIME</see>:</term>
        ///         <description>First time at which a periodic refresh is to
        /// be done.  Value is a datatime string with format YYYY-MM-DD
        /// HH:MM:SS.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a CreateMaterializedViewRequest object with
        /// default parameters.</summary>
        public CreateMaterializedViewRequest() { }

        /// <summary>Constructs a CreateMaterializedViewRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table to be created that is
        /// the top-level table of the materialized view.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created view. If the collection provided is non-existent, the
        /// collection will be automatically created. If empty, then the newly
        /// created table will be a top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">TTL</a> of the table specified in <paramref
        /// cref="CreateMaterializedViewRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.PERSIST">PERSIST</see>:</term>
        ///         <description>If <i>true</i>, then the materialized view
        /// specified in <paramref
        /// cref="CreateMaterializedViewRequest.table_name" /> will be
        /// persisted and will not expire unless a <i>ttl</i> is specified.
        /// If <i>false</i>, then the materialized view will be an in-memory
        /// table and will expire unless a <i>ttl</i> is specified otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>:</term>
        ///         <description>Method by which the join can be refreshed when
        /// the data in underlying member tables have changed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>:</term>
        ///         <description>Refresh only occurs when manually requested by
        /// calling alter_table with action refresh_view</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.ON_QUERY">ON_QUERY</see>:</term>
        ///         <description>Incrementally refresh (refresh just those
        /// records added) whenever a new query is issued and new data is
        /// inserted into the base table.  A full refresh of all the records
        /// occurs when a new query is issued and there have been inserts to
        /// any non-base-tables since the last query</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.ON_CHANGE">ON_CHANGE</see>:</term>
        ///         <description>If possible, incrementally refresh (refresh
        /// just those records added) whenever an insert, update, delete or
        /// refresh of input table is done.  A full refresh on_query is done if
        /// an incremental refresh is not possible. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.PERIODIC">PERIODIC</see>:</term>
        ///         <description>Refresh table periodically at rate specified
        /// by refresh_period option</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_PERIOD">REFRESH_PERIOD</see>:</term>
        ///         <description>When refresh_method is periodic specifies the
        /// period in seconds at which refresh occurs</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateMaterializedViewRequest.Options.REFRESH_START_TIME">REFRESH_START_TIME</see>:</term>
        ///         <description>First time at which a periodic refresh is to
        /// be done.  Value is a datatime string with format YYYY-MM-DD
        /// HH:MM:SS.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public CreateMaterializedViewRequest( string table_name,
                                              IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class CreateMaterializedViewRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.createMaterializedView(string,IDictionary{string, string})"
    /// />.</summary>
    public class CreateMaterializedViewResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="CreateMaterializedViewRequest.table_name" />.  </summary>
        public string table_name { get; set; }

        /// <summary>Value of view_id.  </summary>
        public string view_id { get; set; }

    } // end class CreateMaterializedViewResponse




}  // end namespace kinetica
