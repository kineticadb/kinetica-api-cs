/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{
    /// @cond NO_DOCS
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminAlterShards(long,bool,IList{int},IList{int},IList{int},IList{int},IList{IList{int}},IDictionary{string, string})"
    /// />.
    /// <br />
    /// </summary>
    public class AdminAlterShardsRequest : KineticaData
    {
        public long version { get; set; }
        public bool use_index { get; set; }
        public IList<int> rank { get; set; } = new List<int>();
        public IList<int> tom { get; set; } = new List<int>();
        public IList<int> index { get; set; } = new List<int>();
        public IList<int> backup_map_list { get; set; } = new List<int>();
        public IList<IList<int>> backup_map_values { get; set; } = new List<IList<int>>();
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AdminAlterShardsRequest object with default
        /// parameters.</summary>
        public AdminAlterShardsRequest() { }

        /// <summary>Constructs an AdminAlterShardsRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="version"></param>
        /// <param name="use_index"></param>
        /// <param name="rank"></param>
        /// <param name="tom"></param>
        /// <param name="index"></param>
        /// <param name="backup_map_list"></param>
        /// <param name="backup_map_values"></param>
        /// <param name="options"></param>
        /// 
        public AdminAlterShardsRequest( long version,
                                        bool use_index,
                                        IList<int> rank,
                                        IList<int> tom,
                                        IList<int> index,
                                        IList<int> backup_map_list,
                                        IList<IList<int>> backup_map_values,
                                        IDictionary<string, string> options = null)
        {
            this.version = version;
            this.use_index = use_index;
            this.rank = rank ?? new List<int>();
            this.tom = tom ?? new List<int>();
            this.index = index ?? new List<int>();
            this.backup_map_list = backup_map_list ?? new List<int>();
            this.backup_map_values = backup_map_values ?? new List<IList<int>>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AdminAlterShardsRequest
    /// @endcond



    /// @cond NO_DOCS
    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminAlterShards(long,bool,IList{int},IList{int},IList{int},IList{int},IList{IList{int}},IDictionary{string, string})"
    /// />.</summary>
    public class AdminAlterShardsResponse : KineticaData
    {
        public long version { get; set; }
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AdminAlterShardsResponse
    /// @endcond





}  // end namespace kinetica
