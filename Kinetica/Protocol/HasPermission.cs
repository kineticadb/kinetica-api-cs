/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.hasPermission(string,string,string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Checks if the specified user has the specified permission on the
    /// specified object.</summary>
    public class HasPermissionRequest : KineticaData
    {

        /// <summary>Permission to check for.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CONNECT">CONNECT</see>:</term>
        ///         <description>Connect access on the given data
        /// source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CREDENTIAL_ADMIN">CREDENTIAL_ADMIN</see>:</term>
        ///         <description>Full read/write and administrative access on
        /// the credential.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CREDENTIAL_READ">CREDENTIAL_READ</see>:</term>
        ///         <description>Ability to read and use the
        /// credential.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.DIRECTORY_READ">DIRECTORY_READ</see>:</term>
        ///         <description>For files in the directory, access to list
        /// files, download files, or use files in server side
        /// functions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.DIRECTORY_WRITE">DIRECTORY_WRITE</see>:</term>
        ///         <description>Access to upload files to, or delete files
        /// from, the directory. A user with write access automatically has
        /// read access</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.PROC_EXECUTE">PROC_EXECUTE</see>:</term>
        ///         <description>Execute access to the UDF.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.ROLE">ROLE</see>:</term>
        ///         <description>User is a member of this role (including
        /// indirectly).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SQL_PROC_EXECUTE">SQL_PROC_EXECUTE</see>:</term>
        ///         <description>Execute access to the SQL proc.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_ADMIN">SYSTEM_ADMIN</see>:</term>
        ///         <description>Full access to all data and system
        /// functions.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_READ">SYSTEM_READ</see>:</term>
        ///         <description>Read-only access to all tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_USER_ADMIN">SYSTEM_USER_ADMIN</see>:</term>
        ///         <description>Access to administer users and roles that do
        /// not have system_admin permission.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_WRITE">SYSTEM_WRITE</see>:</term>
        ///         <description>Read and write access to all
        /// tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_ADMIN">TABLE_ADMIN</see>:</term>
        ///         <description>Full read/write and administrative access to
        /// the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_DELETE">TABLE_DELETE</see>:</term>
        ///         <description>Delete access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_INSERT">TABLE_INSERT</see>:</term>
        ///         <description>Insert access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_READ">TABLE_READ</see>:</term>
        ///         <description>Read access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_UPDATE">TABLE_UPDATE</see>:</term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <see cref="permission"
        /// />.</summary>
        public struct Permission
        {

            /// <summary>Connect access on the given data source</summary>
            public const string CONNECT = "connect";

            /// <summary>Full read/write and administrative access on the
            /// credential.</summary>
            public const string CREDENTIAL_ADMIN = "credential_admin";

            /// <summary>Ability to read and use the credential.</summary>
            public const string CREDENTIAL_READ = "credential_read";

            /// <summary>For files in the directory, access to list files,
            /// download files, or use files in server side functions</summary>
            public const string DIRECTORY_READ = "directory_read";

            /// <summary>Access to upload files to, or delete files from, the
            /// directory. A user with write access automatically has read
            /// access</summary>
            public const string DIRECTORY_WRITE = "directory_write";

            /// <summary>Execute access to the UDF.</summary>
            public const string PROC_EXECUTE = "proc_execute";

            /// <summary>User is a member of this role (including
            /// indirectly).</summary>
            public const string ROLE = "role";

            /// <summary>Execute access to the SQL proc.</summary>
            public const string SQL_PROC_EXECUTE = "sql_proc_execute";

            /// <summary>Full access to all data and system
            /// functions.</summary>
            public const string SYSTEM_ADMIN = "system_admin";

            /// <summary>Read-only access to all tables.</summary>
            public const string SYSTEM_READ = "system_read";

            /// <summary>Access to administer users and roles that do not have
            /// system_admin permission.</summary>
            public const string SYSTEM_USER_ADMIN = "system_user_admin";

            /// <summary>Read and write access to all tables.</summary>
            public const string SYSTEM_WRITE = "system_write";

            /// <summary>Full read/write and administrative access to the
            /// table.</summary>
            public const string TABLE_ADMIN = "table_admin";

            /// <summary>Delete access to the table.</summary>
            public const string TABLE_DELETE = "table_delete";

            /// <summary>Insert access to the table.</summary>
            public const string TABLE_INSERT = "table_insert";

            /// <summary>Read access to the table.</summary>
            public const string TABLE_READ = "table_read";

            /// <summary>Update access to the table.</summary>
            public const string TABLE_UPDATE = "table_update";
        } // end struct Permission


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="HasPermissionRequest.target" /> does not
        /// exist or is blank. If <i>true</i> then it will return <i>false</i>
        /// for <member name="has_permission" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="HasPermissionRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>false</i> will return an error if the provided
            /// <see cref="target" /> does not exist or is blank. If
            /// <i>true</i> then it will return <i>false</i> for <member
            /// name="has_permission" />.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="HasPermissionRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="HasPermissionRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="HasPermissionRequest.Options.FALSE">FALSE</see>.</summary>
            public const string NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct Options


        /// <summary>Name of the user for which the permission is being
        /// checked. Must be an existing user. If blank, will use the current
        /// user.  The default value is ''.</summary>
        public string name { get; set; } = "";

        /// <summary>Name of object to check for the requested permission.  It
        /// is recommended to use a fully-qualified name when possible.
        /// </summary>
        public string target { get; set; }

        /// <summary>Permission to check for.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CONNECT">CONNECT</see>:</term>
        ///         <description>Connect access on the given data
        /// source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CREDENTIAL_ADMIN">CREDENTIAL_ADMIN</see>:</term>
        ///         <description>Full read/write and administrative access on
        /// the credential.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CREDENTIAL_READ">CREDENTIAL_READ</see>:</term>
        ///         <description>Ability to read and use the
        /// credential.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.DIRECTORY_READ">DIRECTORY_READ</see>:</term>
        ///         <description>For files in the directory, access to list
        /// files, download files, or use files in server side
        /// functions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.DIRECTORY_WRITE">DIRECTORY_WRITE</see>:</term>
        ///         <description>Access to upload files to, or delete files
        /// from, the directory. A user with write access automatically has
        /// read access</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.PROC_EXECUTE">PROC_EXECUTE</see>:</term>
        ///         <description>Execute access to the UDF.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.ROLE">ROLE</see>:</term>
        ///         <description>User is a member of this role (including
        /// indirectly).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SQL_PROC_EXECUTE">SQL_PROC_EXECUTE</see>:</term>
        ///         <description>Execute access to the SQL proc.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_ADMIN">SYSTEM_ADMIN</see>:</term>
        ///         <description>Full access to all data and system
        /// functions.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_READ">SYSTEM_READ</see>:</term>
        ///         <description>Read-only access to all tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_USER_ADMIN">SYSTEM_USER_ADMIN</see>:</term>
        ///         <description>Access to administer users and roles that do
        /// not have system_admin permission.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_WRITE">SYSTEM_WRITE</see>:</term>
        ///         <description>Read and write access to all
        /// tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_ADMIN">TABLE_ADMIN</see>:</term>
        ///         <description>Full read/write and administrative access to
        /// the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_DELETE">TABLE_DELETE</see>:</term>
        ///         <description>Delete access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_INSERT">TABLE_INSERT</see>:</term>
        ///         <description>Insert access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_READ">TABLE_READ</see>:</term>
        ///         <description>Read access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_UPDATE">TABLE_UPDATE</see>:</term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        /// </list>  </summary>
        public string permission { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="HasPermissionRequest.target" /> does not
        /// exist or is blank. If <i>true</i> then it will return <i>false</i>
        /// for <member name="has_permission" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="HasPermissionRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a HasPermissionRequest object with default
        /// parameters.</summary>
        public HasPermissionRequest() { }

        /// <summary>Constructs a HasPermissionRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="name">Name of the user for which the permission is
        /// being checked. Must be an existing user. If blank, will use the
        /// current user.  The default value is ''.</param>
        /// <param name="target">Name of object to check for the requested
        /// permission.  It is recommended to use a fully-qualified name when
        /// possible.  </param>
        /// <param name="permission">Permission to check for.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CONNECT">CONNECT</see>:</term>
        ///         <description>Connect access on the given data
        /// source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CREDENTIAL_ADMIN">CREDENTIAL_ADMIN</see>:</term>
        ///         <description>Full read/write and administrative access on
        /// the credential.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.CREDENTIAL_READ">CREDENTIAL_READ</see>:</term>
        ///         <description>Ability to read and use the
        /// credential.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.DIRECTORY_READ">DIRECTORY_READ</see>:</term>
        ///         <description>For files in the directory, access to list
        /// files, download files, or use files in server side
        /// functions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.DIRECTORY_WRITE">DIRECTORY_WRITE</see>:</term>
        ///         <description>Access to upload files to, or delete files
        /// from, the directory. A user with write access automatically has
        /// read access</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.PROC_EXECUTE">PROC_EXECUTE</see>:</term>
        ///         <description>Execute access to the UDF.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.ROLE">ROLE</see>:</term>
        ///         <description>User is a member of this role (including
        /// indirectly).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SQL_PROC_EXECUTE">SQL_PROC_EXECUTE</see>:</term>
        ///         <description>Execute access to the SQL proc.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_ADMIN">SYSTEM_ADMIN</see>:</term>
        ///         <description>Full access to all data and system
        /// functions.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_READ">SYSTEM_READ</see>:</term>
        ///         <description>Read-only access to all tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_USER_ADMIN">SYSTEM_USER_ADMIN</see>:</term>
        ///         <description>Access to administer users and roles that do
        /// not have system_admin permission.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.SYSTEM_WRITE">SYSTEM_WRITE</see>:</term>
        ///         <description>Read and write access to all
        /// tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_ADMIN">TABLE_ADMIN</see>:</term>
        ///         <description>Full read/write and administrative access to
        /// the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_DELETE">TABLE_DELETE</see>:</term>
        ///         <description>Delete access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_INSERT">TABLE_INSERT</see>:</term>
        ///         <description>Insert access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_READ">TABLE_READ</see>:</term>
        ///         <description>Read access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Permission.TABLE_UPDATE">TABLE_UPDATE</see>:</term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="HasPermissionRequest.target" /> does not
        /// exist or is blank. If <i>true</i> then it will return <i>false</i>
        /// for <member name="has_permission" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="HasPermissionRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public HasPermissionRequest( string name,
                                     string target,
                                     string permission,
                                     IDictionary<string, string> options = null)
        {
            this.name = name ?? "";
            this.target = target ?? "";
            this.permission = permission ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class HasPermissionRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.hasPermission(string,string,string,IDictionary{string, string})"
    /// />.</summary>
    public class HasPermissionResponse : KineticaData
    {

        /// <summary>Indicates whether the specified user has the specified
        /// permission on the specified target.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionResponse.HasPermission.TRUE">TRUE</see>:</term>
        ///         <description>User has the effective queried
        /// permission</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionResponse.HasPermission.FALSE">FALSE</see>:</term>
        ///         <description>User does not have the queried
        /// permission</description>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <member
        /// name="has_permission" />.</summary>
        public struct HasPermission
        {

            /// <summary>User has the effective queried permission</summary>
            public const string TRUE = "true";

            /// <summary>User does not have the queried permission</summary>
            public const string FALSE = "false";
        } // end struct HasPermission


        /// <summary>Value of <paramref cref="HasPermissionRequest.name" />
        /// </summary>
        public string name { get; set; }

        /// <summary>Fully-qualified value of <paramref
        /// cref="HasPermissionRequest.target" />  </summary>
        public string target { get; set; }

        /// <summary>Value of <paramref cref="HasPermissionRequest.permission"
        /// />  </summary>
        public string permission { get; set; }

        /// <summary>Indicates whether the specified user has the specified
        /// permission on the specified target.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionResponse.HasPermission.TRUE">TRUE</see>:</term>
        ///         <description>User has the effective queried
        /// permission</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="HasPermissionResponse.HasPermission.FALSE">FALSE</see>:</term>
        ///         <description>User does not have the queried
        /// permission</description>
        ///     </item>
        /// </list>  </summary>
        public bool has_permission { get; set; }

        /// <summary>Map of column/filters that have been granted.  </summary>
        public IDictionary<string, string> filters { get; set; } = new Dictionary<string, string>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class HasPermissionResponse




}  // end namespace kinetica
