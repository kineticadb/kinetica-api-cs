/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /aggregate/unique.
    /// <br />
    /// Returns all the unique values from a particular column (specified by
    /// <member name="column_name" />) of a particular table (specified by
    /// <member name="table_name" />). If <member name="column_name" /> is a
    /// numeric column the values will be in <member
    /// name="binary_encoded_response" />. Otherwise if <member
    /// name="column_name" /> is a string column the values will be in <member
    /// name="json_encoded_response" />.  <member name="offset" /> and <member
    /// name="limit" /> are used to page through the results if there are large
    /// numbers of unique values. To get the first 10 unique values sorted in
    /// descending order <member name="options" /> would be::
    /// <br />
    /// {"limit":"10","sort_order":"descending"}.
    /// <br />
    /// The response is returned as a dynamic schema. For details see: <a
    /// href="../../../../../concepts/dynamic_schemas.html"
    /// target="_top">dynamic schemas documentation</a>. If the 'result_table'
    /// option is provided then the results are stored in a table with the name
    /// given in the option and the results are not returned in the
    /// response.</summary>
    public class AggregateUniqueRequest : KineticaData
    {

        /// <summary>Specifies the encoding for returned records. Values:
        /// binary, json.
        /// <br />
        /// A set of string constants for the parameter <member name="encoding"
        /// />.</summary>
        public struct Encoding
        {

            /// <summary>Indicates that the returned records should be binary
            /// encoded.</summary>
            public const string BINARY = "binary";

            /// <summary>Indicates that the returned records should be json
            /// encoded.</summary>
            public const string JSON = "json";
        } // end struct Encoding


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>expression</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_order</term>
        ///         <description>String indicating how the returned values
        /// should be sorted. Values: ascending, descending.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>result_table</term>
        ///         <description>The name of the table used to store the
        /// results. If present no results are returned in the response. Has
        /// the same naming restrictions as <a
        /// href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Optional filter expression to apply to the
            /// table.</summary>
            public const string EXPRESSION = "expression";

            /// <summary>String indicating how the returned values should be
            /// sorted. Values: ascending, descending.
            /// </summary>
            public const string SORT_ORDER = "sort_order";
            public const string ASCENDING = "ascending";
            public const string DESCENDING = "descending";

            /// <summary>The name of the table used to store the results. If
            /// present no results are returned in the response. Has the same
            /// naming restrictions as <a
            /// href="../../../../../concepts/tables.html"
            /// target="_top">tables</a>.</summary>
            public const string RESULT_TABLE = "result_table";
        } // end struct Options


        /// <summary>Name of the table on which the operation will be
        /// performed. Must be an existing table.  </summary>
        public string table_name { get; set; }

        /// <summary>Name of the column or an expression containing one or more
        /// column names on which the unique function would be applied.
        /// </summary>
        public string column_name { get; set; }

        /// <summary>A positive integer indicating the number of initial
        /// results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </summary>
        public long offset { get; set; }

        /// <summary>A positive integer indicating the maximum number of
        /// results to be returned. Or END_OF_SET (-9999) to indicate that the
        /// max number of results should be returned.  </summary>
        public long limit { get; set; } = 10000;

        /// <summary>Specifies the encoding for returned records. Values:
        /// binary, json.
        ///   </summary>
        public string encoding { get; set; } = Encoding.BINARY;

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>expression</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_order</term>
        ///         <description>String indicating how the returned values
        /// should be sorted. Values: ascending, descending.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>result_table</term>
        ///         <description>The name of the table used to store the
        /// results. If present no results are returned in the response. Has
        /// the same naming restrictions as <a
        /// href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AggregateUniqueRequest object with default
        /// parameters.</summary>
        public AggregateUniqueRequest() { }

        /// <summary>Constructs an AggregateUniqueRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table.  </param>
        /// <param name="column_name">Name of the column or an expression
        /// containing one or more column names on which the unique function
        /// would be applied.  </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned. Or END_OF_SET (-9999) to indicate
        /// that the max number of results should be returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>expression</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_order</term>
        ///         <description>String indicating how the returned values
        /// should be sorted. Values: ascending, descending.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>result_table</term>
        ///         <description>The name of the table used to store the
        /// results. If present no results are returned in the response. Has
        /// the same naming restrictions as <a
        /// href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public AggregateUniqueRequest( string table_name,
                                       string column_name,
                                       long offset,
                                       long limit = 10000,
                                       IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.column_name = column_name ?? "";
            this.offset = offset;
            this.limit = limit;
            this.encoding = Encoding.BINARY;
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor


        /// <summary>Constructs an AggregateUniqueRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table.  </param>
        /// <param name="column_name">Name of the column or an expression
        /// containing one or more column names on which the unique function
        /// would be applied.  </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned. Or END_OF_SET (-9999) to indicate
        /// that the max number of results should be returned.  </param>
        /// <param name="encoding">Specifies the encoding for returned records.
        /// Values: binary, json.
        ///   </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>expression</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term>sort_order</term>
        ///         <description>String indicating how the returned values
        /// should be sorted. Values: ascending, descending.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>result_table</term>
        ///         <description>The name of the table used to store the
        /// results. If present no results are returned in the response. Has
        /// the same naming restrictions as <a
        /// href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public AggregateUniqueRequest( string table_name,
                                       string column_name,
                                       long offset,
                                       long limit = 10000,
                                       string encoding = null,
                                       IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.column_name = column_name ?? "";
            this.offset = offset;
            this.limit = limit;
            this.encoding = encoding ?? Encoding.BINARY;
            this.options = options ?? new Dictionary<string, string>();
        } // end full constructor

    } // end class AggregateUniqueRequest



    /// <summary>A set of results returned by /aggregate/unique.</summary>
    public class RawAggregateUniqueResponse : KineticaData
    {

        /// <summary>The same table name as was passed in the parameter list.
        /// </summary>
        public string table_name { get; set; }

        /// <summary>Avro schema of <member name="binary_encoded_response" />
        /// or <member name="json_encoded_response" />.  </summary>
        public string response_schema_str { get; set; }

        /// <summary>Avro binary encoded response.  </summary>
        public byte[] binary_encoded_response { get; set; }

        /// <summary>Avro JSON encoded response.  </summary>
        public string json_encoded_response { get; set; }

        /// <summary>Too many records. Returned a partial set.  </summary>
        public bool has_more_records { get; set; }

    } // end class RawAggregateUniqueResponse



    /// <summary>A set of results returned by /aggregate/unique.</summary>
    public class AggregateUniqueResponse : KineticaData
    {

        /// <summary>The same table name as was passed in the parameter list.
        /// </summary>
        public string table_name { get; set; }

        /// <summary>Avro binary encoded response.  </summary>
        public IList<KineticaRecord> data { get; set; } = new List<KineticaRecord>();

        /// <summary>Too many records. Returned a partial set.  </summary>
        public bool has_more_records { get; set; }

    } // end class AggregateUniqueResponse




}  // end namespace kinetica
