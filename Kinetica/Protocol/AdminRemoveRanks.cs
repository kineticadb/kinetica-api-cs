/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminRemoveRanks(IList{string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Remove one or more ranks from an existing Kinetica cluster. All data
    /// will be rebalanced to other ranks before the rank(s) is removed unless
    /// the
    /// <i>rebalance_sharded_data</i> or
    /// <i>rebalance_unsharded_data</i> parameters are set to
    /// <i>false</i> in the
    /// <see cref="options" />, in which case the corresponding
    /// <a href="../../../concepts/tables/#sharding" target="_top">sharded
    /// data</a> and/or unsharded data (a.k.a.
    /// <a href="../../../concepts/tables/#random-sharding"
    /// target="_top">randomly-sharded</a>) will be deleted.
    /// <br />
    /// The database must be offline for this operation, see <see
    /// cref="Kinetica.adminOffline(bool,IDictionary{string, string})" />
    /// <br />
    /// This endpoint's processing time depends on the amount of data in the
    /// system,
    /// thus the API call may time out if run directly.  It is recommended to
    /// run this
    /// endpoint asynchronously via <see
    /// cref="Kinetica.createJob(string,string,byte[],string,IDictionary{string, string})"
    /// />.</summary>
    public class AdminRemoveRanksRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, <a
        /// href="../../../concepts/tables/#sharding" target="_top">sharded
        /// data</a> will be rebalanced approximately equally across the
        /// cluster. Note that for clusters with large amounts of sharded data,
        /// this data transfer could be time consuming and result in delayed
        /// query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, unsharded data (a.k.a. <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly-sharded</a>) will be rebalanced
        /// approximately equally across the cluster. Note that for clusters
        /// with large amounts of unsharded data, this data transfer could be
        /// time consuming and result in delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>:</term>
        ///         <description>Influences how much data is moved at a time
        /// during rebalance.  A higher <i>aggressiveness</i> will complete the
        /// rebalance faster.  A lower <i>aggressiveness</i> will take longer
        /// but allow for better interleaving between the rebalance and other
        /// queries. Valid values are constants from 1 (lowest) to 10
        /// (highest).  The default value is '10'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>true</i>, <a
            /// href="../../../concepts/tables/#sharding" target="_top">sharded
            /// data</a> will be rebalanced approximately equally across the
            /// cluster. Note that for clusters with large amounts of sharded
            /// data, this data transfer could be time consuming and result in
            /// delayed query responses.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.</summary>
            public const string REBALANCE_SHARDED_DATA = "rebalance_sharded_data";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If <i>true</i>, unsharded data (a.k.a. <a
            /// href="../../../concepts/tables/#random-sharding"
            /// target="_top">randomly-sharded</a>) will be rebalanced
            /// approximately equally across the cluster. Note that for
            /// clusters with large amounts of unsharded data, this data
            /// transfer could be time consuming and result in delayed query
            /// responses.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.</summary>
            public const string REBALANCE_UNSHARDED_DATA = "rebalance_unsharded_data";

            /// <summary>Influences how much data is moved at a time during
            /// rebalance.  A higher <i>aggressiveness</i> will complete the
            /// rebalance faster.  A lower <i>aggressiveness</i> will take
            /// longer but allow for better interleaving between the rebalance
            /// and other queries. Valid values are constants from 1 (lowest)
            /// to 10 (highest).  The default value is '10'.</summary>
            public const string AGGRESSIVENESS = "aggressiveness";
        } // end struct Options


        /// <summary>Each array value designates one or more ranks to remove
        /// from the cluster. Values can be formatted as 'rankN' for a specific
        /// rank, 'hostN' (from the gpudb.conf file) to remove all ranks on
        /// that host, or the host IP address (hostN.address from the gpub.conf
        /// file) which also removes all ranks on that host. Rank 0 (the head
        /// rank) cannot be removed (but can be moved to another host using
        /// /admin/switchover). At least one worker rank must be left in the
        /// cluster after the operation.  </summary>
        public IList<string> ranks { get; set; } = new List<string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, <a
        /// href="../../../concepts/tables/#sharding" target="_top">sharded
        /// data</a> will be rebalanced approximately equally across the
        /// cluster. Note that for clusters with large amounts of sharded data,
        /// this data transfer could be time consuming and result in delayed
        /// query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, unsharded data (a.k.a. <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly-sharded</a>) will be rebalanced
        /// approximately equally across the cluster. Note that for clusters
        /// with large amounts of unsharded data, this data transfer could be
        /// time consuming and result in delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>:</term>
        ///         <description>Influences how much data is moved at a time
        /// during rebalance.  A higher <i>aggressiveness</i> will complete the
        /// rebalance faster.  A lower <i>aggressiveness</i> will take longer
        /// but allow for better interleaving between the rebalance and other
        /// queries. Valid values are constants from 1 (lowest) to 10
        /// (highest).  The default value is '10'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AdminRemoveRanksRequest object with default
        /// parameters.</summary>
        public AdminRemoveRanksRequest() { }

        /// <summary>Constructs an AdminRemoveRanksRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="ranks">Each array value designates one or more ranks
        /// to remove from the cluster. Values can be formatted as 'rankN' for
        /// a specific rank, 'hostN' (from the gpudb.conf file) to remove all
        /// ranks on that host, or the host IP address (hostN.address from the
        /// gpub.conf file) which also removes all ranks on that host. Rank 0
        /// (the head rank) cannot be removed (but can be moved to another host
        /// using /admin/switchover). At least one worker rank must be left in
        /// the cluster after the operation.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, <a
        /// href="../../../concepts/tables/#sharding" target="_top">sharded
        /// data</a> will be rebalanced approximately equally across the
        /// cluster. Note that for clusters with large amounts of sharded data,
        /// this data transfer could be time consuming and result in delayed
        /// query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, unsharded data (a.k.a. <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly-sharded</a>) will be rebalanced
        /// approximately equally across the cluster. Note that for clusters
        /// with large amounts of unsharded data, this data transfer could be
        /// time consuming and result in delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveRanksRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>:</term>
        ///         <description>Influences how much data is moved at a time
        /// during rebalance.  A higher <i>aggressiveness</i> will complete the
        /// rebalance faster.  A lower <i>aggressiveness</i> will take longer
        /// but allow for better interleaving between the rebalance and other
        /// queries. Valid values are constants from 1 (lowest) to 10
        /// (highest).  The default value is '10'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public AdminRemoveRanksRequest( IList<string> ranks,
                                        IDictionary<string, string> options = null)
        {
            this.ranks = ranks ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AdminRemoveRanksRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminRemoveRanks(IList{string},IDictionary{string, string})"
    /// />.</summary>
    public class AdminRemoveRanksResponse : KineticaData
    {

        /// <summary>The number assigned to each rank removed from the cluster.
        /// This array will be empty if the operation fails.  </summary>
        public IList<string> removed_ranks { get; set; } = new List<string>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AdminRemoveRanksResponse




}  // end namespace kinetica
