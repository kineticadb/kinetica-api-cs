/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /grant/permission/table.
    /// <br />
    /// Grants a table-level permission to a user or role.</summary>
    public class GrantPermissionTableRequest : KineticaData
    {

        /// <summary>Permission to grant to the user or role. Values:
        /// table_admin, table_insert, table_update, table_delete, table_read.
        /// <br />
        /// A set of string constants for the parameter <member
        /// name="permission" />.</summary>
        public struct Permission
        {

            /// <summary>Full read/write and administrative access to the
            /// table.</summary>
            public const string TABLE_ADMIN = "table_admin";

            /// <summary>Insert access to the table.</summary>
            public const string TABLE_INSERT = "table_insert";

            /// <summary>Update access to the table.</summary>
            public const string TABLE_UPDATE = "table_update";

            /// <summary>Delete access to the table.</summary>
            public const string TABLE_DELETE = "table_delete";

            /// <summary>Read access to the table.</summary>
            public const string TABLE_READ = "table_read";
        } // end struct Permission


        /// <summary>Name of the user or role to which the permission will be
        /// granted. Must be an existing user or role.  </summary>
        public string name { get; set; }

        /// <summary>Permission to grant to the user or role. Values:
        /// table_admin, table_insert, table_update, table_delete, table_read.
        ///   </summary>
        public string permission { get; set; }

        /// <summary>Name of the table to which the permission grants access.
        /// Must be an existing table, collection, or view. If a collection,
        /// the permission also applies to tables and views in the collection.
        /// </summary>
        public string table_name { get; set; }

        /// <summary>Reserved for future use.  </summary>
        public string filter_expression { get; set; } = "";

        /// <summary>Optional parameters.  </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a GrantPermissionTableRequest object with
        /// default parameters.</summary>
        public GrantPermissionTableRequest() { }

        /// <summary>Constructs a GrantPermissionTableRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.  </param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Values: table_admin, table_insert, table_update, table_delete,
        /// table_read.
        ///   </param>
        /// <param name="table_name">Name of the table to which the permission
        /// grants access. Must be an existing table, collection, or view. If a
        /// collection, the permission also applies to tables and views in the
        /// collection.  </param>
        /// <param name="filter_expression">Reserved for future use.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        public GrantPermissionTableRequest( string name,
                                            string permission,
                                            string table_name,
                                            string filter_expression,
                                            IDictionary<string, string> options)
        {
            this.name = name ?? "";
            this.permission = permission ?? "";
            this.table_name = table_name ?? "";
            this.filter_expression = filter_expression ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class GrantPermissionTableRequest



    /// <summary>A set of results returned by
    /// /grant/permission/table.</summary>
    public class GrantPermissionTableResponse : KineticaData
    {

        /// <summary>Value of <paramref cref="GrantPermissionTableRequest.name"
        /// />.  </summary>
        public string name { get; set; }

        /// <summary>Value of <paramref
        /// cref="GrantPermissionTableRequest.permission" />.  </summary>
        public string permission { get; set; }

        /// <summary>Value of <paramref
        /// cref="GrantPermissionTableRequest.table_name" />.  </summary>
        public string table_name { get; set; }

        /// <summary>Value of <paramref
        /// cref="GrantPermissionTableRequest.filter_expression" />.
        /// </summary>
        public string filter_expression { get; set; }

    } // end class GrantPermissionTableResponse




}  // end namespace kinetica
