/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /alter/table.
    /// <br />
    /// Apply various modifications to a table or collection. Available
    /// modifications include:
    /// <br />
    ///      Creating or deleting an index on a particular column. This can
    /// speed up certain search queries (such as /get/records, /delete/records,
    /// /update/records) when using expressions containing equality or
    /// relational operators on indexed columns. This only applies to tables.
    /// <br />
    ///      Setting the time-to-live (TTL). This can be applied to tables,
    /// views, or collections.  When applied to collections, every table & view
    /// within the collection will have its TTL set to the given value.
    /// <br />
    ///      Making a table protected or not. Protected tables have their TTLs
    /// set to not automatically expire. This can be applied to tables, views,
    /// and collections.
    /// <br />
    ///      Allowing homogeneous tables within a collection.</summary>
    public class AlterTableRequest : KineticaData
    {

        /// <summary>Modification operation to be applied Values: create_index,
        /// delete_index, allow_homogeneous_tables, protected, ttl, add_column,
        /// delete_column, change_column, rename_table.
        /// <br />
        /// A set of string constants for the parameter <member name="action"
        /// />.</summary>
        public struct Action
        {

            /// <summary>Creates an index on the column name specified in
            /// <member name="_value" />. If this column is already indexed, an
            /// error will be returned.</summary>
            public const string CREATE_INDEX = "create_index";

            /// <summary>Deletes an existing index on the column name specified
            /// in <member name="_value" />. If this column does not have
            /// indexing turned on, an error will be returned.</summary>
            public const string DELETE_INDEX = "delete_index";

            /// <summary>Sets whether homogeneous tables are allowed in the
            /// given collection. This action is only valid if <member
            /// name="table_name" /> is a collection. The <member name="_value"
            /// /> must be either 'true' or 'false'.</summary>
            public const string ALLOW_HOMOGENEOUS_TABLES = "allow_homogeneous_tables";

            /// <summary>Sets whether the given <member name="table_name" />
            /// should be protected or not. The <member name="_value" /> must
            /// be either 'true' or 'false'.</summary>
            public const string PROTECTED = "protected";

            /// <summary>Sets the TTL of the table, view, or collection
            /// specified in <member name="table_name" />. The <member
            /// name="_value" /> must be the desired TTL in minutes.</summary>
            public const string TTL = "ttl";

            /// <summary>Add a column <member name="_value" /> to the table.
            /// set the column properties in options</summary>
            public const string ADD_COLUMN = "add_column";

            /// <summary>Delete a column <member name="_value" /> from the
            /// table</summary>
            public const string DELETE_COLUMN = "delete_column";

            /// <summary>Change properties of a column <member name="_value" />
            /// in the table. set the column properties in options</summary>
            public const string CHANGE_COLUMN = "change_column";

            /// <summary>Rename a table, view or collection to <member
            /// name="_value" />. Has the same naming restrictions as <a
            /// href="../../../../../concepts/tables.html"
            /// target="_top">tables</a>.</summary>
            public const string RENAME_TABLE = "rename_table";
        } // end struct Action


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>column_default_value</term>
        ///         <description>when adding a column: set a default value, for
        /// existing data.</description>
        ///     </item>
        ///     <item>
        ///         <term>column_properties</term>
        ///         <description>when adding or changing a column: set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term>column_type</term>
        ///         <description>when adding or changing a column: set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term>validate_change_column</term>
        ///         <description>Validate the type change before applying
        /// column_change request. Default is true (if option is missing). If
        /// True, then validate all values. A value too large (or too long) for
        /// the new type will prevent any change. If False, then when a value
        /// is too large or long, it will be truncated. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>copy_values_from_column</term>
        ///         <description>when adding or changing a column: enter column
        /// name - from where to copy values.</description>
        ///     </item>
        ///     <item>
        ///         <term>rename_column</term>
        ///         <description>new column name (using
        /// change_column).</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>when adding a column: set a default value, for
            /// existing data.</summary>
            public const string COLUMN_DEFAULT_VALUE = "column_default_value";

            /// <summary>when adding or changing a column: set the column
            /// properties (strings, separated by a comma: data, store_only,
            /// text_search, char8, int8 etc).</summary>
            public const string COLUMN_PROPERTIES = "column_properties";

            /// <summary>when adding or changing a column: set the column type
            /// (strings, separated by a comma: int, double, string, null
            /// etc).</summary>
            public const string COLUMN_TYPE = "column_type";

            /// <summary>Validate the type change before applying column_change
            /// request. Default is true (if option is missing). If True, then
            /// validate all values. A value too large (or too long) for the
            /// new type will prevent any change. If False, then when a value
            /// is too large or long, it will be truncated. Values: true,
            /// false.
            /// </summary>
            public const string VALIDATE_CHANGE_COLUMN = "validate_change_column";

            /// <summary>true</summary>
            public const string TRUE = "true";

            /// <summary>false</summary>
            public const string FALSE = "false";

            /// <summary>when adding or changing a column: enter column name -
            /// from where to copy values.</summary>
            public const string COPY_VALUES_FROM_COLUMN = "copy_values_from_column";

            /// <summary>new column name (using change_column).</summary>
            public const string RENAME_COLUMN = "rename_column";
        } // end struct Options


        /// <summary>Table on which the operation will be performed. Must be an
        /// existing table, view, or collection.  </summary>
        public string table_name { get; set; }

        /// <summary>Modification operation to be applied Values: create_index,
        /// delete_index, allow_homogeneous_tables, protected, ttl, add_column,
        /// delete_column, change_column, rename_table.
        ///   </summary>
        public string action { get; set; }

        /// <summary>The value of the modification. May be a column name,
        /// 'true' or 'false', or a TTL depending on <paramref
        /// cref="AlterTableRequest.action" />.  </summary>
        public string _value { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>column_default_value</term>
        ///         <description>when adding a column: set a default value, for
        /// existing data.</description>
        ///     </item>
        ///     <item>
        ///         <term>column_properties</term>
        ///         <description>when adding or changing a column: set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term>column_type</term>
        ///         <description>when adding or changing a column: set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term>validate_change_column</term>
        ///         <description>Validate the type change before applying
        /// column_change request. Default is true (if option is missing). If
        /// True, then validate all values. A value too large (or too long) for
        /// the new type will prevent any change. If False, then when a value
        /// is too large or long, it will be truncated. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>copy_values_from_column</term>
        ///         <description>when adding or changing a column: enter column
        /// name - from where to copy values.</description>
        ///     </item>
        ///     <item>
        ///         <term>rename_column</term>
        ///         <description>new column name (using
        /// change_column).</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AlterTableRequest object with default
        /// parameters.</summary>
        public AlterTableRequest() { }

        /// <summary>Constructs an AlterTableRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">Table on which the operation will be
        /// performed. Must be an existing table, view, or collection.
        /// </param>
        /// <param name="action">Modification operation to be applied Values:
        /// create_index, delete_index, allow_homogeneous_tables, protected,
        /// ttl, add_column, delete_column, change_column, rename_table.
        ///   </param>
        /// <param name="_value">The value of the modification. May be a column
        /// name, 'true' or 'false', or a TTL depending on <paramref
        /// cref="AlterTableRequest.action" />.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>column_default_value</term>
        ///         <description>when adding a column: set a default value, for
        /// existing data.</description>
        ///     </item>
        ///     <item>
        ///         <term>column_properties</term>
        ///         <description>when adding or changing a column: set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term>column_type</term>
        ///         <description>when adding or changing a column: set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term>validate_change_column</term>
        ///         <description>Validate the type change before applying
        /// column_change request. Default is true (if option is missing). If
        /// True, then validate all values. A value too large (or too long) for
        /// the new type will prevent any change. If False, then when a value
        /// is too large or long, it will be truncated. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>copy_values_from_column</term>
        ///         <description>when adding or changing a column: enter column
        /// name - from where to copy values.</description>
        ///     </item>
        ///     <item>
        ///         <term>rename_column</term>
        ///         <description>new column name (using
        /// change_column).</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public AlterTableRequest( string table_name,
                                  string action,
                                  string _value,
                                  IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.action = action ?? "";
            this._value = _value ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AlterTableRequest



    /// <summary>A set of results returned by /alter/table.</summary>
    public class AlterTableResponse : KineticaData
    {

        /// <summary>Table on which the operation was performed.  </summary>
        public string table_name { get; set; }

        /// <summary>Modification operation that was performed.  </summary>
        public string action { get; set; }

        /// <summary>The value of the modification that was performed.
        /// </summary>
        public string _value { get; set; }

    } // end class AlterTableResponse




}  // end namespace kinetica
