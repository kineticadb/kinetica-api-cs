/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.alterTable(string,string,string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Apply various modifications to a table or view.  The
    /// available modifications include the following:
    /// <br />
    /// Manage a table's columns--a column can be added, removed, or have its
    /// <a href="../../../concepts/types/" target="_top">type and
    /// properties</a> modified, including
    /// whether it is <a href="../../../concepts/compression/"
    /// target="_top">compressed</a> or not.
    /// <br />
    /// External tables cannot be modified except for their refresh method.
    /// <br />
    /// Create or delete an <a href="../../../concepts/indexes/#column-index"
    /// target="_top">index</a> on a
    /// particular column. This can speed up certain operations when using
    /// expressions
    /// containing equality or relational operators on indexed columns. This
    /// only
    /// applies to tables.
    /// <br />
    /// Create or delete a <a href="../../../concepts/tables/#foreign-key"
    /// target="_top">foreign key</a>
    /// on a particular column.
    /// <br />
    /// Manage a
    /// <a href="../../../concepts/tables/#partitioning-by-range"
    /// target="_top">range-partitioned</a> or a
    /// <a href="../../../concepts/tables/#partitioning-by-list-manual"
    /// target="_top">manual list-partitioned</a>
    /// table's partitions.
    /// <br />
    /// Set (or reset) the <a href="../../../rm/concepts/#tier-strategies"
    /// target="_top">tier strategy</a>
    /// of a table or view.
    /// <br />
    /// Refresh and manage the refresh mode of a
    /// <a href="../../../concepts/materialized_views/"
    /// target="_top">materialized view</a> or an
    /// <a href="../../../concepts/external_tables/" target="_top">external
    /// table</a>.
    /// <br />
    /// Set the <a href="../../../concepts/ttl/" target="_top">time-to-live
    /// (TTL)</a>. This can be applied
    /// to tables or views.
    /// <br />
    /// Set the global access mode (i.e. locking) for a table. This setting
    /// trumps any
    /// role-based access controls that may be in place; e.g., a user with
    /// write access
    /// to a table marked read-only will not be able to insert records into it.
    /// The mode
    /// can be set to read-only, write-only, read/write, and no
    /// access.</summary>
    public class AlterTableRequest : KineticaData
    {

        /// <summary>Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ALLOW_HOMOGENEOUS_TABLES">ALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>No longer supported; action will be
        /// ignored.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>:</term>
        ///         <description>Creates either a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a> or <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>, depending on the specified
        /// <i>index_type</i>, on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column already has the
        /// specified index, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>:</term>
        ///         <description>Deletes either a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a> or <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>, depending on the specified
        /// <i>index_type</i>, on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column does not have
        /// the specified index, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_COLLECTION">MOVE_TO_COLLECTION</see>:</term>
        ///         <description>[DEPRECATED--please use <i>move_to_schema</i>
        /// and use /create/schema to create the schema if non-existent]  Moves
        /// a table or view into a schema named <paramref
        /// cref="AlterTableRequest._value" />.  If the schema provided is
        /// non-existent, it will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_SCHEMA">MOVE_TO_SCHEMA</see>:</term>
        ///         <description>Moves a table or view into a schema named
        /// <paramref cref="AlterTableRequest._value" />.  If the schema
        /// provided is non-existent, an error will be thrown. If <paramref
        /// cref="AlterTableRequest._value" /> is empty, then the table or view
        /// will be placed in the user's default schema.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.PROTECTED">PROTECTED</see>:</term>
        ///         <description>No longer used.  Previously set whether the
        /// given <paramref cref="AlterTableRequest.table_name" /> should be
        /// protected or not. The <paramref cref="AlterTableRequest._value" />
        /// would have been either 'true' or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.RENAME_TABLE">RENAME_TABLE</see>:</term>
        ///         <description>Renames a table or view within its current
        /// schema to <paramref cref="AlterTableRequest._value" />. Has the
        /// same naming restrictions as <a href="../../../concepts/tables/"
        /// target="_top">tables</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">time-to-live</a> in minutes of the table or view
        /// specified in <paramref cref="AlterTableRequest.table_name"
        /// />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>:</term>
        ///         <description>Adds the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CHANGE_COLUMN">CHANGE_COLUMN</see>:</term>
        ///         <description>Changes type and properties of the column
        /// specified in <paramref cref="AlterTableRequest._value" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively. Note that primary key and/or shard key
        /// columns cannot be changed. All unchanging column properties must be
        /// listed for the change to take place, e.g., to add dictionary
        /// encoding to an existing 'char4' column, both 'char4' and 'dict'
        /// must be specified in the <paramref cref="AlterTableRequest.options"
        /// /> map.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_COLUMN_COMPRESSION">SET_COLUMN_COMPRESSION</see>:</term>
        ///         <description>Modifies the <a
        /// href="../../../concepts/compression/" target="_top">compression</a>
        /// setting on the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the compression type
        /// specified in <i>compression_type</i>. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_COLUMN">DELETE_COLUMN</see>:</term>
        ///         <description>Deletes the column specified in <paramref
        /// cref="AlterTableRequest._value" /> from the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_FOREIGN_KEY">CREATE_FOREIGN_KEY</see>:</term>
        ///         <description>Creates a <a
        /// href="../../../concepts/tables/#foreign-key" target="_top">foreign
        /// key</a> specified in <paramref cref="AlterTableRequest._value" />
        /// using the format '(source_column_name [, ...]) references
        /// target_table_name(primary_key_column_name [, ...]) [as
        /// foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_FOREIGN_KEY">DELETE_FOREIGN_KEY</see>:</term>
        ///         <description>Deletes a <a
        /// href="../../../concepts/tables/#foreign-key" target="_top">foreign
        /// key</a>.  The <paramref cref="AlterTableRequest._value" /> should
        /// be the foreign_key_name specified when creating the key or the
        /// complete string used to define it.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_PARTITION">ADD_PARTITION</see>:</term>
        ///         <description>Adds the partition specified in <paramref
        /// cref="AlterTableRequest._value" />, to either a <a
        /// href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_PARTITION">REMOVE_PARTITION</see>:</term>
        ///         <description>Removes the partition specified in <paramref
        /// cref="AlterTableRequest._value" /> (and relocates all of its data
        /// to the default partition) from either a <a
        /// href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_PARTITION">DELETE_PARTITION</see>:</term>
        ///         <description>Deletes the partition specified in <paramref
        /// cref="AlterTableRequest._value" /> (and all of its data) from
        /// either a <a href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_GLOBAL_ACCESS_MODE">SET_GLOBAL_ACCESS_MODE</see>:</term>
        ///         <description>Sets the global access mode (i.e. locking) for
        /// the table specified in <paramref
        /// cref="AlterTableRequest.table_name" />. Specify the access mode in
        /// <paramref cref="AlterTableRequest._value" />. Valid modes are
        /// 'no_access', 'read_only', 'write_only' and
        /// 'read_write'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REFRESH">REFRESH</see>:</term>
        ///         <description>For a <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a>, replays all the table creation
        /// commands required to create the view.  For an <a
        /// href="../../../concepts/external_tables/" target="_top">external
        /// table</a>, reloads all data in the table from its associated source
        /// files or <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_METHOD">SET_REFRESH_METHOD</see>:</term>
        ///         <description>For a <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a>, sets the method by which the
        /// view is refreshed to the method specified in <paramref
        /// cref="AlterTableRequest._value" /> - one of 'manual', 'periodic',
        /// or 'on_change'.  For an <a
        /// href="../../../concepts/external_tables/" target="_top">external
        /// table</a>, sets the method by which the table is refreshed to the
        /// method specified in <paramref cref="AlterTableRequest._value" /> -
        /// either 'manual' or 'on_start'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_START_TIME">SET_REFRESH_START_TIME</see>:</term>
        ///         <description>Sets the time to start periodic refreshes of
        /// this <a href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the datetime string
        /// specified in <paramref cref="AlterTableRequest._value" /> with
        /// format 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the
        /// specified time + N * the refresh period.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_PERIOD">SET_REFRESH_PERIOD</see>:</term>
        ///         <description>Sets the time interval in seconds at which to
        /// refresh this <a href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the value specified in
        /// <paramref cref="AlterTableRequest._value" />.  Also, sets the
        /// refresh method to periodic if not already set.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_EXECUTE_AS">SET_REFRESH_EXECUTE_AS</see>:</term>
        ///         <description>Sets the user name to refresh this <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the value specified in
        /// <paramref cref="AlterTableRequest._value" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_TEXT_SEARCH_ATTRIBUTES">REMOVE_TEXT_SEARCH_ATTRIBUTES</see>:</term>
        ///         <description>Removes <a
        /// href="../../../concepts/full_text_search/" target="_top">text
        /// search</a> attribute from all columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_STRATEGY_DEFINITION">SET_STRATEGY_DEFINITION</see>:</term>
        ///         <description>Sets the <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns to the one specified in
        /// <paramref cref="AlterTableRequest._value" />, replacing the
        /// existing tier strategy in its entirety. See <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../../rm/usage/#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <see cref="action"
        /// />.</summary>
        public struct Action
        {

            /// <summary>No longer supported; action will be ignored.</summary>
            public const string ALLOW_HOMOGENEOUS_TABLES = "allow_homogeneous_tables";

            /// <summary>Creates either a <a
            /// href="../../../concepts/indexes/#column-index"
            /// target="_top">column (attribute) index</a> or <a
            /// href="../../../concepts/indexes/#chunk-skip-index"
            /// target="_top">chunk skip index</a>, depending on the specified
            /// <i>index_type</i>, on the column name specified in <see
            /// cref="_value" />. If this column already has the specified
            /// index, an error will be returned.</summary>
            public const string CREATE_INDEX = "create_index";

            /// <summary>Deletes either a <a
            /// href="../../../concepts/indexes/#column-index"
            /// target="_top">column (attribute) index</a> or <a
            /// href="../../../concepts/indexes/#chunk-skip-index"
            /// target="_top">chunk skip index</a>, depending on the specified
            /// <i>index_type</i>, on the column name specified in <see
            /// cref="_value" />. If this column does not have the specified
            /// index, an error will be returned.</summary>
            public const string DELETE_INDEX = "delete_index";

            /// <summary>[DEPRECATED--please use <i>move_to_schema</i> and use
            /// <see
            /// cref="Kinetica.createSchema(string,IDictionary{string, string})"
            /// /> to create the schema if non-existent]  Moves a table or view
            /// into a schema named <see cref="_value" />.  If the schema
            /// provided is non-existent, it will be automatically
            /// created.</summary>
            public const string MOVE_TO_COLLECTION = "move_to_collection";

            /// <summary>Moves a table or view into a schema named <see
            /// cref="_value" />.  If the schema provided is non-existent, an
            /// error will be thrown. If <see cref="_value" /> is empty, then
            /// the table or view will be placed in the user's default
            /// schema.</summary>
            public const string MOVE_TO_SCHEMA = "move_to_schema";

            /// <summary>No longer used.  Previously set whether the given <see
            /// cref="table_name" /> should be protected or not. The <see
            /// cref="_value" /> would have been either 'true' or
            /// 'false'.</summary>
            public const string PROTECTED = "protected";

            /// <summary>Renames a table or view within its current schema to
            /// <see cref="_value" />. Has the same naming restrictions as <a
            /// href="../../../concepts/tables/"
            /// target="_top">tables</a>.</summary>
            public const string RENAME_TABLE = "rename_table";

            /// <summary>Sets the <a href="../../../concepts/ttl/"
            /// target="_top">time-to-live</a> in minutes of the table or view
            /// specified in <see cref="table_name" />.</summary>
            public const string TTL = "ttl";

            /// <summary>Adds the column specified in <see cref="_value" /> to
            /// the table specified in <see cref="table_name" />.  Use
            /// <i>column_type</i> and <i>column_properties</i> in <see
            /// cref="options" /> to set the column's type and properties,
            /// respectively.</summary>
            public const string ADD_COLUMN = "add_column";

            /// <summary>Changes type and properties of the column specified in
            /// <see cref="_value" />.  Use <i>column_type</i> and
            /// <i>column_properties</i> in <see cref="options" /> to set the
            /// column's type and properties, respectively. Note that primary
            /// key and/or shard key columns cannot be changed. All unchanging
            /// column properties must be listed for the change to take place,
            /// e.g., to add dictionary encoding to an existing 'char4' column,
            /// both 'char4' and 'dict' must be specified in the <see
            /// cref="options" /> map.</summary>
            public const string CHANGE_COLUMN = "change_column";

            /// <summary>Modifies the <a href="../../../concepts/compression/"
            /// target="_top">compression</a> setting on the column specified
            /// in <see cref="_value" /> to the compression type specified in
            /// <i>compression_type</i>. </summary>
            public const string SET_COLUMN_COMPRESSION = "set_column_compression";

            /// <summary>Deletes the column specified in <see cref="_value" />
            /// from the table specified in <see cref="table_name"
            /// />.</summary>
            public const string DELETE_COLUMN = "delete_column";

            /// <summary>Creates a <a
            /// href="../../../concepts/tables/#foreign-key"
            /// target="_top">foreign key</a> specified in <see cref="_value"
            /// /> using the format '(source_column_name [, ...]) references
            /// target_table_name(primary_key_column_name [, ...]) [as
            /// foreign_key_name]'.</summary>
            public const string CREATE_FOREIGN_KEY = "create_foreign_key";

            /// <summary>Deletes a <a
            /// href="../../../concepts/tables/#foreign-key"
            /// target="_top">foreign key</a>.  The <see cref="_value" />
            /// should be the foreign_key_name specified when creating the key
            /// or the complete string used to define it.</summary>
            public const string DELETE_FOREIGN_KEY = "delete_foreign_key";

            /// <summary>Adds the partition specified in <see cref="_value" />,
            /// to either a <a
            /// href="../../../concepts/tables/#partitioning-by-range"
            /// target="_top">range-partitioned</a> or <a
            /// href="../../../concepts/tables/#partitioning-by-list-manual"
            /// target="_top">manual list-partitioned</a> table.</summary>
            public const string ADD_PARTITION = "add_partition";

            /// <summary>Removes the partition specified in <see cref="_value"
            /// /> (and relocates all of its data to the default partition)
            /// from either a <a
            /// href="../../../concepts/tables/#partitioning-by-range"
            /// target="_top">range-partitioned</a> or <a
            /// href="../../../concepts/tables/#partitioning-by-list-manual"
            /// target="_top">manual list-partitioned</a> table.</summary>
            public const string REMOVE_PARTITION = "remove_partition";

            /// <summary>Deletes the partition specified in <see cref="_value"
            /// /> (and all of its data) from either a <a
            /// href="../../../concepts/tables/#partitioning-by-range"
            /// target="_top">range-partitioned</a> or <a
            /// href="../../../concepts/tables/#partitioning-by-list-manual"
            /// target="_top">manual list-partitioned</a> table.</summary>
            public const string DELETE_PARTITION = "delete_partition";

            /// <summary>Sets the global access mode (i.e. locking) for the
            /// table specified in <see cref="table_name" />. Specify the
            /// access mode in <see cref="_value" />. Valid modes are
            /// 'no_access', 'read_only', 'write_only' and
            /// 'read_write'.</summary>
            public const string SET_GLOBAL_ACCESS_MODE = "set_global_access_mode";

            /// <summary>For a <a href="../../../concepts/materialized_views/"
            /// target="_top">materialized view</a>, replays all the table
            /// creation commands required to create the view.  For an <a
            /// href="../../../concepts/external_tables/"
            /// target="_top">external table</a>, reloads all data in the table
            /// from its associated source files or <a
            /// href="../../../concepts/data_sources/" target="_top">data
            /// source</a>.</summary>
            public const string REFRESH = "refresh";

            /// <summary>For a <a href="../../../concepts/materialized_views/"
            /// target="_top">materialized view</a>, sets the method by which
            /// the view is refreshed to the method specified in <see
            /// cref="_value" /> - one of 'manual', 'periodic', or 'on_change'.
            /// For an <a href="../../../concepts/external_tables/"
            /// target="_top">external table</a>, sets the method by which the
            /// table is refreshed to the method specified in <see
            /// cref="_value" /> - either 'manual' or 'on_start'.</summary>
            public const string SET_REFRESH_METHOD = "set_refresh_method";

            /// <summary>Sets the time to start periodic refreshes of this <a
            /// href="../../../concepts/materialized_views/"
            /// target="_top">materialized view</a> to the datetime string
            /// specified in <see cref="_value" /> with format 'YYYY-MM-DD
            /// HH:MM:SS'.  Subsequent refreshes occur at the specified time +
            /// N * the refresh period.</summary>
            public const string SET_REFRESH_START_TIME = "set_refresh_start_time";

            /// <summary>Sets the time interval in seconds at which to refresh
            /// this <a href="../../../concepts/materialized_views/"
            /// target="_top">materialized view</a> to the value specified in
            /// <see cref="_value" />.  Also, sets the refresh method to
            /// periodic if not already set.</summary>
            public const string SET_REFRESH_PERIOD = "set_refresh_period";

            /// <summary>Sets the user name to refresh this <a
            /// href="../../../concepts/materialized_views/"
            /// target="_top">materialized view</a> to the value specified in
            /// <see cref="_value" />.</summary>
            public const string SET_REFRESH_EXECUTE_AS = "set_refresh_execute_as";

            /// <summary>Removes <a href="../../../concepts/full_text_search/"
            /// target="_top">text search</a> attribute from all
            /// columns.</summary>
            public const string REMOVE_TEXT_SEARCH_ATTRIBUTES = "remove_text_search_attributes";

            /// <summary>Sets the <a
            /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
            /// strategy</a> for the table and its columns to the one specified
            /// in <see cref="_value" />, replacing the existing tier strategy
            /// in its entirety. See <a
            /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
            /// strategy usage</a> for format and <a
            /// href="../../../rm/usage/#tier-strategies" target="_top">tier
            /// strategy examples</a> for examples.</summary>
            public const string SET_STRATEGY_DEFINITION = "set_strategy_definition";
        } // end struct Action


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ACTION">ACTION</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_NAME">COLUMN_NAME</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TABLE_NAME">TABLE_NAME</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>:</term>
        ///         <description>When adding a column, set a default value for
        /// existing records.  For nullable columns, the default value will be
        /// null, regardless of data type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:</term>
        ///         <description>When setting column compression
        /// (<i>set_column_compression</i> for <paramref
        /// cref="AlterTableRequest.action" />), compression type to use:
        /// <i>none</i> (to use no compression) or a valid compression type.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COPY_VALUES_FROM_COLUMN">COPY_VALUES_FROM_COLUMN</see>:</term>
        ///         <description>[DEPRECATED--please use
        /// <i>add_column_expression</i> instead.]</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.RENAME_COLUMN">RENAME_COLUMN</see>:</term>
        ///         <description>When changing a column, specify new column
        /// name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column, validate the change
        /// before applying it (or not).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Validate all values. A value too large (or too
        /// long) for the new type will prevent any change.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>When a value is too large or long, it will be
        /// truncated.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.UPDATE_LAST_ACCESS_TIME">UPDATE_LAST_ACCESS_TIME</see>:</term>
        ///         <description>Indicates whether the <a
        /// href="../../../concepts/ttl/" target="_top">time-to-live</a> (TTL)
        /// expiration countdown timer should be reset to the table's TTL.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Reset the expiration countdown timer to the
        /// table's configured TTL.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Don't reset the timer; expiration countdown
        /// will continue from where it is, as if the table had not been
        /// accessed.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>:</term>
        ///         <description>When adding a column, an optional expression
        /// to use for the new column's values. Any valid expression may be
        /// used, including one containing references to existing columns in
        /// the same table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>Optional parameter for specifying the <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns when <paramref
        /// cref="AlterTableRequest.action" /> is
        /// <i>set_strategy_definition</i>, replacing the existing tier
        /// strategy in its entirety. See <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../../rm/usage/#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.  This option will be ignored if
        /// <paramref cref="AlterTableRequest._value" /> is also
        /// specified.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.INDEX_TYPE">INDEX_TYPE</see>:</term>
        ///         <description>Type of index to create, when <paramref
        /// cref="AlterTableRequest.action" /> is <i>create_index</i>, or to
        /// delete, when <paramref cref="AlterTableRequest.action" /> is
        /// <i>delete_index</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN">COLUMN</see>:</term>
        ///         <description>Create or delete a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.CHUNK_SKIP">CHUNK_SKIP</see>:</term>
        ///         <description>Create or delete a <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.COLUMN">COLUMN</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {
            public const string ACTION = "action";
            public const string COLUMN_NAME = "column_name";
            public const string TABLE_NAME = "table_name";

            /// <summary>When adding a column, set a default value for existing
            /// records.  For nullable columns, the default value will be null,
            /// regardless of data type.</summary>
            public const string COLUMN_DEFAULT_VALUE = "column_default_value";

            /// <summary>When adding or changing a column, set the column
            /// properties (strings, separated by a comma: data, store_only,
            /// text_search, char8, int8 etc).</summary>
            public const string COLUMN_PROPERTIES = "column_properties";

            /// <summary>When adding or changing a column, set the column type
            /// (strings, separated by a comma: int, double, string, null
            /// etc).</summary>
            public const string COLUMN_TYPE = "column_type";

            /// <summary>When setting column compression
            /// (<i>set_column_compression</i> for <see cref="action" />),
            /// compression type to use: <i>none</i> (to use no compression) or
            /// a valid compression type.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</summary>
            public const string COMPRESSION_TYPE = "compression_type";
            public const string NONE = "none";
            public const string SNAPPY = "snappy";
            public const string LZ4 = "lz4";
            public const string LZ4HC = "lz4hc";

            /// <summary>[DEPRECATED--please use <i>add_column_expression</i>
            /// instead.]</summary>
            public const string COPY_VALUES_FROM_COLUMN = "copy_values_from_column";

            /// <summary>When changing a column, specify new column
            /// name.</summary>
            public const string RENAME_COLUMN = "rename_column";

            /// <summary>When changing a column, validate the change before
            /// applying it (or not).
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
            ///         <description>Validate all values. A value too large (or
            /// too long) for the new type will prevent any
            /// change.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
            ///         <description>When a value is too large or long, it will
            /// be truncated.</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</summary>
            public const string VALIDATE_CHANGE_COLUMN = "validate_change_column";

            /// <summary>Reset the expiration countdown timer to the table's
            /// configured TTL.</summary>
            public const string TRUE = "true";

            /// <summary>Don't reset the timer; expiration countdown will
            /// continue from where it is, as if the table had not been
            /// accessed.</summary>
            public const string FALSE = "false";

            /// <summary>Indicates whether the <a href="../../../concepts/ttl/"
            /// target="_top">time-to-live</a> (TTL) expiration countdown timer
            /// should be reset to the table's TTL.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
            ///         <description>Reset the expiration countdown timer to
            /// the table's configured TTL.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
            ///         <description>Don't reset the timer; expiration
            /// countdown will continue from where it is, as if the table had
            /// not been accessed.</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</summary>
            public const string UPDATE_LAST_ACCESS_TIME = "update_last_access_time";

            /// <summary>When adding a column, an optional expression to use
            /// for the new column's values. Any valid expression may be used,
            /// including one containing references to existing columns in the
            /// same table.</summary>
            public const string ADD_COLUMN_EXPRESSION = "add_column_expression";

            /// <summary>Optional parameter for specifying the <a
            /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
            /// strategy</a> for the table and its columns when <see
            /// cref="action" /> is <i>set_strategy_definition</i>, replacing
            /// the existing tier strategy in its entirety. See <a
            /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
            /// strategy usage</a> for format and <a
            /// href="../../../rm/usage/#tier-strategies" target="_top">tier
            /// strategy examples</a> for examples.  This option will be
            /// ignored if <see cref="_value" /> is also specified.</summary>
            public const string STRATEGY_DEFINITION = "strategy_definition";

            /// <summary>Type of index to create, when <see cref="action" /> is
            /// <i>create_index</i>, or to delete, when <see cref="action" />
            /// is <i>delete_index</i>.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.COLUMN">COLUMN</see>:</term>
            ///         <description>Create or delete a <a
            /// href="../../../concepts/indexes/#column-index"
            /// target="_top">column (attribute) index</a>.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.CHUNK_SKIP">CHUNK_SKIP</see>:</term>
            ///         <description>Create or delete a <a
            /// href="../../../concepts/indexes/#chunk-skip-index"
            /// target="_top">chunk skip index</a>.</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AlterTableRequest.Options.COLUMN">COLUMN</see>.</summary>
            public const string INDEX_TYPE = "index_type";

            /// <summary>Create or delete a <a
            /// href="../../../concepts/indexes/#column-index"
            /// target="_top">column (attribute) index</a>.</summary>
            public const string COLUMN = "column";

            /// <summary>Create or delete a <a
            /// href="../../../concepts/indexes/#chunk-skip-index"
            /// target="_top">chunk skip index</a>.</summary>
            public const string CHUNK_SKIP = "chunk_skip";
        } // end struct Options


        /// <summary>Table on which the operation will be performed, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing table
        /// or view.  </summary>
        public string table_name { get; set; }

        /// <summary>Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ALLOW_HOMOGENEOUS_TABLES">ALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>No longer supported; action will be
        /// ignored.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>:</term>
        ///         <description>Creates either a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a> or <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>, depending on the specified
        /// <i>index_type</i>, on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column already has the
        /// specified index, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>:</term>
        ///         <description>Deletes either a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a> or <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>, depending on the specified
        /// <i>index_type</i>, on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column does not have
        /// the specified index, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_COLLECTION">MOVE_TO_COLLECTION</see>:</term>
        ///         <description>[DEPRECATED--please use <i>move_to_schema</i>
        /// and use /create/schema to create the schema if non-existent]  Moves
        /// a table or view into a schema named <paramref
        /// cref="AlterTableRequest._value" />.  If the schema provided is
        /// non-existent, it will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_SCHEMA">MOVE_TO_SCHEMA</see>:</term>
        ///         <description>Moves a table or view into a schema named
        /// <paramref cref="AlterTableRequest._value" />.  If the schema
        /// provided is non-existent, an error will be thrown. If <paramref
        /// cref="AlterTableRequest._value" /> is empty, then the table or view
        /// will be placed in the user's default schema.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.PROTECTED">PROTECTED</see>:</term>
        ///         <description>No longer used.  Previously set whether the
        /// given <paramref cref="AlterTableRequest.table_name" /> should be
        /// protected or not. The <paramref cref="AlterTableRequest._value" />
        /// would have been either 'true' or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.RENAME_TABLE">RENAME_TABLE</see>:</term>
        ///         <description>Renames a table or view within its current
        /// schema to <paramref cref="AlterTableRequest._value" />. Has the
        /// same naming restrictions as <a href="../../../concepts/tables/"
        /// target="_top">tables</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">time-to-live</a> in minutes of the table or view
        /// specified in <paramref cref="AlterTableRequest.table_name"
        /// />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>:</term>
        ///         <description>Adds the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CHANGE_COLUMN">CHANGE_COLUMN</see>:</term>
        ///         <description>Changes type and properties of the column
        /// specified in <paramref cref="AlterTableRequest._value" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively. Note that primary key and/or shard key
        /// columns cannot be changed. All unchanging column properties must be
        /// listed for the change to take place, e.g., to add dictionary
        /// encoding to an existing 'char4' column, both 'char4' and 'dict'
        /// must be specified in the <paramref cref="AlterTableRequest.options"
        /// /> map.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_COLUMN_COMPRESSION">SET_COLUMN_COMPRESSION</see>:</term>
        ///         <description>Modifies the <a
        /// href="../../../concepts/compression/" target="_top">compression</a>
        /// setting on the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the compression type
        /// specified in <i>compression_type</i>. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_COLUMN">DELETE_COLUMN</see>:</term>
        ///         <description>Deletes the column specified in <paramref
        /// cref="AlterTableRequest._value" /> from the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_FOREIGN_KEY">CREATE_FOREIGN_KEY</see>:</term>
        ///         <description>Creates a <a
        /// href="../../../concepts/tables/#foreign-key" target="_top">foreign
        /// key</a> specified in <paramref cref="AlterTableRequest._value" />
        /// using the format '(source_column_name [, ...]) references
        /// target_table_name(primary_key_column_name [, ...]) [as
        /// foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_FOREIGN_KEY">DELETE_FOREIGN_KEY</see>:</term>
        ///         <description>Deletes a <a
        /// href="../../../concepts/tables/#foreign-key" target="_top">foreign
        /// key</a>.  The <paramref cref="AlterTableRequest._value" /> should
        /// be the foreign_key_name specified when creating the key or the
        /// complete string used to define it.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_PARTITION">ADD_PARTITION</see>:</term>
        ///         <description>Adds the partition specified in <paramref
        /// cref="AlterTableRequest._value" />, to either a <a
        /// href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_PARTITION">REMOVE_PARTITION</see>:</term>
        ///         <description>Removes the partition specified in <paramref
        /// cref="AlterTableRequest._value" /> (and relocates all of its data
        /// to the default partition) from either a <a
        /// href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_PARTITION">DELETE_PARTITION</see>:</term>
        ///         <description>Deletes the partition specified in <paramref
        /// cref="AlterTableRequest._value" /> (and all of its data) from
        /// either a <a href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_GLOBAL_ACCESS_MODE">SET_GLOBAL_ACCESS_MODE</see>:</term>
        ///         <description>Sets the global access mode (i.e. locking) for
        /// the table specified in <paramref
        /// cref="AlterTableRequest.table_name" />. Specify the access mode in
        /// <paramref cref="AlterTableRequest._value" />. Valid modes are
        /// 'no_access', 'read_only', 'write_only' and
        /// 'read_write'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REFRESH">REFRESH</see>:</term>
        ///         <description>For a <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a>, replays all the table creation
        /// commands required to create the view.  For an <a
        /// href="../../../concepts/external_tables/" target="_top">external
        /// table</a>, reloads all data in the table from its associated source
        /// files or <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_METHOD">SET_REFRESH_METHOD</see>:</term>
        ///         <description>For a <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a>, sets the method by which the
        /// view is refreshed to the method specified in <paramref
        /// cref="AlterTableRequest._value" /> - one of 'manual', 'periodic',
        /// or 'on_change'.  For an <a
        /// href="../../../concepts/external_tables/" target="_top">external
        /// table</a>, sets the method by which the table is refreshed to the
        /// method specified in <paramref cref="AlterTableRequest._value" /> -
        /// either 'manual' or 'on_start'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_START_TIME">SET_REFRESH_START_TIME</see>:</term>
        ///         <description>Sets the time to start periodic refreshes of
        /// this <a href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the datetime string
        /// specified in <paramref cref="AlterTableRequest._value" /> with
        /// format 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the
        /// specified time + N * the refresh period.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_PERIOD">SET_REFRESH_PERIOD</see>:</term>
        ///         <description>Sets the time interval in seconds at which to
        /// refresh this <a href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the value specified in
        /// <paramref cref="AlterTableRequest._value" />.  Also, sets the
        /// refresh method to periodic if not already set.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_EXECUTE_AS">SET_REFRESH_EXECUTE_AS</see>:</term>
        ///         <description>Sets the user name to refresh this <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the value specified in
        /// <paramref cref="AlterTableRequest._value" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_TEXT_SEARCH_ATTRIBUTES">REMOVE_TEXT_SEARCH_ATTRIBUTES</see>:</term>
        ///         <description>Removes <a
        /// href="../../../concepts/full_text_search/" target="_top">text
        /// search</a> attribute from all columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_STRATEGY_DEFINITION">SET_STRATEGY_DEFINITION</see>:</term>
        ///         <description>Sets the <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns to the one specified in
        /// <paramref cref="AlterTableRequest._value" />, replacing the
        /// existing tier strategy in its entirety. See <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../../rm/usage/#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>  </summary>
        public string action { get; set; }

        /// <summary>The value of the modification, depending on <paramref
        /// cref="AlterTableRequest.action" />.  For example, if <paramref
        /// cref="AlterTableRequest.action" /> is <i>add_column</i>, this would
        /// be the column name; while the column's definition would be covered
        /// by the <i>column_type</i>, <i>column_properties</i>,
        /// <i>column_default_value</i>, and <i>add_column_expression</i> in
        /// <paramref cref="AlterTableRequest.options" />.  If <paramref
        /// cref="AlterTableRequest.action" /> is <i>ttl</i>, it would be the
        /// number of minutes for the new TTL. If <paramref
        /// cref="AlterTableRequest.action" /> is <i>refresh</i>, this field
        /// would be blank.  </summary>
        public string _value { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ACTION">ACTION</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_NAME">COLUMN_NAME</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TABLE_NAME">TABLE_NAME</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>:</term>
        ///         <description>When adding a column, set a default value for
        /// existing records.  For nullable columns, the default value will be
        /// null, regardless of data type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:</term>
        ///         <description>When setting column compression
        /// (<i>set_column_compression</i> for <paramref
        /// cref="AlterTableRequest.action" />), compression type to use:
        /// <i>none</i> (to use no compression) or a valid compression type.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COPY_VALUES_FROM_COLUMN">COPY_VALUES_FROM_COLUMN</see>:</term>
        ///         <description>[DEPRECATED--please use
        /// <i>add_column_expression</i> instead.]</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.RENAME_COLUMN">RENAME_COLUMN</see>:</term>
        ///         <description>When changing a column, specify new column
        /// name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column, validate the change
        /// before applying it (or not).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Validate all values. A value too large (or too
        /// long) for the new type will prevent any change.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>When a value is too large or long, it will be
        /// truncated.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.UPDATE_LAST_ACCESS_TIME">UPDATE_LAST_ACCESS_TIME</see>:</term>
        ///         <description>Indicates whether the <a
        /// href="../../../concepts/ttl/" target="_top">time-to-live</a> (TTL)
        /// expiration countdown timer should be reset to the table's TTL.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Reset the expiration countdown timer to the
        /// table's configured TTL.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Don't reset the timer; expiration countdown
        /// will continue from where it is, as if the table had not been
        /// accessed.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>:</term>
        ///         <description>When adding a column, an optional expression
        /// to use for the new column's values. Any valid expression may be
        /// used, including one containing references to existing columns in
        /// the same table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>Optional parameter for specifying the <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns when <paramref
        /// cref="AlterTableRequest.action" /> is
        /// <i>set_strategy_definition</i>, replacing the existing tier
        /// strategy in its entirety. See <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../../rm/usage/#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.  This option will be ignored if
        /// <paramref cref="AlterTableRequest._value" /> is also
        /// specified.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.INDEX_TYPE">INDEX_TYPE</see>:</term>
        ///         <description>Type of index to create, when <paramref
        /// cref="AlterTableRequest.action" /> is <i>create_index</i>, or to
        /// delete, when <paramref cref="AlterTableRequest.action" /> is
        /// <i>delete_index</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN">COLUMN</see>:</term>
        ///         <description>Create or delete a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.CHUNK_SKIP">CHUNK_SKIP</see>:</term>
        ///         <description>Create or delete a <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.COLUMN">COLUMN</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AlterTableRequest object with default
        /// parameters.</summary>
        public AlterTableRequest() { }

        /// <summary>Constructs an AlterTableRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">Table on which the operation will be
        /// performed, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing table
        /// or view.  </param>
        /// <param name="action">Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ALLOW_HOMOGENEOUS_TABLES">ALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>No longer supported; action will be
        /// ignored.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>:</term>
        ///         <description>Creates either a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a> or <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>, depending on the specified
        /// <i>index_type</i>, on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column already has the
        /// specified index, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>:</term>
        ///         <description>Deletes either a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a> or <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>, depending on the specified
        /// <i>index_type</i>, on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column does not have
        /// the specified index, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_COLLECTION">MOVE_TO_COLLECTION</see>:</term>
        ///         <description>[DEPRECATED--please use <i>move_to_schema</i>
        /// and use /create/schema to create the schema if non-existent]  Moves
        /// a table or view into a schema named <paramref
        /// cref="AlterTableRequest._value" />.  If the schema provided is
        /// non-existent, it will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_SCHEMA">MOVE_TO_SCHEMA</see>:</term>
        ///         <description>Moves a table or view into a schema named
        /// <paramref cref="AlterTableRequest._value" />.  If the schema
        /// provided is non-existent, an error will be thrown. If <paramref
        /// cref="AlterTableRequest._value" /> is empty, then the table or view
        /// will be placed in the user's default schema.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.PROTECTED">PROTECTED</see>:</term>
        ///         <description>No longer used.  Previously set whether the
        /// given <paramref cref="AlterTableRequest.table_name" /> should be
        /// protected or not. The <paramref cref="AlterTableRequest._value" />
        /// would have been either 'true' or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.RENAME_TABLE">RENAME_TABLE</see>:</term>
        ///         <description>Renames a table or view within its current
        /// schema to <paramref cref="AlterTableRequest._value" />. Has the
        /// same naming restrictions as <a href="../../../concepts/tables/"
        /// target="_top">tables</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        /// target="_top">time-to-live</a> in minutes of the table or view
        /// specified in <paramref cref="AlterTableRequest.table_name"
        /// />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>:</term>
        ///         <description>Adds the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CHANGE_COLUMN">CHANGE_COLUMN</see>:</term>
        ///         <description>Changes type and properties of the column
        /// specified in <paramref cref="AlterTableRequest._value" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively. Note that primary key and/or shard key
        /// columns cannot be changed. All unchanging column properties must be
        /// listed for the change to take place, e.g., to add dictionary
        /// encoding to an existing 'char4' column, both 'char4' and 'dict'
        /// must be specified in the <paramref cref="AlterTableRequest.options"
        /// /> map.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_COLUMN_COMPRESSION">SET_COLUMN_COMPRESSION</see>:</term>
        ///         <description>Modifies the <a
        /// href="../../../concepts/compression/" target="_top">compression</a>
        /// setting on the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the compression type
        /// specified in <i>compression_type</i>. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_COLUMN">DELETE_COLUMN</see>:</term>
        ///         <description>Deletes the column specified in <paramref
        /// cref="AlterTableRequest._value" /> from the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_FOREIGN_KEY">CREATE_FOREIGN_KEY</see>:</term>
        ///         <description>Creates a <a
        /// href="../../../concepts/tables/#foreign-key" target="_top">foreign
        /// key</a> specified in <paramref cref="AlterTableRequest._value" />
        /// using the format '(source_column_name [, ...]) references
        /// target_table_name(primary_key_column_name [, ...]) [as
        /// foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_FOREIGN_KEY">DELETE_FOREIGN_KEY</see>:</term>
        ///         <description>Deletes a <a
        /// href="../../../concepts/tables/#foreign-key" target="_top">foreign
        /// key</a>.  The <paramref cref="AlterTableRequest._value" /> should
        /// be the foreign_key_name specified when creating the key or the
        /// complete string used to define it.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_PARTITION">ADD_PARTITION</see>:</term>
        ///         <description>Adds the partition specified in <paramref
        /// cref="AlterTableRequest._value" />, to either a <a
        /// href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_PARTITION">REMOVE_PARTITION</see>:</term>
        ///         <description>Removes the partition specified in <paramref
        /// cref="AlterTableRequest._value" /> (and relocates all of its data
        /// to the default partition) from either a <a
        /// href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_PARTITION">DELETE_PARTITION</see>:</term>
        ///         <description>Deletes the partition specified in <paramref
        /// cref="AlterTableRequest._value" /> (and all of its data) from
        /// either a <a href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_GLOBAL_ACCESS_MODE">SET_GLOBAL_ACCESS_MODE</see>:</term>
        ///         <description>Sets the global access mode (i.e. locking) for
        /// the table specified in <paramref
        /// cref="AlterTableRequest.table_name" />. Specify the access mode in
        /// <paramref cref="AlterTableRequest._value" />. Valid modes are
        /// 'no_access', 'read_only', 'write_only' and
        /// 'read_write'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REFRESH">REFRESH</see>:</term>
        ///         <description>For a <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a>, replays all the table creation
        /// commands required to create the view.  For an <a
        /// href="../../../concepts/external_tables/" target="_top">external
        /// table</a>, reloads all data in the table from its associated source
        /// files or <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_METHOD">SET_REFRESH_METHOD</see>:</term>
        ///         <description>For a <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a>, sets the method by which the
        /// view is refreshed to the method specified in <paramref
        /// cref="AlterTableRequest._value" /> - one of 'manual', 'periodic',
        /// or 'on_change'.  For an <a
        /// href="../../../concepts/external_tables/" target="_top">external
        /// table</a>, sets the method by which the table is refreshed to the
        /// method specified in <paramref cref="AlterTableRequest._value" /> -
        /// either 'manual' or 'on_start'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_START_TIME">SET_REFRESH_START_TIME</see>:</term>
        ///         <description>Sets the time to start periodic refreshes of
        /// this <a href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the datetime string
        /// specified in <paramref cref="AlterTableRequest._value" /> with
        /// format 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the
        /// specified time + N * the refresh period.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_PERIOD">SET_REFRESH_PERIOD</see>:</term>
        ///         <description>Sets the time interval in seconds at which to
        /// refresh this <a href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the value specified in
        /// <paramref cref="AlterTableRequest._value" />.  Also, sets the
        /// refresh method to periodic if not already set.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_EXECUTE_AS">SET_REFRESH_EXECUTE_AS</see>:</term>
        ///         <description>Sets the user name to refresh this <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> to the value specified in
        /// <paramref cref="AlterTableRequest._value" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_TEXT_SEARCH_ATTRIBUTES">REMOVE_TEXT_SEARCH_ATTRIBUTES</see>:</term>
        ///         <description>Removes <a
        /// href="../../../concepts/full_text_search/" target="_top">text
        /// search</a> attribute from all columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_STRATEGY_DEFINITION">SET_STRATEGY_DEFINITION</see>:</term>
        ///         <description>Sets the <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns to the one specified in
        /// <paramref cref="AlterTableRequest._value" />, replacing the
        /// existing tier strategy in its entirety. See <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../../rm/usage/#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="_value">The value of the modification, depending on
        /// <paramref cref="AlterTableRequest.action" />.  For example, if
        /// <paramref cref="AlterTableRequest.action" /> is <i>add_column</i>,
        /// this would be the column name; while the column's definition would
        /// be covered by the <i>column_type</i>, <i>column_properties</i>,
        /// <i>column_default_value</i>, and <i>add_column_expression</i> in
        /// <paramref cref="AlterTableRequest.options" />.  If <paramref
        /// cref="AlterTableRequest.action" /> is <i>ttl</i>, it would be the
        /// number of minutes for the new TTL. If <paramref
        /// cref="AlterTableRequest.action" /> is <i>refresh</i>, this field
        /// would be blank.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ACTION">ACTION</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_NAME">COLUMN_NAME</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TABLE_NAME">TABLE_NAME</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>:</term>
        ///         <description>When adding a column, set a default value for
        /// existing records.  For nullable columns, the default value will be
        /// null, regardless of data type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:</term>
        ///         <description>When setting column compression
        /// (<i>set_column_compression</i> for <paramref
        /// cref="AlterTableRequest.action" />), compression type to use:
        /// <i>none</i> (to use no compression) or a valid compression type.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COPY_VALUES_FROM_COLUMN">COPY_VALUES_FROM_COLUMN</see>:</term>
        ///         <description>[DEPRECATED--please use
        /// <i>add_column_expression</i> instead.]</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.RENAME_COLUMN">RENAME_COLUMN</see>:</term>
        ///         <description>When changing a column, specify new column
        /// name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column, validate the change
        /// before applying it (or not).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Validate all values. A value too large (or too
        /// long) for the new type will prevent any change.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>When a value is too large or long, it will be
        /// truncated.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.UPDATE_LAST_ACCESS_TIME">UPDATE_LAST_ACCESS_TIME</see>:</term>
        ///         <description>Indicates whether the <a
        /// href="../../../concepts/ttl/" target="_top">time-to-live</a> (TTL)
        /// expiration countdown timer should be reset to the table's TTL.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>Reset the expiration countdown timer to the
        /// table's configured TTL.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>Don't reset the timer; expiration countdown
        /// will continue from where it is, as if the table had not been
        /// accessed.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>:</term>
        ///         <description>When adding a column, an optional expression
        /// to use for the new column's values. Any valid expression may be
        /// used, including one containing references to existing columns in
        /// the same table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:</term>
        ///         <description>Optional parameter for specifying the <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a> for the table and its columns when <paramref
        /// cref="AlterTableRequest.action" /> is
        /// <i>set_strategy_definition</i>, replacing the existing tier
        /// strategy in its entirety. See <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy usage</a> for format and <a
        /// href="../../../rm/usage/#tier-strategies" target="_top">tier
        /// strategy examples</a> for examples.  This option will be ignored if
        /// <paramref cref="AlterTableRequest._value" /> is also
        /// specified.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.INDEX_TYPE">INDEX_TYPE</see>:</term>
        ///         <description>Type of index to create, when <paramref
        /// cref="AlterTableRequest.action" /> is <i>create_index</i>, or to
        /// delete, when <paramref cref="AlterTableRequest.action" /> is
        /// <i>delete_index</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN">COLUMN</see>:</term>
        ///         <description>Create or delete a <a
        /// href="../../../concepts/indexes/#column-index" target="_top">column
        /// (attribute) index</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.CHUNK_SKIP">CHUNK_SKIP</see>:</term>
        ///         <description>Create or delete a <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip index</a>.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.COLUMN">COLUMN</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public AlterTableRequest( string table_name,
                                  string action,
                                  string _value,
                                  IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.action = action ?? "";
            this._value = _value ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AlterTableRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.alterTable(string,string,string,IDictionary{string, string})"
    /// />.</summary>
    public class AlterTableResponse : KineticaData
    {

        /// <summary>Table on which the operation was performed.  </summary>
        public string table_name { get; set; }

        /// <summary>Modification operation that was performed.  </summary>
        public string action { get; set; }

        /// <summary>The value of the modification that was performed.
        /// </summary>
        public string _value { get; set; }

        /// <summary>return the type_id (when changing a table, a new type may
        /// be created)  </summary>
        public string type_id { get; set; }

        /// <summary>return the type_definition  (when changing a table, a new
        /// type may be created)  </summary>
        public string type_definition { get; set; }

        /// <summary>return the type properties  (when changing a table, a new
        /// type may be created)  </summary>
        public IDictionary<string, IList<string>> properties { get; set; } = new Dictionary<string, IList<string>>();

        /// <summary>return the type label  (when changing a table, a new type
        /// may be created)  </summary>
        public string label { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AlterTableResponse




}  // end namespace kinetica
