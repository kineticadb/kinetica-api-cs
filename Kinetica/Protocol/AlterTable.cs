/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.alterTable(string,string,string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Apply various modifications to a table, view, or collection.  The
    /// available
    /// modifications include the following:
    /// <br />
    /// Create or delete an <a href="../../concepts/indexes.html#column-index"
    /// target="_top">index</a> on a
    /// particular column. This can speed up certain operations when using
    /// expressions
    /// containing equality or relational operators on indexed columns. This
    /// only
    /// applies to tables.
    /// <br />
    /// Set the <a href="../../concepts/ttl.html" target="_top">time-to-live
    /// (TTL)</a>. This can be applied
    /// to tables, views, or collections.  When applied to collections, every
    /// contained
    /// table & view that is not protected will have its TTL set to the given
    /// value.
    /// <br />
    /// Set the global access mode (i.e. locking) for a table. This setting
    /// trumps any
    /// role-based access controls that may be in place; e.g., a user with
    /// write access
    /// to a table marked read-only will not be able to insert records into it.
    /// The mode
    /// can be set to read-only, write-only, read/write, and no access.
    /// <br />
    /// Change the <a href="../../concepts/protection.html"
    /// target="_top">protection</a> mode to prevent or
    /// allow automatic expiration. This can be applied to tables, views, and
    /// collections.
    /// <br />
    /// Allow homogeneous tables within a collection.
    /// <br />
    /// Manage a table's columns--a column can be added, removed, or have its
    /// <a href="../../concepts/types.html" target="_top">type and
    /// properties</a> modified.
    /// <br />
    /// Set or unset <a href="../../concepts/compression.html"
    /// target="_top">compression</a> for a column.</summary>
    public class AlterTableRequest : KineticaData
    {

        /// <summary>Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ALLOW_HOMOGENEOUS_TABLES">ALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>Sets whether homogeneous tables are allowed in
        /// the given collection. This action is only valid if <paramref
        /// cref="AlterTableRequest.table_name" /> is a collection. The
        /// <paramref cref="AlterTableRequest._value" /> must be either 'true'
        /// or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>:</term>
        ///         <description>Creates an <a
        /// href="../../concepts/indexes.html#column-index"
        /// target="_top">index</a> on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column is already
        /// indexed, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>:</term>
        ///         <description>Deletes an existing <a
        /// href="../../concepts/indexes.html#column-index"
        /// target="_top">index</a> on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column does not have
        /// indexing turned on, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_COLLECTION">MOVE_TO_COLLECTION</see>:</term>
        ///         <description>Moves a table into a collection <paramref
        /// cref="AlterTableRequest._value" />. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.PROTECTED">PROTECTED</see>:</term>
        ///         <description>Sets whether the given <paramref
        /// cref="AlterTableRequest.table_name" /> should be <a
        /// href="../../concepts/protection.html" target="_top">protected</a>
        /// or not. The <paramref cref="AlterTableRequest._value" /> must be
        /// either 'true' or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.RENAME_TABLE">RENAME_TABLE</see>:</term>
        ///         <description>Renames a table, view or collection to
        /// <paramref cref="AlterTableRequest._value" />. Has the same naming
        /// restrictions as <a href="../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">time-to-live</a> in minutes of the table, view, or
        /// collection specified in <paramref
        /// cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MEMORY_TTL">MEMORY_TTL</see>:</term>
        ///         <description>Sets the time-to-live in minutes for the
        /// individual chunks of the columns of the table, view, or collection
        /// specified in <paramref cref="AlterTableRequest.table_name" /> to
        /// free their memory if unused longer than the given time. Specify an
        /// empty string to restore the global memory_ttl setting and a value
        /// of '-1' for an infinite timeout.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>:</term>
        ///         <description>Adds the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CHANGE_COLUMN">CHANGE_COLUMN</see>:</term>
        ///         <description>Changes type and properties of the column
        /// specified in <paramref cref="AlterTableRequest._value" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively. Note that primary key and/or shard key
        /// columns cannot be changed. All unchanging column properties must be
        /// listed for the change to take place, e.g., to add dictionary
        /// encoding to an existing 'char4' column, both 'char4' and 'dict'
        /// must be specified in the <paramref cref="AlterTableRequest.options"
        /// /> map.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_COLUMN_COMPRESSION">SET_COLUMN_COMPRESSION</see>:</term>
        ///         <description>Modifies the <a
        /// href="../../concepts/compression.html"
        /// target="_top">compression</a> setting on the column specified in
        /// <paramref cref="AlterTableRequest._value" />. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_COLUMN">DELETE_COLUMN</see>:</term>
        ///         <description>Deletes the column specified in <paramref
        /// cref="AlterTableRequest._value" /> from the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_FOREIGN_KEY">CREATE_FOREIGN_KEY</see>:</term>
        ///         <description>Creates a <a
        /// href="../../concepts/tables.html#foreign-key" target="_top">foreign
        /// key</a> using the format '(source_column_name [, ...]) references
        /// target_table_name(primary_key_column_name [, ...]) [as
        /// foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_FOREIGN_KEY">DELETE_FOREIGN_KEY</see>:</term>
        ///         <description>Deletes a <a
        /// href="../../concepts/tables.html#foreign-key" target="_top">foreign
        /// key</a>.  The <paramref cref="AlterTableRequest._value" /> should
        /// be the foreign_key_name specified when creating the key or the
        /// complete string used to define it.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_GLOBAL_ACCESS_MODE">SET_GLOBAL_ACCESS_MODE</see>:</term>
        ///         <description>Sets the global access mode (i.e. locking) for
        /// the table specified in <paramref
        /// cref="AlterTableRequest.table_name" />. Specify the access mode in
        /// <paramref cref="AlterTableRequest._value" />. Valid modes are
        /// 'no_access', 'read_only', 'write_only' and
        /// 'read_write'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REFRESH">REFRESH</see>:</term>
        ///         <description>Replays all the table creation commands
        /// required to create this <a
        /// href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_METHOD">SET_REFRESH_METHOD</see>:</term>
        ///         <description>Sets the method by which this <a
        /// href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a> is refreshed - one of 'manual',
        /// 'periodic', 'on_change'. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_START_TIME">SET_REFRESH_START_TIME</see>:</term>
        ///         <description>Sets the time to start periodic refreshes of
        /// this <a href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a> to datetime string with format
        /// 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the specified
        /// time + N * the refresh period.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_PERIOD">SET_REFRESH_PERIOD</see>:</term>
        ///         <description>Sets the time interval in seconds at which to
        /// refresh this <a href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a>.  Also, sets the refresh method
        /// to periodic if not alreay set.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_TEXT_SEARCH_ATTRIBUTES">REMOVE_TEXT_SEARCH_ATTRIBUTES</see>:</term>
        ///         <description>remove text_search attribute from all columns,
        /// if exists.</description>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <see cref="action"
        /// />.</summary>
        public struct Action
        {

            /// <summary>Sets whether homogeneous tables are allowed in the
            /// given collection. This action is only valid if <see
            /// cref="table_name" /> is a collection. The <see cref="_value" />
            /// must be either 'true' or 'false'.</summary>
            public const string ALLOW_HOMOGENEOUS_TABLES = "allow_homogeneous_tables";

            /// <summary>Creates an <a
            /// href="../../concepts/indexes.html#column-index"
            /// target="_top">index</a> on the column name specified in <see
            /// cref="_value" />. If this column is already indexed, an error
            /// will be returned.</summary>
            public const string CREATE_INDEX = "create_index";

            /// <summary>Deletes an existing <a
            /// href="../../concepts/indexes.html#column-index"
            /// target="_top">index</a> on the column name specified in <see
            /// cref="_value" />. If this column does not have indexing turned
            /// on, an error will be returned.</summary>
            public const string DELETE_INDEX = "delete_index";

            /// <summary>Moves a table into a collection <see cref="_value" />.
            /// </summary>
            public const string MOVE_TO_COLLECTION = "move_to_collection";

            /// <summary>Sets whether the given <see cref="table_name" />
            /// should be <a href="../../concepts/protection.html"
            /// target="_top">protected</a> or not. The <see cref="_value" />
            /// must be either 'true' or 'false'.</summary>
            public const string PROTECTED = "protected";

            /// <summary>Renames a table, view or collection to <see
            /// cref="_value" />. Has the same naming restrictions as <a
            /// href="../../concepts/tables.html"
            /// target="_top">tables</a>.</summary>
            public const string RENAME_TABLE = "rename_table";

            /// <summary>Sets the <a href="../../concepts/ttl.html"
            /// target="_top">time-to-live</a> in minutes of the table, view,
            /// or collection specified in <see cref="table_name" />.</summary>
            public const string TTL = "ttl";

            /// <summary>Sets the time-to-live in minutes for the individual
            /// chunks of the columns of the table, view, or collection
            /// specified in <see cref="table_name" /> to free their memory if
            /// unused longer than the given time. Specify an empty string to
            /// restore the global memory_ttl setting and a value of '-1' for
            /// an infinite timeout.</summary>
            public const string MEMORY_TTL = "memory_ttl";

            /// <summary>Adds the column specified in <see cref="_value" /> to
            /// the table specified in <see cref="table_name" />.  Use
            /// <i>column_type</i> and <i>column_properties</i> in <see
            /// cref="options" /> to set the column's type and properties,
            /// respectively.</summary>
            public const string ADD_COLUMN = "add_column";

            /// <summary>Changes type and properties of the column specified in
            /// <see cref="_value" />.  Use <i>column_type</i> and
            /// <i>column_properties</i> in <see cref="options" /> to set the
            /// column's type and properties, respectively. Note that primary
            /// key and/or shard key columns cannot be changed. All unchanging
            /// column properties must be listed for the change to take place,
            /// e.g., to add dictionary encoding to an existing 'char4' column,
            /// both 'char4' and 'dict' must be specified in the <see
            /// cref="options" /> map.</summary>
            public const string CHANGE_COLUMN = "change_column";

            /// <summary>Modifies the <a href="../../concepts/compression.html"
            /// target="_top">compression</a> setting on the column specified
            /// in <see cref="_value" />. </summary>
            public const string SET_COLUMN_COMPRESSION = "set_column_compression";

            /// <summary>Deletes the column specified in <see cref="_value" />
            /// from the table specified in <see cref="table_name"
            /// />.</summary>
            public const string DELETE_COLUMN = "delete_column";

            /// <summary>Creates a <a
            /// href="../../concepts/tables.html#foreign-key"
            /// target="_top">foreign key</a> using the format
            /// '(source_column_name [, ...]) references
            /// target_table_name(primary_key_column_name [, ...]) [as
            /// foreign_key_name]'.</summary>
            public const string CREATE_FOREIGN_KEY = "create_foreign_key";

            /// <summary>Deletes a <a
            /// href="../../concepts/tables.html#foreign-key"
            /// target="_top">foreign key</a>.  The <see cref="_value" />
            /// should be the foreign_key_name specified when creating the key
            /// or the complete string used to define it.</summary>
            public const string DELETE_FOREIGN_KEY = "delete_foreign_key";

            /// <summary>Sets the global access mode (i.e. locking) for the
            /// table specified in <see cref="table_name" />. Specify the
            /// access mode in <see cref="_value" />. Valid modes are
            /// 'no_access', 'read_only', 'write_only' and
            /// 'read_write'.</summary>
            public const string SET_GLOBAL_ACCESS_MODE = "set_global_access_mode";

            /// <summary>Replays all the table creation commands required to
            /// create this <a href="../../concepts/materialized_views.html"
            /// target="_top">materialized view</a>.</summary>
            public const string REFRESH = "refresh";

            /// <summary>Sets the method by which this <a
            /// href="../../concepts/materialized_views.html"
            /// target="_top">materialized view</a> is refreshed - one of
            /// 'manual', 'periodic', 'on_change'. </summary>
            public const string SET_REFRESH_METHOD = "set_refresh_method";

            /// <summary>Sets the time to start periodic refreshes of this <a
            /// href="../../concepts/materialized_views.html"
            /// target="_top">materialized view</a> to datetime string with
            /// format 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at
            /// the specified time + N * the refresh period.</summary>
            public const string SET_REFRESH_START_TIME = "set_refresh_start_time";

            /// <summary>Sets the time interval in seconds at which to refresh
            /// this <a href="../../concepts/materialized_views.html"
            /// target="_top">materialized view</a>.  Also, sets the refresh
            /// method to periodic if not alreay set.</summary>
            public const string SET_REFRESH_PERIOD = "set_refresh_period";

            /// <summary>remove text_search attribute from all columns, if
            /// exists.</summary>
            public const string REMOVE_TEXT_SEARCH_ATTRIBUTES = "remove_text_search_attributes";
        } // end struct Action


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>:</term>
        ///         <description>When adding a column, set a default value for
        /// existing records.  For nullable columns, the default value will be
        /// null, regardless of data type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:</term>
        ///         <description>When setting column compression
        /// (<i>set_column_compression</i> for <paramref
        /// cref="AlterTableRequest.action" />), compression type to use:
        /// <i>none</i> (to use no compression) or a valid compression type.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COPY_VALUES_FROM_COLUMN">COPY_VALUES_FROM_COLUMN</see>:</term>
        ///         <description>please see add_column_expression
        /// instead.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.RENAME_COLUMN">RENAME_COLUMN</see>:</term>
        ///         <description>When changing a column, specify new column
        /// name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column, validate the change
        /// before applying it. If <i>true</i>, then validate all values. A
        /// value too large (or too long) for the new type will prevent any
        /// change. If <i>false</i>, then when a value is too large or long, it
        /// will be truncated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>true</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>false</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.UPDATE_LAST_ACCESS_TIME">UPDATE_LAST_ACCESS_TIME</see>:</term>
        ///         <description>Indicates whether need to update the
        /// last_access_time.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>:</term>
        ///         <description>expression for new column's values (optional
        /// with add_column). Any valid expressions including existing
        /// columns.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>When adding a column, set a default value for existing
            /// records.  For nullable columns, the default value will be null,
            /// regardless of data type.</summary>
            public const string COLUMN_DEFAULT_VALUE = "column_default_value";

            /// <summary>When adding or changing a column, set the column
            /// properties (strings, separated by a comma: data, store_only,
            /// text_search, char8, int8 etc).</summary>
            public const string COLUMN_PROPERTIES = "column_properties";

            /// <summary>When adding or changing a column, set the column type
            /// (strings, separated by a comma: int, double, string, null
            /// etc).</summary>
            public const string COLUMN_TYPE = "column_type";

            /// <summary>When setting column compression
            /// (<i>set_column_compression</i> for <see cref="action" />),
            /// compression type to use: <i>none</i> (to use no compression) or
            /// a valid compression type.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</summary>
            public const string COMPRESSION_TYPE = "compression_type";
            public const string NONE = "none";
            public const string SNAPPY = "snappy";
            public const string LZ4 = "lz4";
            public const string LZ4HC = "lz4hc";

            /// <summary>please see add_column_expression instead.</summary>
            public const string COPY_VALUES_FROM_COLUMN = "copy_values_from_column";

            /// <summary>When changing a column, specify new column
            /// name.</summary>
            public const string RENAME_COLUMN = "rename_column";

            /// <summary>When changing a column, validate the change before
            /// applying it. If <i>true</i>, then validate all values. A value
            /// too large (or too long) for the new type will prevent any
            /// change. If <i>false</i>, then when a value is too large or
            /// long, it will be truncated.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
            ///         <description>true</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
            ///         <description>false</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</summary>
            public const string VALIDATE_CHANGE_COLUMN = "validate_change_column";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Indicates whether need to update the last_access_time.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AlterTableRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</summary>
            public const string UPDATE_LAST_ACCESS_TIME = "update_last_access_time";

            /// <summary>expression for new column's values (optional with
            /// add_column). Any valid expressions including existing
            /// columns.</summary>
            public const string ADD_COLUMN_EXPRESSION = "add_column_expression";
        } // end struct Options


        /// <summary>Table on which the operation will be performed. Must be an
        /// existing table, view, or collection.  </summary>
        public string table_name { get; set; }

        /// <summary>Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ALLOW_HOMOGENEOUS_TABLES">ALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>Sets whether homogeneous tables are allowed in
        /// the given collection. This action is only valid if <paramref
        /// cref="AlterTableRequest.table_name" /> is a collection. The
        /// <paramref cref="AlterTableRequest._value" /> must be either 'true'
        /// or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>:</term>
        ///         <description>Creates an <a
        /// href="../../concepts/indexes.html#column-index"
        /// target="_top">index</a> on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column is already
        /// indexed, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>:</term>
        ///         <description>Deletes an existing <a
        /// href="../../concepts/indexes.html#column-index"
        /// target="_top">index</a> on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column does not have
        /// indexing turned on, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_COLLECTION">MOVE_TO_COLLECTION</see>:</term>
        ///         <description>Moves a table into a collection <paramref
        /// cref="AlterTableRequest._value" />. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.PROTECTED">PROTECTED</see>:</term>
        ///         <description>Sets whether the given <paramref
        /// cref="AlterTableRequest.table_name" /> should be <a
        /// href="../../concepts/protection.html" target="_top">protected</a>
        /// or not. The <paramref cref="AlterTableRequest._value" /> must be
        /// either 'true' or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.RENAME_TABLE">RENAME_TABLE</see>:</term>
        ///         <description>Renames a table, view or collection to
        /// <paramref cref="AlterTableRequest._value" />. Has the same naming
        /// restrictions as <a href="../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">time-to-live</a> in minutes of the table, view, or
        /// collection specified in <paramref
        /// cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MEMORY_TTL">MEMORY_TTL</see>:</term>
        ///         <description>Sets the time-to-live in minutes for the
        /// individual chunks of the columns of the table, view, or collection
        /// specified in <paramref cref="AlterTableRequest.table_name" /> to
        /// free their memory if unused longer than the given time. Specify an
        /// empty string to restore the global memory_ttl setting and a value
        /// of '-1' for an infinite timeout.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>:</term>
        ///         <description>Adds the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CHANGE_COLUMN">CHANGE_COLUMN</see>:</term>
        ///         <description>Changes type and properties of the column
        /// specified in <paramref cref="AlterTableRequest._value" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively. Note that primary key and/or shard key
        /// columns cannot be changed. All unchanging column properties must be
        /// listed for the change to take place, e.g., to add dictionary
        /// encoding to an existing 'char4' column, both 'char4' and 'dict'
        /// must be specified in the <paramref cref="AlterTableRequest.options"
        /// /> map.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_COLUMN_COMPRESSION">SET_COLUMN_COMPRESSION</see>:</term>
        ///         <description>Modifies the <a
        /// href="../../concepts/compression.html"
        /// target="_top">compression</a> setting on the column specified in
        /// <paramref cref="AlterTableRequest._value" />. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_COLUMN">DELETE_COLUMN</see>:</term>
        ///         <description>Deletes the column specified in <paramref
        /// cref="AlterTableRequest._value" /> from the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_FOREIGN_KEY">CREATE_FOREIGN_KEY</see>:</term>
        ///         <description>Creates a <a
        /// href="../../concepts/tables.html#foreign-key" target="_top">foreign
        /// key</a> using the format '(source_column_name [, ...]) references
        /// target_table_name(primary_key_column_name [, ...]) [as
        /// foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_FOREIGN_KEY">DELETE_FOREIGN_KEY</see>:</term>
        ///         <description>Deletes a <a
        /// href="../../concepts/tables.html#foreign-key" target="_top">foreign
        /// key</a>.  The <paramref cref="AlterTableRequest._value" /> should
        /// be the foreign_key_name specified when creating the key or the
        /// complete string used to define it.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_GLOBAL_ACCESS_MODE">SET_GLOBAL_ACCESS_MODE</see>:</term>
        ///         <description>Sets the global access mode (i.e. locking) for
        /// the table specified in <paramref
        /// cref="AlterTableRequest.table_name" />. Specify the access mode in
        /// <paramref cref="AlterTableRequest._value" />. Valid modes are
        /// 'no_access', 'read_only', 'write_only' and
        /// 'read_write'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REFRESH">REFRESH</see>:</term>
        ///         <description>Replays all the table creation commands
        /// required to create this <a
        /// href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_METHOD">SET_REFRESH_METHOD</see>:</term>
        ///         <description>Sets the method by which this <a
        /// href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a> is refreshed - one of 'manual',
        /// 'periodic', 'on_change'. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_START_TIME">SET_REFRESH_START_TIME</see>:</term>
        ///         <description>Sets the time to start periodic refreshes of
        /// this <a href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a> to datetime string with format
        /// 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the specified
        /// time + N * the refresh period.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_PERIOD">SET_REFRESH_PERIOD</see>:</term>
        ///         <description>Sets the time interval in seconds at which to
        /// refresh this <a href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a>.  Also, sets the refresh method
        /// to periodic if not alreay set.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_TEXT_SEARCH_ATTRIBUTES">REMOVE_TEXT_SEARCH_ATTRIBUTES</see>:</term>
        ///         <description>remove text_search attribute from all columns,
        /// if exists.</description>
        ///     </item>
        /// </list>  </summary>
        public string action { get; set; }

        /// <summary>The value of the modification. May be a column name,
        /// 'true' or 'false', a TTL, or the global access mode depending on
        /// <paramref cref="AlterTableRequest.action" />.  </summary>
        public string _value { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>:</term>
        ///         <description>When adding a column, set a default value for
        /// existing records.  For nullable columns, the default value will be
        /// null, regardless of data type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:</term>
        ///         <description>When setting column compression
        /// (<i>set_column_compression</i> for <paramref
        /// cref="AlterTableRequest.action" />), compression type to use:
        /// <i>none</i> (to use no compression) or a valid compression type.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COPY_VALUES_FROM_COLUMN">COPY_VALUES_FROM_COLUMN</see>:</term>
        ///         <description>please see add_column_expression
        /// instead.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.RENAME_COLUMN">RENAME_COLUMN</see>:</term>
        ///         <description>When changing a column, specify new column
        /// name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column, validate the change
        /// before applying it. If <i>true</i>, then validate all values. A
        /// value too large (or too long) for the new type will prevent any
        /// change. If <i>false</i>, then when a value is too large or long, it
        /// will be truncated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>true</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>false</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.UPDATE_LAST_ACCESS_TIME">UPDATE_LAST_ACCESS_TIME</see>:</term>
        ///         <description>Indicates whether need to update the
        /// last_access_time.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>:</term>
        ///         <description>expression for new column's values (optional
        /// with add_column). Any valid expressions including existing
        /// columns.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AlterTableRequest object with default
        /// parameters.</summary>
        public AlterTableRequest() { }

        /// <summary>Constructs an AlterTableRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">Table on which the operation will be
        /// performed. Must be an existing table, view, or collection.
        /// </param>
        /// <param name="action">Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ALLOW_HOMOGENEOUS_TABLES">ALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>Sets whether homogeneous tables are allowed in
        /// the given collection. This action is only valid if <paramref
        /// cref="AlterTableRequest.table_name" /> is a collection. The
        /// <paramref cref="AlterTableRequest._value" /> must be either 'true'
        /// or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>:</term>
        ///         <description>Creates an <a
        /// href="../../concepts/indexes.html#column-index"
        /// target="_top">index</a> on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column is already
        /// indexed, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>:</term>
        ///         <description>Deletes an existing <a
        /// href="../../concepts/indexes.html#column-index"
        /// target="_top">index</a> on the column name specified in <paramref
        /// cref="AlterTableRequest._value" />. If this column does not have
        /// indexing turned on, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_COLLECTION">MOVE_TO_COLLECTION</see>:</term>
        ///         <description>Moves a table into a collection <paramref
        /// cref="AlterTableRequest._value" />. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.PROTECTED">PROTECTED</see>:</term>
        ///         <description>Sets whether the given <paramref
        /// cref="AlterTableRequest.table_name" /> should be <a
        /// href="../../concepts/protection.html" target="_top">protected</a>
        /// or not. The <paramref cref="AlterTableRequest._value" /> must be
        /// either 'true' or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.RENAME_TABLE">RENAME_TABLE</see>:</term>
        ///         <description>Renames a table, view or collection to
        /// <paramref cref="AlterTableRequest._value" />. Has the same naming
        /// restrictions as <a href="../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../concepts/ttl.html"
        /// target="_top">time-to-live</a> in minutes of the table, view, or
        /// collection specified in <paramref
        /// cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MEMORY_TTL">MEMORY_TTL</see>:</term>
        ///         <description>Sets the time-to-live in minutes for the
        /// individual chunks of the columns of the table, view, or collection
        /// specified in <paramref cref="AlterTableRequest.table_name" /> to
        /// free their memory if unused longer than the given time. Specify an
        /// empty string to restore the global memory_ttl setting and a value
        /// of '-1' for an infinite timeout.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>:</term>
        ///         <description>Adds the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CHANGE_COLUMN">CHANGE_COLUMN</see>:</term>
        ///         <description>Changes type and properties of the column
        /// specified in <paramref cref="AlterTableRequest._value" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively. Note that primary key and/or shard key
        /// columns cannot be changed. All unchanging column properties must be
        /// listed for the change to take place, e.g., to add dictionary
        /// encoding to an existing 'char4' column, both 'char4' and 'dict'
        /// must be specified in the <paramref cref="AlterTableRequest.options"
        /// /> map.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_COLUMN_COMPRESSION">SET_COLUMN_COMPRESSION</see>:</term>
        ///         <description>Modifies the <a
        /// href="../../concepts/compression.html"
        /// target="_top">compression</a> setting on the column specified in
        /// <paramref cref="AlterTableRequest._value" />. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_COLUMN">DELETE_COLUMN</see>:</term>
        ///         <description>Deletes the column specified in <paramref
        /// cref="AlterTableRequest._value" /> from the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_FOREIGN_KEY">CREATE_FOREIGN_KEY</see>:</term>
        ///         <description>Creates a <a
        /// href="../../concepts/tables.html#foreign-key" target="_top">foreign
        /// key</a> using the format '(source_column_name [, ...]) references
        /// target_table_name(primary_key_column_name [, ...]) [as
        /// foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_FOREIGN_KEY">DELETE_FOREIGN_KEY</see>:</term>
        ///         <description>Deletes a <a
        /// href="../../concepts/tables.html#foreign-key" target="_top">foreign
        /// key</a>.  The <paramref cref="AlterTableRequest._value" /> should
        /// be the foreign_key_name specified when creating the key or the
        /// complete string used to define it.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_GLOBAL_ACCESS_MODE">SET_GLOBAL_ACCESS_MODE</see>:</term>
        ///         <description>Sets the global access mode (i.e. locking) for
        /// the table specified in <paramref
        /// cref="AlterTableRequest.table_name" />. Specify the access mode in
        /// <paramref cref="AlterTableRequest._value" />. Valid modes are
        /// 'no_access', 'read_only', 'write_only' and
        /// 'read_write'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REFRESH">REFRESH</see>:</term>
        ///         <description>Replays all the table creation commands
        /// required to create this <a
        /// href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_METHOD">SET_REFRESH_METHOD</see>:</term>
        ///         <description>Sets the method by which this <a
        /// href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a> is refreshed - one of 'manual',
        /// 'periodic', 'on_change'. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_START_TIME">SET_REFRESH_START_TIME</see>:</term>
        ///         <description>Sets the time to start periodic refreshes of
        /// this <a href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a> to datetime string with format
        /// 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the specified
        /// time + N * the refresh period.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_REFRESH_PERIOD">SET_REFRESH_PERIOD</see>:</term>
        ///         <description>Sets the time interval in seconds at which to
        /// refresh this <a href="../../concepts/materialized_views.html"
        /// target="_top">materialized view</a>.  Also, sets the refresh method
        /// to periodic if not alreay set.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.REMOVE_TEXT_SEARCH_ATTRIBUTES">REMOVE_TEXT_SEARCH_ATTRIBUTES</see>:</term>
        ///         <description>remove text_search attribute from all columns,
        /// if exists.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="_value">The value of the modification. May be a column
        /// name, 'true' or 'false', a TTL, or the global access mode depending
        /// on <paramref cref="AlterTableRequest.action" />.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>:</term>
        ///         <description>When adding a column, set a default value for
        /// existing records.  For nullable columns, the default value will be
        /// null, regardless of data type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:</term>
        ///         <description>When setting column compression
        /// (<i>set_column_compression</i> for <paramref
        /// cref="AlterTableRequest.action" />), compression type to use:
        /// <i>none</i> (to use no compression) or a valid compression type.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COPY_VALUES_FROM_COLUMN">COPY_VALUES_FROM_COLUMN</see>:</term>
        ///         <description>please see add_column_expression
        /// instead.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.RENAME_COLUMN">RENAME_COLUMN</see>:</term>
        ///         <description>When changing a column, specify new column
        /// name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column, validate the change
        /// before applying it. If <i>true</i>, then validate all values. A
        /// value too large (or too long) for the new type will prevent any
        /// change. If <i>false</i>, then when a value is too large or long, it
        /// will be truncated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>true</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>false</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.UPDATE_LAST_ACCESS_TIME">UPDATE_LAST_ACCESS_TIME</see>:</term>
        ///         <description>Indicates whether need to update the
        /// last_access_time.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>:</term>
        ///         <description>expression for new column's values (optional
        /// with add_column). Any valid expressions including existing
        /// columns.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public AlterTableRequest( string table_name,
                                  string action,
                                  string _value,
                                  IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.action = action ?? "";
            this._value = _value ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AlterTableRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.alterTable(string,string,string,IDictionary{string, string})"
    /// />.</summary>
    public class AlterTableResponse : KineticaData
    {

        /// <summary>Table on which the operation was performed.  </summary>
        public string table_name { get; set; }

        /// <summary>Modification operation that was performed.  </summary>
        public string action { get; set; }

        /// <summary>The value of the modification that was performed.
        /// </summary>
        public string _value { get; set; }

        /// <summary>return the type_id (when changing a table, a new type may
        /// be created)  </summary>
        public string type_id { get; set; }

        /// <summary>return the type_definition  (when changing a table, a new
        /// type may be created)  </summary>
        public string type_definition { get; set; }

        /// <summary>return the type properties  (when changing a table, a new
        /// type may be created)  </summary>
        public IDictionary<string, IList<string>> properties { get; set; } = new Dictionary<string, IList<string>>();

        /// <summary>return the type label  (when changing a table, a new type
        /// may be created)  </summary>
        public string label { get; set; }

    } // end class AlterTableResponse




}  // end namespace kinetica
