/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.showTable(string,IDictionary{string, string})" />.
    /// <br />
    /// Retrieves detailed information about a table, view, or collection,
    /// specified in <see cref="table_name" />. If the supplied <see
    /// cref="table_name" /> is a collection, the call can return information
    /// about either the collection itself or the tables and views it contains.
    /// If <see cref="table_name" /> is empty, information about all
    /// collections and top-level tables and views can be returned.
    /// <br />
    /// If the option <i>get_sizes</i> is set to
    /// <i>true</i>, then the number of records
    /// in each table is returned (in <member name="sizes" /> and
    /// <member name="full_sizes" />), along with the total number of objects
    /// across all
    /// requested tables (in <member name="total_size" /> and <member
    /// name="total_full_size" />).
    /// <br />
    /// For a collection, setting the <i>show_children</i> option to
    /// <i>false</i> returns only information about the collection itself;
    /// setting <i>show_children</i> to <i>true</i> returns a list of tables
    /// and views contained in the collection, along with their corresponding
    /// detail.
    /// <br />
    /// To retrieve a list of every table, view, and collection in the
    /// database, set <see cref="table_name" /> to '*' and <i>show_children</i>
    /// to <i>true</i>.</summary>
    public class ShowTableRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FORCE_SYNCHRONOUS">FORCE_SYNCHRONOUS</see>:</term>
        ///         <description>If <i>true</i> then the table sizes will wait
        /// for read lock before returning.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.GET_SIZES">GET_SIZES</see>:</term>
        ///         <description>If <i>true</i> then the number of records in
        /// each table, along with a cumulative count, will be returned; blank,
        /// otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>:</term>
        ///         <description>If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection, then
        /// <i>true</i> will return information about the children of the
        /// collection, and <i>false</i> will return information about the
        /// collection itself. If <paramref cref="ShowTableRequest.table_name"
        /// /> is a table or view, <i>show_children</i> must be <i>false</i>.
        /// If <paramref cref="ShowTableRequest.table_name" /> is empty, then
        /// <i>show_children</i> must be <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="ShowTableRequest.table_name" /> does not
        /// exist. If <i>true</i> then it will return an empty result.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.GET_COLUMN_INFO">GET_COLUMN_INFO</see>:</term>
        ///         <description>If <i>true</i> then column info (memory usage,
        /// etc) will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>true</i> then the table sizes will wait for read
            /// lock before returning.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</summary>
            public const string FORCE_SYNCHRONOUS = "force_synchronous";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If <i>true</i> then the number of records in each
            /// table, along with a cumulative count, will be returned; blank,
            /// otherwise.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</summary>
            public const string GET_SIZES = "get_sizes";

            /// <summary>If <see cref="table_name" /> is a collection, then
            /// <i>true</i> will return information about the children of the
            /// collection, and <i>false</i> will return information about the
            /// collection itself. If <see cref="table_name" /> is a table or
            /// view, <i>show_children</i> must be <i>false</i>. If <see
            /// cref="table_name" /> is empty, then <i>show_children</i> must
            /// be <i>true</i>.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</summary>
            public const string SHOW_CHILDREN = "show_children";

            /// <summary>If <i>false</i> will return an error if the provided
            /// <see cref="table_name" /> does not exist. If <i>true</i> then
            /// it will return an empty result.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</summary>
            public const string NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";

            /// <summary>If <i>true</i> then column info (memory usage, etc)
            /// will be returned.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</summary>
            public const string GET_COLUMN_INFO = "get_column_info";
        } // end struct Options


        /// <summary>Name of the table for which to retrieve the information.
        /// If blank, then information about all collections and top-level
        /// tables and views is returned.  </summary>
        public string table_name { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FORCE_SYNCHRONOUS">FORCE_SYNCHRONOUS</see>:</term>
        ///         <description>If <i>true</i> then the table sizes will wait
        /// for read lock before returning.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.GET_SIZES">GET_SIZES</see>:</term>
        ///         <description>If <i>true</i> then the number of records in
        /// each table, along with a cumulative count, will be returned; blank,
        /// otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>:</term>
        ///         <description>If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection, then
        /// <i>true</i> will return information about the children of the
        /// collection, and <i>false</i> will return information about the
        /// collection itself. If <paramref cref="ShowTableRequest.table_name"
        /// /> is a table or view, <i>show_children</i> must be <i>false</i>.
        /// If <paramref cref="ShowTableRequest.table_name" /> is empty, then
        /// <i>show_children</i> must be <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="ShowTableRequest.table_name" /> does not
        /// exist. If <i>true</i> then it will return an empty result.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.GET_COLUMN_INFO">GET_COLUMN_INFO</see>:</term>
        ///         <description>If <i>true</i> then column info (memory usage,
        /// etc) will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a ShowTableRequest object with default
        /// parameters.</summary>
        public ShowTableRequest() { }

        /// <summary>Constructs a ShowTableRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table for which to retrieve
        /// the information. If blank, then information about all collections
        /// and top-level tables and views is returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FORCE_SYNCHRONOUS">FORCE_SYNCHRONOUS</see>:</term>
        ///         <description>If <i>true</i> then the table sizes will wait
        /// for read lock before returning.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.GET_SIZES">GET_SIZES</see>:</term>
        ///         <description>If <i>true</i> then the number of records in
        /// each table, along with a cumulative count, will be returned; blank,
        /// otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>:</term>
        ///         <description>If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection, then
        /// <i>true</i> will return information about the children of the
        /// collection, and <i>false</i> will return information about the
        /// collection itself. If <paramref cref="ShowTableRequest.table_name"
        /// /> is a table or view, <i>show_children</i> must be <i>false</i>.
        /// If <paramref cref="ShowTableRequest.table_name" /> is empty, then
        /// <i>show_children</i> must be <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="ShowTableRequest.table_name" /> does not
        /// exist. If <i>true</i> then it will return an empty result.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.GET_COLUMN_INFO">GET_COLUMN_INFO</see>:</term>
        ///         <description>If <i>true</i> then column info (memory usage,
        /// etc) will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public ShowTableRequest( string table_name,
                                 IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class ShowTableRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.showTable(string,IDictionary{string, string})"
    /// />.</summary>
    public class ShowTableResponse : KineticaData
    {

        /// <summary>List of descriptions for the respective tables in <member
        /// name="table_names" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.COLLECTION">COLLECTION</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.VIEW">VIEW</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.REPLICATED">REPLICATED</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.JOIN">JOIN</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.RESULT_TABLE">RESULT_TABLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.MATERIALIZED_VIEW">MATERIALIZED_VIEW</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.MATERIALIZED_VIEW_MEMBER">MATERIALIZED_VIEW_MEMBER</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.MATERIALIZED_VIEW_UNDER_CONSTRUCTION">MATERIALIZED_VIEW_UNDER_CONSTRUCTION</see></term>
        ///     </item>
        /// </list>
        /// A set of string constants for the parameter <member
        /// name="table_descriptions" />.</summary>
        public struct TableDescriptions
        {
            public const string COLLECTION = "COLLECTION";
            public const string VIEW = "VIEW";
            public const string REPLICATED = "REPLICATED";
            public const string JOIN = "JOIN";
            public const string RESULT_TABLE = "RESULT_TABLE";
            public const string MATERIALIZED_VIEW = "MATERIALIZED_VIEW";
            public const string MATERIALIZED_VIEW_MEMBER = "MATERIALIZED_VIEW_MEMBER";
            public const string MATERIALIZED_VIEW_UNDER_CONSTRUCTION = "MATERIALIZED_VIEW_UNDER_CONSTRUCTION";
        } // end struct TableDescriptions


        /// <summary>Additional information about the respective tables in
        /// <member name="table_names" />.
        /// Supported values:
        /// <list type="bullet">
        /// </list>
        /// A set of string constants for the parameter <member
        /// name="additional_info" />.</summary>
        public struct AdditionalInfo
        {

            /// <summary>Method by which this table was created.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.CREATE_TABLE">CREATE_TABLE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.CREATE_PROJECTION">CREATE_PROJECTION</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.CREATE_UNION">CREATE_UNION</see></term>
            ///     </item>
            /// </list></summary>
            public const string REQUEST_AVRO_TYPE = "request_avro_type";
            public const string CREATE_TABLE = "create_table";
            public const string CREATE_PROJECTION = "create_projection";
            public const string CREATE_UNION = "create_union";

            /// <summary>The JSON representation of request creating this
            /// table.  The default value is ''.</summary>
            public const string REQUEST_AVRO_JSON = "request_avro_json";

            /// <summary>Indicates whether the respective table is <a
            /// href="../../concepts/protection.html"
            /// target="_top">protected</a> or not.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.FALSE">FALSE</see></term>
            ///     </item>
            /// </list></summary>
            public const string PROTECTED = "protected";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>The number of in-memory bytes per record which is the
            /// sum of the byte sizes of all columns with property
            /// 'data'.</summary>
            public const string RECORD_BYTES = "record_bytes";

            /// <summary>The names of the collections this table is part of.
            /// Only set if table is part of a collection</summary>
            public const string COLLECTION_NAMES = "collection_names";

            /// <summary>The value of the <a href="../../concepts/ttl.html"
            /// target="_top">time-to-live</a> setting.  Not present for
            /// collections.</summary>
            public const string TABLE_TTL = "table_ttl";

            /// <summary>The remaining <a href="../../concepts/ttl.html"
            /// target="_top">time-to-live</a>, in minutes, before the
            /// respective table expires (-1 if it will never expire).  Not
            /// present for collections.</summary>
            public const string REMAINING_TABLE_TTL = "remaining_table_ttl";

            /// <summary>Semicolon-separated list of <a
            /// href="../../concepts/tables.html#foreign-key"
            /// target="_top">foreign keys</a>, of the format 'source_column
            /// references target_table(primary_key_column)'. Not present for
            /// collections.  The default value is ''.</summary>
            public const string FOREIGN_KEYS = "foreign_keys";

            /// <summary>Foreign shard key description of the format:
            /// 'fk_foreign_key references pk_column_name from
            /// pk_table_name(pk_primary_key)'. Not present for collections.
            /// The default value is ''.</summary>
            public const string FOREIGN_SHARD_KEY = "foreign_shard_key";

            /// <summary><a href="../../concepts/tables.html#partitioning"
            /// target="_top">Partitioning</a> scheme used for this table
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.RANGE">RANGE</see>:</term>
            ///         <description>Using <a
            /// href="../../concepts/tables.html#partitioning-by-range"
            /// target="_top">range partitioning</a></description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.INTERVAL">INTERVAL</see>:</term>
            ///         <description>Using <a
            /// href="../../concepts/tables.html#partitioning-by-interval"
            /// target="_top">interval partitioning</a></description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.LIST">LIST</see>:</term>
            ///         <description>Using <a
            /// href="../../concepts/tables.html#partitioning-by-list-manual"
            /// target="_top">manual list partitioning</a></description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.NONE">NONE</see>:</term>
            ///         <description>Using no partitioning</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="ShowTableResponse.AdditionalInfo.NONE">NONE</see>.</summary>
            public const string PARTITION_TYPE = "partition_type";

            /// <summary>Using <a
            /// href="../../concepts/tables.html#partitioning-by-range"
            /// target="_top">range partitioning</a></summary>
            public const string RANGE = "RANGE";

            /// <summary>Using <a
            /// href="../../concepts/tables.html#partitioning-by-interval"
            /// target="_top">interval partitioning</a></summary>
            public const string INTERVAL = "INTERVAL";

            /// <summary>Using <a
            /// href="../../concepts/tables.html#partitioning-by-list-manual"
            /// target="_top">manual list partitioning</a></summary>
            public const string LIST = "LIST";

            /// <summary>Using no partitioning</summary>
            public const string NONE = "NONE";

            /// <summary>Comma-separated list of partition keys.  The default
            /// value is ''.</summary>
            public const string PARTITION_KEYS = "partition_keys";

            /// <summary>Comma-separated list of partition definitions, whose
            /// format depends on the partition_type.  See <a
            /// href="../../concepts/tables.html#partitioning"
            /// target="_top">partitioning</a> documentation for details.  The
            /// default value is ''.</summary>
            public const string PARTITION_DEFINITIONS = "partition_definitions";

            /// <summary>True if partitions will be created for LIST VALUES
            /// which don't fall into existing partitions.  The default value
            /// is ''.</summary>
            public const string IS_AUTOMATIC_PARTITION = "is_automatic_partition";

            /// <summary>Semicolon-separated list of columns that have <a
            /// href="../../concepts/indexes.html#column-index"
            /// target="_top">indexes</a>. Not present for collections.  The
            /// default value is ''.</summary>
            public const string ATTRIBUTE_INDEXES = "attribute_indexes";

            /// <summary>Semicolon-separated list of <a
            /// href="../../concepts/compression.html"
            /// target="_top">compressed</a> columns with the corresponding
            /// compression type for each; e.g.:
            /// {first_name,snappy};{last_name,lz4hc}. Not present for
            /// collections.  The default value is ''.</summary>
            public const string COMPRESSED_COLUMNS = "compressed_columns";

            /// <summary>JSON-encoded string representing a map of column name
            /// to information including memory usage if if the
            /// <i>get_column_info</i> option is <i>true</i>.  The default
            /// value is ''.</summary>
            public const string COLUMN_INFO = "column_info";

            /// <summary>Returns the global access mode (i.e. lock status) for
            /// the table.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.NO_ACCESS">NO_ACCESS</see>:</term>
            ///         <description>No read/write operations are allowed on
            /// this table.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.READ_ONLY">READ_ONLY</see>:</term>
            ///         <description>Only read operations are allowed on this
            /// table.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.WRITE_ONLY">WRITE_ONLY</see>:</term>
            ///         <description>Only write operations are allowed on this
            /// table.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="ShowTableResponse.AdditionalInfo.READ_WRITE">READ_WRITE</see>:</term>
            ///         <description>All read/write operations are allowed on
            /// this table.</description>
            ///     </item>
            /// </list></summary>
            public const string GLOBAL_ACCESS_MODE = "global_access_mode";

            /// <summary>No read/write operations are allowed on this
            /// table.</summary>
            public const string NO_ACCESS = "no_access";

            /// <summary>Only read operations are allowed on this
            /// table.</summary>
            public const string READ_ONLY = "read_only";

            /// <summary>Only write operations are allowed on this
            /// table.</summary>
            public const string WRITE_ONLY = "write_only";

            /// <summary>All read/write operations are allowed on this
            /// table.</summary>
            public const string READ_WRITE = "read_write";

            /// <summary>For materialized view the name of the view this member
            /// table is part of - if same as the table_name then this is the
            /// root of the view.  The default value is ''.</summary>
            public const string VIEW_TABLE_NAME = "view_table_name";

            /// <summary>True if the view named view_table_name is persisted -
            /// reported for each view member.  Means method of recreating this
            /// member is saved - not the members data.  The default value is
            /// ''.</summary>
            public const string IS_VIEW_PERSISTED = "is_view_persisted";

            /// <summary>True if some input table of the materialized view that
            /// affects this member table has been modified since the last
            /// refresh.  The default value is ''.</summary>
            public const string IS_DIRTY = "is_dirty";

            /// <summary>For materialized view current refresh_method - one of
            /// manual, periodic, on_change.  The default value is
            /// ''.</summary>
            public const string REFRESH_METHOD = "refresh_method";

            /// <summary>For materialized view with periodic refresh_method the
            /// current intial datetime string that periodic refreshes began.
            /// The default value is ''.</summary>
            public const string REFRESH_START_TIME = "refresh_start_time";

            /// <summary>For materialized view with periodic refresh_method the
            /// current refresh period in seconds.  The default value is
            /// ''.</summary>
            public const string REFRESH_PERIOD = "refresh_period";

            /// <summary>For materialized view the a datatime string indicating
            /// the last time the view was refreshed.  The default value is
            /// ''.</summary>
            public const string LAST_REFRESH_TIME = "last_refresh_time";

            /// <summary>For materialized view with periodic refresh_method a
            /// datetime string indicating the next time the view is to be
            /// refreshed.  The default value is ''.</summary>
            public const string NEXT_REFRESH_TIME = "next_refresh_time";

            /// <summary>User-specified number of records per chunk, if
            /// provided at table creation time.  The default value is
            /// ''.</summary>
            public const string USER_CHUNK_SIZE = "user_chunk_size";

            /// <summary>Semicolon-separated list of shard keys that were
            /// equated in joins (applicable for join tables).  The default
            /// value is ''.</summary>
            public const string ALTERNATE_SHARD_KEYS = "alternate_shard_keys";
        } // end struct AdditionalInfo


        /// <summary>Value of <paramref cref="ShowTableRequest.table_name" />.
        /// </summary>
        public string table_name { get; set; }

        /// <summary>If <paramref cref="ShowTableRequest.table_name" /> is a
        /// table or view, then the single element of the array is <paramref
        /// cref="ShowTableRequest.table_name" />. If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection and
        /// <i>show_children</i> is set to <i>true</i>, then this array is
        /// populated with the names of all tables and views contained by the
        /// given collection; if <i>show_children</i> is <i>false</i> then this
        /// array will only include the collection name itself. If <paramref
        /// cref="ShowTableRequest.table_name" /> is an empty string, then the
        /// array contains the names of all collections and top-level tables.
        /// </summary>
        public IList<string> table_names { get; set; } = new List<string>();

        /// <summary>List of descriptions for the respective tables in <member
        /// name="table_names" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.COLLECTION">COLLECTION</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.VIEW">VIEW</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.REPLICATED">REPLICATED</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.JOIN">JOIN</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.RESULT_TABLE">RESULT_TABLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.MATERIALIZED_VIEW">MATERIALIZED_VIEW</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.MATERIALIZED_VIEW_MEMBER">MATERIALIZED_VIEW_MEMBER</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableResponse.TableDescriptions.MATERIALIZED_VIEW_UNDER_CONSTRUCTION">MATERIALIZED_VIEW_UNDER_CONSTRUCTION</see></term>
        ///     </item>
        /// </list>  </summary>
        public IList<IList<string>> table_descriptions { get; set; } = new List<IList<string>>();

        /// <summary>Type ids of the respective tables in <member
        /// name="table_names" />.  </summary>
        public IList<string> type_ids { get; set; } = new List<string>();

        /// <summary>Type schemas of the respective tables in <member
        /// name="table_names" />.  </summary>
        public IList<string> type_schemas { get; set; } = new List<string>();

        /// <summary>Type labels of the respective tables in <member
        /// name="table_names" />.  </summary>
        public IList<string> type_labels { get; set; } = new List<string>();

        /// <summary>Property maps of the respective tables in <member
        /// name="table_names" />.  </summary>
        public IList<IDictionary<string, IList<string>>> properties { get; set; } = new List<IDictionary<string, IList<string>>>();

        /// <summary>Additional information about the respective tables in
        /// <member name="table_names" />.
        /// Supported values:
        /// <list type="bullet">
        /// </list>  </summary>
        public IList<IDictionary<string, string>> additional_info { get; set; } = new List<IDictionary<string, string>>();

        /// <summary>If <i>get_sizes</i> is <i>true</i>, an array containing
        /// the number of records of each corresponding table in <member
        /// name="table_names" />.  Otherwise, an empty array.  </summary>
        public IList<long> sizes { get; set; } = new List<long>();

        /// <summary>If <i>get_sizes</i> is <i>true</i>, an array containing
        /// the number of records of each corresponding table in <member
        /// name="table_names" /> (same values as <member name="sizes" />).
        /// Otherwise, an empty array.  </summary>
        public IList<long> full_sizes { get; set; } = new List<long>();

        /// <summary>If <i>get_sizes</i> is <i>true</i>, an array containing
        /// the number of unfiltered records in the cross product of the
        /// sub-tables of each corresponding join-table in <member
        /// name="table_names" />. For simple tables, this number will be the
        /// same as <member name="sizes" />.  For join-tables, this value gives
        /// the number of joined-table rows that must be processed by any
        /// aggregate functions operating on the table.  Otherwise, (if
        /// <i>get_sizes</i> is <i>false</i>), an empty array.  </summary>
        public IList<double> join_sizes { get; set; } = new List<double>();

        /// <summary>If <i>get_sizes</i> is <i>true</i>, the sum of the
        /// elements of <member name="sizes" />.  Otherwise, -1.  </summary>
        public long total_size { get; set; }

        /// <summary>If <i>get_sizes</i> is <i>true</i>, the sum of the
        /// elements of <member name="full_sizes" /> (same value as <member
        /// name="total_size" />).  Otherwise, -1.  </summary>
        public long total_full_size { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class ShowTableResponse




}  // end namespace kinetica
