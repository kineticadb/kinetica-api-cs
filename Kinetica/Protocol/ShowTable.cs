/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /show/table.
    /// <br />
    /// Retrieves detailed information about a table, view, or collection,
    /// specified in <member name="table_name" />. If the supplied <member
    /// name="table_name" /> is a collection, the call can return information
    /// about either the collection itself or the tables and views it contains.
    /// If <member name="table_name" /> is empty, information about all
    /// collections and top-level tables and views can be returned.
    /// <br />
    /// If the option <i>get_sizes</i> is set to <i>true</i>, then the sizes
    /// (objects and elements) of each table are returned (in <member
    /// name="sizes" /> and <member name="full_sizes" />), along with the total
    /// number of objects in the requested table (in <member name="total_size"
    /// /> and <member name="total_full_size" />).
    /// <br />
    /// For a collection, setting the <i>show_children</i> option to
    /// <i>false</i> returns only information about the collection itself;
    /// setting <i>show_children</i> to <i>true</i> returns a list of tables
    /// and views contained in the collection, along with their description,
    /// type id, schema, type label, type properties, and additional
    /// information including TTL.</summary>
    public class ShowTableRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>get_sizes</term>
        ///         <description>If <i>true</i> then the table sizes will be
        /// returned; blank, otherwise. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>show_children</term>
        ///         <description>If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection, then
        /// <i>true</i> will return information about the children of the
        /// collection, and <i>false</i> will return information about the
        /// collection itself. If <paramref cref="ShowTableRequest.table_name"
        /// /> is a table or view, <i>show_children</i> must be <i>false</i>.
        /// If <paramref cref="ShowTableRequest.table_name" /> is empty, then
        /// <i>show_children</i> must be <i>true</i>. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>no_error_if_not_exists</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="ShowTableRequest.table_name" /> does not
        /// exist. If <i>true</i> then it will return an empty result. Values:
        /// true, false.
        /// </description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>true</i> then the table sizes will be returned;
            /// blank, otherwise. Values: true, false.
            /// </summary>
            public const string GET_SIZES = "get_sizes";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If <member name="table_name" /> is a collection, then
            /// <i>true</i> will return information about the children of the
            /// collection, and <i>false</i> will return information about the
            /// collection itself. If <member name="table_name" /> is a table
            /// or view, <i>show_children</i> must be <i>false</i>. If <member
            /// name="table_name" /> is empty, then <i>show_children</i> must
            /// be <i>true</i>. Values: true, false.
            /// </summary>
            public const string SHOW_CHILDREN = "show_children";

            /// <summary>If <i>false</i> will return an error if the provided
            /// <member name="table_name" /> does not exist. If <i>true</i>
            /// then it will return an empty result. Values: true, false.
            /// </summary>
            public const string NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";
        } // end struct Options


        /// <summary>Name of the table for which to retrieve the information.
        /// If blank, then information about all collections and top-level
        /// tables and views is returned.  </summary>
        public string table_name { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>get_sizes</term>
        ///         <description>If <i>true</i> then the table sizes will be
        /// returned; blank, otherwise. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>show_children</term>
        ///         <description>If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection, then
        /// <i>true</i> will return information about the children of the
        /// collection, and <i>false</i> will return information about the
        /// collection itself. If <paramref cref="ShowTableRequest.table_name"
        /// /> is a table or view, <i>show_children</i> must be <i>false</i>.
        /// If <paramref cref="ShowTableRequest.table_name" /> is empty, then
        /// <i>show_children</i> must be <i>true</i>. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>no_error_if_not_exists</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="ShowTableRequest.table_name" /> does not
        /// exist. If <i>true</i> then it will return an empty result. Values:
        /// true, false.
        /// </description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a ShowTableRequest object with default
        /// parameters.</summary>
        public ShowTableRequest() { }

        /// <summary>Constructs a ShowTableRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table for which to retrieve
        /// the information. If blank, then information about all collections
        /// and top-level tables and views is returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>get_sizes</term>
        ///         <description>If <i>true</i> then the table sizes will be
        /// returned; blank, otherwise. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>show_children</term>
        ///         <description>If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection, then
        /// <i>true</i> will return information about the children of the
        /// collection, and <i>false</i> will return information about the
        /// collection itself. If <paramref cref="ShowTableRequest.table_name"
        /// /> is a table or view, <i>show_children</i> must be <i>false</i>.
        /// If <paramref cref="ShowTableRequest.table_name" /> is empty, then
        /// <i>show_children</i> must be <i>true</i>. Values: true, false.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term>no_error_if_not_exists</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="ShowTableRequest.table_name" /> does not
        /// exist. If <i>true</i> then it will return an empty result. Values:
        /// true, false.
        /// </description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public ShowTableRequest( string table_name,
                                 IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class ShowTableRequest



    /// <summary>A set of results returned by /show/table.</summary>
    public class ShowTableResponse : KineticaData
    {

        /// <summary>List of descriptions for the respective tables in <member
        /// name="table_names" />. Values: COLLECTION, VIEW, REPLICATED, JOIN,
        /// RESULT_TABLE.
        /// <br />
        /// A set of string constants for the parameter <member
        /// name="table_descriptions" />.</summary>
        public struct TableDescriptions
        {
            public const string COLLECTION = "COLLECTION";
            public const string VIEW = "VIEW";
            public const string REPLICATED = "REPLICATED";
            public const string JOIN = "JOIN";
            public const string RESULT_TABLE = "RESULT_TABLE";
        } // end struct TableDescriptions


        /// <summary>Additional information about the respective tables in
        /// <member name="table_names" />. Values: .
        /// <br />
        /// A set of string constants for the parameter <member
        /// name="additional_info" />.</summary>
        public struct AdditionalInfo
        {

            /// <summary>Only present if the respective table is a collection.
            /// The value indicates whether the collection is allowed to
            /// contain multiple tables or views of the same type or not.
            /// Values: true, false.
            /// </summary>
            public const string ALLOW_HOMOGENEOUS_TABLES = "allow_homogeneous_tables";
            public const string FALSE = "false";
            public const string TRUE = "true";

            /// <summary>Indicates whether the respective table is protected or
            /// not. Values: true, false.
            /// </summary>
            public const string PROTECTED = "protected";

            /// <summary>The value of TTL setting, in minutes, for the
            /// respective table (-1 if it will never expire).  This is not the
            /// remaining amount of time before the table expires. Not present
            /// for collections.</summary>
            public const string TABLE_TTL = "table_ttl";

            /// <summary>The remaining amount of minutes before the respective
            /// table expires (-1 if it will never expire).  This value may be
            /// different from the table's TTL setting. Not present for
            /// collections.</summary>
            public const string REMAINING_TABLE_TTL = "remaining_table_ttl";

            /// <summary>Semicolon-separated list of foreign key constraints,
            /// of the format 'source_column references
            /// target_table(primary_key_column)'. Not present for
            /// collections.</summary>
            public const string FOREIGN_KEYS = "foreign_keys";

            /// <summary>Semicolon-separated list of columns that have
            /// attribute indexes. Not present for collections.</summary>
            public const string ATTRIBUTE_INDEXES = "attribute_indexes";
        } // end struct AdditionalInfo


        /// <summary>Value of <paramref cref="ShowTableRequest.table_name" />.
        /// </summary>
        public string table_name { get; set; }

        /// <summary>If <paramref cref="ShowTableRequest.table_name" /> is a
        /// table or view, then the single element of the array is <paramref
        /// cref="ShowTableRequest.table_name" />. If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection and
        /// <i>show_children</i> is set to <i>true</i>, then this array is
        /// populated with the names of all tables and views contained by the
        /// given collection; if <i>show_children</i> is <i>false</i> then this
        /// array will only include the collection name itself. If <paramref
        /// cref="ShowTableRequest.table_name" /> is an empty string, then the
        /// array contains the names of all collections and top-level tables.
        /// </summary>
        public IList<string> table_names { get; set; } = new List<string>();

        /// <summary>List of descriptions for the respective tables in <member
        /// name="table_names" />. Values: COLLECTION, VIEW, REPLICATED, JOIN,
        /// RESULT_TABLE.
        ///   </summary>
        public IList<IList<string>> table_descriptions { get; set; } = new List<IList<string>>();

        /// <summary>Type ids of the respective tables in <member
        /// name="table_names" />.  </summary>
        public IList<string> type_ids { get; set; } = new List<string>();

        /// <summary>Type schemas of the respective tables in <member
        /// name="table_names" />.  </summary>
        public IList<string> type_schemas { get; set; } = new List<string>();

        /// <summary>Type labels of the respective tables in <member
        /// name="table_names" />.  </summary>
        public IList<string> type_labels { get; set; } = new List<string>();

        /// <summary>Property maps of the respective tables in <member
        /// name="table_names" />.  </summary>
        public IList<IDictionary<string, IList<string>>> properties { get; set; } = new List<IDictionary<string, IList<string>>>();

        /// <summary>Additional information about the respective tables in
        /// <member name="table_names" />. Values: .
        ///   </summary>
        public IList<IDictionary<string, string>> additional_info { get; set; } = new List<IDictionary<string, string>>();

        /// <summary>Empty array if the <i>get_sizes</i> option is
        /// <i>false</i>. Otherwise, sizes of the respective tables represented
        /// in <member name="table_names" />. For all but track data types,
        /// this is simply the number of total objects in a table. For track
        /// types, since each track semantically contains many individual
        /// objects, the <member name="sizes" /> are the counts of conceptual
        /// tracks (each of which may be associated with multiple objects).
        /// </summary>
        public IList<long> sizes { get; set; } = new List<long>();

        /// <summary>Empty array if the <i>get_sizes</i> option is
        /// <i>false</i>. Otherwise, number of total objects in the respective
        /// tables represented in <member name="table_names" />. For all but
        /// track data types, this is the same as <member name="sizes" />. For
        /// track types, since each track semantically contains many individual
        /// objects, <member name="full_sizes" /> is the count of total
        /// objects.  </summary>
        public IList<long> full_sizes { get; set; } = new List<long>();

        /// <summary>Empty array if the <i>get_sizes</i> option is
        /// <i>false</i>. Otherwise, number of unfiltered objects in the cross
        /// product of the sub-tables in the joined-tables represented in
        /// <member name="table_names" />. For simple tables, this number will
        /// be the same as <member name="sizes" />.  For join-tables this value
        /// gives the number of joined-table rows that must be processed by any
        /// aggregate functions operating on the table.  </summary>
        public IList<double> join_sizes { get; set; } = new List<double>();

        /// <summary>-1 if the <i>get_sizes</i> option is <i>false</i>.
        /// Otherwise, the sum of the elements of <member name="sizes" />.
        /// </summary>
        public long total_size { get; set; }

        /// <summary>-1 if the <i>get_sizes</i> option is <i>false</i>. The sum
        /// of the elements of <member name="full_sizes" />.  </summary>
        public long total_full_size { get; set; }

    } // end class ShowTableResponse




}  // end namespace kinetica
