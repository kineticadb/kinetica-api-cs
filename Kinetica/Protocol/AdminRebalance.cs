/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminRebalance(IDictionary{string, string})" />.
    /// <br />
    /// Rebalance the cluster so that all the nodes contain approximately an
    /// equal number of records.  The rebalance will also cause the shards to
    /// be equally distributed (as much as possible) across all the ranks.
    /// <br />
    /// This endpoint may take a long time to run, depending on the amount of
    /// data in the system. The API call may time out if run directly.  It is
    /// recommended to run this endpoint asynchronously via <see
    /// cref="Kinetica.createJob(string,string,byte[],string,IDictionary{string, string})"
    /// />.</summary>
    public class AdminRebalanceRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, sharded data will be
        /// rebalanced approximately equally across the cluster. Note that for
        /// big clusters, this data transfer could be time consuming and result
        /// in delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, unsharded data (data without
        /// primary keys and without shard keys) will be rebalanced
        /// approximately equally across the cluster. Note that for big
        /// clusters, this data transfer could be time consuming and result in
        /// delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TABLE_WHITELIST">TABLE_WHITELIST</see>:</term>
        ///         <description>Comma-separated list of unsharded table names
        /// to rebalance. Not applicable to sharded tables because they are
        /// always balanced in accordance with their primary key or shard key.
        /// Cannot be used simultaneously with
        /// <i>table_blacklist</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TABLE_BLACKLIST">TABLE_BLACKLIST</see>:</term>
        ///         <description>Comma-separated list of unsharded table names
        /// to not rebalance. Not applicable to sharded tables because they are
        /// always balanced in accordance with their primary key or shard key.
        /// Cannot be used simultaneously with
        /// <i>table_whitelist</i>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>true</i>, sharded data will be rebalanced
            /// approximately equally across the cluster. Note that for big
            /// clusters, this data transfer could be time consuming and result
            /// in delayed query responses.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</summary>
            public const string REBALANCE_SHARDED_DATA = "rebalance_sharded_data";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If <i>true</i>, unsharded data (data without primary
            /// keys and without shard keys) will be rebalanced approximately
            /// equally across the cluster. Note that for big clusters, this
            /// data transfer could be time consuming and result in delayed
            /// query responses.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</summary>
            public const string REBALANCE_UNSHARDED_DATA = "rebalance_unsharded_data";

            /// <summary>Comma-separated list of unsharded table names to
            /// rebalance. Not applicable to sharded tables because they are
            /// always balanced in accordance with their primary key or shard
            /// key. Cannot be used simultaneously with
            /// <i>table_blacklist</i>.</summary>
            public const string TABLE_WHITELIST = "table_whitelist";

            /// <summary>Comma-separated list of unsharded table names to not
            /// rebalance. Not applicable to sharded tables because they are
            /// always balanced in accordance with their primary key or shard
            /// key. Cannot be used simultaneously with
            /// <i>table_whitelist</i>.</summary>
            public const string TABLE_BLACKLIST = "table_blacklist";
        } // end struct Options


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, sharded data will be
        /// rebalanced approximately equally across the cluster. Note that for
        /// big clusters, this data transfer could be time consuming and result
        /// in delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, unsharded data (data without
        /// primary keys and without shard keys) will be rebalanced
        /// approximately equally across the cluster. Note that for big
        /// clusters, this data transfer could be time consuming and result in
        /// delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TABLE_WHITELIST">TABLE_WHITELIST</see>:</term>
        ///         <description>Comma-separated list of unsharded table names
        /// to rebalance. Not applicable to sharded tables because they are
        /// always balanced in accordance with their primary key or shard key.
        /// Cannot be used simultaneously with
        /// <i>table_blacklist</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TABLE_BLACKLIST">TABLE_BLACKLIST</see>:</term>
        ///         <description>Comma-separated list of unsharded table names
        /// to not rebalance. Not applicable to sharded tables because they are
        /// always balanced in accordance with their primary key or shard key.
        /// Cannot be used simultaneously with
        /// <i>table_whitelist</i>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AdminRebalanceRequest object with default
        /// parameters.</summary>
        public AdminRebalanceRequest() { }

        /// <summary>Constructs an AdminRebalanceRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, sharded data will be
        /// rebalanced approximately equally across the cluster. Note that for
        /// big clusters, this data transfer could be time consuming and result
        /// in delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>:</term>
        ///         <description>If <i>true</i>, unsharded data (data without
        /// primary keys and without shard keys) will be rebalanced
        /// approximately equally across the cluster. Note that for big
        /// clusters, this data transfer could be time consuming and result in
        /// delayed query responses.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TABLE_WHITELIST">TABLE_WHITELIST</see>:</term>
        ///         <description>Comma-separated list of unsharded table names
        /// to rebalance. Not applicable to sharded tables because they are
        /// always balanced in accordance with their primary key or shard key.
        /// Cannot be used simultaneously with
        /// <i>table_blacklist</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TABLE_BLACKLIST">TABLE_BLACKLIST</see>:</term>
        ///         <description>Comma-separated list of unsharded table names
        /// to not rebalance. Not applicable to sharded tables because they are
        /// always balanced in accordance with their primary key or shard key.
        /// Cannot be used simultaneously with
        /// <i>table_whitelist</i>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public AdminRebalanceRequest( IDictionary<string, string> options = null)
        {
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AdminRebalanceRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminRebalance(IDictionary{string, string})"
    /// />.</summary>
    public class AdminRebalanceResponse : KineticaData
    {

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AdminRebalanceResponse




}  // end namespace kinetica
