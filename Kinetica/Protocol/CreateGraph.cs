/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Creates a new graph network using given nodes, edges, weights, and
    /// restrictions. See <a
    /// href="../../graph_solver/network_graph_solver.html"
    /// target="_top">Network Graph Solvers</a> for more information.</summary>
    public class CreateGraphRequest : KineticaData
    {

        /// <summary>If set to <i>true</i>, the graph will be directed (0 to 1,
        /// 1 to 2, etc.). If set to <i>false</i>, the graph will not be
        /// directed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.DirectedGraph.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see>.
        /// A set of string constants for the parameter <see
        /// cref="directed_graph" />.</summary>
        public struct DirectedGraph
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct DirectedGraph


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// graph.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MERGE_TOLERANCE">MERGE_TOLERANCE</see>:</term>
        ///         <description>If node geospatial positions are input (e.g.,
        /// WKTPOINT, X, Y), determines the minimum separation allowed between
        /// unique nodes. If nodes are within the tolerance of each other, they
        /// will be merged as a single node.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MIN_X">MIN_X</see>:</term>
        ///         <description>Minimum x (longitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MAX_X">MAX_X</see>:</term>
        ///         <description>Maximum x (longitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MIN_Y">MIN_Y</see>:</term>
        ///         <description>Minimum y (latitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MAX_Y">MAX_Y</see>:</term>
        ///         <description>Maximum y (latitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.RECREATE">RECREATE</see>:</term>
        ///         <description>If set to <i>true</i> and the graph (using
        /// <paramref cref="CreateGraphRequest.graph_name" />) already exists,
        /// the graph is deleted and recreated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.EXPORT_CREATE_RESULTS">EXPORT_CREATE_RESULTS</see>:</term>
        ///         <description>If set to <i>true</i>, returns the graph
        /// topology in the response as arrays.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a 'EDGE_WKTLINE'
        /// column identifier to the specified <i>graph_table</i> so the graph
        /// can be viewed via WMS; for social and non-geospatial graphs, the
        /// 'EDGE_WKTLINE' column identifier will be populated with spatial
        /// coordinates derived from a flattening layout algorithm so the graph
        /// can still be viewed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be saved
        /// in the persist directory (see the <a href="../../config/index.html"
        /// target="_top">config reference</a> for more information). If set to
        /// <i>false</i>, the graph will be removed when the graph server is
        /// shutdown.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.SYNC_DB">SYNC_DB</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be
        /// updated if its source table(s) is updated. If set to <i>false</i>,
        /// the graph will not be updated if the source table(s) is updated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.ADD_TABLE_MONITOR">ADD_TABLE_MONITOR</see>:</term>
        ///         <description>Adds a table monitor to every table used in
        /// the creation of the graph. For more details on table monitors, see
        /// /create/tablemonitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>:</term>
        ///         <description>If the <i>graph_table</i> name is NOT left
        /// blank, the created graph is also created as a table with the given
        /// name and following identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
        /// 'EDGE_NODE2_ID'. If left blank, no table is created.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Value-based restriction comparison. Any node or edge
            /// with a RESTRICTIONS_VALUECOMPARED value greater than the
            /// <i>restriction_threshold_value</i> will not be included in the
            /// graph.</summary>
            public const string RESTRICTION_THRESHOLD_VALUE = "restriction_threshold_value";

            /// <summary>If node geospatial positions are input (e.g.,
            /// WKTPOINT, X, Y), determines the minimum separation allowed
            /// between unique nodes. If nodes are within the tolerance of each
            /// other, they will be merged as a single node.</summary>
            public const string MERGE_TOLERANCE = "merge_tolerance";

            /// <summary>Minimum x (longitude) value for spatial graph
            /// associations.</summary>
            public const string MIN_X = "min_x";

            /// <summary>Maximum x (longitude) value for spatial graph
            /// associations.</summary>
            public const string MAX_X = "max_x";

            /// <summary>Minimum y (latitude) value for spatial graph
            /// associations.</summary>
            public const string MIN_Y = "min_y";

            /// <summary>Maximum y (latitude) value for spatial graph
            /// associations.</summary>
            public const string MAX_Y = "max_y";

            /// <summary>If set to <i>true</i> and the graph (using <see
            /// cref="graph_name" />) already exists, the graph is deleted and
            /// recreated.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string RECREATE = "recreate";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If set to <i>true</i>, returns the graph topology in
            /// the response as arrays.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string EXPORT_CREATE_RESULTS = "export_create_results";

            /// <summary>If set to <i>true</i>, adds a 'EDGE_WKTLINE' column
            /// identifier to the specified <i>graph_table</i> so the graph can
            /// be viewed via WMS; for social and non-geospatial graphs, the
            /// 'EDGE_WKTLINE' column identifier will be populated with spatial
            /// coordinates derived from a flattening layout algorithm so the
            /// graph can still be viewed.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ENABLE_GRAPH_DRAW = "enable_graph_draw";

            /// <summary>If set to <i>true</i>, the graph will be saved in the
            /// persist directory (see the <a href="../../config/index.html"
            /// target="_top">config reference</a> for more information). If
            /// set to <i>false</i>, the graph will be removed when the graph
            /// server is shutdown.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string SAVE_PERSIST = "save_persist";

            /// <summary>If set to <i>true</i>, the graph will be updated if
            /// its source table(s) is updated. If set to <i>false</i>, the
            /// graph will not be updated if the source table(s) is updated.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string SYNC_DB = "sync_db";

            /// <summary>Adds a table monitor to every table used in the
            /// creation of the graph. For more details on table monitors, see
            /// <see
            /// cref="Kinetica.createTableMonitor(string,IDictionary{string, string})"
            /// />.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ADD_TABLE_MONITOR = "add_table_monitor";

            /// <summary>If the <i>graph_table</i> name is NOT left blank, the
            /// created graph is also created as a table with the given name
            /// and following identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
            /// 'EDGE_NODE2_ID'. If left blank, no table is created.</summary>
            public const string GRAPH_TABLE = "graph_table";
        } // end struct Options


        /// <summary>Name of the graph resource to generate.  </summary>
        public string graph_name { get; set; }

        /// <summary>If set to <i>true</i>, the graph will be directed (0 to 1,
        /// 1 to 2, etc.). If set to <i>false</i>, the graph will not be
        /// directed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.DirectedGraph.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see>.
        /// </summary>
        public bool directed_graph { get; set; } = true;

        /// <summary>Nodes represent fundamental topological units of a graph.
        /// Nodes must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Example format: 'table.column AS
        /// NODE_ID'  </summary>
        public IList<string> nodes { get; set; } = new List<string>();

        /// <summary>Edges represent the required fundamental topological unit
        /// of a graph that typically connect nodes. Edges must be specified
        /// using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Example format: 'table.column AS
        /// EDGE_WKTLINE'  </summary>
        public IList<string> edges { get; set; } = new List<string>();

        /// <summary>Weights represent a method of informing the graph solver
        /// of the cost of including a given edge in a solution. Weights must
        /// be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Example format: 'table.column AS
        /// WEIGHTS_EDGE_ID'  </summary>
        public IList<string> weights { get; set; } = new List<string>();

        /// <summary>Restrictions represent a method of informing the graph
        /// solver which edges and/or nodes should be ignored for the solution.
        /// Restrictions must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Example format: 'table.column AS
        /// RESTRICTIONS_EDGE_ID'  </summary>
        public IList<string> restrictions { get; set; } = new List<string>();

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// graph.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MERGE_TOLERANCE">MERGE_TOLERANCE</see>:</term>
        ///         <description>If node geospatial positions are input (e.g.,
        /// WKTPOINT, X, Y), determines the minimum separation allowed between
        /// unique nodes. If nodes are within the tolerance of each other, they
        /// will be merged as a single node.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MIN_X">MIN_X</see>:</term>
        ///         <description>Minimum x (longitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MAX_X">MAX_X</see>:</term>
        ///         <description>Maximum x (longitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MIN_Y">MIN_Y</see>:</term>
        ///         <description>Minimum y (latitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MAX_Y">MAX_Y</see>:</term>
        ///         <description>Maximum y (latitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.RECREATE">RECREATE</see>:</term>
        ///         <description>If set to <i>true</i> and the graph (using
        /// <paramref cref="CreateGraphRequest.graph_name" />) already exists,
        /// the graph is deleted and recreated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.EXPORT_CREATE_RESULTS">EXPORT_CREATE_RESULTS</see>:</term>
        ///         <description>If set to <i>true</i>, returns the graph
        /// topology in the response as arrays.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a 'EDGE_WKTLINE'
        /// column identifier to the specified <i>graph_table</i> so the graph
        /// can be viewed via WMS; for social and non-geospatial graphs, the
        /// 'EDGE_WKTLINE' column identifier will be populated with spatial
        /// coordinates derived from a flattening layout algorithm so the graph
        /// can still be viewed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be saved
        /// in the persist directory (see the <a href="../../config/index.html"
        /// target="_top">config reference</a> for more information). If set to
        /// <i>false</i>, the graph will be removed when the graph server is
        /// shutdown.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.SYNC_DB">SYNC_DB</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be
        /// updated if its source table(s) is updated. If set to <i>false</i>,
        /// the graph will not be updated if the source table(s) is updated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.ADD_TABLE_MONITOR">ADD_TABLE_MONITOR</see>:</term>
        ///         <description>Adds a table monitor to every table used in
        /// the creation of the graph. For more details on table monitors, see
        /// /create/tablemonitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>:</term>
        ///         <description>If the <i>graph_table</i> name is NOT left
        /// blank, the created graph is also created as a table with the given
        /// name and following identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
        /// 'EDGE_NODE2_ID'. If left blank, no table is created.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a CreateGraphRequest object with default
        /// parameters.</summary>
        public CreateGraphRequest() { }

        /// <summary>Constructs a CreateGraphRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="graph_name">Name of the graph resource to generate.
        /// </param>
        /// <param name="directed_graph">If set to <i>true</i>, the graph will
        /// be directed (0 to 1, 1 to 2, etc.). If set to <i>false</i>, the
        /// graph will not be directed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.DirectedGraph.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see>.  </param>
        /// <param name="nodes">Nodes represent fundamental topological units
        /// of a graph. Nodes must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Example format: 'table.column AS
        /// NODE_ID'  </param>
        /// <param name="edges">Edges represent the required fundamental
        /// topological unit of a graph that typically connect nodes. Edges
        /// must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Example format: 'table.column AS
        /// EDGE_WKTLINE'  </param>
        /// <param name="weights">Weights represent a method of informing the
        /// graph solver of the cost of including a given edge in a solution.
        /// Weights must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Example format: 'table.column AS
        /// WEIGHTS_EDGE_ID'  </param>
        /// <param name="restrictions">Restrictions represent a method of
        /// informing the graph solver which edges and/or nodes should be
        /// ignored for the solution. Restrictions must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Example format: 'table.column AS
        /// RESTRICTIONS_EDGE_ID'  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// graph.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MERGE_TOLERANCE">MERGE_TOLERANCE</see>:</term>
        ///         <description>If node geospatial positions are input (e.g.,
        /// WKTPOINT, X, Y), determines the minimum separation allowed between
        /// unique nodes. If nodes are within the tolerance of each other, they
        /// will be merged as a single node.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MIN_X">MIN_X</see>:</term>
        ///         <description>Minimum x (longitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MAX_X">MAX_X</see>:</term>
        ///         <description>Maximum x (longitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MIN_Y">MIN_Y</see>:</term>
        ///         <description>Minimum y (latitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.MAX_Y">MAX_Y</see>:</term>
        ///         <description>Maximum y (latitude) value for spatial graph
        /// associations.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.RECREATE">RECREATE</see>:</term>
        ///         <description>If set to <i>true</i> and the graph (using
        /// <paramref cref="CreateGraphRequest.graph_name" />) already exists,
        /// the graph is deleted and recreated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.EXPORT_CREATE_RESULTS">EXPORT_CREATE_RESULTS</see>:</term>
        ///         <description>If set to <i>true</i>, returns the graph
        /// topology in the response as arrays.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a 'EDGE_WKTLINE'
        /// column identifier to the specified <i>graph_table</i> so the graph
        /// can be viewed via WMS; for social and non-geospatial graphs, the
        /// 'EDGE_WKTLINE' column identifier will be populated with spatial
        /// coordinates derived from a flattening layout algorithm so the graph
        /// can still be viewed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be saved
        /// in the persist directory (see the <a href="../../config/index.html"
        /// target="_top">config reference</a> for more information). If set to
        /// <i>false</i>, the graph will be removed when the graph server is
        /// shutdown.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.SYNC_DB">SYNC_DB</see>:</term>
        ///         <description>If set to <i>true</i>, the graph will be
        /// updated if its source table(s) is updated. If set to <i>false</i>,
        /// the graph will not be updated if the source table(s) is updated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.ADD_TABLE_MONITOR">ADD_TABLE_MONITOR</see>:</term>
        ///         <description>Adds a table monitor to every table used in
        /// the creation of the graph. For more details on table monitors, see
        /// /create/tablemonitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>:</term>
        ///         <description>If the <i>graph_table</i> name is NOT left
        /// blank, the created graph is also created as a table with the given
        /// name and following identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
        /// 'EDGE_NODE2_ID'. If left blank, no table is created.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public CreateGraphRequest( string graph_name,
                                   bool directed_graph,
                                   IList<string> nodes,
                                   IList<string> edges,
                                   IList<string> weights,
                                   IList<string> restrictions,
                                   IDictionary<string, string> options = null)
        {
            this.graph_name = graph_name ?? "";
            this.directed_graph = directed_graph ?? DirectedGraph.TRUE;
            this.nodes = nodes ?? new List<string>();
            this.edges = edges ?? new List<string>();
            this.weights = weights ?? new List<string>();
            this.restrictions = restrictions ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class CreateGraphRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string, string})"
    /// />.</summary>
    public class CreateGraphResponse : KineticaData
    {

        /// <summary>Total number of nodes created.  </summary>
        public long num_nodes { get; set; }

        /// <summary>Total number of edges created.  </summary>
        public long num_edges { get; set; }

        /// <summary>Edges given as pairs of node indices. Only populated if
        /// <i>export_create_results</i> is set to <i>true</i>.  </summary>
        public IList<long> edges_ids { get; set; } = new List<long>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class CreateGraphResponse




}  // end namespace kinetica
