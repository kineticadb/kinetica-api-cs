/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.deleteDirectory(string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Deletes a directory from <a href="../../../tools/kifs/"
    /// target="_top">KiFS</a>.</summary>
    public class DeleteDirectoryRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.RECURSIVE">RECURSIVE</see>:</term>
        ///         <description>If <i>true</i>, will delete directory and all
        /// files residing in it. If false, directory must be empty for
        /// deletion.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, no error is returned if
        /// specified directory does not exist
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>If <i>true</i>, will delete directory and all files
            /// residing in it. If false, directory must be empty for deletion.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.</summary>
            public const string RECURSIVE = "recursive";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>If <i>true</i>, no error is returned if specified
            /// directory does not exist
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.</summary>
            public const string NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";
        } // end struct Options


        /// <summary>Name of the directory in KiFS to be deleted. The directory
        /// must contain no files, unless <i>recursive</i> is <i>true</i>
        /// </summary>
        public string directory_name { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.RECURSIVE">RECURSIVE</see>:</term>
        ///         <description>If <i>true</i>, will delete directory and all
        /// files residing in it. If false, directory must be empty for
        /// deletion.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, no error is returned if
        /// specified directory does not exist
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a DeleteDirectoryRequest object with default
        /// parameters.</summary>
        public DeleteDirectoryRequest() { }

        /// <summary>Constructs a DeleteDirectoryRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="directory_name">Name of the directory in KiFS to be
        /// deleted. The directory must contain no files, unless
        /// <i>recursive</i> is <i>true</i>  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.RECURSIVE">RECURSIVE</see>:</term>
        ///         <description>If <i>true</i>, will delete directory and all
        /// files residing in it. If false, directory must be empty for
        /// deletion.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, no error is returned if
        /// specified directory does not exist
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public DeleteDirectoryRequest( string directory_name,
                                       IDictionary<string, string> options = null)
        {
            this.directory_name = directory_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class DeleteDirectoryRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.deleteDirectory(string,IDictionary{string, string})"
    /// />.</summary>
    public class DeleteDirectoryResponse : KineticaData
    {

        /// <summary>Value of <paramref
        /// cref="DeleteDirectoryRequest.directory_name" />.  </summary>
        public string directory_name { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class DeleteDirectoryResponse




}  // end namespace kinetica
