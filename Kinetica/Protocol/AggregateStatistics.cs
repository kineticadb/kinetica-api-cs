/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for /aggregate/statistics.
    /// <br />
    /// Calculates the requested statistics of a given column in a given table.
    /// <br />
    /// The available statistics are count (number of total objects), mean,
    /// stdv (standard deviation), variance, skew, kurtosis, sum, min, max,
    /// weighted_average, cardinality (unique count), estimated cardinality,
    /// percentile and percentile_rank.
    /// <br />
    /// Estimated cardinality is calculated by using the hyperloglog
    /// approximation technique.
    /// <br />
    /// Percentiles and percentile_ranks are approximate and are calculated
    /// using the t-digest algorithm. They must include the desired
    /// percentile/percentile_rank. To compute multiple percentiles each value
    /// must be specified separately (i.e.
    /// 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
    /// <br />
    /// The weighted average statistic requires a weight_attribute to be
    /// specified in <member name="options" />. The weighted average is then
    /// defined as the sum of the products of <member name="column_name" />
    /// times the weight attribute divided by the sum of the weight attribute.
    /// <br />
    /// The response includes a list of the statistics requested along with the
    /// count of the number of items in the given set.</summary>
    public class AggregateStatisticsRequest : KineticaData
    {

        /// <summary>Comma separated list of the statistics to calculate, e.g.
        /// "sum,mean". Values: count, mean, stdv, variance, skew, kurtosis,
        /// sum, min, max, weighted_average, cardinality,
        /// estimated_cardinality, percentile, percentile_rank.
        /// <br />
        /// A set of string constants for the parameter <member name="stats"
        /// />.</summary>
        public struct Stats
        {

            /// <summary>Number of objects (independent of the given
            /// column).</summary>
            public const string COUNT = "count";

            /// <summary>Arithmetic mean (average), equivalent to
            /// sum/count.</summary>
            public const string MEAN = "mean";

            /// <summary>Sample standard deviation (denominator is
            /// count-1).</summary>
            public const string STDV = "stdv";

            /// <summary>Unbiased sample variance (denominator is
            /// count-1).</summary>
            public const string VARIANCE = "variance";

            /// <summary>Skewness (third standardized moment).</summary>
            public const string SKEW = "skew";

            /// <summary>Kurtosis (fourth standardized moment).</summary>
            public const string KURTOSIS = "kurtosis";

            /// <summary>Sum of all values in the column.</summary>
            public const string SUM = "sum";

            /// <summary>Minimum value of the column.</summary>
            public const string MIN = "min";

            /// <summary>Maximum value of the column.</summary>
            public const string MAX = "max";

            /// <summary>Weighted arithmetic mean (using the option
            /// 'weight_column_name' as the weighting column).</summary>
            public const string WEIGHTED_AVERAGE = "weighted_average";

            /// <summary>Number of unique values in the column.</summary>
            public const string CARDINALITY = "cardinality";

            /// <summary>Estimate (via hyperloglog technique) of the number of
            /// unique values in the column.</summary>
            public const string ESTIMATED_CARDINALITY = "estimated_cardinality";

            /// <summary>Estimate (via t-digest) of the given percentile of the
            /// column (percentile(50.0) will be an approximation of the
            /// median).</summary>
            public const string PERCENTILE = "percentile";

            /// <summary>Estimate (via t-digest) of the percentile rank of the
            /// given value in the column (if the given value is the median of
            /// the column, percentile_rank(<median>) will return approximately
            /// 50.0).</summary>
            public const string PERCENTILE_RANK = "percentile_rank";
        } // end struct Stats


        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>additional_column_names</term>
        ///         <description>A list of comma separated column names over
        /// which statistics can be accumulated along with the primary
        /// column.</description>
        ///     </item>
        ///     <item>
        ///         <term>weight_column_name</term>
        ///         <description>Name of column used as weighting attribute for
        /// the weighted average statistic.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>A list of comma separated column names over which
            /// statistics can be accumulated along with the primary
            /// column.</summary>
            public const string ADDITIONAL_COLUMN_NAMES = "additional_column_names";

            /// <summary>Name of column used as weighting attribute for the
            /// weighted average statistic.</summary>
            public const string WEIGHT_COLUMN_NAME = "weight_column_name";
        } // end struct Options


        /// <summary>Name of the table on which the statistics operation will
        /// be performed.  </summary>
        public string table_name { get; set; }

        /// <summary>Name of the column for which the statistics are to be
        /// calculated.  </summary>
        public string column_name { get; set; }

        /// <summary>Comma separated list of the statistics to calculate, e.g.
        /// "sum,mean". Values: count, mean, stdv, variance, skew, kurtosis,
        /// sum, min, max, weighted_average, cardinality,
        /// estimated_cardinality, percentile, percentile_rank.
        ///   </summary>
        public string stats { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>additional_column_names</term>
        ///         <description>A list of comma separated column names over
        /// which statistics can be accumulated along with the primary
        /// column.</description>
        ///     </item>
        ///     <item>
        ///         <term>weight_column_name</term>
        ///         <description>Name of column used as weighting attribute for
        /// the weighted average statistic.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AggregateStatisticsRequest object with
        /// default parameters.</summary>
        public AggregateStatisticsRequest() { }

        /// <summary>Constructs an AggregateStatisticsRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the statistics
        /// operation will be performed.  </param>
        /// <param name="column_name">Name of the column for which the
        /// statistics are to be calculated.  </param>
        /// <param name="stats">Comma separated list of the statistics to
        /// calculate, e.g. "sum,mean". Values: count, mean, stdv, variance,
        /// skew, kurtosis, sum, min, max, weighted_average, cardinality,
        /// estimated_cardinality, percentile, percentile_rank.
        ///   </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term>additional_column_names</term>
        ///         <description>A list of comma separated column names over
        /// which statistics can be accumulated along with the primary
        /// column.</description>
        ///     </item>
        ///     <item>
        ///         <term>weight_column_name</term>
        ///         <description>Name of column used as weighting attribute for
        /// the weighted average statistic.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public AggregateStatisticsRequest( string table_name,
                                           string column_name,
                                           string stats,
                                           IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.column_name = column_name ?? "";
            this.stats = stats ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AggregateStatisticsRequest



    /// <summary>A set of results returned by /aggregate/statistics.</summary>
    public class AggregateStatisticsResponse : KineticaData
    {

        /// <summary>(statistic name, double value) pairs of the requested
        /// statistics, including the total count by default.  </summary>
        public IDictionary<string, double> stats { get; set; } = new Dictionary<string, double>();

    } // end class AggregateStatisticsResponse




}  // end namespace kinetica
