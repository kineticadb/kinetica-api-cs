/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;

namespace kinetica
{
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.aggregateStatistics(AggregateStatisticsRequest)">Kinetica.aggregateStatistics</see>.
    /// </summary>
    /// <remarks><para>Calculates the requested statistics of the given
    /// column(s) in a given table.</para>
    /// <para>The available statistics are: <see cref="Stats.COUNT">COUNT</see>
    /// (number of total objects), <see cref="Stats.MEAN">MEAN</see>, <see
    /// cref="Stats.STDV">STDV</see> (standard deviation), <see
    /// cref="Stats.VARIANCE">VARIANCE</see>, <see
    /// cref="Stats.SKEW">SKEW</see>, <see
    /// cref="Stats.KURTOSIS">KURTOSIS</see>, <see cref="Stats.SUM">SUM</see>,
    /// <see cref="Stats.MIN">MIN</see>, <see cref="Stats.MAX">MAX</see>, <see
    /// cref="Stats.WEIGHTED_AVERAGE">WEIGHTED_AVERAGE</see>, <see
    /// cref="Stats.CARDINALITY">CARDINALITY</see> (unique count), <see
    /// cref="Stats.ESTIMATED_CARDINALITY">ESTIMATED_CARDINALITY</see>, <see
    /// cref="Stats.PERCENTILE">PERCENTILE</see>, and <see
    /// cref="Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>.</para>
    /// <para>Estimated cardinality is calculated by using the hyperloglog
    /// approximation technique.</para>
    /// <para>Percentiles and percentile ranks are approximate and are
    /// calculated using the t-digest algorithm. They must include the desired
    /// <see cref="Stats.PERCENTILE">PERCENTILE</see>/<see
    /// cref="Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>. To compute multiple
    /// percentiles each value must be specified separately (i.e.
    /// 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').</para>
    /// <para>A second, comma-separated value can be added to the <see
    /// cref="Stats.PERCENTILE">PERCENTILE</see> statistic to calculate
    /// percentile resolution, e.g., a 50th percentile with 200 resolution
    /// would be 'percentile(50,200)'.</para>
    /// <para>The weighted average statistic requires a weight column to be
    /// specified in <see
    /// cref="Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>.  The
    /// weighted average is then defined as the sum of the products of <see
    /// cref="column_name" /> times the <see
    /// cref="Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see> values
    /// divided by the sum of the <see
    /// cref="Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>
    /// values.</para>
    /// <para>Additional columns can be used in the calculation of statistics
    /// via <see
    /// cref="Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>.
    /// Values in these columns will be included in the overall aggregate
    /// calculation--individual aggregates will not be calculated per
    /// additional column.  For instance, requesting the <see
    /// cref="Stats.COUNT">COUNT</see> & <see cref="Stats.MEAN">MEAN</see> of
    /// <see cref="column_name" /> x and <see
    /// cref="Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see> y
    /// & z, where x holds the numbers 1-10, y holds 11-20, and z holds 21-30,
    /// would return the total number of x, y, & z values (30), and the single
    /// average value across all x, y, & z values (15.5).</para>
    /// <para>The response includes a list of key/value pairs of each statistic
    /// requested and its corresponding value.</para></remarks>
    public class AggregateStatisticsRequest : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="stats" />.</summary>
        /// <remarks><para>Comma separated list of the statistics to calculate,
        /// e.g. "sum,mean".</para></remarks>
        public struct Stats
        {
            /// <summary>Number of objects (independent of the given
            /// column(s)).</summary>
            public const string COUNT = "count";

            /// <summary>Arithmetic mean (average), equivalent to sum/count.
            /// </summary>
            public const string MEAN = "mean";

            /// <summary>Sample standard deviation (denominator is count-1).
            /// </summary>
            public const string STDV = "stdv";

            /// <summary>Unbiased sample variance (denominator is count-1).
            /// </summary>
            public const string VARIANCE = "variance";

            /// <summary>Skewness (third standardized moment).</summary>
            public const string SKEW = "skew";

            /// <summary>Kurtosis (fourth standardized moment).</summary>
            public const string KURTOSIS = "kurtosis";

            /// <summary>Sum of all values in the column(s).</summary>
            public const string SUM = "sum";

            /// <summary>Minimum value of the column(s).</summary>
            public const string MIN = "min";

            /// <summary>Maximum value of the column(s).</summary>
            public const string MAX = "max";

            /// <summary>Weighted arithmetic mean (using the option <see
            /// cref="Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see> as
            /// the weighting column).</summary>
            public const string WEIGHTED_AVERAGE = "weighted_average";

            /// <summary>Number of unique values in the column(s).</summary>
            public const string CARDINALITY = "cardinality";

            /// <summary>Estimate (via hyperloglog technique) of the number of
            /// unique values in the column(s).</summary>
            public const string ESTIMATED_CARDINALITY = "estimated_cardinality";

            /// <summary>Estimate (via t-digest) of the given percentile of the
            /// column(s) (percentile(50.0) will be an approximation of the
            /// median).</summary>
            /// <remarks><para>Add a second, comma-separated value to calculate
            /// percentile resolution, e.g., 'percentile(75,150)'</para>
            /// </remarks>
            public const string PERCENTILE = "percentile";

            /// <summary>Estimate (via t-digest) of the percentile rank of the
            /// given value in the column(s) (if the given value is the median
            /// of the column(s), percentile_rank(&lt;median&gt;) will return
            /// approximately 50.0).</summary>
            public const string PERCENTILE_RANK = "percentile_rank";
        } // end struct Stats

        /// <summary>A set of string constants for the parameter <see
        /// cref="options" />.</summary>
        /// <remarks><para>Optional parameters.</para></remarks>
        public struct Options
        {
            /// <summary>A list of comma separated column names over which
            /// statistics can be accumulated along with the primary column.
            /// </summary>
            /// <remarks><para> All columns listed and <see cref="column_name"
            /// /> must be of the same type.  Must not include the column
            /// specified in <see cref="column_name" /> and no column can be
            /// listed twice.</para></remarks>
            public const string ADDITIONAL_COLUMN_NAMES = "additional_column_names";

            /// <summary>Name of column used as weighting attribute for the
            /// weighted average statistic.</summary>
            public const string WEIGHT_COLUMN_NAME = "weight_column_name";
        } // end struct Options

        /// <summary>Name of the table on which the statistics operation will
        /// be performed, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</summary>
        public string table_name { get; set; }

        /// <summary>Name of the primary column for which the statistics are to
        /// be calculated.</summary>
        public string column_name { get; set; }

        /// <summary>Comma separated list of the statistics to calculate, e.g.
        /// "sum,mean".</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="Stats.COUNT">COUNT</see>:</term>
        ///         <description>Number of objects (independent of the given
        ///         column(s)).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.MEAN">MEAN</see>:</term>
        ///         <description>Arithmetic mean (average), equivalent to
        ///         sum/count.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.STDV">STDV</see>:</term>
        ///         <description>Sample standard deviation (denominator is
        ///         count-1).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.VARIANCE">VARIANCE</see>:</term>
        ///         <description>Unbiased sample variance (denominator is
        ///         count-1).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.SKEW">SKEW</see>:</term>
        ///         <description>Skewness (third standardized moment).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.KURTOSIS">KURTOSIS</see>:</term>
        ///         <description>Kurtosis (fourth standardized moment).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.SUM">SUM</see>:</term>
        ///         <description>Sum of all values in the column(s).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.MIN">MIN</see>:</term>
        ///         <description>Minimum value of the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.MAX">MAX</see>:</term>
        ///         <description>Maximum value of the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Stats.WEIGHTED_AVERAGE">WEIGHTED_AVERAGE</see>:
        ///         </term>
        ///         <description>Weighted arithmetic mean (using the option
        ///         <see
        ///         cref="Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>
        ///         as the weighting column).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.CARDINALITY">CARDINALITY</see>:
        ///         </term>
        ///         <description>Number of unique values in the column(s).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Stats.ESTIMATED_CARDINALITY">ESTIMATED_CARDINALITY</see>:
        ///         </term>
        ///         <description>Estimate (via hyperloglog technique) of the
        ///         number of unique values in the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.PERCENTILE">PERCENTILE</see>:</term>
        ///         <description>Estimate (via t-digest) of the given
        ///         percentile of the column(s) (percentile(50.0) will be an
        ///         approximation of the median). Add a second, comma-separated
        ///         value to calculate percentile resolution, e.g.,
        ///         'percentile(75,150)'</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>:</term>
        ///         <description>Estimate (via t-digest) of the percentile rank
        ///         of the given value in the column(s) (if the given value is
        ///         the median of the column(s),
        ///         percentile_rank(&lt;median&gt;) will return approximately
        ///         50.0).</description>
        ///     </item>
        /// </list></remarks>
        public string stats { get; set; }

        /// <summary>Optional parameters.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>:
        ///         </term>
        ///         <description>A list of comma separated column names over
        ///         which statistics can be accumulated along with the primary
        ///         column.  All columns listed and <see cref="column_name" />
        ///         must be of the same type.  Must not include the column
        ///         specified in <see cref="column_name" /> and no column can
        ///         be listed twice.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>:
        ///         </term>
        ///         <description>Name of column used as weighting attribute for
        ///         the weighted average statistic.</description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();

        /// <summary>Constructs an AggregateStatisticsRequest object with
        /// default parameters.</summary>
        public AggregateStatisticsRequest() { }

        /// <summary>Constructs an AggregateStatisticsRequest object with the
        /// specified parameters.</summary>
        ///
        /// <param name="table_name">Name of the table on which the statistics
        /// operation will be performed, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_name">Name of the primary column for which the
        /// statistics are to be calculated.</param>
        /// <param name="stats">Comma separated list of the statistics to
        /// calculate, e.g. "sum,mean".
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="Stats.COUNT">COUNT</see>:</term>
        ///         <description>Number of objects (independent of the given
        ///         column(s)).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.MEAN">MEAN</see>:</term>
        ///         <description>Arithmetic mean (average), equivalent to
        ///         sum/count.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.STDV">STDV</see>:</term>
        ///         <description>Sample standard deviation (denominator is
        ///         count-1).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.VARIANCE">VARIANCE</see>:</term>
        ///         <description>Unbiased sample variance (denominator is
        ///         count-1).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.SKEW">SKEW</see>:</term>
        ///         <description>Skewness (third standardized moment).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.KURTOSIS">KURTOSIS</see>:</term>
        ///         <description>Kurtosis (fourth standardized moment).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.SUM">SUM</see>:</term>
        ///         <description>Sum of all values in the column(s).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.MIN">MIN</see>:</term>
        ///         <description>Minimum value of the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.MAX">MAX</see>:</term>
        ///         <description>Maximum value of the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Stats.WEIGHTED_AVERAGE">WEIGHTED_AVERAGE</see>:
        ///         </term>
        ///         <description>Weighted arithmetic mean (using the option
        ///         <see
        ///         cref="Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>
        ///         as the weighting column).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.CARDINALITY">CARDINALITY</see>:
        ///         </term>
        ///         <description>Number of unique values in the column(s).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Stats.ESTIMATED_CARDINALITY">ESTIMATED_CARDINALITY</see>:
        ///         </term>
        ///         <description>Estimate (via hyperloglog technique) of the
        ///         number of unique values in the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Stats.PERCENTILE">PERCENTILE</see>:</term>
        ///         <description>Estimate (via t-digest) of the given
        ///         percentile of the column(s) (percentile(50.0) will be an
        ///         approximation of the median). Add a second, comma-separated
        ///         value to calculate percentile resolution, e.g.,
        ///         'percentile(75,150)'</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>:</term>
        ///         <description>Estimate (via t-digest) of the percentile rank
        ///         of the given value in the column(s) (if the given value is
        ///         the median of the column(s),
        ///         percentile_rank(&lt;median&gt;) will return approximately
        ///         50.0).</description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>:
        ///         </term>
        ///         <description>A list of comma separated column names over
        ///         which statistics can be accumulated along with the primary
        ///         column.  All columns listed and <paramref
        ///         name="column_name" /> must be of the same type.  Must not
        ///         include the column specified in <paramref
        ///         name="column_name" /> and no column can be listed twice.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>:
        ///         </term>
        ///         <description>Name of column used as weighting attribute for
        ///         the weighted average statistic.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        public AggregateStatisticsRequest( string table_name,
                                           string column_name,
                                           string stats,
                                           IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.column_name = column_name ?? "";
            this.stats = stats ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor
    } // end class AggregateStatisticsRequest

    /// <summary>A set of results returned by <see
    /// cref="Kinetica.aggregateStatistics(AggregateStatisticsRequest)">Kinetica.aggregateStatistics</see>.
    /// </summary>
    public class AggregateStatisticsResponse : KineticaData
    {
        /// <summary>(statistic name, double value) pairs of the requested
        /// statistics, including the total count by default.</summary>
        public IDictionary<string, double> stats { get; set; } = new Dictionary<string, double>();

        /// <summary>Additional information.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();
    } // end class AggregateStatisticsResponse
} // end namespace kinetica
