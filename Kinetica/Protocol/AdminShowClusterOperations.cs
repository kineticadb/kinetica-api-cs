/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;

namespace kinetica
{
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminShowClusterOperations(AdminShowClusterOperationsRequest)">Kinetica.adminShowClusterOperations</see>.
    /// </summary>
    /// <remarks><para>Requests the detailed status of the current operation
    /// (by default) or a prior cluster operation specified by <see
    /// cref="history_index" />.
    /// Returns details on the requested cluster operation.</para>
    /// <para>The response will also indicate how many cluster operations are
    /// stored in the history.</para></remarks>
    public class AdminShowClusterOperationsRequest : KineticaData
    {
        /// <summary>Indicates which cluster operation to retrieve.</summary>
        /// <remarks><para> Use 0 for the most recent. The default value is 0.
        /// </para></remarks>
        public int history_index { get; set; } = 0;

        /// <summary>Optional parameters.</summary>
        /// <remarks><para>The default value is an empty Dictionary.</para>
        /// </remarks>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();

        /// <summary>Constructs an AdminShowClusterOperationsRequest object
        /// with default parameters.</summary>
        public AdminShowClusterOperationsRequest() { }

        /// <summary>Constructs an AdminShowClusterOperationsRequest object
        /// with the specified parameters.</summary>
        ///
        /// <param name="history_index">Indicates which cluster operation to
        /// retrieve.  Use 0 for the most recent. The default value is 0.
        /// </param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        public AdminShowClusterOperationsRequest( int? history_index = null,
                                                  IDictionary<string, string> options = null)
        {
            this.history_index = history_index ?? 0;
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor
    } // end class AdminShowClusterOperationsRequest

    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminShowClusterOperations(AdminShowClusterOperationsRequest)">Kinetica.adminShowClusterOperations</see>.
    /// </summary>
    public class AdminShowClusterOperationsResponse : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="in_progress" />.</summary>
        /// <remarks><para>Whether this cluster operation is currently in
        /// progress or not.</para></remarks>
        public struct InProgress
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct InProgress

        /// <summary>A set of string constants for the parameter <see
        /// cref="overall_status" />.</summary>
        /// <remarks><para>Overall success status of the operation.</para>
        /// </remarks>
        public struct OverallStatus
        {
            /// <summary>The operation was successful, or, if still in
            /// progress, the operation is successful so far.</summary>
            public const string OK = "OK";

            /// <summary>An error occurred executing the operation.</summary>
            public const string ERROR = "ERROR";
        } // end struct OverallStatus

        /// <summary>A set of string constants for the parameter <see
        /// cref="user_stopped" />.</summary>
        /// <remarks><para>Whether a user stopped this operation at any point
        /// while in progress.</para></remarks>
        public struct UserStopped
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct UserStopped

        /// <summary>A set of string constants for the parameter <see
        /// cref="dry_run" />.</summary>
        /// <remarks><para>Whether this operation was a dry run.</para>
        /// </remarks>
        public struct DryRun
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct DryRun

        /// <summary>A set of string constants for the parameter <see
        /// cref="add_ranks" />.</summary>
        /// <remarks><para>Whether adding ranks is (or was) part of this
        /// operation.</para></remarks>
        public struct AddRanks
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct AddRanks

        /// <summary>A set of string constants for the parameter <see
        /// cref="add_ranks_status" />.</summary>
        /// <remarks><para>If this was a rank-adding operation, the
        /// add-specific status of the operation.</para></remarks>
        public struct AddRanksStatus
        {
            public const string NOT_STARTED = "NOT_STARTED";
            public const string IN_PROGRESS = "IN_PROGRESS";
            public const string INTERRUPTED = "INTERRUPTED";
            public const string COMPLETED_OK = "COMPLETED_OK";
            public const string ERROR = "ERROR";
        } // end struct AddRanksStatus

        /// <summary>A set of string constants for the parameter <see
        /// cref="remove_ranks" />.</summary>
        /// <remarks><para>Whether removing ranks is (or was) part of this
        /// operation.</para></remarks>
        public struct RemoveRanks
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct RemoveRanks

        /// <summary>A set of string constants for the parameter <see
        /// cref="remove_ranks_status" />.</summary>
        /// <remarks><para>If this was a rank-removing operation, the
        /// removal-specific status of the operation.</para></remarks>
        public struct RemoveRanksStatus
        {
            public const string NOT_STARTED = "NOT_STARTED";
            public const string IN_PROGRESS = "IN_PROGRESS";
            public const string INTERRUPTED = "INTERRUPTED";
            public const string COMPLETED_OK = "COMPLETED_OK";
            public const string ERROR = "ERROR";
        } // end struct RemoveRanksStatus

        /// <summary>A set of string constants for the parameter <see
        /// cref="rebalance" />.</summary>
        /// <remarks><para>Whether data and/or shard rebalancing is (or was)
        /// part of this operation.</para></remarks>
        public struct Rebalance
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct Rebalance

        /// <summary>A set of string constants for the parameter <see
        /// cref="rebalance_unsharded_data" />.</summary>
        /// <remarks><para>Whether rebalancing of unsharded data is (or was)
        /// part of this operation.</para></remarks>
        public struct RebalanceUnshardedData
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct RebalanceUnshardedData

        /// <summary>A set of string constants for the parameter <see
        /// cref="rebalance_unsharded_data_status" />.</summary>
        /// <remarks><para>If this was an operation that included rebalancing
        /// unsharded data, the rebalancing-specific status of the operation.
        /// </para></remarks>
        public struct RebalanceUnshardedDataStatus
        {
            public const string NOT_STARTED = "NOT_STARTED";
            public const string IN_PROGRESS = "IN_PROGRESS";
            public const string INTERRUPTED = "INTERRUPTED";
            public const string COMPLETED_OK = "COMPLETED_OK";
            public const string ERROR = "ERROR";
        } // end struct RebalanceUnshardedDataStatus

        /// <summary>A set of string constants for the parameter <see
        /// cref="rebalance_sharded_data" />.</summary>
        /// <remarks><para>Whether rebalancing of sharded data is (or was) part
        /// of this operation.</para></remarks>
        public struct RebalanceShardedData
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct RebalanceShardedData

        /// <summary>A set of string constants for the parameter <see
        /// cref="rebalance_sharded_data_status" />.</summary>
        /// <remarks><para>If this was an operation that included rebalancing
        /// sharded data, the rebalancing-specific status of the operation.
        /// </para></remarks>
        public struct RebalanceShardedDataStatus
        {
            public const string NOT_STARTED = "NOT_STARTED";
            public const string IN_PROGRESS = "IN_PROGRESS";
            public const string INTERRUPTED = "INTERRUPTED";
            public const string COMPLETED_OK = "COMPLETED_OK";
            public const string ERROR = "ERROR";
        } // end struct RebalanceShardedDataStatus

        /// <summary>The index of this cluster operation in the
        /// reverse-chronologically sorted list of operations, where 0 is the
        /// most recent operation.</summary>
        public int history_index { get; set; }

        /// <summary>Number of cluster operations executed to date.</summary>
        public int history_size { get; set; }

        /// <summary>Whether this cluster operation is currently in progress or
        /// not.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term>true</term>
        ///     </item>
        ///     <item>
        ///         <term>false</term>
        ///     </item>
        /// </list></remarks>
        public bool in_progress { get; set; }

        /// <summary>The start time of the cluster operation.</summary>
        public string start_time { get; set; }

        /// <summary>The end time of the cluster operation, if completed.
        /// </summary>
        public string end_time { get; set; }

        /// <summary>The endpoint that initiated the cluster operation.
        /// </summary>
        public string endpoint { get; set; }

        /// <summary>The schema for the original request.</summary>
        public string endpoint_schema { get; set; }

        /// <summary>Overall success status of the operation.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="OverallStatus.OK">OK</see>:</term>
        ///         <description>The operation was successful, or, if still in
        ///         progress, the operation is successful so far.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="OverallStatus.ERROR">ERROR</see>:</term>
        ///         <description>An error occurred executing the operation.
        ///         </description>
        ///     </item>
        /// </list></remarks>
        public string overall_status { get; set; }

        /// <summary>Whether a user stopped this operation at any point while
        /// in progress.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term>true</term>
        ///     </item>
        ///     <item>
        ///         <term>false</term>
        ///     </item>
        /// </list></remarks>
        public bool user_stopped { get; set; }

        /// <summary>Percent complete of this entire operation.</summary>
        public int percent_complete { get; set; }

        /// <summary>Whether this operation was a dry run.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term>true</term>
        ///     </item>
        ///     <item>
        ///         <term>false</term>
        ///     </item>
        /// </list></remarks>
        public bool dry_run { get; set; }

        /// <summary>Updates and error messages if any.</summary>
        public IList<string> messages { get; set; } = new List<string>();

        /// <summary>Whether adding ranks is (or was) part of this operation.
        /// </summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term>true</term>
        ///     </item>
        ///     <item>
        ///         <term>false</term>
        ///     </item>
        /// </list></remarks>
        public bool add_ranks { get; set; }

        /// <summary>If this was a rank-adding operation, the add-specific
        /// status of the operation.</summary>
        /// <remarks><para>Valid values are:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AddRanksStatus.NOT_STARTED">NOT_STARTED</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AddRanksStatus.IN_PROGRESS">IN_PROGRESS</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AddRanksStatus.INTERRUPTED">INTERRUPTED</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AddRanksStatus.COMPLETED_OK">COMPLETED_OK</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see cref="AddRanksStatus.ERROR">ERROR</see></term>
        ///     </item>
        /// </list></remarks>
        public string add_ranks_status { get; set; }

        /// <summary>The rank numbers of the ranks currently being added, or
        /// the rank numbers that were added if the operation is complete.
        /// </summary>
        public IList<int> ranks_being_added { get; set; } = new List<int>();

        /// <summary>The host IP addresses of the ranks being added, in the
        /// same order as the <see cref="ranks_being_added" /> list.</summary>
        public IList<string> rank_hosts { get; set; } = new List<string>();

        /// <summary>Current percent complete of the add ranks operation.
        /// </summary>
        public int add_ranks_percent_complete { get; set; }

        /// <summary>Whether removing ranks is (or was) part of this operation.
        /// </summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term>true</term>
        ///     </item>
        ///     <item>
        ///         <term>false</term>
        ///     </item>
        /// </list></remarks>
        public bool remove_ranks { get; set; }

        /// <summary>If this was a rank-removing operation, the
        /// removal-specific status of the operation.</summary>
        /// <remarks><para>Valid values are:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RemoveRanksStatus.NOT_STARTED">NOT_STARTED</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RemoveRanksStatus.IN_PROGRESS">IN_PROGRESS</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RemoveRanksStatus.INTERRUPTED">INTERRUPTED</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RemoveRanksStatus.COMPLETED_OK">COMPLETED_OK</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RemoveRanksStatus.ERROR">ERROR</see>
        ///         </term>
        ///     </item>
        /// </list></remarks>
        public string remove_ranks_status { get; set; }

        /// <summary>The ranks being removed, or that have been removed if the
        /// operation is completed.</summary>
        public IList<int> ranks_being_removed { get; set; } = new List<int>();

        /// <summary>Current percent complete of the remove ranks operation.
        /// </summary>
        public int remove_ranks_percent_complete { get; set; }

        /// <summary>Whether data and/or shard rebalancing is (or was) part of
        /// this operation.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term>true</term>
        ///     </item>
        ///     <item>
        ///         <term>false</term>
        ///     </item>
        /// </list></remarks>
        public bool rebalance { get; set; }

        /// <summary>Whether rebalancing of unsharded data is (or was) part of
        /// this operation.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term>true</term>
        ///     </item>
        ///     <item>
        ///         <term>false</term>
        ///     </item>
        /// </list></remarks>
        public bool rebalance_unsharded_data { get; set; }

        /// <summary>If this was an operation that included rebalancing
        /// unsharded data, the rebalancing-specific status of the operation.
        /// </summary>
        /// <remarks><para>Valid values are:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceUnshardedDataStatus.NOT_STARTED">NOT_STARTED</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceUnshardedDataStatus.IN_PROGRESS">IN_PROGRESS</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceUnshardedDataStatus.INTERRUPTED">INTERRUPTED</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceUnshardedDataStatus.COMPLETED_OK">COMPLETED_OK</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceUnshardedDataStatus.ERROR">ERROR</see>
        ///         </term>
        ///     </item>
        /// </list></remarks>
        public string rebalance_unsharded_data_status { get; set; }

        /// <summary>Percentage of unsharded tables that completed rebalancing,
        /// out of all unsharded tables to rebalance.</summary>
        public int unsharded_rebalance_percent_complete { get; set; }

        /// <summary>Whether rebalancing of sharded data is (or was) part of
        /// this operation.</summary>
        /// <remarks><para>Supported values:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term>true</term>
        ///     </item>
        ///     <item>
        ///         <term>false</term>
        ///     </item>
        /// </list></remarks>
        public bool rebalance_sharded_data { get; set; }

        /// <summary>Version of the shard array that is (or was) being
        /// rebalanced to.</summary>
        /// <remarks><para>Each change to the shard array results in the
        /// version number incrementing.</para></remarks>
        public long shard_array_version { get; set; }

        /// <summary>If this was an operation that included rebalancing sharded
        /// data, the rebalancing-specific status of the operation.</summary>
        /// <remarks><para>Valid values are:</para>
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceShardedDataStatus.NOT_STARTED">NOT_STARTED</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceShardedDataStatus.IN_PROGRESS">IN_PROGRESS</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceShardedDataStatus.INTERRUPTED">INTERRUPTED</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceShardedDataStatus.COMPLETED_OK">COMPLETED_OK</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RebalanceShardedDataStatus.ERROR">ERROR</see></term>
        ///     </item>
        /// </list></remarks>
        public string rebalance_sharded_data_status { get; set; }

        /// <summary>Number of shards that will change as part of rebalance.
        /// </summary>
        public int num_shards_changing { get; set; }

        /// <summary>Percentage of shard keys, and their associated data if
        /// applicable, that have completed rebalancing.</summary>
        public int sharded_rebalance_percent_complete { get; set; }

        /// <summary>Additional information.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();
    } // end class AdminShowClusterOperationsResponse
} // end namespace kinetica
