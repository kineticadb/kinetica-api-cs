/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.adminShowClusterOperations(int,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Shows detailed status of current or prior cluster operations.
    /// <br />
    /// By default will retrieve the current or most resent cluster operation.
    /// The @{history_index} is used to specify which cluster operation to
    /// retrieve. A value of zero will return the most recent, one will return
    /// the second most recent, etc.  The response will also indicate how many
    /// cluster operations are stored in the history.</summary>
    public class AdminShowClusterOperationsRequest : KineticaData
    {

        /// <summary>Indicates which cluster operation to retrieve.  Zero is
        /// most recent.  </summary>
        public int history_index { get; set; } = 0;

        /// <summary>Optional parameters.  </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs an AdminShowClusterOperationsRequest object
        /// with default parameters.</summary>
        public AdminShowClusterOperationsRequest() { }

        /// <summary>Constructs an AdminShowClusterOperationsRequest object
        /// with the specified parameters.</summary>
        /// 
        /// <param name="history_index">Indicates which cluster operation to
        /// retrieve.  Zero is most recent.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        public AdminShowClusterOperationsRequest( int history_index = 0,
                                                  IDictionary<string, string> options = null)
        {
            this.history_index = history_index;
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class AdminShowClusterOperationsRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.adminShowClusterOperations(int,IDictionary{string, string})"
    /// />.</summary>
    public class AdminShowClusterOperationsResponse : KineticaData
    {

        /// <summary>Indicates how recent the cluster operation is, relative to
        /// all prior cluster operations.  Zero is most recent, one is second
        /// most recent, etc.  </summary>
        public int history_index { get; set; }

        /// <summary>Number of cluster operations executed to date  </summary>
        public int history_size { get; set; }

        /// <summary>Whether this cluster operation is currently in progress or
        /// not  </summary>
        public bool in_progress { get; set; }

        /// <summary>The start time of the cluster operation  </summary>
        public string start_time { get; set; }

        /// <summary>The end time of the cluster operation, if completed
        /// </summary>
        public string end_time { get; set; }

        /// <summary>The endpoint that initiated the cluster operation.
        /// </summary>
        public string endpoint { get; set; }

        /// <summary>The schema for the original request  </summary>
        public string endpoint_schema { get; set; }

        /// <summary>OK or ERROR.  If the operation is still in progress, OK
        /// means it has been successful so far.  </summary>
        public string overall_status { get; set; }

        /// <summary>Indicates if a user stopped this operation at any point
        /// while in progress.  </summary>
        public bool user_stopped { get; set; }

        /// <summary>Percent complete of this entire operation.  </summary>
        public int percent_complete { get; set; }

        /// <summary>Indicates if this operation was a dry run.  </summary>
        public bool dry_run { get; set; }

        /// <summary>Updates, and error messages if any.  </summary>
        public IList<string> messages { get; set; } = new List<string>();

        /// <summary>Indicates that adding ranks is being performed or was
        /// performed as part of this operation.  </summary>
        public bool add_ranks { get; set; }

        /// <summary>Will be one of NOT_STARTED, IN PROGRESS, INTERRUPTED,
        /// COMPLETED_OK, or ERROR  </summary>
        public string add_ranks_status { get; set; }

        /// <summary>The rank numbers of the ranks currently being added, or
        /// the rank numbers that were added if the operation is complete.
        /// </summary>
        public IList<int> ranks_being_added { get; set; } = new List<int>();

        /// <summary>The host IP addresses of the ranks being added, in the
        /// same order as the <member name="ranks_being_added" /> list.
        /// </summary>
        public IList<string> rank_hosts { get; set; } = new List<string>();

        /// <summary>Current percent complete of the add ranks operation
        /// </summary>
        public int add_ranks_percent_complete { get; set; }

        /// <summary>Indicates that removing ranks is being performed or was
        /// performed as part of this operation.  </summary>
        public bool remove_ranks { get; set; }

        /// <summary>Will be one of NOT_STARTED, IN PROGRESS, INTERRUPTED,
        /// COMPLETED_OK, or ERROR  </summary>
        public string remove_ranks_status { get; set; }

        /// <summary>The ranks being removed, or that have been removed if the
        /// operation is completed.  </summary>
        public IList<int> ranks_being_removed { get; set; } = new List<int>();

        /// <summary>Current percent complete of the remove ranks operation
        /// </summary>
        public int remove_ranks_percent_complete { get; set; }

        /// <summary>Indicates whether data and/or shard rebalancing is part of
        /// this operation  </summary>
        public bool rebalance { get; set; }

        /// <summary>Indicates that a rebalance operation included rebalancing
        /// of unsharded data.  </summary>
        public bool rebalance_unsharded_data { get; set; }

        /// <summary>Will be one of NOT_STARTED, IN PROGRESS, INTERRUPTED,
        /// COMPLETED_OK, or ERROR  </summary>
        public string rebalance_unsharded_data_status { get; set; }

        /// <summary>Percentage of unsharded tables that completed rebalancing,
        /// out of all unsharded tables to rebalance  </summary>
        public int unsharded_rebalance_percent_complete { get; set; }

        /// <summary>Indicates that a rebalance operation included rebalancing
        /// of sharded data.  </summary>
        public bool rebalance_sharded_data { get; set; }

        /// <summary>shard array version that was/is being rebalanced to. Each
        /// change to the shard array results in the version number
        /// incrementing  </summary>
        public long shard_array_version { get; set; }

        /// <summary>Will be one of NOT_STARTED, IN PROGRESS, INTERRUPTED,
        /// COMPLETED_OK, or ERROR  </summary>
        public string rebalance_sharded_data_status { get; set; }

        /// <summary>Number of shards that will change as part of rebalance
        /// </summary>
        public int num_shards_changing { get; set; }

        /// <summary>Percentage of shard keys, and their associated data if
        /// applicable, that have completed rebalancing.  </summary>
        public int sharded_rebalance_percent_complete { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class AdminShowClusterOperationsResponse




}  // end namespace kinetica
