/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;

namespace kinetica
{
    /// <summary>A set of parameters for <see
    /// cref="Kinetica.restoreBackup(RestoreBackupRequest)">Kinetica.restoreBackup</see>.
    /// </summary>
    /// <remarks><para>Restores objects from a backup instance.
    /// Response from a backup restoration operation.</para></remarks>
    public class RestoreBackupRequest : KineticaData
    {
        /// <summary>A set of string constants for the parameter <see
        /// cref="restore_objects_map" />.</summary>
        /// <remarks><para>Map of objects to be restored from the backup. Error
        /// if empty.</para></remarks>
        public struct RestoreObjectsMap
        {
            /// <summary>All object types in a schema (excludes permissions,
            /// system configuration, host secret key, KiFS directories and
            /// user defined functions)</summary>
            public const string ALL = "all";

            /// <summary>Database Table</summary>
            public const string TABLE = "table";

            /// <summary>Credential</summary>
            public const string CREDENTIAL = "credential";

            /// <summary>Context</summary>
            public const string CONTEXT = "context";

            /// <summary>Data Sink</summary>
            public const string DATASINK = "datasink";

            /// <summary>Data Source</summary>
            public const string DATASOURCE = "datasource";

            /// <summary>SQL Procedure</summary>
            public const string STORED_PROCEDURE = "stored_procedure";

            /// <summary>Table Monitor (Stream)</summary>
            public const string MONITOR = "monitor";

            /// <summary>User (internal and external) and associated
            /// permissions</summary>
            public const string USER = "user";

            /// <summary>Role, role members (roles or users, recursively) and
            /// associated permissions</summary>
            public const string ROLE = "role";

            /// <summary>If <see cref="RestoreObjectsMap.TRUE">TRUE</see>,
            /// restore the database configuration file.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="RestoreObjectsMap.FALSE">FALSE</see>
            ///         </term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="RestoreObjectsMap.TRUE">TRUE</see>
            ///         </term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="RestoreObjectsMap.FALSE">FALSE</see>.</para></remarks>
            public const string CONFIGURATION = "configuration";

            public const string FALSE = "false";
            public const string TRUE = "true";
        } // end struct RestoreObjectsMap

        /// <summary>A set of string constants for the parameter <see
        /// cref="options" />.</summary>
        /// <remarks><para>Optional parameters.</para></remarks>
        public struct Options
        {
            /// <summary>Backup instance ID to restore.</summary>
            /// <remarks><para>Leave empty to restore the most recent backup
            /// instance. The default value is ''.</para></remarks>
            public const string BACKUP_ID = "backup_id";

            /// <summary>Behavior to apply when restoring objects that already
            /// exist.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.NONE">NONE</see>:</term>
            ///         <description>If an object to be restored currently
            ///         exists with the same name, abort and return error
            ///         </description>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.REPLACE">REPLACE</see>:</term>
            ///         <description>If an object to be restored currently
            ///         exists with the same name, replace it with the backup
            ///         version</description>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.RENAME">RENAME</see>:</term>
            ///         <description>If an object to be restored currently
            ///         exists with the same name, rename the original version
            ///         </description>
            ///     </item>
            /// </list>
            /// <para>The default value is <see cref="Options.NONE">NONE</see>.
            /// </para></remarks>
            public const string RESTORE_POLICY = "restore_policy";

            /// <summary>If an object to be restored currently exists with the
            /// same name, abort and return error</summary>
            public const string NONE = "none";

            /// <summary>If an object to be restored currently exists with the
            /// same name, replace it with the backup version</summary>
            public const string REPLACE = "replace";

            /// <summary>If an object to be restored currently exists with the
            /// same name, rename the original version</summary>
            public const string RENAME = "rename";

            /// <summary>If the restore policy is rename, optionally use this
            /// schema for renamed objects instead of a default generated one.
            /// </summary>
            /// <remarks><para>The default value is ''.</para></remarks>
            public const string RENAMED_OBJECTS_SCHEMA = "renamed_objects_schema";

            /// <summary>Create the schema for an object to be restored if it
            /// does not currently exist.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see cref="Options.TRUE">TRUE</see>.
            /// </para></remarks>
            public const string CREATE_SCHEMA_IF_NOT_EXIST = "create_schema_if_not_exist";

            public const string FALSE = "false";
            public const string TRUE = "true";

            /// <summary>Only recreates the objects from their DDL, do not
            /// restore table data.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string DDL_ONLY = "ddl_only";

            /// <summary>Verify checksum for backup files.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see cref="Options.TRUE">TRUE</see>.
            /// </para></remarks>
            public const string CHECKSUM = "checksum";

            /// <summary>Does a dry-run restoration operation.</summary>
            /// <remarks><para>Supported values:</para>
            /// <list type="bullet">
            ///     <item>
            ///         <term><see cref="Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see cref="Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// <para>The default value is <see
            /// cref="Options.FALSE">FALSE</see>.</para></remarks>
            public const string DRY_RUN = "dry_run";
        } // end struct Options

        /// <summary>Name of the backup object, which must refer to a currently
        /// existing backup.</summary>
        /// <remarks><para>The default value is ''.</para></remarks>
        public string backup_name { get; set; } = "";

        /// <summary>Map of objects to be restored from the backup.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.ALL">ALL</see>:</term>
        ///         <description>All object types in a schema (excludes
        ///         permissions, system configuration, host secret key, KiFS
        ///         directories and user defined functions)</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.TABLE">TABLE</see>:
        ///         </term>
        ///         <description>Database Table</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.CONTEXT">CONTEXT</see>:
        ///         </term>
        ///         <description>Context</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.DATASINK">DATASINK</see>:</term>
        ///         <description>Data Sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.DATASOURCE">DATASOURCE</see>:
        ///         </term>
        ///         <description>Data Source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.STORED_PROCEDURE">STORED_PROCEDURE</see>:
        ///         </term>
        ///         <description>SQL Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.MONITOR">MONITOR</see>:
        ///         </term>
        ///         <description>Table Monitor (Stream)</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.USER">USER</see>:</term>
        ///         <description>User (internal and external) and associated
        ///         permissions</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.ROLE">ROLE</see>:</term>
        ///         <description>Role, role members (roles or users,
        ///         recursively) and associated permissions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.CONFIGURATION">CONFIGURATION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="RestoreObjectsMap.TRUE">TRUE</see>, restore the
        ///         database configuration file.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="RestoreObjectsMap.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="RestoreObjectsMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="RestoreObjectsMap.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list></remarks>
        public IDictionary<string, string> restore_objects_map { get; set; } = new Dictionary<string, string>();

        /// <summary>Datasource where backup is located.</summary>
        public string datasource_name { get; set; }

        /// <summary>Optional parameters.</summary>
        /// <remarks><list type="bullet">
        ///     <item>
        ///         <term><see cref="Options.BACKUP_ID">BACKUP_ID</see>:</term>
        ///         <description>Backup instance ID to restore. Leave empty to
        ///         restore the most recent backup instance. The default value
        ///         is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.RESTORE_POLICY">RESTORE_POLICY</see>:</term>
        ///         <description>Behavior to apply when restoring objects that
        ///         already exist.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.NONE">NONE</see>:</term>
        ///                 <description>If an object to be restored currently
        ///                 exists with the same name, abort and return error
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.REPLACE">REPLACE</see>:
        ///                 </term>
        ///                 <description>If an object to be restored currently
        ///                 exists with the same name, replace it with the
        ///                 backup version</description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.RENAME">RENAME</see>:
        ///                 </term>
        ///                 <description>If an object to be restored currently
        ///                 exists with the same name, rename the original
        ///                 version</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.RENAMED_OBJECTS_SCHEMA">RENAMED_OBJECTS_SCHEMA</see>:
        ///         </term>
        ///         <description>If the restore policy is rename, optionally
        ///         use this schema for renamed objects instead of a default
        ///         generated one. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.CREATE_SCHEMA_IF_NOT_EXIST">CREATE_SCHEMA_IF_NOT_EXIST</see>:
        ///         </term>
        ///         <description>Create the schema for an object to be restored
        ///         if it does not currently exist. Error otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.DDL_ONLY">DDL_ONLY</see>:</term>
        ///         <description>Only recreates the objects from their DDL, do
        ///         not restore table data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.CHECKSUM">CHECKSUM</see>:</term>
        ///         <description>Verify checksum for backup files.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>Does a dry-run restoration operation.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// <para>The default value is an empty Dictionary.</para></remarks>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();

        /// <summary>Constructs a RestoreBackupRequest object with default
        /// parameters.</summary>
        public RestoreBackupRequest() { }

        /// <summary>Constructs a RestoreBackupRequest object with the
        /// specified parameters.</summary>
        ///
        /// <param name="backup_name">Name of the backup object, which must
        /// refer to a currently existing backup. The default value is ''.
        /// </param>
        /// <param name="restore_objects_map">Map of objects to be restored
        /// from the backup. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.ALL">ALL</see>:</term>
        ///         <description>All object types in a schema (excludes
        ///         permissions, system configuration, host secret key, KiFS
        ///         directories and user defined functions)</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.TABLE">TABLE</see>:
        ///         </term>
        ///         <description>Database Table</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.CONTEXT">CONTEXT</see>:
        ///         </term>
        ///         <description>Context</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.DATASINK">DATASINK</see>:</term>
        ///         <description>Data Sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.DATASOURCE">DATASOURCE</see>:
        ///         </term>
        ///         <description>Data Source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.STORED_PROCEDURE">STORED_PROCEDURE</see>:
        ///         </term>
        ///         <description>SQL Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.MONITOR">MONITOR</see>:
        ///         </term>
        ///         <description>Table Monitor (Stream)</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.USER">USER</see>:</term>
        ///         <description>User (internal and external) and associated
        ///         permissions</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="RestoreObjectsMap.ROLE">ROLE</see>:</term>
        ///         <description>Role, role members (roles or users,
        ///         recursively) and associated permissions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RestoreObjectsMap.CONFIGURATION">CONFIGURATION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="RestoreObjectsMap.TRUE">TRUE</see>, restore the
        ///         database configuration file.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="RestoreObjectsMap.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="RestoreObjectsMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="RestoreObjectsMap.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list></param>
        /// <param name="datasource_name">Datasource where backup is located.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="Options.BACKUP_ID">BACKUP_ID</see>:</term>
        ///         <description>Backup instance ID to restore. Leave empty to
        ///         restore the most recent backup instance. The default value
        ///         is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.RESTORE_POLICY">RESTORE_POLICY</see>:</term>
        ///         <description>Behavior to apply when restoring objects that
        ///         already exist.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.NONE">NONE</see>:</term>
        ///                 <description>If an object to be restored currently
        ///                 exists with the same name, abort and return error
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.REPLACE">REPLACE</see>:
        ///                 </term>
        ///                 <description>If an object to be restored currently
        ///                 exists with the same name, replace it with the
        ///                 backup version</description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.RENAME">RENAME</see>:
        ///                 </term>
        ///                 <description>If an object to be restored currently
        ///                 exists with the same name, rename the original
        ///                 version</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.RENAMED_OBJECTS_SCHEMA">RENAMED_OBJECTS_SCHEMA</see>:
        ///         </term>
        ///         <description>If the restore policy is rename, optionally
        ///         use this schema for renamed objects instead of a default
        ///         generated one. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="Options.CREATE_SCHEMA_IF_NOT_EXIST">CREATE_SCHEMA_IF_NOT_EXIST</see>:
        ///         </term>
        ///         <description>Create the schema for an object to be restored
        ///         if it does not currently exist. Error otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.DDL_ONLY">DDL_ONLY</see>:</term>
        ///         <description>Only recreates the objects from their DDL, do
        ///         not restore table data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.CHECKSUM">CHECKSUM</see>:</term>
        ///         <description>Verify checksum for backup files.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="Options.DRY_RUN">DRY_RUN</see>:</term>
        ///         <description>Does a dry-run restoration operation.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see cref="Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="Options.FALSE">FALSE</see></term>
        ///             </item>
        ///         </list>
        ///         The default value is <see cref="Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        public RestoreBackupRequest( string backup_name,
                                     IDictionary<string, string> restore_objects_map,
                                     string datasource_name,
                                     IDictionary<string, string> options = null)
        {
            this.backup_name = backup_name ?? "";
            this.restore_objects_map = restore_objects_map ?? new Dictionary<string, string>();
            this.datasource_name = datasource_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor
    } // end class RestoreBackupRequest

    /// <summary>A set of results returned by <see
    /// cref="Kinetica.restoreBackup(RestoreBackupRequest)">Kinetica.restoreBackup</see>.
    /// </summary>
    public class RestoreBackupResponse : KineticaData
    {
        /// <summary>The backup name</summary>
        public string backup_name { get; set; }

        /// <summary>The backup ID that was restored</summary>
        public long backup_id { get; set; }

        /// <summary>Total size of data restored from backup</summary>
        public long restored_bytes { get; set; }

        /// <summary>Total number of files restored from backup</summary>
        public long restored_files { get; set; }

        /// <summary>Total number of records restored from backup</summary>
        public long restored_records { get; set; }

        /// <summary>Objects that were successfully restored and their
        /// associated types.</summary>
        public IDictionary<string, string> restored_objects { get; set; } = new Dictionary<string, string>();

        /// <summary>Original and new names of objects that were successfully
        /// restored and their associated types.</summary>
        public IDictionary<string, string> renamed_objects { get; set; } = new Dictionary<string, string>();

        /// <summary>Objects that failed to be restored and their associated
        /// types.</summary>
        public IDictionary<string, string> failed_objects { get; set; } = new Dictionary<string, string>();

        /// <summary>Additional information.</summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();
    } // end class RestoreBackupResponse
} // end namespace kinetica
