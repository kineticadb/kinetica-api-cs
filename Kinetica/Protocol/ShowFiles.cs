/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.showFiles(IList{string},IDictionary{string, string})"
    /// />.
    /// <br />
    /// Shows information about files in <a href="../../../tools/kifs/"
    /// target="_top">KiFS</a>. Can be used for individual files, or to show
    /// all files in a given directory.</summary>
    public class ShowFilesRequest : KineticaData
    {

        /// <summary>File paths to show. Each path can be a KiFS directory
        /// name, or a full path to a KiFS file.  </summary>
        public IList<string> paths { get; set; } = new List<string>();

        /// <summary>Optional parameters.  The default value is an empty {@link
        /// Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a ShowFilesRequest object with default
        /// parameters.</summary>
        public ShowFilesRequest() { }

        /// <summary>Constructs a ShowFilesRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="paths">File paths to show. Each path can be a KiFS
        /// directory name, or a full path to a KiFS file.  </param>
        /// <param name="options">Optional parameters.  The default value is an
        /// empty {@link Dictionary}.</param>
        /// 
        public ShowFilesRequest( IList<string> paths,
                                 IDictionary<string, string> options = null)
        {
            this.paths = paths ?? new List<string>();
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class ShowFilesRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.showFiles(IList{string},IDictionary{string, string})"
    /// />.</summary>
    public class ShowFilesResponse : KineticaData
    {

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowFilesResponse.Info.MULTIPART_UPLOADS">MULTIPART_UPLOADS</see>:</term>
        ///         <description>JSON-encoded information about multipart
        /// uploads in progress</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <member name="info"
        /// />.</summary>
        public struct Info
        {

            /// <summary>JSON-encoded information about multipart uploads in
            /// progress</summary>
            public const string MULTIPART_UPLOADS = "multipart_uploads";
        } // end struct Info


        /// <summary>A listing of files in the paths specified  </summary>
        public IList<string> file_names { get; set; } = new List<string>();

        /// <summary>Size of each file, in bytes  </summary>
        public IList<long> sizes { get; set; } = new List<long>();

        /// <summary>User that created the file  </summary>
        public IList<string> users { get; set; } = new List<string>();

        /// <summary>Timestamp at creation time for each file  </summary>
        public IList<long> creation_times { get; set; } = new List<long>();

        /// <summary>Additional information.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowFilesResponse.Info.MULTIPART_UPLOADS">MULTIPART_UPLOADS</see>:</term>
        ///         <description>JSON-encoded information about multipart
        /// uploads in progress</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class ShowFilesResponse




}  // end namespace kinetica
