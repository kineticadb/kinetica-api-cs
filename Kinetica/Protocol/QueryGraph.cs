/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.queryGraph(string,IList{string},IList{string},string,int,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Employs a topological query on a network graph generated a-priori by
    /// <see
    /// cref="Kinetica.createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string, string})"
    /// /> and returns a list of adjacent edge(s) or node(s), also known as an
    /// adjacency list, depending on what's been provided to the endpoint;
    /// providing edges will return nodes and providing nodes will return
    /// edges.
    /// <br />
    /// To determine the node(s) or edge(s) adjacent to a value from a given
    /// column, provide a list of values to <see cref="queries" />. This field
    /// can be populated with column values from any table as long as the type
    /// is supported by the given identifier. See <a
    /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
    /// target="_top">Query Identifiers</a> for more information.
    /// <br />
    /// To return the adjacency list in the response, leave <see
    /// cref="adjacency_table" /> empty. To return the adjacency list in a
    /// table and not in the response, provide a value to <see
    /// cref="adjacency_table" /> and set <i>export_query_results</i> to
    /// <i>false</i>. To return the adjacency list both in a table and the
    /// response, provide a value to <see cref="adjacency_table" /> and set
    /// <i>export_query_results</i> to <i>true</i>.
    /// <br />
    /// See <a href="../../graph_solver/network_graph_solver.html"
    /// target="_top">Network Graph Solver</a> for more information.</summary>
    public class QueryGraphRequest : KineticaData
    {

        /// <summary>Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FORCE_UNDIRECTED">FORCE_UNDIRECTED</see>:</term>
        ///         <description>This parameter is only applicable if the
        /// queried graph <paramref cref="QueryGraphRequest.graph_name" /> is
        /// directed and when querying nodes. If set to <i>true</i>, all
        /// inbound edges and outbound edges relative to the node will be
        /// returned. If set to <i>false</i>, only outbound edges relative to
        /// the node will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.LIMIT">LIMIT</see>:</term>
        ///         <description>When specified, limits the number of query
        /// results. Note that if the <i>target_nodes_table</i> is provided,
        /// the size of the corresponding table will be limited by the
        /// <i>limit</i> value.  The default value is an empty {@link
        /// Dictionary}.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TARGET_NODES_TABLE">TARGET_NODES_TABLE</see>:</term>
        ///         <description>Name of the table to store the list of the
        /// final nodes reached during the traversal. If this value is not
        /// given it'll default to adjacemcy_table+'_nodes'.  The default value
        /// is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// solution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response. If set
        /// to <i>true</i>, the <member name="adjacency_list_int_array" /> (if
        /// the query was based on IDs), @{adjacency_list_string_array} (if the
        /// query was based on names), or @{output_adjacency_list_wkt_array}
        /// (if the query was based on WKTs) will be populated with the
        /// results. If set to <i>false</i>, none of the arrays will be
        /// populated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a WKT-type column
        /// named 'QUERY_EDGE_WKTLINE' to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" /> and inputs WKT values
        /// from the source graph (if available) or auto-generated WKT values
        /// (if there are no WKT values in the source graph). A subsequent call
        /// to the <a href="../../api/rest/wms_rest.html"
        /// target="_top">/wms</a> endpoint can then be made to display the
        /// query results on a map.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.AND_LABELS">AND_LABELS</see>:</term>
        ///         <description>If set to <i>true</i>, the result of the query
        /// has entities that satisfy all of the target labels, instead of any.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>This parameter is only applicable if the queried graph
            /// <see cref="graph_name" /> is directed and when querying nodes.
            /// If set to <i>true</i>, all inbound edges and outbound edges
            /// relative to the node will be returned. If set to <i>false</i>,
            /// only outbound edges relative to the node will be returned.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string FORCE_UNDIRECTED = "force_undirected";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>When specified, limits the number of query results.
            /// Note that if the <i>target_nodes_table</i> is provided, the
            /// size of the corresponding table will be limited by the
            /// <i>limit</i> value.  The default value is an empty {@link
            /// Dictionary}.</summary>
            public const string LIMIT = "limit";

            /// <summary>Name of the table to store the list of the final nodes
            /// reached during the traversal. If this value is not given it'll
            /// default to adjacemcy_table+'_nodes'.  The default value is
            /// ''.</summary>
            public const string TARGET_NODES_TABLE = "target_nodes_table";

            /// <summary>Value-based restriction comparison. Any node or edge
            /// with a RESTRICTIONS_VALUECOMPARED value greater than the
            /// <i>restriction_threshold_value</i> will not be included in the
            /// solution.</summary>
            public const string RESTRICTION_THRESHOLD_VALUE = "restriction_threshold_value";

            /// <summary>Returns query results in the response. If set to
            /// <i>true</i>, the <member name="adjacency_list_int_array" /> (if
            /// the query was based on IDs), @{adjacency_list_string_array} (if
            /// the query was based on names), or
            /// @{output_adjacency_list_wkt_array} (if the query was based on
            /// WKTs) will be populated with the results. If set to
            /// <i>false</i>, none of the arrays will be populated.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string EXPORT_QUERY_RESULTS = "export_query_results";

            /// <summary>If set to <i>true</i>, adds a WKT-type column named
            /// 'QUERY_EDGE_WKTLINE' to the given <see cref="adjacency_table"
            /// /> and inputs WKT values from the source graph (if available)
            /// or auto-generated WKT values (if there are no WKT values in the
            /// source graph). A subsequent call to the <a
            /// href="../../api/rest/wms_rest.html" target="_top">/wms</a>
            /// endpoint can then be made to display the query results on a
            /// map.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ENABLE_GRAPH_DRAW = "enable_graph_draw";

            /// <summary>If set to <i>true</i>, the result of the query has
            /// entities that satisfy all of the target labels, instead of any.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string AND_LABELS = "and_labels";
        } // end struct Options


        /// <summary>Name of the graph resource to query.  </summary>
        public string graph_name { get; set; }

        /// <summary>Nodes or edges to be queried specified using <a
        /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
        /// target="_top">query identifiers</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS QUERY_NODE_ID', raw
        /// values, e.g., '{0, 2} AS QUERY_NODE_ID', or expressions, e.g.,
        /// 'ST_MAKEPOINT(table.x, table.y) AS QUERY_NODE_WKTPOINT'. Multiple
        /// values can be provided as long as the same identifier is used for
        /// all values. If using raw values in an identifier combination, the
        /// number of values specified must match across the combination.
        /// </summary>
        public IList<string> queries { get; set; } = new List<string>();

        /// <summary>Additional restrictions to apply to the nodes/edges of an
        /// existing graph. Restrictions must be specified using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED', or raw values, e.g., '{0, 0, 0, 1} AS
        /// RESTRICTIONS_ONOFFCOMPARED'. If using raw values in an identifier
        /// combination, the number of values specified must match across the
        /// combination.  The default value is an empty {@link List}.</summary>
        public IList<string> restrictions { get; set; } = new List<string>();

        /// <summary>Name of the table to store the resulting adjacencies. If
        /// left blank, the query results are instead returned in the response
        /// even if <i>export_query_results</i> is set to <i>false</i>. If the
        /// 'QUERY_TARGET_NODE_LABEL' <a
        /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
        /// target="_top">query identifier</a> is used in <paramref
        /// cref="QueryGraphRequest.queries" />, then two additional columns
        /// will be available: 'PATH_ID' and 'RING_ID'. See
        ///             <a
        /// href="../../graph_solver/network_graph_solver.html#using-labels"
        /// target="_top">Using Labels</a> for more information.  The default
        /// value is ''.</summary>
        public string adjacency_table { get; set; } = "";

        /// <summary>Only applicable when querying nodes. Sets the number of
        /// rings around the node to query for adjacency, with '1' being the
        /// edges directly attached to the queried node. Also known as number
        /// of hops. For example, if it is set to '2', the edge(s) directly
        /// attached to the queried node(s) will be returned; in addition, the
        /// edge(s) attached to the node(s) attached to the initial ring of
        /// edge(s) surrounding the queried node(s) will be returned. This
        /// setting can be '0' in which case if the node type id label, it'll
        /// then query for all that has the same property.  The default value
        /// is 1.</summary>
        public int rings { get; set; } = 1;

        /// <summary>Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FORCE_UNDIRECTED">FORCE_UNDIRECTED</see>:</term>
        ///         <description>This parameter is only applicable if the
        /// queried graph <paramref cref="QueryGraphRequest.graph_name" /> is
        /// directed and when querying nodes. If set to <i>true</i>, all
        /// inbound edges and outbound edges relative to the node will be
        /// returned. If set to <i>false</i>, only outbound edges relative to
        /// the node will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.LIMIT">LIMIT</see>:</term>
        ///         <description>When specified, limits the number of query
        /// results. Note that if the <i>target_nodes_table</i> is provided,
        /// the size of the corresponding table will be limited by the
        /// <i>limit</i> value.  The default value is an empty {@link
        /// Dictionary}.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TARGET_NODES_TABLE">TARGET_NODES_TABLE</see>:</term>
        ///         <description>Name of the table to store the list of the
        /// final nodes reached during the traversal. If this value is not
        /// given it'll default to adjacemcy_table+'_nodes'.  The default value
        /// is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// solution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response. If set
        /// to <i>true</i>, the <member name="adjacency_list_int_array" /> (if
        /// the query was based on IDs), @{adjacency_list_string_array} (if the
        /// query was based on names), or @{output_adjacency_list_wkt_array}
        /// (if the query was based on WKTs) will be populated with the
        /// results. If set to <i>false</i>, none of the arrays will be
        /// populated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a WKT-type column
        /// named 'QUERY_EDGE_WKTLINE' to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" /> and inputs WKT values
        /// from the source graph (if available) or auto-generated WKT values
        /// (if there are no WKT values in the source graph). A subsequent call
        /// to the <a href="../../api/rest/wms_rest.html"
        /// target="_top">/wms</a> endpoint can then be made to display the
        /// query results on a map.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.AND_LABELS">AND_LABELS</see>:</term>
        ///         <description>If set to <i>true</i>, the result of the query
        /// has entities that satisfy all of the target labels, instead of any.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a QueryGraphRequest object with default
        /// parameters.</summary>
        public QueryGraphRequest() { }

        /// <summary>Constructs a QueryGraphRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="graph_name">Name of the graph resource to query.
        /// </param>
        /// <param name="queries">Nodes or edges to be queried specified using
        /// <a
        /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
        /// target="_top">query identifiers</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS QUERY_NODE_ID', raw
        /// values, e.g., '{0, 2} AS QUERY_NODE_ID', or expressions, e.g.,
        /// 'ST_MAKEPOINT(table.x, table.y) AS QUERY_NODE_WKTPOINT'. Multiple
        /// values can be provided as long as the same identifier is used for
        /// all values. If using raw values in an identifier combination, the
        /// number of values specified must match across the combination.
        /// </param>
        /// <param name="restrictions">Additional restrictions to apply to the
        /// nodes/edges of an existing graph. Restrictions must be specified
        /// using <a
        /// href="../../graph_solver/network_graph_solver.html#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../graph_solver/network_graph_solver.html#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED', or raw values, e.g., '{0, 0, 0, 1} AS
        /// RESTRICTIONS_ONOFFCOMPARED'. If using raw values in an identifier
        /// combination, the number of values specified must match across the
        /// combination.  The default value is an empty {@link List}.</param>
        /// <param name="adjacency_table">Name of the table to store the
        /// resulting adjacencies. If left blank, the query results are instead
        /// returned in the response even if <i>export_query_results</i> is set
        /// to <i>false</i>. If the 'QUERY_TARGET_NODE_LABEL' <a
        /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
        /// target="_top">query identifier</a> is used in <paramref
        /// cref="QueryGraphRequest.queries" />, then two additional columns
        /// will be available: 'PATH_ID' and 'RING_ID'. See
        ///             <a
        /// href="../../graph_solver/network_graph_solver.html#using-labels"
        /// target="_top">Using Labels</a> for more information.  The default
        /// value is ''.</param>
        /// <param name="rings">Only applicable when querying nodes. Sets the
        /// number of rings around the node to query for adjacency, with '1'
        /// being the edges directly attached to the queried node. Also known
        /// as number of hops. For example, if it is set to '2', the edge(s)
        /// directly attached to the queried node(s) will be returned; in
        /// addition, the edge(s) attached to the node(s) attached to the
        /// initial ring of edge(s) surrounding the queried node(s) will be
        /// returned. This setting can be '0' in which case if the node type id
        /// label, it'll then query for all that has the same property.  The
        /// default value is 1.</param>
        /// <param name="options">Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FORCE_UNDIRECTED">FORCE_UNDIRECTED</see>:</term>
        ///         <description>This parameter is only applicable if the
        /// queried graph <paramref cref="QueryGraphRequest.graph_name" /> is
        /// directed and when querying nodes. If set to <i>true</i>, all
        /// inbound edges and outbound edges relative to the node will be
        /// returned. If set to <i>false</i>, only outbound edges relative to
        /// the node will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.LIMIT">LIMIT</see>:</term>
        ///         <description>When specified, limits the number of query
        /// results. Note that if the <i>target_nodes_table</i> is provided,
        /// the size of the corresponding table will be limited by the
        /// <i>limit</i> value.  The default value is an empty {@link
        /// Dictionary}.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TARGET_NODES_TABLE">TARGET_NODES_TABLE</see>:</term>
        ///         <description>Name of the table to store the list of the
        /// final nodes reached during the traversal. If this value is not
        /// given it'll default to adjacemcy_table+'_nodes'.  The default value
        /// is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:</term>
        ///         <description>Value-based restriction comparison. Any node
        /// or edge with a RESTRICTIONS_VALUECOMPARED value greater than the
        /// <i>restriction_threshold_value</i> will not be included in the
        /// solution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response. If set
        /// to <i>true</i>, the <member name="adjacency_list_int_array" /> (if
        /// the query was based on IDs), @{adjacency_list_string_array} (if the
        /// query was based on names), or @{output_adjacency_list_wkt_array}
        /// (if the query was based on WKTs) will be populated with the
        /// results. If set to <i>false</i>, none of the arrays will be
        /// populated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a WKT-type column
        /// named 'QUERY_EDGE_WKTLINE' to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" /> and inputs WKT values
        /// from the source graph (if available) or auto-generated WKT values
        /// (if there are no WKT values in the source graph). A subsequent call
        /// to the <a href="../../api/rest/wms_rest.html"
        /// target="_top">/wms</a> endpoint can then be made to display the
        /// query results on a map.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.AND_LABELS">AND_LABELS</see>:</term>
        ///         <description>If set to <i>true</i>, the result of the query
        /// has entities that satisfy all of the target labels, instead of any.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public QueryGraphRequest( string graph_name,
                                  IList<string> queries,
                                  IList<string> restrictions = null,
                                  string adjacency_table = null,
                                  int? rings = null,
                                  IDictionary<string, string> options = null)
        {
            this.graph_name = graph_name ?? "";
            this.queries = queries ?? new List<string>();
            this.restrictions = restrictions ?? new List<string>();
            this.adjacency_table = adjacency_table ?? "";
            this.rings = rings ?? 1;
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class QueryGraphRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.queryGraph(string,IList{string},IList{string},string,int,IDictionary{string, string})"
    /// />.</summary>
    public class QueryGraphResponse : KineticaData
    {

        /// <summary>Indicates a successful query.  </summary>
        public bool result { get; set; }

        /// <summary>The adjacency entity integer ID: either edge IDs per node
        /// requested (if using QUERY_EDGE_ID or QUERY_NODE1_ID and
        /// QUERY_NODE2_ID in the input) or two node IDs per edge requested (if
        /// using QUERY_NODE_ID in the input).  </summary>
        public IList<long> adjacency_list_int_array { get; set; } = new List<long>();

        /// <summary>The adjacency entity string ID: either edge IDs per node
        /// requested (if using QUERY_EDGE_NAME or QUERY_NODE1_NAME and
        /// QUERY_NODE2_NAME in the input) or two node IDs per edge requested
        /// (if using QUERY_NODE_NAME in the input).  </summary>
        public IList<string> adjacency_list_string_array { get; set; } = new List<string>();

        /// <summary>The adjacency entity WKTPOINT or WKTLINE ID: either edge
        /// IDs per node requested (if using QUERY_EDGE_WKTLINE or
        /// QUERY_NODE1_WKTPOINT and QUERY_NODE2_WKTPOINT in the input) or two
        /// node IDs per edge requested (if using QUERY_NODE_WKTPOINT in the
        /// input).  </summary>
        public IList<string> adjacency_list_wkt_array { get; set; } = new List<string>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class QueryGraphResponse




}  // end namespace kinetica
