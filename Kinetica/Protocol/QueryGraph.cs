/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.queryGraph(string,bool,IList{long},IList{string},IList{string},string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Employs a topological query on a network graph generated a-priori by
    /// <see
    /// cref="Kinetica.createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string, string})"
    /// />. See <a href="../../graph_solver/network_graph_solver.html"
    /// target="_top">Network Graph Solvers</a> for more information.</summary>
    public class QueryGraphRequest : KineticaData
    {

        /// <summary>If set to <i>true</i>, the query gives the adjacency list
        /// from edge(s) to node(s); otherwise, the adjacency list is from
        /// node(s) to edge(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see>.
        /// A set of string constants for the parameter <see
        /// cref="edge_to_node" />.</summary>
        public struct EdgeToNode
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct EdgeToNode


        /// <summary>Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.NUMBER_OF_RINGS">NUMBER_OF_RINGS</see>:</term>
        ///         <description>Sets the number of rings of edges around the
        /// node to query for adjacency, with '1' being the edges directly
        /// attached to the queried nodes. This setting is ignored if <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to
        /// <i>true</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.INCLUDE_ALL_EDGES">INCLUDE_ALL_EDGES</see>:</term>
        ///         <description>Includes only the edges directed out of the
        /// node for the query if set to <i>false</i>. If set to <i>true</i>,
        /// all edges are queried.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response if set
        /// to <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds an 'EDGE_WKTLINE'
        /// column identifier to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// <br />
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Sets the number of rings of edges around the node to
            /// query for adjacency, with '1' being the edges directly attached
            /// to the queried nodes. This setting is ignored if <see
            /// cref="edge_to_node" /> is set to <i>true</i>.</summary>
            public const string NUMBER_OF_RINGS = "number_of_rings";

            /// <summary>Includes only the edges directed out of the node for
            /// the query if set to <i>false</i>. If set to <i>true</i>, all
            /// edges are queried.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string INCLUDE_ALL_EDGES = "include_all_edges";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Returns query results in the response if set to
            /// <i>true</i>.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see>.</summary>
            public const string EXPORT_QUERY_RESULTS = "export_query_results";

            /// <summary>If set to <i>true</i>, adds an 'EDGE_WKTLINE' column
            /// identifier to the given <see cref="adjacency_table" />.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ENABLE_GRAPH_DRAW = "enable_graph_draw";
        } // end struct Options


        /// <summary>Name of the graph resource to query.  </summary>
        public string graph_name { get; set; }

        /// <summary>If set to <i>true</i>, the query gives the adjacency list
        /// from edge(s) to node(s); otherwise, the adjacency list is from
        /// node(s) to edge(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see>.  </summary>
        public bool edge_to_node { get; set; } = true;

        /// <summary>The unique list of edge or node integer identifiers that
        /// will be queried for adjacencies.  </summary>
        public IList<long> edge_or_node_int_ids { get; set; } = new List<long>();

        /// <summary>The unique list of edge or node string identifiers that
        /// will be queried for adjacencies.  </summary>
        public IList<string> edge_or_node_string_ids { get; set; } = new List<string>();

        /// <summary>The unique list of edge or node WKTPOINT or WKTLINE string
        /// identifiers that will be queried for adjacencies.  </summary>
        public IList<string> edge_or_node_wkt_ids { get; set; } = new List<string>();

        /// <summary>Name of the table to store the resulting adjacencies. If
        /// left blank, the query results are instead returned in the response
        /// even if <i>export_query_results</i> is set to <i>false</i>.
        /// </summary>
        public string adjacency_table { get; set; } = "";

        /// <summary>Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.NUMBER_OF_RINGS">NUMBER_OF_RINGS</see>:</term>
        ///         <description>Sets the number of rings of edges around the
        /// node to query for adjacency, with '1' being the edges directly
        /// attached to the queried nodes. This setting is ignored if <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to
        /// <i>true</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.INCLUDE_ALL_EDGES">INCLUDE_ALL_EDGES</see>:</term>
        ///         <description>Includes only the edges directed out of the
        /// node for the query if set to <i>false</i>. If set to <i>true</i>,
        /// all edges are queried.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response if set
        /// to <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds an 'EDGE_WKTLINE'
        /// column identifier to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a QueryGraphRequest object with default
        /// parameters.</summary>
        public QueryGraphRequest() { }

        /// <summary>Constructs a QueryGraphRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="graph_name">Name of the graph resource to query.
        /// </param>
        /// <param name="edge_to_node">If set to <i>true</i>, the query gives
        /// the adjacency list from edge(s) to node(s); otherwise, the
        /// adjacency list is from node(s) to edge(s).
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see>.  </param>
        /// <param name="edge_or_node_int_ids">The unique list of edge or node
        /// integer identifiers that will be queried for adjacencies.  </param>
        /// <param name="edge_or_node_string_ids">The unique list of edge or
        /// node string identifiers that will be queried for adjacencies.
        /// </param>
        /// <param name="edge_or_node_wkt_ids">The unique list of edge or node
        /// WKTPOINT or WKTLINE string identifiers that will be queried for
        /// adjacencies.  </param>
        /// <param name="adjacency_table">Name of the table to store the
        /// resulting adjacencies. If left blank, the query results are instead
        /// returned in the response even if <i>export_query_results</i> is set
        /// to <i>false</i>.  </param>
        /// <param name="options">Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.NUMBER_OF_RINGS">NUMBER_OF_RINGS</see>:</term>
        ///         <description>Sets the number of rings of edges around the
        /// node to query for adjacency, with '1' being the edges directly
        /// attached to the queried nodes. This setting is ignored if <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to
        /// <i>true</i>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.INCLUDE_ALL_EDGES">INCLUDE_ALL_EDGES</see>:</term>
        ///         <description>Includes only the edges directed out of the
        /// node for the query if set to <i>false</i>. If set to <i>true</i>,
        /// all edges are queried.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response if set
        /// to <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds an 'EDGE_WKTLINE'
        /// column identifier to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        public QueryGraphRequest( string graph_name,
                                  bool edge_to_node,
                                  IList<long> edge_or_node_int_ids,
                                  IList<string> edge_or_node_string_ids,
                                  IList<string> edge_or_node_wkt_ids,
                                  string adjacency_table = null,
                                  IDictionary<string, string> options = null)
        {
            this.graph_name = graph_name ?? "";
            this.edge_to_node = edge_to_node ?? EdgeToNode.TRUE;
            this.edge_or_node_int_ids = edge_or_node_int_ids ?? new List<long>();
            this.edge_or_node_string_ids = edge_or_node_string_ids ?? new List<string>();
            this.edge_or_node_wkt_ids = edge_or_node_wkt_ids ?? new List<string>();
            this.adjacency_table = adjacency_table ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class QueryGraphRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.queryGraph(string,bool,IList{long},IList{string},IList{string},string,IDictionary{string, string})"
    /// />.</summary>
    public class QueryGraphResponse : KineticaData
    {

        /// <summary>Indicates a successful query.  </summary>
        public bool result { get; set; }

        /// <summary>The adjacency entity integer ID: either edge IDs per node
        /// requested (if <paramref cref="QueryGraphRequest.edge_to_node" /> is
        /// set to <i>false</i>) or two node IDs per edge requested (if
        /// <paramref cref="QueryGraphRequest.edge_to_node" /> is set to
        /// <i>true</i>).  </summary>
        public IList<long> adjacency_list_int_array { get; set; } = new List<long>();

        /// <summary>The adjacency entity string ID: either edge IDs per node
        /// requested (if <paramref cref="QueryGraphRequest.edge_to_node" /> is
        /// set to <i>false</i>) or two node IDs per edge requested (if
        /// <paramref cref="QueryGraphRequest.edge_to_node" /> is set to
        /// <i>true</i>).  </summary>
        public IList<string> adjacency_list_string_array { get; set; } = new List<string>();

        /// <summary>The adjacency entity WKTPOINT or WKTLINE ID: either edge
        /// IDs per node requested (if <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to <i>false</i>) or
        /// two node IDs per edge requested (if <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to <i>true</i>).
        /// </summary>
        public IList<string> adjacency_list_wkt_array { get; set; } = new List<string>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class QueryGraphResponse




}  // end namespace kinetica
