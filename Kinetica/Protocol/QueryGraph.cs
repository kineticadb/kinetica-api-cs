/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.queryGraph(string,IList{string},bool,IList{long},IList{string},IList{string},string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Employs a topological query on a network graph generated a-priori by
    /// <see
    /// cref="Kinetica.createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string, string})"
    /// /> and returns a list of adjacent edge(s) or node(s), also known as an
    /// adjacency list, depending on what's been provided to the endpoint;
    /// providing edges will return nodes and providing nodes will return
    /// edges. There are two ways to provide edge(s) or node(s) to be queried:
    /// using column names and <a
    /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
    /// target="_top">query identifiers</a> with the <see cref="queries" />
    /// with or using a list of specific IDs with one of the <see
    /// cref="edge_or_node_int_ids" />, <see cref="edge_or_node_string_ids" />,
    /// and <see cref="edge_or_node_wkt_ids" /> arrays and <see
    /// cref="edge_to_node" /> to determine if the IDs are edges or nodes.
    /// <br />
    /// To determine the node(s) or edge(s) adjacent to a value from a given
    /// column, provide a list of column names aliased as a particular query
    /// identifier to <see cref="queries" />. This field can be populated with
    /// column values from any table as long as the type is supported by the
    /// given identifier. See <a
    /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
    /// target="_top">Query Identifiers</a> for more information. I
    /// <br />
    /// To query for nodes that are adjacent to a given set of edges, set <see
    /// cref="edge_to_node" /> to <i>true</i> and provide values to the <see
    /// cref="edge_or_node_int_ids" />, <see cref="edge_or_node_string_ids" />,
    /// and <see cref="edge_or_node_wkt_ids" /> arrays; it is assumed the
    /// values in the arrays are edges and the corresponding adjacency list
    /// array in the response will be populated with nodes.
    /// <br />
    /// To query for edges that are adjacent to a given set of nodes, set <see
    /// cref="edge_to_node" /> to <i>false</i> and provide values to the <see
    /// cref="edge_or_node_int_ids" />, <see cref="edge_or_node_string_ids" />,
    /// and <see cref="edge_or_node_wkt_ids" /> arrays; it is assumed the
    /// values in arrays are nodes and the given node(s) will be queried for
    /// adjacent edges and the corresponding adjacency list array in the
    /// response will be populated with edges.
    /// <br />
    /// To query for adjacencies relative to a given column and a given set of
    /// edges/nodes, the <see cref="queries" /> and <see
    /// cref="edge_or_node_int_ids" /> / <see cref="edge_or_node_string_ids" />
    /// / <see cref="edge_or_node_wkt_ids" /> parameters can be used in
    /// conjuction with each other. If both <see cref="queries" /> and one of
    /// the arrays are populated, values from <see cref="queries" /> will be
    /// prioritized over values in the array and all values parsed from the
    /// <see cref="queries" /> array will be appended to the corresponding
    /// arrays (depending on the type). If using both <see cref="queries" />
    /// and the edge_or_node arrays, the types must match, e.g., if <see
    /// cref="queries" /> utilizes the 'QUERY_NODE_ID' identifier, only the
    /// <see cref="edge_or_node_int_ids" /> array should be used. Note that
    /// using <see cref="queries" /> will override <see cref="edge_to_node" />,
    /// so if <see cref="queries" /> contains a node-based query identifier,
    /// e.g., 'table.column AS QUERY_NODE_ID', it is assumed that the <see
    /// cref="edge_or_node_int_ids" /> will contain node IDs.
    /// <br />
    /// To return the adjacency list in the response, leave <see
    /// cref="adjacency_table" /> empty. To return the adjacency list in a
    /// table and not in the response, provide a value to <see
    /// cref="adjacency_table" /> and set <i>export_query_results</i> to
    /// <i>false</i>. To return the adjacency list both in a table and the
    /// response, provide a value to <see cref="adjacency_table" /> and set
    /// <i>export_query_results</i> to <i>true</i>.
    /// <br />
    /// See <a href="../../graph_solver/network_graph_solver.html"
    /// target="_top">Network Graph Solver</a> for more information.</summary>
    public class QueryGraphRequest : KineticaData
    {

        /// <summary>If set to <i>true</i>, the given edge(s) will be queried
        /// for adjacent nodes. If set to <i>false</i>, the given node(s) will
        /// be queried for adjacent edges.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see>.
        /// A set of string constants for the parameter <see
        /// cref="edge_to_node" />.</summary>
        public struct EdgeToNode
        {
            public const string TRUE = "true";
            public const string FALSE = "false";
        } // end struct EdgeToNode


        /// <summary>Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.NUMBER_OF_RINGS">NUMBER_OF_RINGS</see>:</term>
        ///         <description>Sets the number of rings of edges around the
        /// node to query for adjacency, with '1' being the edges directly
        /// attached to the queried nodes. For example, if
        /// <i>number_of_rings</i> is set to '2', the edge(s) directly attached
        /// to the queried nodes will be returned; in addition, the edge(s)
        /// attached to the node(s) attached to the initial ring of edge(s)
        /// surrounding the queried node(s) will be returned. This setting is
        /// ignored if <paramref cref="QueryGraphRequest.edge_to_node" /> is
        /// set to <i>true</i>. This setting cannot be less than '1'.  The
        /// default value is '1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.INCLUDE_ALL_EDGES">INCLUDE_ALL_EDGES</see>:</term>
        ///         <description>This parameter is only applicable if the
        /// queried graph is directed and <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to <i>false</i>. If
        /// set to <i>true</i>, all inbound edges and outbound edges relative
        /// to the node will be returned. If set to <i>false</i>, only outbound
        /// edges relative to the node will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response if set
        /// to <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a WKT-type column
        /// named 'QUERY_EDGE_WKTLINE' to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" /> and inputs WKT values
        /// from the source graph (if available) or auto-generated WKT values
        /// (if there are no WKT values in the source graph). A subsequent call
        /// to the <a href="../../api/rest/wms_rest.html"
        /// target="_top">/wms</a> endpoint can then be made to display the
        /// query results on a map.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Sets the number of rings of edges around the node to
            /// query for adjacency, with '1' being the edges directly attached
            /// to the queried nodes. For example, if <i>number_of_rings</i> is
            /// set to '2', the edge(s) directly attached to the queried nodes
            /// will be returned; in addition, the edge(s) attached to the
            /// node(s) attached to the initial ring of edge(s) surrounding the
            /// queried node(s) will be returned. This setting is ignored if
            /// <see cref="edge_to_node" /> is set to <i>true</i>. This setting
            /// cannot be less than '1'.  The default value is '1'.</summary>
            public const string NUMBER_OF_RINGS = "number_of_rings";

            /// <summary>This parameter is only applicable if the queried graph
            /// is directed and <see cref="edge_to_node" /> is set to
            /// <i>false</i>. If set to <i>true</i>, all inbound edges and
            /// outbound edges relative to the node will be returned. If set to
            /// <i>false</i>, only outbound edges relative to the node will be
            /// returned.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string INCLUDE_ALL_EDGES = "include_all_edges";
            public const string TRUE = "true";
            public const string FALSE = "false";

            /// <summary>Returns query results in the response if set to
            /// <i>true</i>.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see>.</summary>
            public const string EXPORT_QUERY_RESULTS = "export_query_results";

            /// <summary>If set to <i>true</i>, adds a WKT-type column named
            /// 'QUERY_EDGE_WKTLINE' to the given <see cref="adjacency_table"
            /// /> and inputs WKT values from the source graph (if available)
            /// or auto-generated WKT values (if there are no WKT values in the
            /// source graph). A subsequent call to the <a
            /// href="../../api/rest/wms_rest.html" target="_top">/wms</a>
            /// endpoint can then be made to display the query results on a
            /// map.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</summary>
            public const string ENABLE_GRAPH_DRAW = "enable_graph_draw";
        } // end struct Options


        /// <summary>Name of the graph resource to query.  </summary>
        public string graph_name { get; set; }

        /// <summary>Nodes or edges to be queried specified using <a
        /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
        /// target="_top">query identifiers</a>, e.g., 'table.column AS
        /// QUERY_NODE_ID' or 'table.column AS QUERY_EDGE_WKTLINE'. Multiple
        /// columns can be used as long as the same identifier is used for all
        /// columns. Passing in a query identifier will override the <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> parameter.  </summary>
        public IList<string> queries { get; set; } = new List<string>();

        /// <summary>If set to <i>true</i>, the given edge(s) will be queried
        /// for adjacent nodes. If set to <i>false</i>, the given node(s) will
        /// be queried for adjacent edges.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see>.  </summary>
        public bool edge_to_node { get; set; } = true;

        /// <summary>The unique list of edge or node integer identifiers that
        /// will be queried for adjacencies.  </summary>
        public IList<long> edge_or_node_int_ids { get; set; } = new List<long>();

        /// <summary>The unique list of edge or node string identifiers that
        /// will be queried for adjacencies.  </summary>
        public IList<string> edge_or_node_string_ids { get; set; } = new List<string>();

        /// <summary>The unique list of edge or node WKTPOINT or WKTLINE string
        /// identifiers that will be queried for adjacencies.  </summary>
        public IList<string> edge_or_node_wkt_ids { get; set; } = new List<string>();

        /// <summary>Name of the table to store the resulting adjacencies. If
        /// left blank, the query results are instead returned in the response
        /// even if <i>export_query_results</i> is set to <i>false</i>.  The
        /// default value is ''.</summary>
        public string adjacency_table { get; set; } = "";

        /// <summary>Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.NUMBER_OF_RINGS">NUMBER_OF_RINGS</see>:</term>
        ///         <description>Sets the number of rings of edges around the
        /// node to query for adjacency, with '1' being the edges directly
        /// attached to the queried nodes. For example, if
        /// <i>number_of_rings</i> is set to '2', the edge(s) directly attached
        /// to the queried nodes will be returned; in addition, the edge(s)
        /// attached to the node(s) attached to the initial ring of edge(s)
        /// surrounding the queried node(s) will be returned. This setting is
        /// ignored if <paramref cref="QueryGraphRequest.edge_to_node" /> is
        /// set to <i>true</i>. This setting cannot be less than '1'.  The
        /// default value is '1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.INCLUDE_ALL_EDGES">INCLUDE_ALL_EDGES</see>:</term>
        ///         <description>This parameter is only applicable if the
        /// queried graph is directed and <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to <i>false</i>. If
        /// set to <i>true</i>, all inbound edges and outbound edges relative
        /// to the node will be returned. If set to <i>false</i>, only outbound
        /// edges relative to the node will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response if set
        /// to <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a WKT-type column
        /// named 'QUERY_EDGE_WKTLINE' to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" /> and inputs WKT values
        /// from the source graph (if available) or auto-generated WKT values
        /// (if there are no WKT values in the source graph). A subsequent call
        /// to the <a href="../../api/rest/wms_rest.html"
        /// target="_top">/wms</a> endpoint can then be made to display the
        /// query results on a map.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a QueryGraphRequest object with default
        /// parameters.</summary>
        public QueryGraphRequest() { }

        /// <summary>Constructs a QueryGraphRequest object with the specified
        /// parameters.</summary>
        /// 
        /// <param name="graph_name">Name of the graph resource to query.
        /// </param>
        /// <param name="queries">Nodes or edges to be queried specified using
        /// <a
        /// href="../../graph_solver/network_graph_solver.html#query-identifiers"
        /// target="_top">query identifiers</a>, e.g., 'table.column AS
        /// QUERY_NODE_ID' or 'table.column AS QUERY_EDGE_WKTLINE'. Multiple
        /// columns can be used as long as the same identifier is used for all
        /// columns. Passing in a query identifier will override the <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> parameter.  </param>
        /// <param name="edge_to_node">If set to <i>true</i>, the given edge(s)
        /// will be queried for adjacent nodes. If set to <i>false</i>, the
        /// given node(s) will be queried for adjacent edges.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.EdgeToNode.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.EdgeToNode.TRUE">TRUE</see>.  </param>
        /// <param name="edge_or_node_int_ids">The unique list of edge or node
        /// integer identifiers that will be queried for adjacencies.  </param>
        /// <param name="edge_or_node_string_ids">The unique list of edge or
        /// node string identifiers that will be queried for adjacencies.
        /// </param>
        /// <param name="edge_or_node_wkt_ids">The unique list of edge or node
        /// WKTPOINT or WKTLINE string identifiers that will be queried for
        /// adjacencies.  </param>
        /// <param name="adjacency_table">Name of the table to store the
        /// resulting adjacencies. If left blank, the query results are instead
        /// returned in the response even if <i>export_query_results</i> is set
        /// to <i>false</i>.  The default value is ''.</param>
        /// <param name="options">Additional parameters
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.NUMBER_OF_RINGS">NUMBER_OF_RINGS</see>:</term>
        ///         <description>Sets the number of rings of edges around the
        /// node to query for adjacency, with '1' being the edges directly
        /// attached to the queried nodes. For example, if
        /// <i>number_of_rings</i> is set to '2', the edge(s) directly attached
        /// to the queried nodes will be returned; in addition, the edge(s)
        /// attached to the node(s) attached to the initial ring of edge(s)
        /// surrounding the queried node(s) will be returned. This setting is
        /// ignored if <paramref cref="QueryGraphRequest.edge_to_node" /> is
        /// set to <i>true</i>. This setting cannot be less than '1'.  The
        /// default value is '1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.INCLUDE_ALL_EDGES">INCLUDE_ALL_EDGES</see>:</term>
        ///         <description>This parameter is only applicable if the
        /// queried graph is directed and <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to <i>false</i>. If
        /// set to <i>true</i>, all inbound edges and outbound edges relative
        /// to the node will be returned. If set to <i>false</i>, only outbound
        /// edges relative to the node will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.EXPORT_QUERY_RESULTS">EXPORT_QUERY_RESULTS</see>:</term>
        ///         <description>Returns query results in the response if set
        /// to <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:</term>
        ///         <description>If set to <i>true</i>, adds a WKT-type column
        /// named 'QUERY_EDGE_WKTLINE' to the given <paramref
        /// cref="QueryGraphRequest.adjacency_table" /> and inputs WKT values
        /// from the source graph (if available) or auto-generated WKT values
        /// (if there are no WKT values in the source graph). A subsequent call
        /// to the <a href="../../api/rest/wms_rest.html"
        /// target="_top">/wms</a> endpoint can then be made to display the
        /// query results on a map.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="QueryGraphRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public QueryGraphRequest( string graph_name,
                                  IList<string> queries,
                                  bool edge_to_node,
                                  IList<long> edge_or_node_int_ids,
                                  IList<string> edge_or_node_string_ids,
                                  IList<string> edge_or_node_wkt_ids,
                                  string adjacency_table = null,
                                  IDictionary<string, string> options = null)
        {
            this.graph_name = graph_name ?? "";
            this.queries = queries ?? new List<string>();
            this.edge_to_node = edge_to_node ?? EdgeToNode.TRUE;
            this.edge_or_node_int_ids = edge_or_node_int_ids ?? new List<long>();
            this.edge_or_node_string_ids = edge_or_node_string_ids ?? new List<string>();
            this.edge_or_node_wkt_ids = edge_or_node_wkt_ids ?? new List<string>();
            this.adjacency_table = adjacency_table ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class QueryGraphRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.queryGraph(string,IList{string},bool,IList{long},IList{string},IList{string},string,IDictionary{string, string})"
    /// />.</summary>
    public class QueryGraphResponse : KineticaData
    {

        /// <summary>Indicates a successful query.  </summary>
        public bool result { get; set; }

        /// <summary>The adjacency entity integer ID: either edge IDs per node
        /// requested (if <paramref cref="QueryGraphRequest.edge_to_node" /> is
        /// set to <i>false</i>) or two node IDs per edge requested (if
        /// <paramref cref="QueryGraphRequest.edge_to_node" /> is set to
        /// <i>true</i>).  </summary>
        public IList<long> adjacency_list_int_array { get; set; } = new List<long>();

        /// <summary>The adjacency entity string ID: either edge IDs per node
        /// requested (if <paramref cref="QueryGraphRequest.edge_to_node" /> is
        /// set to <i>false</i>) or two node IDs per edge requested (if
        /// <paramref cref="QueryGraphRequest.edge_to_node" /> is set to
        /// <i>true</i>).  </summary>
        public IList<string> adjacency_list_string_array { get; set; } = new List<string>();

        /// <summary>The adjacency entity WKTPOINT or WKTLINE ID: either edge
        /// IDs per node requested (if <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to <i>false</i>) or
        /// two node IDs per edge requested (if <paramref
        /// cref="QueryGraphRequest.edge_to_node" /> is set to <i>true</i>).
        /// </summary>
        public IList<string> adjacency_list_wkt_array { get; set; } = new List<string>();

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class QueryGraphResponse




}  // end namespace kinetica
