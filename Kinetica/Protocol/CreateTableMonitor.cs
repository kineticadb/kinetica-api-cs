/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using System.Collections.Generic;



namespace kinetica
{

    /// <summary>A set of parameters for <see
    /// cref="Kinetica.createTableMonitor(string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// Creates a monitor that watches for a single table modification event
    /// type (insert, update, or delete) on a particular table (identified by
    /// <see cref="table_name" />) and forwards event notifications to
    /// subscribers via ZMQ.
    /// After this call completes, subscribe to the returned <member
    /// name="topic_id" /> on the
    /// ZMQ table monitor port (default 9002). Each time an operation of the
    /// given type
    /// on the table completes, a multipart message is published for that
    /// topic; the
    /// first part contains only the topic ID, and each subsequent part
    /// contains one
    /// binary-encoded Avro object that corresponds to the event and can be
    /// decoded
    /// using <member name="type_schema" />. The monitor will continue to run
    /// (regardless of
    /// whether or not there are any subscribers) until deactivated with
    /// <see
    /// cref="Kinetica.clearTableMonitor(string,IDictionary{string, string})"
    /// />.
    /// <br />
    /// For more information on table monitors, see
    /// <a href="../../concepts/table_monitors.html" target="_top">Table
    /// Monitors</a>.</summary>
    public class CreateTableMonitorRequest : KineticaData
    {

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.EVENT">EVENT</see>:</term>
        ///         <description>Type of modification event on the target table
        /// to be monitored by this table monitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>:</term>
        ///         <description>Get notifications of new record insertions.
        /// The new row images are forwarded to the subscribers.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.UPDATE">UPDATE</see>:</term>
        ///         <description>Get notifications of update operations. The
        /// modified row count information is forwarded to the
        /// subscribers.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.DELETE">DELETE</see>:</term>
        ///         <description>Get notifications of delete operations. The
        /// deleted row count information is forwarded to the
        /// subscribers.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.
        /// A set of string constants for the parameter <see cref="options"
        /// />.</summary>
        public struct Options
        {

            /// <summary>Type of modification event on the target table to be
            /// monitored by this table monitor.
            /// Supported values:
            /// <list type="bullet">
            ///     <item>
            ///         <term><see
            /// cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>:</term>
            ///         <description>Get notifications of new record
            /// insertions. The new row images are forwarded to the
            /// subscribers.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateTableMonitorRequest.Options.UPDATE">UPDATE</see>:</term>
            ///         <description>Get notifications of update operations.
            /// The modified row count information is forwarded to the
            /// subscribers.</description>
            ///     </item>
            ///     <item>
            ///         <term><see
            /// cref="CreateTableMonitorRequest.Options.DELETE">DELETE</see>:</term>
            ///         <description>Get notifications of delete operations.
            /// The deleted row count information is forwarded to the
            /// subscribers.</description>
            ///     </item>
            /// </list>
            /// The default value is <see
            /// cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>.</summary>
            public const string EVENT = "event";

            /// <summary>Get notifications of new record insertions. The new
            /// row images are forwarded to the subscribers.</summary>
            public const string INSERT = "insert";

            /// <summary>Get notifications of update operations. The modified
            /// row count information is forwarded to the
            /// subscribers.</summary>
            public const string UPDATE = "update";

            /// <summary>Get notifications of delete operations. The deleted
            /// row count information is forwarded to the
            /// subscribers.</summary>
            public const string DELETE = "delete";
        } // end struct Options


        /// <summary>Name of the table to monitor. Must not refer to a
        /// collection.  </summary>
        public string table_name { get; set; }

        /// <summary>Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.EVENT">EVENT</see>:</term>
        ///         <description>Type of modification event on the target table
        /// to be monitored by this table monitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>:</term>
        ///         <description>Get notifications of new record insertions.
        /// The new row images are forwarded to the subscribers.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.UPDATE">UPDATE</see>:</term>
        ///         <description>Get notifications of update operations. The
        /// modified row count information is forwarded to the
        /// subscribers.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.DELETE">DELETE</see>:</term>
        ///         <description>Get notifications of delete operations. The
        /// deleted row count information is forwarded to the
        /// subscribers.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</summary>
        public IDictionary<string, string> options { get; set; } = new Dictionary<string, string>();


        /// <summary>Constructs a CreateTableMonitorRequest object with default
        /// parameters.</summary>
        public CreateTableMonitorRequest() { }

        /// <summary>Constructs a CreateTableMonitorRequest object with the
        /// specified parameters.</summary>
        /// 
        /// <param name="table_name">Name of the table to monitor. Must not
        /// refer to a collection.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.EVENT">EVENT</see>:</term>
        ///         <description>Type of modification event on the target table
        /// to be monitored by this table monitor.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>:</term>
        ///         <description>Get notifications of new record insertions.
        /// The new row images are forwarded to the subscribers.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.UPDATE">UPDATE</see>:</term>
        ///         <description>Get notifications of update operations. The
        /// modified row count information is forwarded to the
        /// subscribers.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableMonitorRequest.Options.DELETE">DELETE</see>:</term>
        ///         <description>Get notifications of delete operations. The
        /// deleted row count information is forwarded to the
        /// subscribers.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty {@link Dictionary}.</param>
        /// 
        public CreateTableMonitorRequest( string table_name,
                                          IDictionary<string, string> options = null)
        {
            this.table_name = table_name ?? "";
            this.options = options ?? new Dictionary<string, string>();
        } // end constructor

    } // end class CreateTableMonitorRequest



    /// <summary>A set of results returned by <see
    /// cref="Kinetica.createTableMonitor(string,IDictionary{string, string})"
    /// />.</summary>
    public class CreateTableMonitorResponse : KineticaData
    {

        /// <summary>The ZMQ topic ID to subscribe to for inserted records.
        /// </summary>
        public string topic_id { get; set; }

        /// <summary>Value of <paramref
        /// cref="CreateTableMonitorRequest.table_name" />.  </summary>
        public string table_name { get; set; }

        /// <summary>JSON Avro schema of the table, for use in decoding
        /// published records.  </summary>
        public string type_schema { get; set; }

        /// <summary>Additional information.  </summary>
        public IDictionary<string, string> info { get; set; } = new Dictionary<string, string>();

    } // end class CreateTableMonitorResponse




}  // end namespace kinetica
