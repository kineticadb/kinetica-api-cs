/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */


using Avro;
using System.Collections.Generic;


namespace kinetica
{

    public partial class Kinetica
    {

        // Kinetica Version
        public const string API_VERSION = "6.1.0.0";



        /// <summary>Add a new node to the GPUdb cluster. By default this will
        /// only add the node to the cluster, but will not be assigned any data
        /// shards. Set the <i>reshard</i> option to <i>true</i> to move some
        /// shards from the other nodes in the cluster to this node.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminAddNodeResponse adminAddNode( AdminAddNodeRequest request_ )
        {
            AdminAddNodeResponse actualResponse_ = SubmitRequest<AdminAddNodeResponse>("/admin/add/node", request_, false);

            return actualResponse_;
        }


        /// <summary>Add a new node to the GPUdb cluster. By default this will
        /// only add the node to the cluster, but will not be assigned any data
        /// shards. Set the <i>reshard</i> option to <i>true</i> to move some
        /// shards from the other nodes in the cluster to this node.</summary>
        /// 
        /// <param name="host_name">host name of the node being added to the
        /// system.  </param>
        /// <param name="gpu_index"></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.RESHARD">RESHARD</see>:</term>
        ///         <description>If <i>true</i>, then some of the shards from
        /// all the existing nodes will be moved to the new node being added.
        /// Note that for big clusters, this data transfer could be time
        /// consuming and also result in delay in responding to queries for
        /// busy clusters.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminAddNodeRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminAddNodeResponse adminAddNode( string host_name,
                                                  int gpu_index,
                                                  IDictionary<string, string> options = null )
        {
            return adminAddNode( new AdminAddNodeRequest( host_name, gpu_index, options ) );
        }


        /// <summary>Update the system config file.  Updates to the config file
        /// are only permitted when the system is stopped.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminAlterConfigurationResponse adminAlterConfiguration( AdminAlterConfigurationRequest request_ )
        {
            AdminAlterConfigurationResponse actualResponse_ = SubmitRequest<AdminAlterConfigurationResponse>("/admin/alter/configuration", request_, false);

            return actualResponse_;
        }


        /// <summary>Update the system config file.  Updates to the config file
        /// are only permitted when the system is stopped.</summary>
        /// 
        /// <param name="config_string">updated contents of the config file.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminAlterConfigurationResponse adminAlterConfiguration( string config_string,
                                                                        IDictionary<string, string> options = null )
        {
            return adminAlterConfiguration( new AdminAlterConfigurationRequest(
                                                                                config_string,
                                                                                options ) );
        }


        /// <summary>Perform the requested action on a list of one or more
        /// job(s) . Currently only cancelling filter, aggregate and get
        /// records reqeusts are supported. Based on the type of job and the
        /// current state of execution, the action may not be successfully
        /// executed. The final result of the attempted actions for each
        /// specified job is returned in the status array of the
        /// response.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminAlterJobsResponse adminAlterJobs( AdminAlterJobsRequest request_ )
        {
            AdminAlterJobsResponse actualResponse_ = SubmitRequest<AdminAlterJobsResponse>("/admin/alter/jobs", request_, false);

            return actualResponse_;
        }


        /// <summary>Perform the requested action on a list of one or more
        /// job(s) . Currently only cancelling filter, aggregate and get
        /// records reqeusts are supported. Based on the type of job and the
        /// current state of execution, the action may not be successfully
        /// executed. The final result of the attempted actions for each
        /// specified job is returned in the status array of the
        /// response.</summary>
        /// 
        /// <param name="job_ids">Jobs to be modified.  </param>
        /// <param name="action">Action to be performed on the jobs specified
        /// by job_ids.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminAlterJobsRequest.Action.CANCEL">CANCEL</see></term>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminAlterJobsResponse adminAlterJobs( IList<int> job_ids,
                                                      string action,
                                                      IDictionary<string, string> options = null )
        {
            return adminAlterJobs( new AdminAlterJobsRequest( job_ids, action, options ) );
        }


        /// <summary>Specify the mapping of the shards to the various ranks in
        /// the cluster. In most cases, it should be sufficient to let the
        /// system automatically distribute the shards evenly across the
        /// available ranks. However, this endpoint can be used to move shards
        /// for various administrative reasons, say in case of heterogeneous
        /// node clusters.  It should be noted that the system may reassign the
        /// shards the when the number of nodes in the cluster changes or the
        /// cluster is rebalanced.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminAlterShardsResponse adminAlterShards( AdminAlterShardsRequest request_ )
        {
            AdminAlterShardsResponse actualResponse_ = SubmitRequest<AdminAlterShardsResponse>("/admin/alter/shards", request_, false);

            return actualResponse_;
        }


        /// <summary>Specify the mapping of the shards to the various ranks in
        /// the cluster. In most cases, it should be sufficient to let the
        /// system automatically distribute the shards evenly across the
        /// available ranks. However, this endpoint can be used to move shards
        /// for various administrative reasons, say in case of heterogeneous
        /// node clusters.  It should be noted that the system may reassign the
        /// shards the when the number of nodes in the cluster changes or the
        /// cluster is rebalanced.</summary>
        /// 
        /// <param name="version"></param>
        /// <param name="use_index">Set to true when only the shards being
        /// moved are specified in the request.  The index must indicate the
        /// shards being moved.  </param>
        /// <param name="rank">node to which the shard will be moved.  </param>
        /// <param name="tom">Toms to which the shard will be moved.   </param>
        /// <param name="index">the shard which is being moved.  When use_index
        /// is set to true, size of this array must equal the size of rank/tom
        /// array.  </param>
        /// <param name="backup_map_list">List of rank_tom integers, for which
        /// backup toms are defined  </param>
        /// <param name="backup_map_values">List of the backup rank_tom(s) for
        /// each rank_tom in backup_map_list  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminAlterShardsResponse adminAlterShards( long version,
                                                          bool use_index,
                                                          IList<int> rank,
                                                          IList<int> tom,
                                                          IList<int> index,
                                                          IList<int> backup_map_list,
                                                          IList<IList<int>> backup_map_values,
                                                          IDictionary<string, string> options = null )
        {
            return adminAlterShards( new AdminAlterShardsRequest( version, use_index,
                                                                  rank, tom, index,
                                                                  backup_map_list,
                                                                  backup_map_values,
                                                                  options ) );
        }


        /// <summary>Take the system offline. When the system is offline, no
        /// user operations can be performed with the exception of a system
        /// shutdown.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminOfflineResponse adminOffline( AdminOfflineRequest request_ )
        {
            AdminOfflineResponse actualResponse_ = SubmitRequest<AdminOfflineResponse>("/admin/offline", request_, false);

            return actualResponse_;
        }


        /// <summary>Take the system offline. When the system is offline, no
        /// user operations can be performed with the exception of a system
        /// shutdown.</summary>
        /// 
        /// <param name="offline">Set to true if desired state is offline.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminOfflineRequest.Offline.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminOfflineRequest.Offline.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminOfflineResponse adminOffline( bool offline,
                                                  IDictionary<string, string> options = null )
        {
            return adminOffline( new AdminOfflineRequest( offline, options ) );
        }


        /// <summary>Rebalance the cluster so that all the nodes contain
        /// approximately equal number of records.  The rebalance will also
        /// cause the shards to be (as much as possible) equally distributed
        /// across all the ranks. Note that the system may move any shards that
        /// were moved by system administrator using <see
        /// cref="Kinetica.adminAlterShards(long,bool,IList{int},IList{int},IList{int},IList{int},IList{IList{int}},IDictionary{string, string})"
        /// /></summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminRebalanceResponse adminRebalance( AdminRebalanceRequest request_ )
        {
            AdminRebalanceResponse actualResponse_ = SubmitRequest<AdminRebalanceResponse>("/admin/rebalance", request_, false);

            return actualResponse_;
        }


        /// <summary>Rebalance the cluster so that all the nodes contain
        /// approximately equal number of records.  The rebalance will also
        /// cause the shards to be (as much as possible) equally distributed
        /// across all the ranks. Note that the system may move any shards that
        /// were moved by system administrator using <see
        /// cref="Kinetica.adminAlterShards(long,bool,IList{int},IList{int},IList{int},IList{int},IList{IList{int}},IDictionary{string, string})"
        /// /></summary>
        /// 
        /// <param name="table_names">Sepcify the tables here if only specific
        /// tables have to be rebalanced.  Leave this empty to rebalance all
        /// the tables.  Note that only the tables which have no primary or
        /// shard key can be rebalanced.  </param>
        /// <param name="action">Specify 'start' to start rebalancing the
        /// cluster or 'stop' to prematurely stop a previsouly issued rebalance
        /// request.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Action.START">START</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Action.STOP">STOP</see></term>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.RESHARD">RESHARD</see>:</term>
        ///         <description>If <i>true</i>, then all the nodes in the
        /// cluster will be assigned approximately the same number of shards.
        /// Note that for big clusters, this data transfer could be time
        /// consuming and also result in delay in responding to queries for
        /// busy clusters.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRebalanceRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminRebalanceResponse adminRebalance( IList<string> table_names,
                                                      string action,
                                                      IDictionary<string, string> options = null )
        {
            return adminRebalance( new AdminRebalanceRequest( table_names, action, options ) );
        }


        /// <summary>Remove a node from the cluster.  Note that this operation
        /// could take a long time to complete for big clusters.  The data is
        /// transferred to other nodes in the cluster before the node is
        /// removed.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminRemoveNodeResponse adminRemoveNode( AdminRemoveNodeRequest request_ )
        {
            AdminRemoveNodeResponse actualResponse_ = SubmitRequest<AdminRemoveNodeResponse>("/admin/remove/node", request_, false);

            return actualResponse_;
        }


        /// <summary>Remove a node from the cluster.  Note that this operation
        /// could take a long time to complete for big clusters.  The data is
        /// transferred to other nodes in the cluster before the node is
        /// removed.</summary>
        /// 
        /// <param name="rank">Rank number of the node being removed from the
        /// cluster.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveNodeRequest.Options.RESHARD">RESHARD</see>:</term>
        ///         <description>When <i>true</i>, then the shards from nodes
        /// will be moved to the other nodes in the cluster. When false, then
        /// the node will only be removed from the cluster if the node does not
        /// contain any data shards, otherwise an error is returned.  Note that
        /// for big clusters, this data transfer could be time consuming and
        /// also result in delay in responding to queries for busy clusters.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveNodeRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveNodeRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRemoveNodeRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveNodeRequest.Options.FORCE">FORCE</see>:</term>
        ///         <description>When <i>true</i>, the rank is immediately
        /// shutdown and removed from the cluster.  This will result in loss of
        /// any data that is present in the node at the time of the request.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveNodeRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminRemoveNodeRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminRemoveNodeRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminRemoveNodeResponse adminRemoveNode( int rank,
                                                        IDictionary<string, string> options = null )
        {
            return adminRemoveNode( new AdminRemoveNodeRequest( rank, options ) );
        }


        /// <summary>Show the current system configuration file.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminShowConfigurationResponse adminShowConfiguration( AdminShowConfigurationRequest request_ )
        {
            AdminShowConfigurationResponse actualResponse_ = SubmitRequest<AdminShowConfigurationResponse>("/admin/show/configuration", request_, false);

            return actualResponse_;
        }


        /// <summary>Show the current system configuration file.</summary>
        /// 
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminShowConfigurationResponse adminShowConfiguration( IDictionary<string, string> options = null )
        {
            return adminShowConfiguration( new AdminShowConfigurationRequest( options ) );
        }


        /// <summary>Get a list of the current jobs in GPUdb.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminShowJobsResponse adminShowJobs( AdminShowJobsRequest request_ )
        {
            AdminShowJobsResponse actualResponse_ = SubmitRequest<AdminShowJobsResponse>("/admin/show/jobs", request_, false);

            return actualResponse_;
        }


        /// <summary>Get a list of the current jobs in GPUdb.</summary>
        /// 
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminShowJobsRequest.Options.SHOW_DETAILS">SHOW_DETAILS</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminShowJobsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminShowJobsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list></description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminShowJobsResponse adminShowJobs( IDictionary<string, string> options = null )
        {
            return adminShowJobs( new AdminShowJobsRequest( options ) );
        }


        /// <summary>Show the mapping of shards to the corresponding rank and
        /// tom.  The response message contains list of 16384 (total number of
        /// shards in the system) Rank and TOM numbers corresponding to each
        /// shard.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminShowShardsResponse adminShowShards( AdminShowShardsRequest request_ )
        {
            AdminShowShardsResponse actualResponse_ = SubmitRequest<AdminShowShardsResponse>("/admin/show/shards", request_, false);

            return actualResponse_;
        }


        /// <summary>Show the mapping of shards to the corresponding rank and
        /// tom.  The response message contains list of 16384 (total number of
        /// shards in the system) Rank and TOM numbers corresponding to each
        /// shard.</summary>
        /// 
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminShowShardsResponse adminShowShards( IDictionary<string, string> options = null )
        {
            return adminShowShards( new AdminShowShardsRequest( options ) );
        }


        /// <summary>Exits the database server application.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminShutdownResponse adminShutdown( AdminShutdownRequest request_ )
        {
            AdminShutdownResponse actualResponse_ = SubmitRequest<AdminShutdownResponse>("/admin/shutdown", request_, false);

            return actualResponse_;
        }


        /// <summary>Exits the database server application.</summary>
        /// 
        /// <param name="exit_type">Reserved for future use. User can pass an
        /// empty string.  </param>
        /// <param name="authorization">No longer used. User can pass an empty
        /// string.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminShutdownResponse adminShutdown( string exit_type,
                                                    string authorization,
                                                    IDictionary<string, string> options = null )
        {
            return adminShutdown( new AdminShutdownRequest( exit_type, authorization,
                                                            options ) );
        }


        /// <summary>Verify database is in a consistent state.  When
        /// inconsistencies or errors are found, the verified_ok flag in the
        /// response is set to false and the list of errors found is provided
        /// in the error_list.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminVerifyDbResponse adminVerifyDb( AdminVerifyDbRequest request_ )
        {
            AdminVerifyDbResponse actualResponse_ = SubmitRequest<AdminVerifyDbResponse>("/admin/verifydb", request_, false);

            return actualResponse_;
        }


        /// <summary>Verify database is in a consistent state.  When
        /// inconsistencies or errors are found, the verified_ok flag in the
        /// response is set to false and the list of errors found is provided
        /// in the error_list.</summary>
        /// 
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminVerifyDbRequest.Options.REBUILD_ON_ERROR">REBUILD_ON_ERROR</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminVerifyDbRequest.Options.VERIFY_PERSIST">VERIFY_PERSIST</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminVerifyDbResponse adminVerifyDb( IDictionary<string, string> options = null )
        {
            return adminVerifyDb( new AdminVerifyDbRequest( options ) );
        }


        /// <summary>Calculates and returns the convex hull for the values in a
        /// table specified by <paramref
        /// cref="AggregateConvexHullRequest.table_name" />.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateConvexHullResponse aggregateConvexHull( AggregateConvexHullRequest request_ )
        {
            AggregateConvexHullResponse actualResponse_ = SubmitRequest<AggregateConvexHullResponse>("/aggregate/convexhull", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates and returns the convex hull for the values in a
        /// table specified by <paramref name="table_name" />.</summary>
        /// 
        /// <param name="table_name">Name of Table on which the operation will
        /// be performed. Must be an existing table.  It can not be a
        /// collection.  </param>
        /// <param name="x_column_name">Name of the column containing the x
        /// coordinates of the points for the operation being performed.
        /// </param>
        /// <param name="y_column_name">Name of the column containing the y
        /// coordinates of the points for the operation being performed.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateConvexHullResponse aggregateConvexHull( string table_name,
                                                                string x_column_name,
                                                                string y_column_name,
                                                                IDictionary<string, string> options = null )
        {
            return aggregateConvexHull( new AggregateConvexHullRequest( table_name,
                                                                        x_column_name,
                                                                        y_column_name,
                                                                        options ) );
        }


        /// <summary>Calculates unique combinations (groups) of values for the
        /// given columns in a given table/view/collection and computes
        /// aggregates on each unique combination. This is somewhat analogous
        /// to an SQL-style SELECT...GROUP BY.
        /// <br />
        /// Any column(s) can be grouped on, and all column types except
        /// unrestricted-length strings may be used for computing applicable
        /// aggregates.
        /// <br />
        /// The results can be paged via the <paramref
        /// cref="AggregateGroupByRequest.offset" /> and <paramref
        /// cref="AggregateGroupByRequest.limit" /> parameters. For example, to
        /// get 10 groups with the largest counts the inputs would be:
        /// limit=10, options={"sort_order":"descending", "sort_by":"value"}.
        /// <br />
        /// <paramref cref="AggregateGroupByRequest.options" /> can be used to
        /// customize behavior of this call e.g. filtering or sorting the
        /// results.
        /// <br />
        /// To group by columns 'x' and 'y' and compute the number of objects
        /// within each group, use:  column_names=['x','y','count(*)'].
        /// <br />
        /// To also compute the sum of 'z' over each group, use:
        /// column_names=['x','y','count(*)','sum(z)'].
        /// <br />
        /// Available <a
        /// href="../../../../concepts/expressions.html#aggregate-expressions"
        /// target="_top">aggregation functions</a> are: count(*), sum, min,
        /// max, avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop,
        /// var_samp, arg_min, arg_max and count_distinct.
        /// <br />
        /// The response is returned as a dynamic schema. For details see: <a
        /// href="../../../../concepts/dynamic_schemas.html"
        /// target="_top">dynamic schemas documentation</a>.
        /// <br />
        /// If a <i>result_table</i> name is specified in the options, the
        /// results are stored in a new table with that name.  No results are
        /// returned in the response.  If the source table's <a
        /// href="../../../../concepts/tables.html#shard-keys"
        /// target="_top">shard key</a> is used as the grouping column(s), the
        /// result table will be sharded, in all other cases it will be
        /// replicated.  Sorting will properly function only if the result
        /// table is replicated or if there is only one processing node and
        /// should not be relied upon in other cases.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateGroupByResponse aggregateGroupBy( AggregateGroupByRequest request_ )
        {
            RawAggregateGroupByResponse actualResponse_ = SubmitRequest<RawAggregateGroupByResponse>("/aggregate/groupby", request_, false);

            AggregateGroupByResponse response_ = new AggregateGroupByResponse();
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            return response_;
        }


        /// <summary>Calculates unique combinations (groups) of values for the
        /// given columns in a given table/view/collection and computes
        /// aggregates on each unique combination. This is somewhat analogous
        /// to an SQL-style SELECT...GROUP BY.
        /// <br />
        /// Any column(s) can be grouped on, and all column types except
        /// unrestricted-length strings may be used for computing applicable
        /// aggregates.
        /// <br />
        /// The results can be paged via the <paramref name="offset" /> and
        /// <paramref name="limit" /> parameters. For example, to get 10 groups
        /// with the largest counts the inputs would be: limit=10,
        /// options={"sort_order":"descending", "sort_by":"value"}.
        /// <br />
        /// <paramref name="options" /> can be used to customize behavior of
        /// this call e.g. filtering or sorting the results.
        /// <br />
        /// To group by columns 'x' and 'y' and compute the number of objects
        /// within each group, use:  column_names=['x','y','count(*)'].
        /// <br />
        /// To also compute the sum of 'z' over each group, use:
        /// column_names=['x','y','count(*)','sum(z)'].
        /// <br />
        /// Available <a
        /// href="../../../../concepts/expressions.html#aggregate-expressions"
        /// target="_top">aggregation functions</a> are: count(*), sum, min,
        /// max, avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop,
        /// var_samp, arg_min, arg_max and count_distinct.
        /// <br />
        /// The response is returned as a dynamic schema. For details see: <a
        /// href="../../../../concepts/dynamic_schemas.html"
        /// target="_top">dynamic schemas documentation</a>.
        /// <br />
        /// If a <i>result_table</i> name is specified in the options, the
        /// results are stored in a new table with that name.  No results are
        /// returned in the response.  If the source table's <a
        /// href="../../../../concepts/tables.html#shard-keys"
        /// target="_top">shard key</a> is used as the grouping column(s), the
        /// result table will be sharded, in all other cases it will be
        /// replicated.  Sorting will properly function only if the result
        /// table is replicated or if there is only one processing node and
        /// should not be relied upon in other cases.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table/view/collection.
        /// </param>
        /// <param name="column_names">List of one or more column names,
        /// expressions, and aggregate expressions. Must include at least one
        /// 'grouping' column or expression.  If no aggregate is included,
        /// count(*) will be computed as a default.  </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned Or END_OF_SET (-9999) to indicate
        /// that the max number of results should be returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// table specified in <i>result_table</i>, otherwise the table will be
        /// a top-level table. If the collection does not allow duplicate types
        /// and it contains a table of the same type as the given one, then
        /// this table creation request will fail. Additionally this option is
        /// invalid if <paramref cref="AggregateGroupByRequest.table_name" />
        /// is a collection.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.EXPRESSION">EXPRESSION</see>:</term>
        ///         <description>Filter expression to apply to the table prior
        /// to computing the aggregate group by.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.HAVING">HAVING</see>:</term>
        ///         <description>Filter expression to apply to the aggregated
        /// results.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.SORT_ORDER">SORT_ORDER</see>:</term>
        ///         <description>String indicating how the returned values
        /// should be sorted - ascending or descending.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.ASCENDING">ASCENDING</see>:</term>
        ///         <description>Indicates that the returned values should be
        /// sorted in ascending order.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.DESCENDING">DESCENDING</see>:</term>
        ///         <description>Indicates that the returned values should be
        /// sorted in descending order.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AggregateGroupByRequest.Options.ASCENDING">ASCENDING</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.SORT_BY">SORT_BY</see>:</term>
        ///         <description>String determining how the results are sorted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.KEY">KEY</see>:</term>
        ///         <description>Indicates that the returned values should be
        /// sorted by key, which corresponds to the grouping columns. If you
        /// have multiple grouping columns (and are sorting by key), it will
        /// first sort the first grouping column, then the second grouping
        /// column, etc.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.VALUE">VALUE</see>:</term>
        ///         <description>Indicates that the returned values should be
        /// sorted by value, which corresponds to the aggregates. If you have
        /// multiple aggregates (and are sorting by value), it will first sort
        /// by the first aggregate, then the second aggregate,
        /// etc.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AggregateGroupByRequest.Options.KEY">KEY</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>:</term>
        ///         <description>The name of the table used to store the
        /// results. Has the same naming restrictions as <a
        /// href="../../../../concepts/tables.html" target="_top">tables</a>.
        /// Column names (group-by and aggregate fields) need to be given
        /// aliases e.g. ["FChar256 as fchar256", "sum(FDouble) as sfd"].  If
        /// present, no results are returned in the response.  This option is
        /// not available if one of the grouping attributes is an unrestricted
        /// string (i.e.; not charN) type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>:</term>
        ///         <description>If <i>true</i> then the result table specified
        /// in {result_table}@{key of input.options} will be persisted as a
        /// regular table (it will not be automatically cleared unless a
        /// <i>ttl</i> is provided, and the table data can be modified in
        /// subsequent operations). If <i>false</i> (the default) then the
        /// result table will be a read-only, memory-only temporary table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.RESULT_TABLE_FORCE_REPLICATED">RESULT_TABLE_FORCE_REPLICATED</see>:</term>
        ///         <description>Force the result table to be replicated
        /// (ignores any sharding). Must be used in combination with the
        /// <i>result_table</i> option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.RESULT_TABLE_GENERATE_PK">RESULT_TABLE_GENERATE_PK</see>:</term>
        ///         <description>If 'true' then set a primary key for the
        /// result table. Must be used in combination with the
        /// <i>result_table</i> option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the table specified in
        /// <i>result_table</i>. The value must be the desired TTL in
        /// minutes.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateGroupByRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>If provided this indicates the chunk size to
        /// be used for the result table. Must be used in combination with the
        /// <i>result_table</i> option.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateGroupByResponse aggregateGroupBy( string table_name,
                                                          IList<string> column_names,
                                                          long offset,
                                                          long limit = 1000,
                                                          IDictionary<string, string> options = null )
        {
            return aggregateGroupBy( new AggregateGroupByRequest( table_name,
                                                                  column_names, offset,
                                                                  limit, options ) );
        }


        /// <summary>Performs a histogram calculation given a table, a column,
        /// and an interval function. The <paramref
        /// cref="AggregateHistogramRequest.interval" /> is used to produce
        /// bins of that size and the result, computed over the records falling
        /// within each bin, is returned.  For each bin, the start value is
        /// inclusive, but the end value is exclusive--except for the very last
        /// bin for which the end value is also inclusive.  The value returned
        /// for each bin is the number of records in it, except when a column
        /// name is provided as a *value_column* in <paramref
        /// cref="AggregateHistogramRequest.options" />.  In this latter case
        /// the sum of the values corresponding to the *value_column* is used
        /// as the result instead.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateHistogramResponse aggregateHistogram( AggregateHistogramRequest request_ )
        {
            AggregateHistogramResponse actualResponse_ = SubmitRequest<AggregateHistogramResponse>("/aggregate/histogram", request_, false);

            return actualResponse_;
        }


        /// <summary>Performs a histogram calculation given a table, a column,
        /// and an interval function. The <paramref name="interval" /> is used
        /// to produce bins of that size and the result, computed over the
        /// records falling within each bin, is returned.  For each bin, the
        /// start value is inclusive, but the end value is exclusive--except
        /// for the very last bin for which the end value is also inclusive.
        /// The value returned for each bin is the number of records in it,
        /// except when a column name is provided as a *value_column* in
        /// <paramref name="options" />.  In this latter case the sum of the
        /// values corresponding to the *value_column* is used as the result
        /// instead.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table or collection.
        /// </param>
        /// <param name="column_name">Name of a column or an expression of one
        /// or more column names over which the histogram will be calculated.
        /// </param>
        /// <param name="start">Lower end value of the histogram interval,
        /// inclusive.  </param>
        /// <param name="end">Upper end value of the histogram interval,
        /// inclusive.  </param>
        /// <param name="interval">The size of each bin within the start and
        /// end parameters.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateHistogramRequest.Options.VALUE_COLUMN">VALUE_COLUMN</see>:</term>
        ///         <description>The name of the column to use when calculating
        /// the bin values (values are summed).  The column must be a numerical
        /// type (int, double, long, float).</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateHistogramResponse aggregateHistogram( string table_name,
                                                              string column_name,
                                                              double start,
                                                              double end,
                                                              double interval,
                                                              IDictionary<string, string> options = null )
        {
            return aggregateHistogram( new AggregateHistogramRequest( table_name,
                                                                      column_name, start,
                                                                      end, interval,
                                                                      options ) );
        }


        /// <summary>This endpoint runs the k-means algorithm - a heuristic
        /// algorithm that attempts to do k-means clustering.  An ideal k-means
        /// clustering algorithm selects k points such that the sum of the mean
        /// squared distances of each member of the set to the nearest of the k
        /// points is minimized.  The k-means algorithm however does not
        /// necessarily produce such an ideal cluster.   It begins with a
        /// randomly selected set of k points and then refines the location of
        /// the points iteratively and settles to a local minimum.  Various
        /// parameters and options are provided to control the heuristic
        /// search.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateKMeansResponse aggregateKMeans( AggregateKMeansRequest request_ )
        {
            AggregateKMeansResponse actualResponse_ = SubmitRequest<AggregateKMeansResponse>("/aggregate/kmeans", request_, false);

            return actualResponse_;
        }


        /// <summary>This endpoint runs the k-means algorithm - a heuristic
        /// algorithm that attempts to do k-means clustering.  An ideal k-means
        /// clustering algorithm selects k points such that the sum of the mean
        /// squared distances of each member of the set to the nearest of the k
        /// points is minimized.  The k-means algorithm however does not
        /// necessarily produce such an ideal cluster.   It begins with a
        /// randomly selected set of k points and then refines the location of
        /// the points iteratively and settles to a local minimum.  Various
        /// parameters and options are provided to control the heuristic
        /// search.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table or collection.
        /// </param>
        /// <param name="column_names">List of column names on which the
        /// operation would be performed. If n columns are provided then each
        /// of the k result points will have n dimensions corresponding to the
        /// n columns.  </param>
        /// <param name="k">The number of mean points to be determined by the
        /// algorithm.  </param>
        /// <param name="tolerance">Stop iterating when the distances between
        /// successive points is less than the given tolerance.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateKMeansRequest.Options.WHITEN">WHITEN</see>:</term>
        ///         <description>When set to 1 each of the columns is first
        /// normalized by its stdv - default is not to whiten.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateKMeansRequest.Options.MAX_ITERS">MAX_ITERS</see>:</term>
        ///         <description>Number of times to try to hit the tolerance
        /// limit before giving up - default is 10.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateKMeansRequest.Options.NUM_TRIES">NUM_TRIES</see>:</term>
        ///         <description>Number of times to run the k-means algorithm
        /// with a different randomly selected starting points - helps avoid
        /// local minimum. Default is 1.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateKMeansResponse aggregateKMeans( string table_name,
                                                        IList<string> column_names,
                                                        int k,
                                                        double tolerance,
                                                        IDictionary<string, string> options = null )
        {
            return aggregateKMeans( new AggregateKMeansRequest( table_name, column_names,
                                                                k, tolerance, options ) );
        }


        /// <summary>Calculates and returns the minimum and maximum values of a
        /// particular column in a table.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateMinMaxResponse aggregateMinMax( AggregateMinMaxRequest request_ )
        {
            AggregateMinMaxResponse actualResponse_ = SubmitRequest<AggregateMinMaxResponse>("/aggregate/minmax", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates and returns the minimum and maximum values of a
        /// particular column in a table.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table.  </param>
        /// <param name="column_name">Name of a column or an expression of one
        /// or more column on which the min-max will be calculated.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateMinMaxResponse aggregateMinMax( string table_name,
                                                        string column_name,
                                                        IDictionary<string, string> options = null )
        {
            return aggregateMinMax( new AggregateMinMaxRequest( table_name, column_name,
                                                                options ) );
        }


        /// <summary>Calculates and returns the minimum and maximum x- and
        /// y-coordinates of a particular geospatial geometry column in a
        /// table.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateMinMaxGeometryResponse aggregateMinMaxGeometry( AggregateMinMaxGeometryRequest request_ )
        {
            AggregateMinMaxGeometryResponse actualResponse_ = SubmitRequest<AggregateMinMaxGeometryResponse>("/aggregate/minmax/geometry", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates and returns the minimum and maximum x- and
        /// y-coordinates of a particular geospatial geometry column in a
        /// table.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table.  </param>
        /// <param name="column_name">Name of a geospatial geometry column on
        /// which the min-max will be calculated.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateMinMaxGeometryResponse aggregateMinMaxGeometry( string table_name,
                                                                        string column_name,
                                                                        IDictionary<string, string> options = null )
        {
            return aggregateMinMaxGeometry( new AggregateMinMaxGeometryRequest(
                                                                                table_name,
                                                                                column_name,
                                                                                options ) );
        }


        /// <summary>Calculates the requested statistics of a given column in a
        /// given table.
        /// <br />
        /// The available statistics are count (number of total objects), mean,
        /// stdv (standard deviation), variance, skew, kurtosis, sum,
        /// sum_of_squares, min, max, weighted_average, cardinality (unique
        /// count), estimated cardinality, percentile and percentile_rank.
        /// <br />
        /// Estimated cardinality is calculated by using the hyperloglog
        /// approximation technique.
        /// <br />
        /// Percentiles and percentile_ranks are approximate and are calculated
        /// using the t-digest algorithm. They must include the desired
        /// percentile/percentile_rank. To compute multiple percentiles each
        /// value must be specified separately (i.e.
        /// 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
        /// <br />
        /// The weighted average statistic requires a weight_attribute to be
        /// specified in <paramref cref="AggregateStatisticsRequest.options"
        /// />. The weighted average is then defined as the sum of the products
        /// of <paramref cref="AggregateStatisticsRequest.column_name" /> times
        /// the weight attribute divided by the sum of the weight attribute.
        /// <br />
        /// The response includes a list of the statistics requested along with
        /// the count of the number of items in the given set.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateStatisticsResponse aggregateStatistics( AggregateStatisticsRequest request_ )
        {
            AggregateStatisticsResponse actualResponse_ = SubmitRequest<AggregateStatisticsResponse>("/aggregate/statistics", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates the requested statistics of a given column in a
        /// given table.
        /// <br />
        /// The available statistics are count (number of total objects), mean,
        /// stdv (standard deviation), variance, skew, kurtosis, sum,
        /// sum_of_squares, min, max, weighted_average, cardinality (unique
        /// count), estimated cardinality, percentile and percentile_rank.
        /// <br />
        /// Estimated cardinality is calculated by using the hyperloglog
        /// approximation technique.
        /// <br />
        /// Percentiles and percentile_ranks are approximate and are calculated
        /// using the t-digest algorithm. They must include the desired
        /// percentile/percentile_rank. To compute multiple percentiles each
        /// value must be specified separately (i.e.
        /// 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
        /// <br />
        /// The weighted average statistic requires a weight_attribute to be
        /// specified in <paramref name="options" />. The weighted average is
        /// then defined as the sum of the products of <paramref
        /// name="column_name" /> times the weight attribute divided by the sum
        /// of the weight attribute.
        /// <br />
        /// The response includes a list of the statistics requested along with
        /// the count of the number of items in the given set.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the statistics
        /// operation will be performed.  </param>
        /// <param name="column_name">Name of the column for which the
        /// statistics are to be calculated.  </param>
        /// <param name="stats">Comma separated list of the statistics to
        /// calculate, e.g. "sum,mean".
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.COUNT">COUNT</see>:</term>
        ///         <description>Number of objects (independent of the given
        /// column).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.MEAN">MEAN</see>:</term>
        ///         <description>Arithmetic mean (average), equivalent to
        /// sum/count.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.STDV">STDV</see>:</term>
        ///         <description>Sample standard deviation (denominator is
        /// count-1).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.VARIANCE">VARIANCE</see>:</term>
        ///         <description>Unbiased sample variance (denominator is
        /// count-1).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.SKEW">SKEW</see>:</term>
        ///         <description>Skewness (third standardized
        /// moment).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.KURTOSIS">KURTOSIS</see>:</term>
        ///         <description>Kurtosis (fourth standardized
        /// moment).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.SUM">SUM</see>:</term>
        ///         <description>Sum of all values in the column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.SUM_OF_SQUARES">SUM_OF_SQUARES</see>:</term>
        ///         <description>Sum of the squares of all values in the
        /// column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.MIN">MIN</see>:</term>
        ///         <description>Minimum value of the column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.MAX">MAX</see>:</term>
        ///         <description>Maximum value of the column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.WEIGHTED_AVERAGE">WEIGHTED_AVERAGE</see>:</term>
        ///         <description>Weighted arithmetic mean (using the option
        /// 'weight_column_name' as the weighting column).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.CARDINALITY">CARDINALITY</see>:</term>
        ///         <description>Number of unique values in the
        /// column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.ESTIMATED_CARDINALITY">ESTIMATED_CARDINALITY</see>:</term>
        ///         <description>Estimate (via hyperloglog technique) of the
        /// number of unique values in the column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE">PERCENTILE</see>:</term>
        ///         <description>Estimate (via t-digest) of the given
        /// percentile of the column (percentile(50.0) will be an approximation
        /// of the median).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>:</term>
        ///         <description>Estimate (via t-digest) of the percentile rank
        /// of the given value in the column (if the given value is the median
        /// of the column, percentile_rank([median]) will return approximately
        /// 50.0).</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>:</term>
        ///         <description>A list of comma separated column names over
        /// which statistics can be accumulated along with the primary
        /// column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>:</term>
        ///         <description>Name of column used as weighting attribute for
        /// the weighted average statistic.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateStatisticsResponse aggregateStatistics( string table_name,
                                                                string column_name,
                                                                string stats,
                                                                IDictionary<string, string> options = null )
        {
            return aggregateStatistics( new AggregateStatisticsRequest( table_name,
                                                                        column_name,
                                                                        stats, options ) );
        }


        /// <summary>Divides the given set into bins and calculates statistics
        /// of the values of a value-column in each bin.  The bins are based on
        /// the values of a given binning-column.  The statistics that may be
        /// requested are mean, stdv (standard deviation), variance, skew,
        /// kurtosis, sum, min, max, first, last and weighted average. In
        /// addition to the requested statistics the count of total samples in
        /// each bin is returned. This counts vector is just the histogram of
        /// the column used to divide the set members into bins. The weighted
        /// average statistic requires a weight_column to be specified in
        /// <paramref cref="AggregateStatisticsByRangeRequest.options" />. The
        /// weighted average is then defined as the sum of the products of the
        /// value column times the weight column divided by the sum of the
        /// weight column.
        /// <br />
        /// There are two methods for binning the set members. In the first,
        /// which can be used for numeric valued binning-columns, a min, max
        /// and interval are specified. The number of bins, nbins, is the
        /// integer upper bound of (max-min)/interval. Values that fall in the
        /// range [min+n\*interval,min+(n+1)\*interval) are placed in the nth
        /// bin where n ranges from 0..nbin-2. The final bin is
        /// [min+(nbin-1)\*interval,max]. In the second method, <paramref
        /// cref="AggregateStatisticsByRangeRequest.options" /> bin_values
        /// specifies a list of binning column values. Binning-columns whose
        /// value matches the nth member of the bin_values list are placed in
        /// the nth bin. When a list is provided the binning-column must be of
        /// type string or int.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateStatisticsByRangeResponse aggregateStatisticsByRange( AggregateStatisticsByRangeRequest request_ )
        {
            AggregateStatisticsByRangeResponse actualResponse_ = SubmitRequest<AggregateStatisticsByRangeResponse>("/aggregate/statistics/byrange", request_, false);

            return actualResponse_;
        }


        /// <summary>Divides the given set into bins and calculates statistics
        /// of the values of a value-column in each bin.  The bins are based on
        /// the values of a given binning-column.  The statistics that may be
        /// requested are mean, stdv (standard deviation), variance, skew,
        /// kurtosis, sum, min, max, first, last and weighted average. In
        /// addition to the requested statistics the count of total samples in
        /// each bin is returned. This counts vector is just the histogram of
        /// the column used to divide the set members into bins. The weighted
        /// average statistic requires a weight_column to be specified in
        /// <paramref name="options" />. The weighted average is then defined
        /// as the sum of the products of the value column times the weight
        /// column divided by the sum of the weight column.
        /// <br />
        /// There are two methods for binning the set members. In the first,
        /// which can be used for numeric valued binning-columns, a min, max
        /// and interval are specified. The number of bins, nbins, is the
        /// integer upper bound of (max-min)/interval. Values that fall in the
        /// range [min+n\*interval,min+(n+1)\*interval) are placed in the nth
        /// bin where n ranges from 0..nbin-2. The final bin is
        /// [min+(nbin-1)\*interval,max]. In the second method, <paramref
        /// name="options" /> bin_values specifies a list of binning column
        /// values. Binning-columns whose value matches the nth member of the
        /// bin_values list are placed in the nth bin. When a list is provided
        /// the binning-column must be of type string or int.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the
        /// ranged-statistics operation will be performed.  </param>
        /// <param name="select_expression">For a non-empty expression
        /// statistics are calculated for those records for which the
        /// expression is true.  </param>
        /// <param name="column_name">Name of the binning-column used to divide
        /// the set samples into bins.  </param>
        /// <param name="value_column_name">Name of the value-column for which
        /// statistics are to be computed.  </param>
        /// <param name="stats">A string of comma separated list of the
        /// statistics to calculate, e.g. 'sum,mean'. Available statistics:
        /// mean, stdv (standard deviation), variance, skew, kurtosis, sum.
        /// </param>
        /// <param name="start">The lower bound of the binning-column.
        /// </param>
        /// <param name="end">The upper bound of the binning-column.  </param>
        /// <param name="interval">The interval of a bin. Set members fall into
        /// bin i if the binning-column falls in the range
        /// [start+interval``*``i, start+interval``*``(i+1)).  </param>
        /// <param name="options">Map of optional parameters:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsByRangeRequest.Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>:</term>
        ///         <description>A list of comma separated value-column names
        /// over which statistics can be accumulated along with the primary
        /// value_column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsByRangeRequest.Options.BIN_VALUES">BIN_VALUES</see>:</term>
        ///         <description>A list of comma separated binning-column
        /// values. Values that match the nth bin_values value are placed in
        /// the nth bin.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsByRangeRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>:</term>
        ///         <description>Name of the column used as weighting column
        /// for the weighted_average statistic.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateStatisticsByRangeRequest.Options.ORDER_COLUMN_NAME">ORDER_COLUMN_NAME</see>:</term>
        ///         <description>Name of the column used for candlestick
        /// charting techniques.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateStatisticsByRangeResponse aggregateStatisticsByRange( string table_name,
                                                                              string select_expression,
                                                                              string column_name,
                                                                              string value_column_name,
                                                                              string stats,
                                                                              double start,
                                                                              double end,
                                                                              double interval,
                                                                              IDictionary<string, string> options = null )
        {
            return aggregateStatisticsByRange( new AggregateStatisticsByRangeRequest(
                                                                                      table_name,
                                                                                      select_expression,
                                                                                      column_name,
                                                                                      value_column_name,
                                                                                      stats,
                                                                                      start,
                                                                                      end,
                                                                                      interval,
                                                                                      options ) );
        }


        /// <summary>Returns all the unique values from a particular column
        /// (specified by <paramref cref="AggregateUniqueRequest.column_name"
        /// />) of a particular table (specified by <paramref
        /// cref="AggregateUniqueRequest.table_name" />). If <paramref
        /// cref="AggregateUniqueRequest.column_name" /> is a numeric column
        /// the values will be in <paramref
        /// cref="RawAggregateUniqueResponse.binary_encoded_response" />.
        /// Otherwise if <paramref cref="AggregateUniqueRequest.column_name" />
        /// is a string column the values will be in <paramref
        /// cref="RawAggregateUniqueResponse.json_encoded_response" />.
        /// <paramref cref="AggregateUniqueRequest.offset" /> and <paramref
        /// cref="AggregateUniqueRequest.limit" /> are used to page through the
        /// results if there are large numbers of unique values. To get the
        /// first 10 unique values sorted in descending order <paramref
        /// cref="AggregateUniqueRequest.options" /> would be::
        /// <br />
        /// {"limit":"10","sort_order":"descending"}.
        /// <br />
        /// The response is returned as a dynamic schema. For details see: <a
        /// href="../../../../concepts/dynamic_schemas.html"
        /// target="_top">dynamic schemas documentation</a>.
        /// <br />
        /// If a <i>result_table</i> name is specified in the options, the
        /// results are stored in a new table with that name.  No results are
        /// returned in the response.  If the source table's <a
        /// href="../../../../concepts/tables.html#shard-keys"
        /// target="_top">shard key</a> is used as the <paramref
        /// cref="AggregateUniqueRequest.column_name" />, the result table will
        /// be sharded, in all other cases it will be replicated.  Sorting will
        /// properly function only if the result table is replicated or if
        /// there is only one processing node and should not be relied upon in
        /// other cases.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateUniqueResponse aggregateUnique( AggregateUniqueRequest request_ )
        {
            RawAggregateUniqueResponse actualResponse_ = SubmitRequest<RawAggregateUniqueResponse>("/aggregate/unique", request_, false);

            AggregateUniqueResponse response_ = new AggregateUniqueResponse();
            response_.table_name = actualResponse_.table_name;
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.has_more_records = actualResponse_.has_more_records;
            return response_;
        }


        /// <summary>Returns all the unique values from a particular column
        /// (specified by <paramref name="column_name" />) of a particular
        /// table (specified by <paramref name="table_name" />). If <paramref
        /// name="column_name" /> is a numeric column the values will be in
        /// <paramref cref="RawAggregateUniqueResponse.binary_encoded_response"
        /// />. Otherwise if <paramref name="column_name" /> is a string column
        /// the values will be in <paramref
        /// cref="RawAggregateUniqueResponse.json_encoded_response" />.
        /// <paramref name="offset" /> and <paramref name="limit" /> are used
        /// to page through the results if there are large numbers of unique
        /// values. To get the first 10 unique values sorted in descending
        /// order <paramref name="options" /> would be::
        /// <br />
        /// {"limit":"10","sort_order":"descending"}.
        /// <br />
        /// The response is returned as a dynamic schema. For details see: <a
        /// href="../../../../concepts/dynamic_schemas.html"
        /// target="_top">dynamic schemas documentation</a>.
        /// <br />
        /// If a <i>result_table</i> name is specified in the options, the
        /// results are stored in a new table with that name.  No results are
        /// returned in the response.  If the source table's <a
        /// href="../../../../concepts/tables.html#shard-keys"
        /// target="_top">shard key</a> is used as the <paramref
        /// name="column_name" />, the result table will be sharded, in all
        /// other cases it will be replicated.  Sorting will properly function
        /// only if the result table is replicated or if there is only one
        /// processing node and should not be relied upon in other
        /// cases.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table.  </param>
        /// <param name="column_name">Name of the column or an expression
        /// containing one or more column names on which the unique function
        /// would be applied.  </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned. Or END_OF_SET (-9999) to indicate
        /// that the max number of results should be returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// table specified in 'result_table', otherwise the table will be a
        /// top-level table. If the collection does not allow duplicate types
        /// and it contains a table of the same type as the given one, then
        /// this table creation request will fail.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.EXPRESSION">EXPRESSION</see>:</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.SORT_ORDER">SORT_ORDER</see>:</term>
        ///         <description>String indicating how the returned values
        /// should be sorted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.ASCENDING">ASCENDING</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.DESCENDING">DESCENDING</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AggregateUniqueRequest.Options.ASCENDING">ASCENDING</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>:</term>
        ///         <description>The name of the table used to store the
        /// results. If present no results are returned in the response. Has
        /// the same naming restrictions as <a
        /// href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>:</term>
        ///         <description>If <i>true</i> then the result table specified
        /// in <i>result_table</i> will be persisted as a regular table (it
        /// will not be automatically cleared unless a <i>ttl</i> is provided,
        /// and the table data can be modified in subsequent operations). If
        /// <i>false</i> (the default) then the result table will be a
        /// read-only, memory-only temporary table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.RESULT_TABLE_FORCE_REPLICATED">RESULT_TABLE_FORCE_REPLICATED</see>:</term>
        ///         <description>Force the result table to be replicated
        /// (ignores any sharding). Must be used in combination with the
        /// 'result_table' option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.RESULT_TABLE_GENERATE_PK">RESULT_TABLE_GENERATE_PK</see>:</term>
        ///         <description>If 'true' then set a primary key for the
        /// result table. Must be used in combination with the 'result_table'
        /// option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the table specified in
        /// 'result_table'. The value must be the desired TTL in
        /// minutes.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUniqueRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>If provided this indicates the chunk size to
        /// be used for the result table. Must be used in combination with the
        /// <i>result_table</i> option.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateUniqueResponse aggregateUnique( string table_name,
                                                        string column_name,
                                                        long offset,
                                                        long limit = 10000,
                                                        IDictionary<string, string> options = null )
        {
            return aggregateUnique( new AggregateUniqueRequest( table_name, column_name,
                                                                offset, limit, options ) );
        }


        /// <summary>Rotate the column values into rows values.
        /// <br />
        /// The aggregate unpivot is used to normalize tables that are built
        /// for cross tabular reporting purposes. The unpivot operator rotates
        /// the column values for all the pivoted columns. A variable column,
        /// value column and all columns from the source table except the
        /// unpivot columns are projected into the result table. The variable
        /// column and value columns in the result table indicate the pivoted
        /// column name and values respectively.
        /// <br />
        /// The response is returned as a dynamic schema. For details see: <a
        /// href="../../../../concepts/dynamic_schemas.html"
        /// target="_top">dynamic schemas documentation</a>.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateUnpivotResponse aggregateUnpivot( AggregateUnpivotRequest request_ )
        {
            RawAggregateUnpivotResponse actualResponse_ = SubmitRequest<RawAggregateUnpivotResponse>("/aggregate/unpivot", request_, false);

            AggregateUnpivotResponse response_ = new AggregateUnpivotResponse();
            response_.table_name = actualResponse_.table_name;
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            return response_;
        }


        /// <summary>Rotate the column values into rows values.
        /// <br />
        /// The aggregate unpivot is used to normalize tables that are built
        /// for cross tabular reporting purposes. The unpivot operator rotates
        /// the column values for all the pivoted columns. A variable column,
        /// value column and all columns from the source table except the
        /// unpivot columns are projected into the result table. The variable
        /// column and value columns in the result table indicate the pivoted
        /// column name and values respectively.
        /// <br />
        /// The response is returned as a dynamic schema. For details see: <a
        /// href="../../../../concepts/dynamic_schemas.html"
        /// target="_top">dynamic schemas documentation</a>.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table/view.  </param>
        /// <param name="variable_column_name">Specifies the variable/parameter
        /// column name.  </param>
        /// <param name="value_column_name">Specifies the value column name.
        /// </param>
        /// <param name="pivoted_columns">List of one or more values typically
        /// the column names of the input table. All the columns in the source
        /// table must have the same data type.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// table specified in <i>result_table</i>, otherwise the table will be
        /// a top-level table. If the collection does not allow duplicate types
        /// and it contains a table of the same type as the given one, then
        /// this table creation request will fail. Additionally this option is
        /// invalid if <paramref cref="AggregateUnpivotRequest.table_name" />
        /// is a collection.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>:</term>
        ///         <description>The name of the table used to store the
        /// results. Has the same naming restrictions as <a
        /// href="../../../../concepts/tables.html" target="_top">tables</a>.
        /// If present, no results are returned in the response.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>:</term>
        ///         <description>If <i>true</i> then the result table specified
        /// in {result_table}@{key of input.options} will be persisted as a
        /// regular table (it will not be automatically cleared unless a
        /// <i>ttl</i> is provided, and the table data can be modified in
        /// subsequent operations). If <i>false</i> (the default) then the
        /// result table will be a read-only, memory-only temporary table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.EXPRESSION">EXPRESSION</see>:</term>
        ///         <description>Filter expression to apply to the table prior
        /// to unpivot processing.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.ORDER_BY">ORDER_BY</see>:</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in input table.  If any alias is given for any
        /// column name, the alias must be used, rather than the original
        /// column name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>If provided this indicates the chunk size to
        /// be used for the result table. Must be used in combination with the
        /// <i>result_table</i> option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.LIMIT">LIMIT</see>:</term>
        ///         <description>The number of records to keep.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AggregateUnpivotRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the table specified in
        /// <i>result_table</i>. The value must be the desired TTL in
        /// minutes.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AggregateUnpivotResponse aggregateUnpivot( string table_name,
                                                          string variable_column_name,
                                                          string value_column_name,
                                                          IList<string> pivoted_columns,
                                                          IDictionary<string, string> options = null )
        {
            return aggregateUnpivot( new AggregateUnpivotRequest( table_name,
                                                                  variable_column_name,
                                                                  value_column_name,
                                                                  pivoted_columns, options ) );
        }


        /// <summary>The <see
        /// cref="Kinetica.alterSystemProperties(IDictionary{string, string},IDictionary{string, string})"
        /// /> endpoint is primarily used to simplify the testing of the system
        /// and is not expected to be used during normal execution.  Commands
        /// are given through the <paramref
        /// cref="AlterSystemPropertiesRequest.property_updates_map" /> whose
        /// keys are commands and values are strings representing integer
        /// values (for example '8000') or boolean values ('true' or
        /// 'false').</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AlterSystemPropertiesResponse alterSystemProperties( AlterSystemPropertiesRequest request_ )
        {
            AlterSystemPropertiesResponse actualResponse_ = SubmitRequest<AlterSystemPropertiesResponse>("/alter/system/properties", request_, false);

            return actualResponse_;
        }


        /// <summary>The <see
        /// cref="Kinetica.alterSystemProperties(IDictionary{string, string},IDictionary{string, string})"
        /// /> endpoint is primarily used to simplify the testing of the system
        /// and is not expected to be used during normal execution.  Commands
        /// are given through the <paramref name="property_updates_map" />
        /// whose keys are commands and values are strings representing integer
        /// values (for example '8000') or boolean values ('true' or
        /// 'false').</summary>
        /// 
        /// <param name="property_updates_map">Map containing the properties of
        /// the system to be updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SM_OMP_THREADS">SM_OMP_THREADS</see>:</term>
        ///         <description>Set the number of OpenMP threads that will be
        /// used to service filter & aggregation requests against collections
        /// to the specified integer value.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.KERNEL_OMP_THREADS">KERNEL_OMP_THREADS</see>:</term>
        ///         <description>Set the number of kernel OpenMP threads to the
        /// specified integer value.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.CONCURRENT_KERNEL_EXECUTION">CONCURRENT_KERNEL_EXECUTION</see>:</term>
        ///         <description>Enables concurrent kernel execution if the
        /// value is <i>true</i> and disables it if the value is <i>false</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.FALSE">FALSE</see></term>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>Sets the chunk size of all new sets to the
        /// specified integer value.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.EXECUTION_MODE">EXECUTION_MODE</see>:</term>
        ///         <description>Sets the execution_mode for kernel executions
        /// to the specified string value. Possible values are host, device,
        /// default (engine decides) or an integer value that indicates max
        /// chunk size to exec on host</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.FLUSH_TO_DISK">FLUSH_TO_DISK</see>:</term>
        ///         <description>Flushes any changes to any tables to the
        /// persistent store.  These changes include updates to the vector
        /// store, object store, and text search store, Value string is
        /// ignored</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.CLEAR_CACHE">CLEAR_CACHE</see>:</term>
        ///         <description>Clears cached results.  Useful to allow
        /// repeated timing of endpoints. Value string is ignored</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.COMMUNICATOR_TEST">COMMUNICATOR_TEST</see>:</term>
        ///         <description>Invoke the communicator test and report timing
        /// results. Value string is is a comma separated list of <key>=<value>
        /// expressions.  Expressions are: num_transactions=<num> where num is
        /// the number of request reply transactions to invoke per test;
        /// message_size=<bytes> where bytes is the size of the messages to
        /// send in bytes; check_values=<enabled> where if enabled is true the
        /// value of the messages received are verified.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SET_MESSAGE_TIMERS_ENABLED">SET_MESSAGE_TIMERS_ENABLED</see>:</term>
        ///         <description>Enables the communicator test to collect
        /// additional timing statistics when the value string is <i>true</i>.
        /// Disables the collection when the value string is <i>false</i>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.FALSE">FALSE</see></term>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.BULK_ADD_TEST">BULK_ADD_TEST</see>:</term>
        ///         <description>Invoke the bulk add test and report timing
        /// results. Value string is ignored.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.NETWORK_SPEED">NETWORK_SPEED</see>:</term>
        ///         <description>Invoke the network speed test and report
        /// timing results. Value string is a semicolon-separated list of
        /// <key>=<value> expressions.  Valid expressions are: seconds=<time>
        /// where time is the time in seconds to run the test; data_size=<size>
        /// where size is the size in bytes of the block to be transferred;
        /// threads=<number of threads>; to_ranks=<space-separated list of
        /// ranks> where the list of ranks is the ranks that rank 0 will send
        /// data to and get data from. If to_ranks is unspecified then all
        /// worker ranks are used.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.REQUEST_TIMEOUT">REQUEST_TIMEOUT</see>:</term>
        ///         <description>Number of minutes after which filtering (e.g.,
        /// /filter) and aggregating (e.g., /aggregate/groupby) queries will
        /// timeout.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.MAX_GET_RECORDS_SIZE">MAX_GET_RECORDS_SIZE</see>:</term>
        ///         <description>The maximum number of records the database
        /// will serve for a given data retrieval call</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.MEMORY_ALLOCATION_LIMIT_MB">MEMORY_ALLOCATION_LIMIT_MB</see>:</term>
        ///         <description>Set the memory allocation limit for all rank
        /// processes in megabytes, 0 means no limit. Overrides any individual
        /// rank memory allocation limits.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.ENABLE_AUDIT">ENABLE_AUDIT</see>:</term>
        ///         <description>Enable or disable auditing.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AUDIT_HEADERS">AUDIT_HEADERS</see>:</term>
        ///         <description>Enable or disable auditing of request
        /// headers.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AUDIT_BODY">AUDIT_BODY</see>:</term>
        ///         <description>Enable or disable auditing of request
        /// bodies.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AUDIT_DATA">AUDIT_DATA</see>:</term>
        ///         <description>Enable or disable auditing of request
        /// data.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.ENABLE_JOB_MANAGER">ENABLE_JOB_MANAGER</see>:</term>
        ///         <description>Enable JobManager to enforce processing of
        /// requests in the order received.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AlterSystemPropertiesResponse alterSystemProperties( IDictionary<string, string> property_updates_map,
                                                                    IDictionary<string, string> options = null )
        {
            return alterSystemProperties( new AlterSystemPropertiesRequest(
                                                                            property_updates_map,
                                                                            options ) );
        }


        /// <summary>Apply various modifications to a table, view, or
        /// collection.  The availble
        /// modifications include the following:
        /// <br />
        /// Create or delete an index on a particular column. This can speed up
        /// certain search queries
        /// (such as <see
        /// cref="Kinetica.getRecords{T}(string,long,long,IDictionary{string, string})"
        /// />, <see
        /// cref="Kinetica.deleteRecords(string,IList{string},IDictionary{string, string})"
        /// />, <see
        /// cref="Kinetica.updateRecords{T}(string,IList{string},IList{IDictionary{string, string}},IList{T},IDictionary{string, string})"
        /// />)
        /// when using expressions containing equality or relational operators
        /// on indexed columns. This
        /// only applies to tables.
        /// <br />
        /// Set the time-to-live (TTL). This can be applied to tables, views,
        /// or collections.  When
        /// applied to collections, every table & view within the collection
        /// will have its TTL set to the
        /// given value.
        /// <br />
        /// Set the global access mode (i.e. locking) for a table. The mode can
        /// be set to 'no-access', 'read-only',
        /// 'write-only' or 'read-write'.
        /// <br />
        /// Make a table protected or not. Protected tables have their TTLs set
        /// to not automatically
        /// expire. This can be applied to tables, views, and collections.
        /// <br />
        /// Allow homogeneous tables within a collection.
        /// <br />
        /// Manage a table's columns--a column can be added, removed, or have
        /// its
        /// <a href="../../../../concepts/types.html" target="_top">type and
        /// properties</a> modified.
        /// <br />
        /// Set or unset compression for a column.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AlterTableResponse alterTable( AlterTableRequest request_ )
        {
            AlterTableResponse actualResponse_ = SubmitRequest<AlterTableResponse>("/alter/table", request_, false);

            return actualResponse_;
        }


        /// <summary>Apply various modifications to a table, view, or
        /// collection.  The availble
        /// modifications include the following:
        /// <br />
        /// Create or delete an index on a particular column. This can speed up
        /// certain search queries
        /// (such as <see
        /// cref="Kinetica.getRecords{T}(string,long,long,IDictionary{string, string})"
        /// />, <see
        /// cref="Kinetica.deleteRecords(string,IList{string},IDictionary{string, string})"
        /// />, <see
        /// cref="Kinetica.updateRecords{T}(string,IList{string},IList{IDictionary{string, string}},IList{T},IDictionary{string, string})"
        /// />)
        /// when using expressions containing equality or relational operators
        /// on indexed columns. This
        /// only applies to tables.
        /// <br />
        /// Set the time-to-live (TTL). This can be applied to tables, views,
        /// or collections.  When
        /// applied to collections, every table & view within the collection
        /// will have its TTL set to the
        /// given value.
        /// <br />
        /// Set the global access mode (i.e. locking) for a table. The mode can
        /// be set to 'no-access', 'read-only',
        /// 'write-only' or 'read-write'.
        /// <br />
        /// Make a table protected or not. Protected tables have their TTLs set
        /// to not automatically
        /// expire. This can be applied to tables, views, and collections.
        /// <br />
        /// Allow homogeneous tables within a collection.
        /// <br />
        /// Manage a table's columns--a column can be added, removed, or have
        /// its
        /// <a href="../../../../concepts/types.html" target="_top">type and
        /// properties</a> modified.
        /// <br />
        /// Set or unset compression for a column.</summary>
        /// 
        /// <param name="table_name">Table on which the operation will be
        /// performed. Must be an existing table, view, or collection.
        /// </param>
        /// <param name="action">Modification operation to be applied
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ALLOW_HOMOGENEOUS_TABLES">ALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>Sets whether homogeneous tables are allowed in
        /// the given collection. This action is only valid if <paramref
        /// cref="AlterTableRequest.table_name" /> is a collection. The
        /// <paramref cref="AlterTableRequest._value" /> must be either 'true'
        /// or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>:</term>
        ///         <description>Creates an index on the column name specified
        /// in <paramref cref="AlterTableRequest._value" />. If this column is
        /// already indexed, an error will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>:</term>
        ///         <description>Deletes an existing index on the column name
        /// specified in <paramref cref="AlterTableRequest._value" />. If this
        /// column does not have indexing turned on, an error will be
        /// returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.MOVE_TO_COLLECTION">MOVE_TO_COLLECTION</see>:</term>
        ///         <description>Move a table into a collection <paramref
        /// cref="AlterTableRequest._value" />. </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.PROTECTED">PROTECTED</see>:</term>
        ///         <description>Sets whether the given <paramref
        /// cref="AlterTableRequest.table_name" /> should be protected or not.
        /// The <paramref cref="AlterTableRequest._value" /> must be either
        /// 'true' or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.RENAME_TABLE">RENAME_TABLE</see>:</term>
        ///         <description>Rename a table, view or collection to
        /// <paramref cref="AlterTableRequest._value" />. Has the same naming
        /// restrictions as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the table, view, or collection
        /// specified in <paramref cref="AlterTableRequest.table_name" />. The
        /// <paramref cref="AlterTableRequest._value" /> must be the desired
        /// TTL in minutes.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>:</term>
        ///         <description>Add the column specified in <paramref
        /// cref="AlterTableRequest._value" /> to the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CHANGE_COLUMN">CHANGE_COLUMN</see>:</term>
        ///         <description>Change type and properties of the column
        /// specified in <paramref cref="AlterTableRequest._value" />.  Use
        /// <i>column_type</i> and <i>column_properties</i> in <paramref
        /// cref="AlterTableRequest.options" /> to set the column's type and
        /// properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_COLUMN_COMPRESSION">SET_COLUMN_COMPRESSION</see>:</term>
        ///         <description>Modify the compression setting on the column
        /// specified in <paramref cref="AlterTableRequest._value" />.
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_COLUMN">DELETE_COLUMN</see>:</term>
        ///         <description>Delete the column specified in <paramref
        /// cref="AlterTableRequest._value" /> from the table specified in
        /// <paramref cref="AlterTableRequest.table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.CREATE_FOREIGN_KEY">CREATE_FOREIGN_KEY</see>:</term>
        ///         <description>Create a foreign key using the format
        /// 'source_column references target_table(primary_key_column) [ as
        /// <foreign_key_name> ]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.DELETE_FOREIGN_KEY">DELETE_FOREIGN_KEY</see>:</term>
        ///         <description>Delete a foreign key.  The <paramref
        /// cref="AlterTableRequest._value" /> should be the <foreign_key_name>
        /// or the string used to define the foreign key.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Action.SET_GLOBAL_ACCESS_MODE">SET_GLOBAL_ACCESS_MODE</see>:</term>
        ///         <description>Set the global access mode (i.e. locking) for
        /// the table specified in <paramref
        /// cref="AlterTableRequest.table_name" />. Specify the access mode in
        /// <paramref cref="AlterTableRequest._value" />. Valid modes are
        /// 'no-access', 'read-only', 'write-only' and
        /// 'read-write'.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="_value">The value of the modification. May be a column
        /// name, 'true' or 'false', a TTL, or the global access mode depending
        /// on <paramref cref="AlterTableRequest.action" />.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>:</term>
        ///         <description>When adding a column, set a default value for
        /// existing records.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column properties (strings, separated by a comma: data, store_only,
        /// text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>:</term>
        ///         <description>When adding or changing a column, set the
        /// column type (strings, separated by a comma: int, double, string,
        /// null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:</term>
        ///         <description>When setting column compression
        /// (<i>set_column_compression</i> for <paramref
        /// cref="AlterTableRequest.action" />), compression type to use:
        /// <i>none</i> (to use no compression) or a valid compression type.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4">LZ4</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.COPY_VALUES_FROM_COLUMN">COPY_VALUES_FROM_COLUMN</see>:</term>
        ///         <description>When adding or changing a column, enter a
        /// column name from the same table being altered to use as a source
        /// for the column being added/changed; values will be copied from this
        /// source column into the new/modified column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.RENAME_COLUMN">RENAME_COLUMN</see>:</term>
        ///         <description>When changing a column, specify new column
        /// name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:</term>
        ///         <description>When changing a column, validate the change
        /// before applying it. If <i>true</i>, then validate all values. A
        /// value too large (or too long) for the new type will prevent any
        /// change. If <i>false</i>, then when a value is too large or long, it
        /// will be truncated.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>:</term>
        ///         <description>true</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AlterTableRequest.Options.FALSE">FALSE</see>:</term>
        ///         <description>false</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AlterTableResponse alterTable( string table_name,
                                              string action,
                                              string _value,
                                              IDictionary<string, string> options = null )
        {
            return alterTable( new AlterTableRequest( table_name, action, _value, options ) );
        }


        /// <summary>Updates (adds or changes) metadata for tables. The
        /// metadata key and values must both be strings. This is an easy way
        /// to annotate whole tables rather than single records within tables.
        /// Some examples of metadata are owner of the table, table creation
        /// timestamp etc.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AlterTableMetadataResponse alterTableMetadata( AlterTableMetadataRequest request_ )
        {
            AlterTableMetadataResponse actualResponse_ = SubmitRequest<AlterTableMetadataResponse>("/alter/table/metadata", request_, false);

            return actualResponse_;
        }


        /// <summary>Updates (adds or changes) metadata for tables. The
        /// metadata key and values must both be strings. This is an easy way
        /// to annotate whole tables rather than single records within tables.
        /// Some examples of metadata are owner of the table, table creation
        /// timestamp etc.</summary>
        /// 
        /// <param name="table_names">Names of the tables whose metadata will
        /// be updated. All specified tables must exist, or an error will be
        /// returned.  </param>
        /// <param name="metadata_map">A map which contains the metadata of the
        /// tables that are to be updated. Note that only one map is provided
        /// for all the tables; so the change will be applied to every table.
        /// If the provided map is empty, then all existing metadata for the
        /// table(s) will be cleared.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AlterTableMetadataResponse alterTableMetadata( IList<string> table_names,
                                                              IDictionary<string, string> metadata_map,
                                                              IDictionary<string, string> options = null )
        {
            return alterTableMetadata( new AlterTableMetadataRequest( table_names,
                                                                      metadata_map,
                                                                      options ) );
        }


        /// <summary>Alters a user.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AlterUserResponse alterUser( AlterUserRequest request_ )
        {
            AlterUserResponse actualResponse_ = SubmitRequest<AlterUserResponse>("/alter/user", request_, false);

            return actualResponse_;
        }


        /// <summary>Alters a user.</summary>
        /// 
        /// <param name="name">Name of the user to be altered. Must be an
        /// existing user.  </param>
        /// <param name="action">Modification operation to be applied to the
        /// user.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AlterUserRequest.Action.SET_PASSWORD">SET_PASSWORD</see>:</term>
        ///         <description>Sets the password of the user. The user must
        /// be an internal user.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="_value">The value of the modification, depending on
        /// <paramref cref="AlterUserRequest.action" />.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AlterUserResponse alterUser( string name,
                                            string action,
                                            string _value,
                                            IDictionary<string, string> options )
        {
            return alterUser( new AlterUserRequest( name, action, _value, options ) );
        }


        /// <summary>Append (or insert) all records from a source table
        /// (specified by <paramref
        /// cref="AppendRecordsRequest.source_table_name" />) to a particular
        /// target table (specified by <paramref
        /// cref="AppendRecordsRequest.table_name" />). The field map
        /// (specified by <paramref cref="AppendRecordsRequest.field_map" />)
        /// holds the user specified map of target table column names with
        /// their mapped source column names.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AppendRecordsResponse appendRecords( AppendRecordsRequest request_ )
        {
            AppendRecordsResponse actualResponse_ = SubmitRequest<AppendRecordsResponse>("/append/records", request_, false);

            return actualResponse_;
        }


        /// <summary>Append (or insert) all records from a source table
        /// (specified by <paramref name="source_table_name" />) to a
        /// particular target table (specified by <paramref name="table_name"
        /// />). The field map (specified by <paramref name="field_map" />)
        /// holds the user specified map of target table column names with
        /// their mapped source column names.</summary>
        /// 
        /// <param name="table_name">The table name for the records to be
        /// appended. Must be an existing table.  </param>
        /// <param name="source_table_name">The source table name to get
        /// records from. Must be an existing table name.  </param>
        /// <param name="field_map">Contains the mapping of column names from
        /// the target table (specified by <paramref
        /// cref="AppendRecordsRequest.table_name" />) as the keys, and
        /// corresponding column names from the source table (specified by
        /// <paramref cref="AppendRecordsRequest.source_table_name" />). Must
        /// be existing column names in source table and target table, and
        /// their types must be matched.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AppendRecordsRequest.Options.OFFSET">OFFSET</see>:</term>
        ///         <description>A positive integer indicating the number of
        /// initial results to skip from source table (specified by <paramref
        /// cref="AppendRecordsRequest.source_table_name" />). Default is 0.
        /// The minimum allowed value is 0. The maximum allowed value is
        /// MAX_INT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AppendRecordsRequest.Options.LIMIT">LIMIT</see>:</term>
        ///         <description>A positive integer indicating the maximum
        /// number of results to be returned from source table (specified by
        /// <paramref cref="AppendRecordsRequest.source_table_name" />). Or
        /// END_OF_SET (-9999) to indicate that the max number of results
        /// should be returned. Default value is END_OF_SET
        /// (-9999).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AppendRecordsRequest.Options.EXPRESSION">EXPRESSION</see>:</term>
        ///         <description>Optional filter expression to apply to the
        /// source table (specified by <paramref
        /// cref="AppendRecordsRequest.source_table_name" />). Empty by
        /// default.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AppendRecordsRequest.Options.ORDER_BY">ORDER_BY</see>:</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted from source table (specified by <paramref
        /// cref="AppendRecordsRequest.source_table_name" />) by; e.g.
        /// 'timestamp asc, x desc'.  The columns specified must be present in
        /// <paramref cref="AppendRecordsRequest.field_map" />.  If any alias
        /// is given for any column name, the alias must be used, rather than
        /// the original column name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AppendRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting the source table records (specified by <paramref
        /// cref="AppendRecordsRequest.source_table_name" />) into the target
        /// table (specified by <paramref
        /// cref="AppendRecordsRequest.table_name" />) table with a <a
        /// href="../../../../concepts/tables.html#primary-keys"
        /// target="_top">primary key</a>.  If set to <i>true</i>, any existing
        /// target table record with primary key values that match those of a
        /// source table record being inserted will be replaced by that new
        /// record.  If set to <i>false</i>, any existing target table record
        /// with primary key values that match those of a source table record
        /// being inserted will remain unchanged and the new record discarded.
        /// If the specified table does not have a primary key, then this
        /// option is ignored.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="AppendRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="AppendRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AppendRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AppendRecordsResponse appendRecords( string table_name,
                                                    string source_table_name,
                                                    IDictionary<string, string> field_map,
                                                    IDictionary<string, string> options = null )
        {
            return appendRecords( new AppendRecordsRequest( table_name, source_table_name,
                                                            field_map, options ) );
        }


        /// <summary>Clears (drops) one or all tables in the database cluster.
        /// The operation is synchronous meaning that the table will be cleared
        /// before the function returns. The response payload returns the
        /// status of the operation along with the name of the table that was
        /// cleared.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ClearTableResponse clearTable( ClearTableRequest request_ )
        {
            ClearTableResponse actualResponse_ = SubmitRequest<ClearTableResponse>("/clear/table", request_, false);

            return actualResponse_;
        }


        /// <summary>Clears (drops) one or all tables in the database cluster.
        /// The operation is synchronous meaning that the table will be cleared
        /// before the function returns. The response payload returns the
        /// status of the operation along with the name of the table that was
        /// cleared.</summary>
        /// 
        /// <param name="table_name">Name of the table to be cleared. Must be
        /// an existing table. Empty string clears all available tables.
        /// </param>
        /// <param name="authorization">No longer used. User can pass an empty
        /// string.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ClearTableRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>true</i> and if the table specified in
        /// <paramref cref="ClearTableRequest.table_name" /> does not exist no
        /// error is returned. If <i>false</i> and if the table specified in
        /// <paramref cref="ClearTableRequest.table_name" /> does not exist
        /// then an error is returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ClearTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ClearTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ClearTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ClearTableResponse clearTable( string table_name = "",
                                              string authorization = "",
                                              IDictionary<string, string> options = null )
        {
            return clearTable( new ClearTableRequest( table_name, authorization, options ) );
        }


        /// <summary>Deactivates a table monitor previously created with <see
        /// cref="Kinetica.createTableMonitor(string,IDictionary{string, string})"
        /// />.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ClearTableMonitorResponse clearTableMonitor( ClearTableMonitorRequest request_ )
        {
            ClearTableMonitorResponse actualResponse_ = SubmitRequest<ClearTableMonitorResponse>("/clear/tablemonitor", request_, false);

            return actualResponse_;
        }


        /// <summary>Deactivates a table monitor previously created with <see
        /// cref="Kinetica.createTableMonitor(string,IDictionary{string, string})"
        /// />.</summary>
        /// 
        /// <param name="topic_id">The topic ID returned by
        /// /create/tablemonitor.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ClearTableMonitorResponse clearTableMonitor( string topic_id,
                                                            IDictionary<string, string> options = null )
        {
            return clearTableMonitor( new ClearTableMonitorRequest( topic_id, options ) );
        }


        /// <summary>Clears or cancels the trigger identified by the specified
        /// handle. The output returns the handle of the trigger cleared as
        /// well as indicating success or failure of the trigger
        /// deactivation.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ClearTriggerResponse clearTrigger( ClearTriggerRequest request_ )
        {
            ClearTriggerResponse actualResponse_ = SubmitRequest<ClearTriggerResponse>("/clear/trigger", request_, false);

            return actualResponse_;
        }


        /// <summary>Clears or cancels the trigger identified by the specified
        /// handle. The output returns the handle of the trigger cleared as
        /// well as indicating success or failure of the trigger
        /// deactivation.</summary>
        /// 
        /// <param name="trigger_id">ID for the trigger to be deactivated.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ClearTriggerResponse clearTrigger( string trigger_id,
                                                  IDictionary<string, string> options = null )
        {
            return clearTrigger( new ClearTriggerRequest( trigger_id, options ) );
        }


        /// <summary>Creates a table that is the result of a SQL JOIN.  For
        /// details see: <a href="../../../../concepts/joins.html"
        /// target="_top">join concept documentation</a>.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateJoinTableResponse createJoinTable( CreateJoinTableRequest request_ )
        {
            CreateJoinTableResponse actualResponse_ = SubmitRequest<CreateJoinTableResponse>("/create/jointable", request_, false);

            return actualResponse_;
        }


        /// <summary>Creates a table that is the result of a SQL JOIN.  For
        /// details see: <a href="../../../../concepts/joins.html"
        /// target="_top">join concept documentation</a>.</summary>
        /// 
        /// <param name="join_table_name">Name of the join table to be created.
        /// Has the same naming restrictions as <a
        /// href="../../../../concepts/tables.html" target="_top">tables</a>.
        /// </param>
        /// <param name="table_names">The list of table names composing the
        /// join.  Corresponds to a SQL statement FROM clause  </param>
        /// <param name="column_names">List of member table columns or column
        /// expressions to be included in the join. Columns can be prefixed
        /// with 'table_id.column_name', where 'table_id' is the table name or
        /// alias.  Columns can be aliased via the syntax 'column_name as
        /// alias'. Wild cards '*' can be used to include all columns across
        /// member tables or 'table_id.*' for all of a single table's columns.
        /// Columns and column expressions comprising the join must be uniquely
        /// named or aliased--therefore, the '*' wild card cannot be used if
        /// column names aren't unique across all tables.  </param>
        /// <param name="expressions">An optional list of expressions to
        /// combine and filter the joined tables.  Corresponds to a SQL
        /// statement WHERE clause. For details see: <a
        /// href="../../../../concepts/expressions.html"
        /// target="_top">expressions</a>.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// join. If the collection provided is non-existent, the collection
        /// will be automatically created. If empty, then the join will be at
        /// the top level.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.MAX_QUERY_DIMENSIONS">MAX_QUERY_DIMENSIONS</see>:</term>
        ///         <description>The maximum number of tables in a join that
        /// can be accessed by a query and are not equated by a foreign-key to
        /// primary-key equality predicate</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.OPTIMIZE_LOOKUPS">OPTIMIZE_LOOKUPS</see>:</term>
        ///         <description>Use more memory to speed up the joining of
        /// tables.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateJoinTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>:</term>
        ///         <description>Method by which the join can be refreshed when
        /// the data in underlying member tables have changed.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.MANUAL">MANUAL</see>:</term>
        ///         <description>refresh only occurs when manually requested by
        /// calling this endpoint with refresh option set to <i>refresh</i> or
        /// <i>full_refresh</i></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.ON_QUERY">ON_QUERY</see>:</term>
        ///         <description>incrementally refresh (refresh just those
        /// records added) whenever a new query is issued and new data is
        /// inserted into the base table.  A full refresh of all the records
        /// occurs when a new query is issued and there have been inserts to
        /// any non-base-tables since the last query</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.ON_INSERT">ON_INSERT</see>:</term>
        ///         <description>incrementally refresh (refresh just those
        /// records added) whenever new data is inserted into a base table.  A
        /// full refresh of all the records occurs when a new query is issued
        /// and there have been inserts to any non-base-tables since the last
        /// query</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateJoinTableRequest.Options.MANUAL">MANUAL</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.REFRESH">REFRESH</see>:</term>
        ///         <description>Do a manual refresh of the join if it exists -
        /// throws an error otherwise
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.NO_REFRESH">NO_REFRESH</see>:</term>
        ///         <description>don't refresh</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.REFRESH">REFRESH</see>:</term>
        ///         <description>incrementally refresh (refresh just those
        /// records added) if new data has been inserted into the base table.
        /// A full refresh of all the records occurs if there have been inserts
        /// to any non-base-tables since the last refresh</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.FULL_REFRESH">FULL_REFRESH</see>:</term>
        ///         <description>always refresh even if no new records have
        /// been added.  Only refresh method guaranteed to do a full refresh
        /// (refresh all the records) if a delete or update has occurred since
        /// the last refresh.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateJoinTableRequest.Options.NO_REFRESH">NO_REFRESH</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateJoinTableRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the table specified in
        /// <paramref cref="CreateJoinTableRequest.join_table_name" />. The
        /// value must be the desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateJoinTableResponse createJoinTable( string join_table_name,
                                                        IList<string> table_names = null,
                                                        IList<string> column_names = null,
                                                        IList<string> expressions = null,
                                                        IDictionary<string, string> options = null )
        {
            return createJoinTable( new CreateJoinTableRequest( join_table_name,
                                                                table_names, column_names,
                                                                expressions, options ) );
        }


        /// <summary>Creates an instance (proc) of the user-defined function
        /// (UDF) specified by the given command, options, and files, and makes
        /// it available for execution.  For details on UDFs, see: <a
        /// href="../../../../concepts/udf.html" target="_top">User-Defined
        /// Functions</a></summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateProcResponse createProc( CreateProcRequest request_ )
        {
            CreateProcResponse actualResponse_ = SubmitRequest<CreateProcResponse>("/create/proc", request_, false);

            return actualResponse_;
        }


        /// <summary>Creates an instance (proc) of the user-defined function
        /// (UDF) specified by the given command, options, and files, and makes
        /// it available for execution.  For details on UDFs, see: <a
        /// href="../../../../concepts/udf.html" target="_top">User-Defined
        /// Functions</a></summary>
        /// 
        /// <param name="proc_name">Name of the proc to be created. Must not be
        /// the name of a currently existing proc.  </param>
        /// <param name="execution_mode">The execution mode of the proc.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateProcRequest.ExecutionMode.DISTRIBUTED">DISTRIBUTED</see>:</term>
        ///         <description>Input table data will be divided into data
        /// segments that are distributed across all nodes in the cluster, and
        /// the proc command will be invoked once per data segment in parallel.
        /// Output table data from each invocation will be saved to the same
        /// node as the corresponding input data.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProcRequest.ExecutionMode.NONDISTRIBUTED">NONDISTRIBUTED</see>:</term>
        ///         <description>The proc command will be invoked only once per
        /// execution, and will not have access to any input or output table
        /// data.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateProcRequest.ExecutionMode.DISTRIBUTED">DISTRIBUTED</see>.
        /// </param>
        /// <param name="files">A map of the files that make up the proc. The
        /// keys of the map are file names, and the values are the binary
        /// contents of the files. The file names may include subdirectory
        /// names (e.g. 'subdir/file') but must not resolve to a directory
        /// above the root for the proc.  </param>
        /// <param name="command">The command (excluding arguments) that will
        /// be invoked when the proc is executed. It will be invoked from the
        /// directory containing the proc <paramref
        /// cref="CreateProcRequest.files" /> and may be any command that can
        /// be resolved from that directory. It need not refer to a file
        /// actually in that directory; for example, it could be 'java' if the
        /// proc is a Java application; however, any necessary external
        /// programs must be preinstalled on every database node. If the
        /// command refers to a file in that directory, it must be preceded
        /// with './' as per Linux convention. If not specified, and exactly
        /// one file is provided in <paramref cref="CreateProcRequest.files"
        /// />, that file will be invoked.  </param>
        /// <param name="args">An array of command-line arguments that will be
        /// passed to <paramref cref="CreateProcRequest.command" /> when the
        /// proc is executed.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateProcResponse createProc( string proc_name,
                                              string execution_mode = CreateProcRequest.ExecutionMode.DISTRIBUTED,
                                              IDictionary<string, byte[]> files = null,
                                              string command = "",
                                              IList<string> args = null,
                                              IDictionary<string, string> options = null )
        {
            return createProc( new CreateProcRequest( proc_name, execution_mode, files,
                                                      command, args, options ) );
        }


        /// <summary>Creates a new <a
        /// href="../../../../concepts/projections.html"
        /// target="_top">projection</a> of an existing table. A projection
        /// represents a subset of the columns (potentially including derived
        /// columns) of a table.
        /// <br />
        /// Notes:
        /// <br />
        /// A moving average can be calculated on a given column using the
        /// following syntax in the <paramref
        /// cref="CreateProjectionRequest.column_names" /> parameter:
        /// <br />
        /// 'moving_average(column_name,num_points_before,num_points_after) as
        /// new_column_name'
        /// <br />
        /// For each record in the moving_average function's 'column_name'
        /// parameter, it computes the average over the previous
        /// 'num_points_before' records and the subsequent 'num_points_after'
        /// records.
        /// <br />
        /// Note that moving average relies on <i>order_by</i>, and
        /// <i>order_by</i> requires that all the data being ordered resides on
        /// the same processing node, so it won't make sense to use
        /// <i>order_by</i> without moving average.
        /// <br />
        /// Also, a projection can be created with a different shard key than
        /// the source table.  By specifying <i>shard_key</i>, the projection
        /// will be sharded according to the specified columns, regardless of
        /// how the source table is sharded.  The source table can even be
        /// unsharded or replicated.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateProjectionResponse createProjection( CreateProjectionRequest request_ )
        {
            CreateProjectionResponse actualResponse_ = SubmitRequest<CreateProjectionResponse>("/create/projection", request_, false);

            return actualResponse_;
        }


        /// <summary>Creates a new <a
        /// href="../../../../concepts/projections.html"
        /// target="_top">projection</a> of an existing table. A projection
        /// represents a subset of the columns (potentially including derived
        /// columns) of a table.
        /// <br />
        /// Notes:
        /// <br />
        /// A moving average can be calculated on a given column using the
        /// following syntax in the <paramref name="column_names" /> parameter:
        /// <br />
        /// 'moving_average(column_name,num_points_before,num_points_after) as
        /// new_column_name'
        /// <br />
        /// For each record in the moving_average function's 'column_name'
        /// parameter, it computes the average over the previous
        /// 'num_points_before' records and the subsequent 'num_points_after'
        /// records.
        /// <br />
        /// Note that moving average relies on <i>order_by</i>, and
        /// <i>order_by</i> requires that all the data being ordered resides on
        /// the same processing node, so it won't make sense to use
        /// <i>order_by</i> without moving average.
        /// <br />
        /// Also, a projection can be created with a different shard key than
        /// the source table.  By specifying <i>shard_key</i>, the projection
        /// will be sharded according to the specified columns, regardless of
        /// how the source table is sharded.  The source table can even be
        /// unsharded or replicated.</summary>
        /// 
        /// <param name="table_name">Name of the existing table on which the
        /// projection is to be applied.  </param>
        /// <param name="projection_name">Name of the projection to be created.
        /// Has the same naming restrictions as <a
        /// href="../../../../concepts/tables.html" target="_top">tables</a>.
        /// </param>
        /// <param name="column_names">List of columns from <paramref
        /// cref="CreateProjectionRequest.table_name" /> to be included in the
        /// projection. Can include derived columns. Can be specified as
        /// aliased via the syntax 'column_name as alias'.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a <a
        /// href="../../../../concepts/collections.html"
        /// target="_top">collection</a> to which the projection is to be
        /// assigned as a child. If the collection provided is non-existent,
        /// the collection will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.EXPRESSION">EXPRESSION</see>:</term>
        ///         <description>An optional filter <a
        /// href="../../../../concepts/expressions.html"
        /// target="_top">expression</a> to be applied to the source table
        /// prior to the projection.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.LIMIT">LIMIT</see>:</term>
        ///         <description>The number of records to keep.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.ORDER_BY">ORDER_BY</see>:</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="CreateProjectionRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.MATERIALIZE_ON_GPU">MATERIALIZE_ON_GPU</see>:</term>
        ///         <description>If <i>true</i> then the columns of the
        /// projection will be cached on the GPU.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateProjectionRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>If provided this indicates the chunk size to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the table, view, or collection
        /// specified in <paramref
        /// cref="CreateProjectionRequest.projection_name" />. The value must
        /// be the desired TTL in minutes.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.SHARD_KEY">SHARD_KEY</see>:</term>
        ///         <description>Comma-separated list of the columns to be
        /// sharded on; e.g. 'column1, column2'.  The columns specified must be
        /// present in <paramref cref="CreateProjectionRequest.column_names"
        /// />.  If any alias is given for any column name, the alias must be
        /// used, rather than the original column name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.PERSIST">PERSIST</see>:</term>
        ///         <description>If <i>true</i> then the projection will be
        /// persisted as a regular table (it will not be automatically cleared
        /// unless a <i>ttl</i> is provided, and the table data can be modified
        /// in subsequent operations). If <i>false</i> then the projection will
        /// be a read-only, memory-only temporary table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateProjectionRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateProjectionRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateProjectionResponse createProjection( string table_name,
                                                          string projection_name,
                                                          IList<string> column_names,
                                                          IDictionary<string, string> options = null )
        {
            return createProjection( new CreateProjectionRequest( table_name,
                                                                  projection_name,
                                                                  column_names, options ) );
        }


        /// <summary>Creates a new role.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateRoleResponse createRole( CreateRoleRequest request_ )
        {
            CreateRoleResponse actualResponse_ = SubmitRequest<CreateRoleResponse>("/create/role", request_, false);

            return actualResponse_;
        }


        /// <summary>Creates a new role.</summary>
        /// 
        /// <param name="name">Name of the role to be created. Must contain
        /// only lowercase letters, digits, and underscores, and cannot begin
        /// with a digit. Must not be the same name as an existing user or
        /// role.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateRoleResponse createRole( string name,
                                              IDictionary<string, string> options )
        {
            return createRole( new CreateRoleRequest( name, options ) );
        }


        /// <summary>Creates a new table or collection. If a new table is being
        /// created, the type of the table is given by <paramref
        /// cref="CreateTableRequest.type_id" />, which must the be the ID of a
        /// currently registered type (i.e. one created via <see
        /// cref="Kinetica.createType(string,string,IDictionary{string, IList{string}},IDictionary{string, string})"
        /// />). The table will be created inside a collection if the option
        /// <i>collection_name</i> is specified. If that collection does not
        /// already exist, it will be created.
        /// <br />
        /// To create a new collection, specify the name of the collection in
        /// <paramref cref="CreateTableRequest.table_name" /> and set the
        /// <i>is_collection</i> option to <i>true</i>; <paramref
        /// cref="CreateTableRequest.type_id" /> will be ignored.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTableResponse createTable( CreateTableRequest request_ )
        {
            CreateTableResponse actualResponse_ = SubmitRequest<CreateTableResponse>("/create/table", request_, false);

            return actualResponse_;
        }


        /// <summary>Creates a new table or collection. If a new table is being
        /// created, the type of the table is given by <paramref name="type_id"
        /// />, which must the be the ID of a currently registered type (i.e.
        /// one created via <see
        /// cref="Kinetica.createType(string,string,IDictionary{string, IList{string}},IDictionary{string, string})"
        /// />). The table will be created inside a collection if the option
        /// <i>collection_name</i> is specified. If that collection does not
        /// already exist, it will be created.
        /// <br />
        /// To create a new collection, specify the name of the collection in
        /// <paramref name="table_name" /> and set the <i>is_collection</i>
        /// option to <i>true</i>; <paramref name="type_id" /> will be
        /// ignored.</summary>
        /// 
        /// <param name="table_name">Name of the table to be created. Error for
        /// requests with existing table of the same name and type id may be
        /// suppressed by using the <i>no_error_if_exists</i> option.  See <a
        /// href="../../../../concepts/tables.html" target="_top">Tables</a>
        /// for naming restrictions.  </param>
        /// <param name="type_id">ID of a currently registered type. All
        /// objects added to the newly created table will be of this type.
        /// Ignored if <i>is_collection</i> is <i>true</i>.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:</term>
        ///         <description>If <i>true</i>, prevents an error from
        /// occurring if the table already exists and is of the given type.  If
        /// a table with the same ID but a different type exists, it is still
        /// an error.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created table. If empty, then the newly created table will be
        /// a top-level table. If the collection does not allow duplicate types
        /// and it contains a table of the same type as the given one, then
        /// this table creation request will fail.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.IS_COLLECTION">IS_COLLECTION</see>:</term>
        ///         <description>Indicates whether the new table to be created
        /// will be a collection.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.DISALLOW_HOMOGENEOUS_TABLES">DISALLOW_HOMOGENEOUS_TABLES</see>:</term>
        ///         <description>For a collection, indicates whether the
        /// collection prohibits containment of multiple tables of exactly the
        /// same data type.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>For a table, indicates whether the table is to
        /// be replicated to all the database ranks. This may be necessary when
        /// the table is to be joined with other tables in a query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.FOREIGN_KEYS">FOREIGN_KEYS</see>:</term>
        ///         <description>Semicolon-separated list of foreign key
        /// constraints, of the format 'source_column references
        /// target_table(primary_key_column) [ as <foreign_key_name>
        /// ]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:</term>
        ///         <description>Foreign shard key description of the format:
        /// <fk_foreign_key> references <pk_column_name> from
        /// <pk_table_name>(<pk_primary_key>)</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the table or collection
        /// specified in <paramref cref="CreateTableRequest.table_name" />. The
        /// value must be the desired TTL in minutes.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>If provided this indicates the chunk size to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:</term>
        ///         <description>For a table, indicates whether the table is a
        /// non-persistent, memory-only table that will store the output of a
        /// proc executed with /execute/proc. A result table cannot contain
        /// store_only, text_search, or string columns (char columns are
        /// acceptable), records cannot be inserted into it directly, and it
        /// will not be retained if the server is restarted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTableResponse createTable( string table_name,
                                                string type_id,
                                                IDictionary<string, string> options = null )
        {
            return createTable( new CreateTableRequest( table_name, type_id, options ) );
        }


        /// <summary>Creates a monitor that watches for new records inserted
        /// into a particular table (identified by <paramref
        /// cref="CreateTableMonitorRequest.table_name" />) and forwards copies
        /// to subscribers via ZMQ. After this call completes, subscribe to the
        /// returned <paramref cref="CreateTableMonitorResponse.topic_id" /> on
        /// the ZMQ table monitor port (default 9002). Each time an insert
        /// operation on the table completes, a multipart message is published
        /// for that topic; the first part contains only the topic ID, and each
        /// subsequent part contains one binary-encoded Avro object that was
        /// inserted. The monitor will continue to run (regardless of whether
        /// or not there are any subscribers) until deactivated with <see
        /// cref="Kinetica.clearTableMonitor(string,IDictionary{string, string})"
        /// />.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTableMonitorResponse createTableMonitor( CreateTableMonitorRequest request_ )
        {
            CreateTableMonitorResponse actualResponse_ = SubmitRequest<CreateTableMonitorResponse>("/create/tablemonitor", request_, false);

            return actualResponse_;
        }


        /// <summary>Creates a monitor that watches for new records inserted
        /// into a particular table (identified by <paramref name="table_name"
        /// />) and forwards copies to subscribers via ZMQ. After this call
        /// completes, subscribe to the returned <paramref
        /// cref="CreateTableMonitorResponse.topic_id" /> on the ZMQ table
        /// monitor port (default 9002). Each time an insert operation on the
        /// table completes, a multipart message is published for that topic;
        /// the first part contains only the topic ID, and each subsequent part
        /// contains one binary-encoded Avro object that was inserted. The
        /// monitor will continue to run (regardless of whether or not there
        /// are any subscribers) until deactivated with <see
        /// cref="Kinetica.clearTableMonitor(string,IDictionary{string, string})"
        /// />.</summary>
        /// 
        /// <param name="table_name">Name of the table to monitor. Must not
        /// refer to a collection.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTableMonitorResponse createTableMonitor( string table_name,
                                                              IDictionary<string, string> options = null )
        {
            return createTableMonitor( new CreateTableMonitorRequest( table_name, options ) );
        }


        /// <summary>Sets up an area trigger mechanism for two column_names for
        /// one or more tables. (This function is essentially the
        /// two-dimensional version of <see
        /// cref="Kinetica.createTriggerByRange(string,IList{string},string,double,double,IDictionary{string, string})"
        /// />.) Once the trigger has been activated, any record added to the
        /// listed tables(s) via <see
        /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
        /// /> with the chosen columns' values falling within the specified
        /// region will trip the trigger. All such records will be queued at
        /// the trigger port (by default '9001', but able to be retrieved via
        /// <see
        /// cref="Kinetica.showSystemStatus(IDictionary{string, string})" />)
        /// for any listening client to collect. Active triggers can be
        /// cancelled by using the <see
        /// cref="Kinetica.clearTrigger(string,IDictionary{string, string})"
        /// /> endpoint or by clearing all relevant tables.
        /// <br />
        /// The output returns the trigger handle as well as indicating success
        /// or failure of the trigger activation.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTriggerByAreaResponse createTriggerByArea( CreateTriggerByAreaRequest request_ )
        {
            CreateTriggerByAreaResponse actualResponse_ = SubmitRequest<CreateTriggerByAreaResponse>("/create/trigger/byarea", request_, false);

            return actualResponse_;
        }


        /// <summary>Sets up an area trigger mechanism for two column_names for
        /// one or more tables. (This function is essentially the
        /// two-dimensional version of <see
        /// cref="Kinetica.createTriggerByRange(string,IList{string},string,double,double,IDictionary{string, string})"
        /// />.) Once the trigger has been activated, any record added to the
        /// listed tables(s) via <see
        /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
        /// /> with the chosen columns' values falling within the specified
        /// region will trip the trigger. All such records will be queued at
        /// the trigger port (by default '9001', but able to be retrieved via
        /// <see
        /// cref="Kinetica.showSystemStatus(IDictionary{string, string})" />)
        /// for any listening client to collect. Active triggers can be
        /// cancelled by using the <see
        /// cref="Kinetica.clearTrigger(string,IDictionary{string, string})"
        /// /> endpoint or by clearing all relevant tables.
        /// <br />
        /// The output returns the trigger handle as well as indicating success
        /// or failure of the trigger activation.</summary>
        /// 
        /// <param name="request_id">User-created ID for the trigger. The ID
        /// can be alphanumeric, contain symbols, and must contain at least one
        /// character.  </param>
        /// <param name="table_names">Names of the tables on which the trigger
        /// will be activated and maintained.  </param>
        /// <param name="x_column_name">Name of a numeric column on which the
        /// trigger is activated. Usually 'x' for geospatial data points.
        /// </param>
        /// <param name="x_vector">The respective coordinate values for the
        /// region on which the trigger is activated. This usually translates
        /// to the x-coordinates of a geospatial region.  </param>
        /// <param name="y_column_name">Name of a second numeric column on
        /// which the trigger is activated. Usually 'y' for geospatial data
        /// points.  </param>
        /// <param name="y_vector">The respective coordinate values for the
        /// region on which the trigger is activated. This usually translates
        /// to the y-coordinates of a geospatial region. Must be the same
        /// length as xvals.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTriggerByAreaResponse createTriggerByArea( string request_id,
                                                                IList<string> table_names,
                                                                string x_column_name,
                                                                IList<double> x_vector,
                                                                string y_column_name,
                                                                IList<double> y_vector,
                                                                IDictionary<string, string> options = null )
        {
            return createTriggerByArea( new CreateTriggerByAreaRequest( request_id,
                                                                        table_names,
                                                                        x_column_name,
                                                                        x_vector,
                                                                        y_column_name,
                                                                        y_vector, options ) );
        }


        /// <summary>Sets up a simple range trigger for a column_name for one
        /// or more tables. Once the trigger has been activated, any record
        /// added to the listed tables(s) via <see
        /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
        /// /> with the chosen column_name's value falling within the specified
        /// range will trip the trigger. All such records will be queued at the
        /// trigger port (by default '9001', but able to be retrieved via <see
        /// cref="Kinetica.showSystemStatus(IDictionary{string, string})" />)
        /// for any listening client to collect. Active triggers can be
        /// cancelled by using the <see
        /// cref="Kinetica.clearTrigger(string,IDictionary{string, string})"
        /// /> endpoint or by clearing all relevant tables.
        /// <br />
        /// The output returns the trigger handle as well as indicating success
        /// or failure of the trigger activation.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTriggerByRangeResponse createTriggerByRange( CreateTriggerByRangeRequest request_ )
        {
            CreateTriggerByRangeResponse actualResponse_ = SubmitRequest<CreateTriggerByRangeResponse>("/create/trigger/byrange", request_, false);

            return actualResponse_;
        }


        /// <summary>Sets up a simple range trigger for a column_name for one
        /// or more tables. Once the trigger has been activated, any record
        /// added to the listed tables(s) via <see
        /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})"
        /// /> with the chosen column_name's value falling within the specified
        /// range will trip the trigger. All such records will be queued at the
        /// trigger port (by default '9001', but able to be retrieved via <see
        /// cref="Kinetica.showSystemStatus(IDictionary{string, string})" />)
        /// for any listening client to collect. Active triggers can be
        /// cancelled by using the <see
        /// cref="Kinetica.clearTrigger(string,IDictionary{string, string})"
        /// /> endpoint or by clearing all relevant tables.
        /// <br />
        /// The output returns the trigger handle as well as indicating success
        /// or failure of the trigger activation.</summary>
        /// 
        /// <param name="request_id">User-created ID for the trigger. The ID
        /// can be alphanumeric, contain symbols, and must contain at least one
        /// character.  </param>
        /// <param name="table_names">Tables on which the trigger will be
        /// active.  </param>
        /// <param name="column_name">Name of a numeric column_name on which
        /// the trigger is activated.  </param>
        /// <param name="min">The lower bound (inclusive) for the trigger
        /// range.  </param>
        /// <param name="max">The upper bound (inclusive) for the trigger
        /// range.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTriggerByRangeResponse createTriggerByRange( string request_id,
                                                                  IList<string> table_names,
                                                                  string column_name,
                                                                  double min,
                                                                  double max,
                                                                  IDictionary<string, string> options = null )
        {
            return createTriggerByRange( new CreateTriggerByRangeRequest( request_id,
                                                                          table_names,
                                                                          column_name,
                                                                          min, max,
                                                                          options ) );
        }


        /// <summary>Creates a new type describing the layout or schema of a
        /// table. The type definition is a JSON string describing the fields
        /// (i.e. columns) of the type. Each field consists of a name and a
        /// data type. Supported data types are: double, float, int, long,
        /// string, and bytes. In addition one or more properties can be
        /// specified for each column which customize the memory usage and
        /// query availability of that column.  Note that some properties are
        /// mutually exclusive--i.e. they cannot be specified for any given
        /// column simultaneously.  One example of mutually exclusive
        /// properties are <i>data</i> and <i>store_only</i>.
        /// <br />
        /// To set a *primary key* on one or more columns include the property
        /// 'primary_key' on the desired column_names. If a primary key is
        /// specified, then a uniqueness constraint is enforced, in that only a
        /// single object can exist with a given primary key. When <see
        /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})">inserting</see>
        /// data into a table with a primary key, depending on the parameters
        /// in the request, incoming objects with primary keys that match
        /// existing objects will either overwrite (i.e. update) the existing
        /// object or will be skipped and not added into the set.
        /// <br />
        /// Example of a type definition with some of the parameters::
        /// <br />
        ///         {"type":"record",
        ///         "name":"point",
        ///         "fields":[{"name":"msg_id","type":"string"},
        ///                         {"name":"x","type":"double"},
        ///                         {"name":"y","type":"double"},
        ///                         {"name":"TIMESTAMP","type":"double"},
        ///                         {"name":"source","type":"string"},
        ///                         {"name":"group_id","type":"string"},
        ///                         {"name":"OBJECT_ID","type":"string"}]
        ///         }
        /// <br />
        /// Properties::
        /// <br />
        ///         {"group_id":["store_only"],
        ///         "msg_id":["store_only","text_search"]
        ///         }</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTypeResponse createType( CreateTypeRequest request_ )
        {
            CreateTypeResponse actualResponse_ = SubmitRequest<CreateTypeResponse>("/create/type", request_, false);

            SetDecoderIfMissing( actualResponse_.type_id,
                                 actualResponse_.label,
                                 actualResponse_.type_definition,
                                 actualResponse_.properties );
            return actualResponse_;
        }


        /// <summary>Creates a new type describing the layout or schema of a
        /// table. The type definition is a JSON string describing the fields
        /// (i.e. columns) of the type. Each field consists of a name and a
        /// data type. Supported data types are: double, float, int, long,
        /// string, and bytes. In addition one or more properties can be
        /// specified for each column which customize the memory usage and
        /// query availability of that column.  Note that some properties are
        /// mutually exclusive--i.e. they cannot be specified for any given
        /// column simultaneously.  One example of mutually exclusive
        /// properties are <i>data</i> and <i>store_only</i>.
        /// <br />
        /// To set a *primary key* on one or more columns include the property
        /// 'primary_key' on the desired column_names. If a primary key is
        /// specified, then a uniqueness constraint is enforced, in that only a
        /// single object can exist with a given primary key. When <see
        /// cref="Kinetica.insertRecords{T}(string,IList{T},IDictionary{string, string})">inserting</see>
        /// data into a table with a primary key, depending on the parameters
        /// in the request, incoming objects with primary keys that match
        /// existing objects will either overwrite (i.e. update) the existing
        /// object or will be skipped and not added into the set.
        /// <br />
        /// Example of a type definition with some of the parameters::
        /// <br />
        ///         {"type":"record",
        ///         "name":"point",
        ///         "fields":[{"name":"msg_id","type":"string"},
        ///                         {"name":"x","type":"double"},
        ///                         {"name":"y","type":"double"},
        ///                         {"name":"TIMESTAMP","type":"double"},
        ///                         {"name":"source","type":"string"},
        ///                         {"name":"group_id","type":"string"},
        ///                         {"name":"OBJECT_ID","type":"string"}]
        ///         }
        /// <br />
        /// Properties::
        /// <br />
        ///         {"group_id":["store_only"],
        ///         "msg_id":["store_only","text_search"]
        ///         }</summary>
        /// 
        /// <param name="type_definition">a JSON string describing the columns
        /// of the type to be registered.  </param>
        /// <param name="label">A user-defined description string which can be
        /// used to differentiate between tables and types with otherwise
        /// identical schemas.  </param>
        /// <param name="properties">Each key-value pair specifies the
        /// properties to use for a given column where the key is the column
        /// name.  All keys used must be relevant column names for the given
        /// table.  Specifying any property overrides the default properties
        /// for that column (which is based on the column's data type).
        /// Valid values are:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.DATA">DATA</see>:</term>
        ///         <description>Default property for all numeric and string
        /// type columns; makes the column available for GPU
        /// queries.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.TEXT_SEARCH">TEXT_SEARCH</see>:</term>
        ///         <description>Valid only for 'string' columns. Enables full
        /// text search for string columns. Can be set independently of *data*
        /// and *store_only*.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.STORE_ONLY">STORE_ONLY</see>:</term>
        ///         <description>Persist the column value but do not make it
        /// available to queries (e.g. /filter/bybox)-i.e. it is mutually
        /// exclusive to the 'data' property. Any 'bytes' type column must have
        /// a 'store_only' property. This property reduces system memory
        /// usage.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.DISK_OPTIMIZED">DISK_OPTIMIZED</see>:</term>
        ///         <description>Works in conjunction with the 'data' property
        /// for string columns. This property reduces system disk usage by
        /// disabling reverse string lookups. Queries like /filter,
        /// /filter/bylist, and /filter/byvalue work as usual but
        /// /aggregate/unique, /aggregate/groupby and /get/records/bycolumn are
        /// not allowed on columns with this property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.TIMESTAMP">TIMESTAMP</see>:</term>
        ///         <description>Valid only for 'long' columns. Indicates that
        /// this field represents a timestamp and will be provided in
        /// milliseconds since the Unix epoch: 00:00:00 Jan 1 1970.  Dates
        /// represented by a timestamp must fall between the year 1000 and the
        /// year 2900.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.DECIMAL">DECIMAL</see>:</term>
        ///         <description>Valid only for 'string' columns.  It
        /// represents a SQL type NUMERIC(19, 4) data type.  There can be up to
        /// 15 digits before the decimal point and up to four digits in the
        /// fractional part.  The value can be positive or negative (indicated
        /// by a minus sign at the beginning).  This property is mutually
        /// exclusive with the 'text_search' property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.DATE">DATE</see>:</term>
        ///         <description>Valid only for 'string' columns.  Indicates
        /// that this field represents a date and will be provided in the
        /// format 'YYYY-MM-DD'.  The allowable range is 1000-01-01 through
        /// 2900-01-01.  This property is mutually exclusive with the
        /// *text_search* property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.TIME">TIME</see>:</term>
        ///         <description>Valid only for 'string' columns.  Indicates
        /// that this field represents a time-of-day and will be provided in
        /// the format 'HH:MM:SS.mmm'.  The allowable range is 00:00:00.000
        /// through 23:59:59.999.  This property is mutually exclusive with the
        /// *text_search* property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.DATETIME">DATETIME</see>:</term>
        ///         <description>Valid only for 'string' columns.  Indicates
        /// that this field represents a datetime and will be provided in the
        /// format 'YYYY-MM-DD HH:MM:SS.mmm'.  The allowable range is
        /// 1000-01-01 00:00:00.000 through 2900-01-01 23:59:59.999.  This
        /// property is mutually exclusive with the *text_search*
        /// property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR1">CHAR1</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 1 character. This property cannot
        /// be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR2">CHAR2</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 2 characters. This property cannot
        /// be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR4">CHAR4</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 4 characters. This property cannot
        /// be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR8">CHAR8</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 8 characters. This property cannot
        /// be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR16">CHAR16</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 16 characters. This property cannot
        /// be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR32">CHAR32</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 32 characters. This property cannot
        /// be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR64">CHAR64</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 64 characters. This property cannot
        /// be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR128">CHAR128</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 128 characters. This property
        /// cannot be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.CHAR256">CHAR256</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns. Strings with this
        /// property must be no longer than 256 characters. This property
        /// cannot be combined with *text_search*</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.INT8">INT8</see>:</term>
        ///         <description>This property provides optimized memory and
        /// query performance for int columns. Ints with this property must be
        /// between -128 and +127 (inclusive)</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.INT16">INT16</see>:</term>
        ///         <description>This property provides optimized memory and
        /// query performance for int columns. Ints with this property must be
        /// between -32768 and +32767 (inclusive)</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.IPV4">IPV4</see>:</term>
        ///         <description>This property provides optimized memory, disk
        /// and query performance for string columns representing IPv4
        /// addresses (i.e. 192.168.1.1). Strings with this property must be of
        /// the form: A.B.C.D where A, B, C and D are in the range of
        /// 0-255.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.WKT">WKT</see>:</term>
        ///         <description>Valid only for 'string' and 'bytes' columns.
        /// Indicates that this field contains geospatial geometry objects in
        /// Well-Known Text (WKT) or Well-Known Binary (WKB)
        /// format.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.PRIMARY_KEY">PRIMARY_KEY</see>:</term>
        ///         <description>This property indicates that this column will
        /// be part of (or the entire) primary key.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.SHARD_KEY">SHARD_KEY</see>:</term>
        ///         <description>This property indicates that this column will
        /// be part of (or the entire) shard key.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.NULLABLE">NULLABLE</see>:</term>
        ///         <description>This property indicates that this column is
        /// nullable.  However, setting this property is insufficient for
        /// making the column nullable.  The user must declare the type of the
        /// column as a union between its regular type and 'null' in the avro
        /// schema for the record type in <paramref
        /// cref="CreateTypeRequest.type_definition" />.  For example, if a
        /// column is of type integer and is nullable, then the entry for the
        /// column in the avro schema must be: ['int', 'null'].
        /// The C++, C#, Java, and Python APIs have built-in convenience for
        /// bypassing setting the avro schema by hand.  For those two
        /// languages, one can use this property as usual and not have to worry
        /// about the avro schema for the record.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateTypeRequest.Properties.DICT">DICT</see>:</term>
        ///         <description>This property indicates that this column
        /// should be dictionary encoded. It can only be used in conjunction
        /// with string columns marked with a charN property. This property is
        /// appropriate for columns where the cardinality (the number of unique
        /// values) is expected to be low, and can save a large amount of
        /// memory.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateTypeResponse createType( string type_definition,
                                              string label,
                                              IDictionary<string, IList<string>> properties = null,
                                              IDictionary<string, string> options = null )
        {
            return createType( new CreateTypeRequest( type_definition, label, properties,
                                                      options ) );
        }


        /// <summary>Performs a <a href="../../../../concepts/unions.html"
        /// target="_top">union</a> (concatenation) of one or more existing
        /// tables or views, the results of which are stored in a new view. It
        /// is equivalent to the SQL UNION ALL operator.  Non-charN 'string'
        /// and 'bytes' column types cannot be included in a union, neither can
        /// columns with the property 'store_only'. Though not explicitly
        /// unions, <a href="../../../../concepts/intersect.html"
        /// target="_top">intersect</a> and <a
        /// href="../../../../concepts/except.html" target="_top">except</a>
        /// are also available from this endpoint.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateUnionResponse createUnion( CreateUnionRequest request_ )
        {
            CreateUnionResponse actualResponse_ = SubmitRequest<CreateUnionResponse>("/create/union", request_, false);

            return actualResponse_;
        }


        /// <summary>Performs a <a href="../../../../concepts/unions.html"
        /// target="_top">union</a> (concatenation) of one or more existing
        /// tables or views, the results of which are stored in a new view. It
        /// is equivalent to the SQL UNION ALL operator.  Non-charN 'string'
        /// and 'bytes' column types cannot be included in a union, neither can
        /// columns with the property 'store_only'. Though not explicitly
        /// unions, <a href="../../../../concepts/intersect.html"
        /// target="_top">intersect</a> and <a
        /// href="../../../../concepts/except.html" target="_top">except</a>
        /// are also available from this endpoint.</summary>
        /// 
        /// <param name="table_name">Name of the table to be created. Has the
        /// same naming restrictions as <a
        /// href="../../../../concepts/tables.html" target="_top">tables</a>.
        /// </param>
        /// <param name="table_names">The list of table names making up the
        /// union. Must contain the names of one or more existing tables.
        /// </param>
        /// <param name="input_column_names">The list of columns from each of
        /// the corresponding input tables.  </param>
        /// <param name="output_column_names">The list of names of the columns
        /// to be stored in the union.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// union. If the collection provided is non-existent, the collection
        /// will be automatically created. If empty, then the union will be a
        /// top-level table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.MATERIALIZE_ON_GPU">MATERIALIZE_ON_GPU</see>:</term>
        ///         <description>If 'true' then the columns of the union will
        /// be cached on the GPU.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateUnionRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.MODE">MODE</see>:</term>
        ///         <description>If 'merge_views' then this operation will
        /// merge (i.e. union) the provided views. All 'table_names' must be
        /// views from the same underlying base table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.UNION_ALL">UNION_ALL</see>:</term>
        ///         <description>Retains all rows from the specified
        /// tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.UNION">UNION</see>:</term>
        ///         <description>Retains all unique rows from the specified
        /// tables (synonym for 'union_distinct').</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.UNION_DISTINCT">UNION_DISTINCT</see>:</term>
        ///         <description>Retains all unique rows from the specified
        /// tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.EXCEPT">EXCEPT</see>:</term>
        ///         <description>Retains all unique rows from the first table
        /// that do not appear in the second table (only works on 2
        /// tables).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.INTERSECT">INTERSECT</see>:</term>
        ///         <description>Retains all unique rows that appear in both of
        /// the specified tables (only works on 2 tables).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.MERGE_VIEWS">MERGE_VIEWS</see>:</term>
        ///         <description>Merge two or more views (or views of views) of
        /// the same base data set into a new view. The resulting view would
        /// match the results of a SQL OR operation, e.g., if filter 1 creates
        /// a view using the expression 'x = 10' and filter 2 creates a view
        /// using the expression 'x <= 10', then the merge views operation
        /// creates a new view using the expression 'x = 10 OR x <=
        /// 10'.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateUnionRequest.Options.UNION_ALL">UNION_ALL</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>If provided this indicates the chunk size to
        /// be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the table specified in
        /// <paramref cref="CreateUnionRequest.table_name" />. The value must
        /// be the desired TTL in minutes.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.PERSIST">PERSIST</see>:</term>
        ///         <description>If <i>true</i> then the union will be
        /// persisted as a regular table (it will not be automatically cleared
        /// unless a <i>ttl</i> is provided, and the table data can be modified
        /// in subsequent operations). If <i>false</i> (the default) then the
        /// union will be a read-only, memory-only temporary table.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="CreateUnionRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateUnionRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateUnionResponse createUnion( string table_name,
                                                IList<string> table_names,
                                                IList<IList<string>> input_column_names,
                                                IList<string> output_column_names,
                                                IDictionary<string, string> options = null )
        {
            return createUnion( new CreateUnionRequest( table_name, table_names,
                                                        input_column_names,
                                                        output_column_names, options ) );
        }


        /// <summary>Creates a new external user (a user whose credentials are
        /// managed by an external LDAP).</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateUserExternalResponse createUserExternal( CreateUserExternalRequest request_ )
        {
            CreateUserExternalResponse actualResponse_ = SubmitRequest<CreateUserExternalResponse>("/create/user/external", request_, false);

            return actualResponse_;
        }


        /// <summary>Creates a new external user (a user whose credentials are
        /// managed by an external LDAP).</summary>
        /// 
        /// <param name="name">Name of the user to be created. Must exactly
        /// match the user's name in the external LDAP, prefixed with a @. Must
        /// not be the same name as an existing user.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateUserExternalResponse createUserExternal( string name,
                                                              IDictionary<string, string> options )
        {
            return createUserExternal( new CreateUserExternalRequest( name, options ) );
        }


        /// <summary>Creates a new internal user (a user whose credentials are
        /// managed by the database system).</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateUserInternalResponse createUserInternal( CreateUserInternalRequest request_ )
        {
            CreateUserInternalResponse actualResponse_ = SubmitRequest<CreateUserInternalResponse>("/create/user/internal", request_, false);

            return actualResponse_;
        }


        /// <summary>Creates a new internal user (a user whose credentials are
        /// managed by the database system).</summary>
        /// 
        /// <param name="name">Name of the user to be created. Must contain
        /// only lowercase letters, digits, and underscores, and cannot begin
        /// with a digit. Must not be the same name as an existing user or
        /// role.  </param>
        /// <param name="password">Initial password of the user to be created.
        /// May be an empty string for no password.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public CreateUserInternalResponse createUserInternal( string name,
                                                              string password,
                                                              IDictionary<string, string> options )
        {
            return createUserInternal( new CreateUserInternalRequest( name, password,
                                                                      options ) );
        }


        /// <summary>Deletes a proc. Any currently running instances of the
        /// proc will be killed.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public DeleteProcResponse deleteProc( DeleteProcRequest request_ )
        {
            DeleteProcResponse actualResponse_ = SubmitRequest<DeleteProcResponse>("/delete/proc", request_, false);

            return actualResponse_;
        }


        /// <summary>Deletes a proc. Any currently running instances of the
        /// proc will be killed.</summary>
        /// 
        /// <param name="proc_name">Name of the proc to be deleted. Must be the
        /// name of a currently existing proc.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public DeleteProcResponse deleteProc( string proc_name,
                                              IDictionary<string, string> options = null )
        {
            return deleteProc( new DeleteProcRequest( proc_name, options ) );
        }


        /// <summary>Deletes record(s) matching the provided criteria from the
        /// given table. The record selection criteria can either be one or
        /// more  <paramref cref="DeleteRecordsRequest.expressions" />
        /// (matching multiple records) or a single record identified by
        /// <i>record_id</i> options.  Note that the two selection criteria are
        /// mutually exclusive.  This operation cannot be run on a collection
        /// or a view.  The operation is synchronous meaning that a response
        /// will not be available until the request is completely processed and
        /// all the matching records are deleted.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public DeleteRecordsResponse deleteRecords( DeleteRecordsRequest request_ )
        {
            DeleteRecordsResponse actualResponse_ = SubmitRequest<DeleteRecordsResponse>("/delete/records", request_, false);

            return actualResponse_;
        }


        /// <summary>Deletes record(s) matching the provided criteria from the
        /// given table. The record selection criteria can either be one or
        /// more  <paramref name="expressions" /> (matching multiple records)
        /// or a single record identified by <i>record_id</i> options.  Note
        /// that the two selection criteria are mutually exclusive.  This
        /// operation cannot be run on a collection or a view.  The operation
        /// is synchronous meaning that a response will not be available until
        /// the request is completely processed and all the matching records
        /// are deleted.</summary>
        /// 
        /// <param name="table_name">Name of the table from which to delete
        /// records. The set must be a currently existing table and not a
        /// collection or a view.  </param>
        /// <param name="expressions">A list of the actual predicates, one for
        /// each select; format should follow the guidelines provided /filter.
        /// Specifying one or more <paramref
        /// cref="DeleteRecordsRequest.expressions" /> is mutually exclusive to
        /// specifying <i>record_id</i> in the <paramref
        /// cref="DeleteRecordsRequest.options" />.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="DeleteRecordsRequest.Options.GLOBAL_EXPRESSION">GLOBAL_EXPRESSION</see>:</term>
        ///         <description>An optional global expression to reduce the
        /// search space of the <paramref
        /// cref="DeleteRecordsRequest.expressions" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="DeleteRecordsRequest.Options.RECORD_ID">RECORD_ID</see>:</term>
        ///         <description>A record id identifying a single record,
        /// obtained at the time of /insert/records or by calling
        /// /get/records/fromcollection with the *return_record_ids*
        /// option.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public DeleteRecordsResponse deleteRecords( string table_name,
                                                    IList<string> expressions,
                                                    IDictionary<string, string> options = null )
        {
            return deleteRecords( new DeleteRecordsRequest( table_name, expressions,
                                                            options ) );
        }


        /// <summary>Deletes an existing role.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public DeleteRoleResponse deleteRole( DeleteRoleRequest request_ )
        {
            DeleteRoleResponse actualResponse_ = SubmitRequest<DeleteRoleResponse>("/delete/role", request_, false);

            return actualResponse_;
        }


        /// <summary>Deletes an existing role.</summary>
        /// 
        /// <param name="name">Name of the role to be deleted. Must be an
        /// existing role.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public DeleteRoleResponse deleteRole( string name,
                                              IDictionary<string, string> options )
        {
            return deleteRole( new DeleteRoleRequest( name, options ) );
        }


        /// <summary>Deletes an existing user.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public DeleteUserResponse deleteUser( DeleteUserRequest request_ )
        {
            DeleteUserResponse actualResponse_ = SubmitRequest<DeleteUserResponse>("/delete/user", request_, false);

            return actualResponse_;
        }


        /// <summary>Deletes an existing user.</summary>
        /// 
        /// <param name="name">Name of the user to be deleted. Must be an
        /// existing user.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public DeleteUserResponse deleteUser( string name,
                                              IDictionary<string, string> options )
        {
            return deleteUser( new DeleteUserRequest( name, options ) );
        }


        /// <summary>Executes a proc. This endpoint is asynchronous and does
        /// not wait for the proc to complete before returning.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ExecuteProcResponse executeProc( ExecuteProcRequest request_ )
        {
            ExecuteProcResponse actualResponse_ = SubmitRequest<ExecuteProcResponse>("/execute/proc", request_, false);

            return actualResponse_;
        }


        /// <summary>Executes a proc. This endpoint is asynchronous and does
        /// not wait for the proc to complete before returning.</summary>
        /// 
        /// <param name="proc_name">Name of the proc to execute. Must be the
        /// name of a currently existing proc.  </param>
        /// <param name="_params">A map containing named parameters to pass to
        /// the proc. Each key/value pair specifies the name of a parameter and
        /// its value.  </param>
        /// <param name="bin_params">A map containing named binary parameters
        /// to pass to the proc. Each key/value pair specifies the name of a
        /// parameter and its value.  </param>
        /// <param name="input_table_names">Names of the tables containing data
        /// to be passed to the proc. Each name specified must be the name of a
        /// currently existing table. If no table names are specified, no data
        /// will be passed to the proc.  </param>
        /// <param name="input_column_names">Map of table names from <paramref
        /// cref="ExecuteProcRequest.input_table_names" /> to lists of names of
        /// columns from those tables that will be passed to the proc. Each
        /// column name specified must be the name of an existing column in the
        /// corresponding table. If a table name from <paramref
        /// cref="ExecuteProcRequest.input_table_names" /> is not included, all
        /// columns from that table will be passed to the proc.  </param>
        /// <param name="output_table_names">Names of the tables to which
        /// output data from the proc will be written. If a specified table
        /// does not exist, it will automatically be created with the same
        /// schema as the corresponding table (by order) from <paramref
        /// cref="ExecuteProcRequest.input_table_names" />, excluding any
        /// primary and shard keys. If a specified table is a non-persistent
        /// result table, it must not have primary or shard keys. If no table
        /// names are specified, no output data can be returned from the proc.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.CACHE_INPUT">CACHE_INPUT</see>:</term>
        ///         <description>A comma-delimited list of table names from
        /// <paramref cref="ExecuteProcRequest.input_table_names" /> from which
        /// input data will be cached for use in subsequent calls to
        /// /execute/proc with the <i>use_cached_input</i> option. Cached input
        /// data will be retained until the proc status is cleared with the
        /// /show/proc/status option of /show/proc/status and all proc
        /// instances using the cached data have completed.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ExecuteProcRequest.Options.USE_CACHED_INPUT">USE_CACHED_INPUT</see>:</term>
        ///         <description>A comma-delimited list of run IDs (as returned
        /// from prior calls to /execute/proc) of running or completed proc
        /// instances from which input data cached using the <i>cache_input</i>
        /// option will be used. Cached input data will not be used for any
        /// tables specified in <paramref
        /// cref="ExecuteProcRequest.input_table_names" />, but data from all
        /// other tables cached for the specified run IDs will be passed to the
        /// proc. If the same table was cached for multiple specified run IDs,
        /// the cached data from the first run ID specified in the list that
        /// includes that table will be used.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ExecuteProcResponse executeProc( string proc_name,
                                                IDictionary<string, string> _params = null,
                                                IDictionary<string, byte[]> bin_params = null,
                                                IList<string> input_table_names = null,
                                                IDictionary<string, IList<string>> input_column_names = null,
                                                IList<string> output_table_names = null,
                                                IDictionary<string, string> options = null )
        {
            return executeProc( new ExecuteProcRequest( proc_name, _params, bin_params,
                                                        input_table_names,
                                                        input_column_names,
                                                        output_table_names, options ) );
        }


        /// <summary>Filters data based on the specified expression.  The
        /// results are stored in a result set with the given <paramref
        /// cref="FilterRequest.view_name" />.
        /// <br />
        /// For details see <a href="../../../../concepts/expressions.html"
        /// target="_top">concepts</a>.
        /// <br />
        /// The response message contains the number of points for which the
        /// expression evaluated to be true, which is equivalent to the size of
        /// the result view.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterResponse filter( FilterRequest request_ )
        {
            FilterResponse actualResponse_ = SubmitRequest<FilterResponse>("/filter", request_, false);

            return actualResponse_;
        }


        /// <summary>Filters data based on the specified expression.  The
        /// results are stored in a result set with the given <paramref
        /// name="view_name" />.
        /// <br />
        /// For details see <a href="../../../../concepts/expressions.html"
        /// target="_top">concepts</a>.
        /// <br />
        /// The response message contains the number of points for which the
        /// expression evaluated to be true, which is equivalent to the size of
        /// the result view.</summary>
        /// 
        /// <param name="table_name">Name of the table to filter.  This may be
        /// the ID of a collection, table or a result set (for chaining
        /// queries).  Collections may be filtered only if all tables within
        /// the collection have the same type ID.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="expression">The select expression to filter the
        /// specified table.  For details see <a
        /// href="../../../../concepts/expressions.html"
        /// target="_top">concepts</a>.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created view, otherwise the view will be a top-level table.
        /// If the collection does not allow duplicate types and it contains a
        /// table of the same type as the given one, then this table creation
        /// request will fail.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the view specified in
        /// <paramref cref="FilterRequest.view_name" />. The value must be the
        /// desired TTL in minutes.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterResponse filter( string table_name,
                                      string view_name,
                                      string expression,
                                      IDictionary<string, string> options = null )
        {
            return filter( new FilterRequest( table_name, view_name, expression, options ) );
        }


        /// <summary>Calculates which objects from a table are within a named
        /// area of interest (NAI/polygon). The operation is synchronous,
        /// meaning that a response will not be returned until all the matching
        /// objects are fully available. The response payload provides the
        /// count of the resulting set. A new resultant set (view) which
        /// satisfies the input NAI restriction specification is created with
        /// the name <paramref cref="FilterByAreaRequest.view_name" /> passed
        /// in as part of the input.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByAreaResponse filterByArea( FilterByAreaRequest request_ )
        {
            FilterByAreaResponse actualResponse_ = SubmitRequest<FilterByAreaResponse>("/filter/byarea", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which objects from a table are within a named
        /// area of interest (NAI/polygon). The operation is synchronous,
        /// meaning that a response will not be returned until all the matching
        /// objects are fully available. The response payload provides the
        /// count of the resulting set. A new resultant set (view) which
        /// satisfies the input NAI restriction specification is created with
        /// the name <paramref name="view_name" /> passed in as part of the
        /// input.</summary>
        /// 
        /// <param name="table_name">Name of the table to filter.  This may be
        /// the name of a collection, a table or a view (when chaining
        /// queries).  Collections may be filtered only if all tables within
        /// the collection have the same type ID.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="x_column_name">Name of the column containing the x
        /// values to be filtered.  </param>
        /// <param name="x_vector">List of x coordinates of the vertices of the
        /// polygon representing the area to be filtered.  </param>
        /// <param name="y_column_name">Name of the column containing the y
        /// values to be filtered.  </param>
        /// <param name="y_vector">List of y coordinates of the vertices of the
        /// polygon representing the area to be filtered.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByAreaResponse filterByArea( string table_name,
                                                  string view_name,
                                                  string x_column_name,
                                                  IList<double> x_vector,
                                                  string y_column_name,
                                                  IList<double> y_vector,
                                                  IDictionary<string, string> options = null )
        {
            return filterByArea( new FilterByAreaRequest( table_name, view_name,
                                                          x_column_name, x_vector,
                                                          y_column_name, y_vector, options ) );
        }


        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a named area of interest (NAI/polygon). The operation is
        /// synchronous, meaning that a response will not be returned until all
        /// the matching objects are fully available. The response payload
        /// provides the count of the resulting set. A new resultant set (view)
        /// which satisfies the input NAI restriction specification is created
        /// with the name <paramref
        /// cref="FilterByAreaGeometryRequest.view_name" /> passed in as part
        /// of the input.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByAreaGeometryResponse filterByAreaGeometry( FilterByAreaGeometryRequest request_ )
        {
            FilterByAreaGeometryResponse actualResponse_ = SubmitRequest<FilterByAreaGeometryResponse>("/filter/byarea/geometry", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a named area of interest (NAI/polygon). The operation is
        /// synchronous, meaning that a response will not be returned until all
        /// the matching objects are fully available. The response payload
        /// provides the count of the resulting set. A new resultant set (view)
        /// which satisfies the input NAI restriction specification is created
        /// with the name <paramref name="view_name" /> passed in as part of
        /// the input.</summary>
        /// 
        /// <param name="table_name">Name of the table to filter.  This may be
        /// the name of a collection, a table or a view (when chaining
        /// queries).  Collections may be filtered only if all tables within
        /// the collection have the same type ID.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Must not be an already existing
        /// collection, table or view.  </param>
        /// <param name="column_name">Name of the geospatial geometry column to
        /// be filtered.  </param>
        /// <param name="x_vector">List of x coordinates of the vertices of the
        /// polygon representing the area to be filtered.  </param>
        /// <param name="y_vector">List of y coordinates of the vertices of the
        /// polygon representing the area to be filtered.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByAreaGeometryResponse filterByAreaGeometry( string table_name,
                                                                  string view_name,
                                                                  string column_name,
                                                                  IList<double> x_vector,
                                                                  IList<double> y_vector,
                                                                  IDictionary<string, string> options = null )
        {
            return filterByAreaGeometry( new FilterByAreaGeometryRequest( table_name,
                                                                          view_name,
                                                                          column_name,
                                                                          x_vector,
                                                                          y_vector,
                                                                          options ) );
        }


        /// <summary>Calculates how many objects within the given table lie in
        /// a rectangular box. The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set which satisfies the input NAI restriction
        /// specification is also created when a <paramref
        /// cref="FilterByBoxRequest.view_name" /> is passed in as part of the
        /// input payload.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByBoxResponse filterByBox( FilterByBoxRequest request_ )
        {
            FilterByBoxResponse actualResponse_ = SubmitRequest<FilterByBoxResponse>("/filter/bybox", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates how many objects within the given table lie in
        /// a rectangular box. The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set which satisfies the input NAI restriction
        /// specification is also created when a <paramref name="view_name" />
        /// is passed in as part of the input payload.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the bounding
        /// box operation will be performed. Must be an existing table.
        /// </param>
        /// <param name="view_name">Optional name of the result view that will
        /// be created containing the results of the query. Has the same naming
        /// restrictions as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="x_column_name">Name of the column on which to perform
        /// the bounding box query. Must be a valid numeric column.  </param>
        /// <param name="min_x">Lower bound for the column chosen by <paramref
        /// cref="FilterByBoxRequest.x_column_name" />.  Must be less than or
        /// equal to <paramref cref="FilterByBoxRequest.max_x" />.  </param>
        /// <param name="max_x">Upper bound for <paramref
        /// cref="FilterByBoxRequest.x_column_name" />.  Must be greater than
        /// or equal to <paramref cref="FilterByBoxRequest.min_x" />.  </param>
        /// <param name="y_column_name">Name of a column on which to perform
        /// the bounding box query. Must be a valid numeric column.  </param>
        /// <param name="min_y">Lower bound for <paramref
        /// cref="FilterByBoxRequest.y_column_name" />. Must be less than or
        /// equal to <paramref cref="FilterByBoxRequest.max_y" />.  </param>
        /// <param name="max_y">Upper bound for <paramref
        /// cref="FilterByBoxRequest.y_column_name" />. Must be greater than or
        /// equal to <paramref cref="FilterByBoxRequest.min_y" />.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByBoxResponse filterByBox( string table_name,
                                                string view_name,
                                                string x_column_name,
                                                double min_x,
                                                double max_x,
                                                string y_column_name,
                                                double min_y,
                                                double max_y,
                                                IDictionary<string, string> options = null )
        {
            return filterByBox( new FilterByBoxRequest( table_name, view_name,
                                                        x_column_name, min_x, max_x,
                                                        y_column_name, min_y, max_y,
                                                        options ) );
        }


        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a rectangular box. The operation is synchronous, meaning
        /// that a response will not be returned until all the objects are
        /// fully available. The response payload provides the count of the
        /// resulting set. A new resultant set which satisfies the input NAI
        /// restriction specification is also created when a <paramref
        /// cref="FilterByBoxGeometryRequest.view_name" /> is passed in as part
        /// of the input payload.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByBoxGeometryResponse filterByBoxGeometry( FilterByBoxGeometryRequest request_ )
        {
            FilterByBoxGeometryResponse actualResponse_ = SubmitRequest<FilterByBoxGeometryResponse>("/filter/bybox/geometry", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a rectangular box. The operation is synchronous, meaning
        /// that a response will not be returned until all the objects are
        /// fully available. The response payload provides the count of the
        /// resulting set. A new resultant set which satisfies the input NAI
        /// restriction specification is also created when a <paramref
        /// name="view_name" /> is passed in as part of the input
        /// payload.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the bounding
        /// box operation will be performed. Must be an existing table.
        /// </param>
        /// <param name="view_name">Optional name of the result view that will
        /// be created containing the results of the query. Must not be an
        /// already existing collection, table or view.  </param>
        /// <param name="column_name">Name of the geospatial geometry column to
        /// be filtered.  </param>
        /// <param name="min_x">Lower bound for the x-coordinate of the
        /// rectangular box.  Must be less than or equal to <paramref
        /// cref="FilterByBoxGeometryRequest.max_x" />.  </param>
        /// <param name="max_x">Upper bound for the x-coordinate of the
        /// rectangular box.  Must be greater than or equal to <paramref
        /// cref="FilterByBoxGeometryRequest.min_x" />.  </param>
        /// <param name="min_y">Lower bound for the y-coordinate of the
        /// rectangular box. Must be less than or equal to <paramref
        /// cref="FilterByBoxGeometryRequest.max_y" />.  </param>
        /// <param name="max_y">Upper bound for the y-coordinate of the
        /// rectangular box. Must be greater than or equal to <paramref
        /// cref="FilterByBoxGeometryRequest.min_y" />.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByBoxGeometryResponse filterByBoxGeometry( string table_name,
                                                                string view_name,
                                                                string column_name,
                                                                double min_x,
                                                                double max_x,
                                                                double min_y,
                                                                double max_y,
                                                                IDictionary<string, string> options = null )
        {
            return filterByBoxGeometry( new FilterByBoxGeometryRequest( table_name,
                                                                        view_name,
                                                                        column_name,
                                                                        min_x, max_x,
                                                                        min_y, max_y,
                                                                        options ) );
        }


        /// <summary>Applies a geometry filter against a geospatial geometry
        /// column in a given table, collection or view. The filtering geometry
        /// is provided by <paramref cref="FilterByGeometryRequest.input_wkt"
        /// />.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByGeometryResponse filterByGeometry( FilterByGeometryRequest request_ )
        {
            FilterByGeometryResponse actualResponse_ = SubmitRequest<FilterByGeometryResponse>("/filter/bygeometry", request_, false);

            return actualResponse_;
        }


        /// <summary>Applies a geometry filter against a geospatial geometry
        /// column in a given table, collection or view. The filtering geometry
        /// is provided by <paramref name="input_wkt" />.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the filter by
        /// geometry will be performed.  Must be an existing table, collection
        /// or view containing a geospatial geometry column.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="column_name">Name of the column to be used in the
        /// filter. Must be a geospatial geometry column.  </param>
        /// <param name="input_wkt">A geometry in WKT format that will be used
        /// to filter the objects in <paramref
        /// cref="FilterByGeometryRequest.table_name" />.  </param>
        /// <param name="operation">The geometric filtering operation to
        /// perform
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByGeometryRequest.Operation.CONTAINS">CONTAINS</see>:</term>
        ///         <description>Matches records that contain the given WKT in
        /// <paramref cref="FilterByGeometryRequest.input_wkt" />, i.e. the
        /// given WKT is within the bounds of a record's
        /// geometry.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByGeometryRequest.Operation.CROSSES">CROSSES</see>:</term>
        ///         <description>Matches records that cross the given
        /// WKT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByGeometryRequest.Operation.DISJOINT">DISJOINT</see>:</term>
        ///         <description>Matches records that are disjoint from the
        /// given WKT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByGeometryRequest.Operation.EQUALS">EQUALS</see>:</term>
        ///         <description>Matches records that are the same as the given
        /// WKT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByGeometryRequest.Operation.INTERSECTS">INTERSECTS</see>:</term>
        ///         <description>Matches records that intersect the given
        /// WKT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByGeometryRequest.Operation.OVERLAPS">OVERLAPS</see>:</term>
        ///         <description>Matches records that overlap the given
        /// WKT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByGeometryRequest.Operation.TOUCHES">TOUCHES</see>:</term>
        ///         <description>Matches records that touch the given
        /// WKT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByGeometryRequest.Operation.WITHIN">WITHIN</see>:</term>
        ///         <description>Matches records that are within the given
        /// WKT.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByGeometryResponse filterByGeometry( string table_name,
                                                          string view_name,
                                                          string column_name,
                                                          string input_wkt,
                                                          string operation,
                                                          IDictionary<string, string> options = null )
        {
            return filterByGeometry( new FilterByGeometryRequest( table_name, view_name,
                                                                  column_name, input_wkt,
                                                                  operation, options ) );
        }


        /// <summary>Calculates which records from a table have values in the
        /// given list for the corresponding column. The operation is
        /// synchronous, meaning that a response will not be returned until all
        /// the objects are fully available. The response payload provides the
        /// count of the resulting set. A new resultant set (view) which
        /// satisfies the input filter specification is also created if a
        /// <paramref cref="FilterByListRequest.view_name" /> is passed in as
        /// part of the request.
        /// <br />
        /// For example, if a type definition has the columns 'x' and 'y', then
        /// a filter by list query with the column map {"x":["10.1", "2.3"],
        /// "y":["0.0", "-31.5", "42.0"]} will return the count of all data
        /// points whose x and y values match both in the respective x- and
        /// y-lists, e.g., "x = 10.1 and y = 0.0", "x = 2.3 and y = -31.5",
        /// etc. However, a record with "x = 10.1 and y = -31.5" or "x = 2.3
        /// and y = 0.0" would not be returned because the values in the given
        /// lists do not correspond.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByListResponse filterByList( FilterByListRequest request_ )
        {
            FilterByListResponse actualResponse_ = SubmitRequest<FilterByListResponse>("/filter/bylist", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which records from a table have values in the
        /// given list for the corresponding column. The operation is
        /// synchronous, meaning that a response will not be returned until all
        /// the objects are fully available. The response payload provides the
        /// count of the resulting set. A new resultant set (view) which
        /// satisfies the input filter specification is also created if a
        /// <paramref name="view_name" /> is passed in as part of the request.
        /// <br />
        /// For example, if a type definition has the columns 'x' and 'y', then
        /// a filter by list query with the column map {"x":["10.1", "2.3"],
        /// "y":["0.0", "-31.5", "42.0"]} will return the count of all data
        /// points whose x and y values match both in the respective x- and
        /// y-lists, e.g., "x = 10.1 and y = 0.0", "x = 2.3 and y = -31.5",
        /// etc. However, a record with "x = 10.1 and y = -31.5" or "x = 2.3
        /// and y = 0.0" would not be returned because the values in the given
        /// lists do not correspond.</summary>
        /// 
        /// <param name="table_name">Name of the table to filter.  This may be
        /// the ID of a collection, table or a result set (for chaining
        /// queries).  Collections may be filtered only if all tables within
        /// the collection have the same type ID.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="column_values_map">List of values for the
        /// corresponding column in the table  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByListRequest.Options.FILTER_MODE">FILTER_MODE</see>:</term>
        ///         <description>String indicating the filter mode, either
        /// 'in_list' or 'not_in_list'.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByListRequest.Options.IN_LIST">IN_LIST</see>:</term>
        ///         <description>The filter will match all items that are in
        /// the provided list(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByListRequest.Options.NOT_IN_LIST">NOT_IN_LIST</see>:</term>
        ///         <description>The filter will match all items that are not
        /// in the provided list(s).</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="FilterByListRequest.Options.IN_LIST">IN_LIST</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByListResponse filterByList( string table_name,
                                                  string view_name,
                                                  IDictionary<string, IList<string>> column_values_map,
                                                  IDictionary<string, string> options = null )
        {
            return filterByList( new FilterByListRequest( table_name, view_name,
                                                          column_values_map, options ) );
        }


        /// <summary>Calculates which objects from a table lie within a circle
        /// with the given radius and center point (i.e. circular NAI). The
        /// operation is synchronous, meaning that a response will not be
        /// returned until all the objects are fully available. The response
        /// payload provides the count of the resulting set. A new resultant
        /// set (view) which satisfies the input circular NAI restriction
        /// specification is also created if a <paramref
        /// cref="FilterByRadiusRequest.view_name" /> is passed in as part of
        /// the request.
        /// <br />
        /// For track data, all track points that lie within the circle plus
        /// one point on either side of the circle (if the track goes beyond
        /// the circle) will be included in the result.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByRadiusResponse filterByRadius( FilterByRadiusRequest request_ )
        {
            FilterByRadiusResponse actualResponse_ = SubmitRequest<FilterByRadiusResponse>("/filter/byradius", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which objects from a table lie within a circle
        /// with the given radius and center point (i.e. circular NAI). The
        /// operation is synchronous, meaning that a response will not be
        /// returned until all the objects are fully available. The response
        /// payload provides the count of the resulting set. A new resultant
        /// set (view) which satisfies the input circular NAI restriction
        /// specification is also created if a <paramref name="view_name" /> is
        /// passed in as part of the request.
        /// <br />
        /// For track data, all track points that lie within the circle plus
        /// one point on either side of the circle (if the track goes beyond
        /// the circle) will be included in the result.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the filter by
        /// radius operation will be performed.  Must be an existing table.
        /// </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="x_column_name">Name of the column to be used for the
        /// x-coordinate (the longitude) of the center.  </param>
        /// <param name="x_center">Value of the longitude of the center. Must
        /// be within [-180.0, 180.0].  The minimum allowed value is -180. The
        /// maximum allowed value is 180. </param>
        /// <param name="y_column_name">Name of the column to be used for the
        /// y-coordinate-the latitude-of the center.  </param>
        /// <param name="y_center">Value of the latitude of the center. Must be
        /// within [-90.0, 90.0].  The minimum allowed value is -90. The
        /// maximum allowed value is 90. </param>
        /// <param name="radius">The radius of the circle within which the
        /// search will be performed. Must be a non-zero positive value. It is
        /// in meters; so, for example, a value of '42000' means 42 km.  The
        /// minimum allowed value is 0. The maximum allowed value is MAX_INT.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByRadiusResponse filterByRadius( string table_name,
                                                      string view_name,
                                                      string x_column_name,
                                                      double x_center,
                                                      string y_column_name,
                                                      double y_center,
                                                      double radius,
                                                      IDictionary<string, string> options = null )
        {
            return filterByRadius( new FilterByRadiusRequest( table_name, view_name,
                                                              x_column_name, x_center,
                                                              y_column_name, y_center,
                                                              radius, options ) );
        }


        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a circle with the given radius and center point (i.e.
        /// circular NAI). The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set (view) which satisfies the input circular
        /// NAI restriction specification is also created if a <paramref
        /// cref="FilterByRadiusGeometryRequest.view_name" /> is passed in as
        /// part of the request.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByRadiusGeometryResponse filterByRadiusGeometry( FilterByRadiusGeometryRequest request_ )
        {
            FilterByRadiusGeometryResponse actualResponse_ = SubmitRequest<FilterByRadiusGeometryResponse>("/filter/byradius/geometry", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a circle with the given radius and center point (i.e.
        /// circular NAI). The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set (view) which satisfies the input circular
        /// NAI restriction specification is also created if a <paramref
        /// name="view_name" /> is passed in as part of the request.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the filter by
        /// radius operation will be performed.  Must be an existing table.
        /// </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Must not be an already existing
        /// collection, table or view.  </param>
        /// <param name="column_name">Name of the geospatial geometry column to
        /// be filtered.  </param>
        /// <param name="x_center">Value of the longitude of the center. Must
        /// be within [-180.0, 180.0].  The minimum allowed value is -180. The
        /// maximum allowed value is 180. </param>
        /// <param name="y_center">Value of the latitude of the center. Must be
        /// within [-90.0, 90.0].  The minimum allowed value is -90. The
        /// maximum allowed value is 90. </param>
        /// <param name="radius">The radius of the circle within which the
        /// search will be performed. Must be a non-zero positive value. It is
        /// in meters; so, for example, a value of '42000' means 42 km.  The
        /// minimum allowed value is 0. The maximum allowed value is MAX_INT.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByRadiusGeometryResponse filterByRadiusGeometry( string table_name,
                                                                      string view_name,
                                                                      string column_name,
                                                                      double x_center,
                                                                      double y_center,
                                                                      double radius,
                                                                      IDictionary<string, string> options = null )
        {
            return filterByRadiusGeometry( new FilterByRadiusGeometryRequest( table_name,
                                                                              view_name,
                                                                              column_name,
                                                                              x_center,
                                                                              y_center,
                                                                              radius,
                                                                              options ) );
        }


        /// <summary>Calculates which objects from a table have a column that
        /// is within the given bounds. An object from the table identified by
        /// <paramref cref="FilterByRangeRequest.table_name" /> is added to the
        /// view <paramref cref="FilterByRangeRequest.view_name" /> if its
        /// column is within [<paramref cref="FilterByRangeRequest.lower_bound"
        /// />, <paramref cref="FilterByRangeRequest.upper_bound" />]
        /// (inclusive). The operation is synchronous. The response provides a
        /// count of the number of objects which passed the bound filter.
        /// Although this functionality can also be accomplished with the
        /// standard filter function, it is more efficient.
        /// <br />
        /// For track objects, the count reflects how many points fall within
        /// the given bounds (which may not include all the track points of any
        /// given track).</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByRangeResponse filterByRange( FilterByRangeRequest request_ )
        {
            FilterByRangeResponse actualResponse_ = SubmitRequest<FilterByRangeResponse>("/filter/byrange", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which objects from a table have a column that
        /// is within the given bounds. An object from the table identified by
        /// <paramref name="table_name" /> is added to the view <paramref
        /// name="view_name" /> if its column is within [<paramref
        /// name="lower_bound" />, <paramref name="upper_bound" />]
        /// (inclusive). The operation is synchronous. The response provides a
        /// count of the number of objects which passed the bound filter.
        /// Although this functionality can also be accomplished with the
        /// standard filter function, it is more efficient.
        /// <br />
        /// For track objects, the count reflects how many points fall within
        /// the given bounds (which may not include all the track points of any
        /// given track).</summary>
        /// 
        /// <param name="table_name">Name of the table on which the filter by
        /// range operation will be performed.  Must be an existing table.
        /// </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="column_name">Name of a column on which the operation
        /// would be applied.  </param>
        /// <param name="lower_bound">Value of the lower bound (inclusive).
        /// </param>
        /// <param name="upper_bound">Value of the upper bound (inclusive).
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByRangeResponse filterByRange( string table_name,
                                                    string view_name,
                                                    string column_name,
                                                    double lower_bound,
                                                    double upper_bound,
                                                    IDictionary<string, string> options = null )
        {
            return filterByRange( new FilterByRangeRequest( table_name, view_name,
                                                            column_name, lower_bound,
                                                            upper_bound, options ) );
        }


        /// <summary>Filters objects matching all points of the given track
        /// (works only on track type data).  It allows users to specify a
        /// particular track to find all other points in the table that fall
        /// within specified ranges-spatial and temporal-of all points of the
        /// given track. Additionally, the user can specify another track to
        /// see if the two intersect (or go close to each other within the
        /// specified ranges). The user also has the flexibility of using
        /// different metrics for the spatial distance calculation: Euclidean
        /// (flat geometry) or Great Circle (spherical geometry to approximate
        /// the Earth's surface distances). The filtered points are stored in a
        /// newly created result set. The return value of the function is the
        /// number of points in the resultant set (view).
        /// <br />
        /// This operation is synchronous, meaning that a response will not be
        /// returned until all the objects are fully available.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterBySeriesResponse filterBySeries( FilterBySeriesRequest request_ )
        {
            FilterBySeriesResponse actualResponse_ = SubmitRequest<FilterBySeriesResponse>("/filter/byseries", request_, false);

            return actualResponse_;
        }


        /// <summary>Filters objects matching all points of the given track
        /// (works only on track type data).  It allows users to specify a
        /// particular track to find all other points in the table that fall
        /// within specified ranges-spatial and temporal-of all points of the
        /// given track. Additionally, the user can specify another track to
        /// see if the two intersect (or go close to each other within the
        /// specified ranges). The user also has the flexibility of using
        /// different metrics for the spatial distance calculation: Euclidean
        /// (flat geometry) or Great Circle (spherical geometry to approximate
        /// the Earth's surface distances). The filtered points are stored in a
        /// newly created result set. The return value of the function is the
        /// number of points in the resultant set (view).
        /// <br />
        /// This operation is synchronous, meaning that a response will not be
        /// returned until all the objects are fully available.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the filter by
        /// track operation will be performed. Must be a currently existing
        /// table with track semantic type.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="track_id">The ID of the track which will act as the
        /// filtering points. Must be an existing track within the given table.
        /// </param>
        /// <param name="target_track_ids">Up to one track ID to intersect with
        /// the "filter" track. If any provided, it must be an valid track ID
        /// within the given set.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterBySeriesRequest.Options.SPATIAL_RADIUS">SPATIAL_RADIUS</see>:</term>
        ///         <description>A positive number passed as a string
        /// representing the radius of the search area centered around each
        /// track point's geospatial coordinates. The value is interpreted in
        /// meters. Required parameter.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterBySeriesRequest.Options.TIME_RADIUS">TIME_RADIUS</see>:</term>
        ///         <description>A positive number passed as a string
        /// representing the maximum allowable time difference between the
        /// timestamps of a filtered object and the given track's points. The
        /// value is interpreted in seconds. Required parameter.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterBySeriesRequest.Options.SPATIAL_DISTANCE_METRIC">SPATIAL_DISTANCE_METRIC</see>:</term>
        ///         <description>A string representing the coordinate system to
        /// use for the spatial search criteria. Acceptable values are
        /// 'euclidean' and 'great_circle'. Optional parameter; default is
        /// 'euclidean'.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterBySeriesRequest.Options.EUCLIDEAN">EUCLIDEAN</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterBySeriesRequest.Options.GREAT_CIRCLE">GREAT_CIRCLE</see></term>
        ///     </item>
        /// </list></description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterBySeriesResponse filterBySeries( string table_name,
                                                      string view_name,
                                                      string track_id,
                                                      IList<string> target_track_ids,
                                                      IDictionary<string, string> options = null )
        {
            return filterBySeries( new FilterBySeriesRequest( table_name, view_name,
                                                              track_id, target_track_ids,
                                                              options ) );
        }


        /// <summary>Calculates which objects from a table, collection, or view
        /// match a string expression for the given string columns. The options
        /// 'case_sensitive' can be used to modify the behavior for all modes
        /// except 'search'. For 'search' mode details and limitations, see <a
        /// href="../../../../concepts/full_text_search.html"
        /// target="_top">Full Text Search</a>.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByStringResponse filterByString( FilterByStringRequest request_ )
        {
            FilterByStringResponse actualResponse_ = SubmitRequest<FilterByStringResponse>("/filter/bystring", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which objects from a table, collection, or view
        /// match a string expression for the given string columns. The options
        /// 'case_sensitive' can be used to modify the behavior for all modes
        /// except 'search'. For 'search' mode details and limitations, see <a
        /// href="../../../../concepts/full_text_search.html"
        /// target="_top">Full Text Search</a>.</summary>
        /// 
        /// <param name="table_name">Name of the table on which the filter
        /// operation will be performed.  Must be an existing table, collection
        /// or view.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="expression">The expression with which to filter the
        /// table.  </param>
        /// <param name="mode">The string filtering mode to apply. See below
        /// for details.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByStringRequest.Mode.SEARCH">SEARCH</see>:</term>
        ///         <description>Full text search query with wildcards and
        /// boolean operators. Note that for this mode, no column can be
        /// specified in <paramref cref="FilterByStringRequest.column_names"
        /// />; all string columns of the table that have text search enabled
        /// will be searched.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByStringRequest.Mode.EQUALS">EQUALS</see>:</term>
        ///         <description>Exact whole-string match
        /// (accelerated).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByStringRequest.Mode.CONTAINS">CONTAINS</see>:</term>
        ///         <description>Partial substring match (not accelerated).  If
        /// the column is a string type (non-charN) and the number of records
        /// is too large, it will return 0.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByStringRequest.Mode.STARTS_WITH">STARTS_WITH</see>:</term>
        ///         <description>Strings that start with the given expression
        /// (not accelerated). If the column is a string type (non-charN) and
        /// the number of records is too large, it will return 0.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByStringRequest.Mode.REGEX">REGEX</see>:</term>
        ///         <description>Full regular expression search (not
        /// accelerated). If the column is a string type (non-charN) and the
        /// number of records is too large, it will return 0.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="column_names">List of columns on which to apply the
        /// filter. Ignored for 'search' mode.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByStringRequest.Options.CASE_SENSITIVE">CASE_SENSITIVE</see>:</term>
        ///         <description>If 'false' then string filtering will ignore
        /// case. Does not apply to 'search' mode.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByStringRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByStringRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="FilterByStringRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByStringResponse filterByString( string table_name,
                                                      string view_name,
                                                      string expression,
                                                      string mode,
                                                      IList<string> column_names,
                                                      IDictionary<string, string> options = null )
        {
            return filterByString( new FilterByStringRequest( table_name, view_name,
                                                              expression, mode,
                                                              column_names, options ) );
        }


        /// <summary>Filters objects in one table based on objects in another
        /// table. The user must specify matching column types from the two
        /// tables (i.e. the target table from which objects will be filtered
        /// and the source table based on which the filter will be created);
        /// the column names need not be the same. If a <paramref
        /// cref="FilterByTableRequest.view_name" /> is specified, then the
        /// filtered objects will then be put in a newly created view. The
        /// operation is synchronous, meaning that a response will not be
        /// returned until all objects are fully available in the result view.
        /// The return value contains the count (i.e. the size) of the
        /// resulting view.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByTableResponse filterByTable( FilterByTableRequest request_ )
        {
            FilterByTableResponse actualResponse_ = SubmitRequest<FilterByTableResponse>("/filter/bytable", request_, false);

            return actualResponse_;
        }


        /// <summary>Filters objects in one table based on objects in another
        /// table. The user must specify matching column types from the two
        /// tables (i.e. the target table from which objects will be filtered
        /// and the source table based on which the filter will be created);
        /// the column names need not be the same. If a <paramref
        /// name="view_name" /> is specified, then the filtered objects will
        /// then be put in a newly created view. The operation is synchronous,
        /// meaning that a response will not be returned until all objects are
        /// fully available in the result view. The return value contains the
        /// count (i.e. the size) of the resulting view.</summary>
        /// 
        /// <param name="table_name">Name of the table whose data will be
        /// filtered. Must be an existing table.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="column_name">Name of the column by whose value the
        /// data will be filtered from the table designated by <paramref
        /// cref="FilterByTableRequest.table_name" />.  </param>
        /// <param name="source_table_name">Name of the table whose data will
        /// be compared against in the table called <paramref
        /// cref="FilterByTableRequest.table_name" />. Must be an existing
        /// table.  </param>
        /// <param name="source_table_column_name">Name of the column in the
        /// <paramref cref="FilterByTableRequest.source_table_name" /> whose
        /// values will be used as the filter for table <paramref
        /// cref="FilterByTableRequest.table_name" />. Must be a geospatial
        /// geometry column if in 'spatial' mode; otherwise, Must match the
        /// type of the <paramref cref="FilterByTableRequest.column_name" />.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.FILTER_MODE">FILTER_MODE</see>:</term>
        ///         <description>String indicating the filter mode, either
        /// <i>in_table</i> or <i>not_in_table</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.IN_TABLE">IN_TABLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.NOT_IN_TABLE">NOT_IN_TABLE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="FilterByTableRequest.Options.IN_TABLE">IN_TABLE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.MODE">MODE</see>:</term>
        ///         <description>Mode - should be either <i>spatial</i> or
        /// <i>normal</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.NORMAL">NORMAL</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="FilterByTableRequest.Options.NORMAL">NORMAL</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.BUFFER">BUFFER</see>:</term>
        ///         <description>Buffer size, in meters. Only relevant for
        /// <i>spatial</i> mode.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.BUFFER_METHOD">BUFFER_METHOD</see>:</term>
        ///         <description>Method used to buffer polygons.  Only relevant
        /// for <i>spatial</i> mode.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.NORMAL">NORMAL</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.GEOS">GEOS</see>:</term>
        ///         <description>Use geos 1 edge per corner
        /// algorithm</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="FilterByTableRequest.Options.NORMAL">NORMAL</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.MAX_PARTITION_SIZE">MAX_PARTITION_SIZE</see>:</term>
        ///         <description>Maximum number of points in a partition. Only
        /// relevant for <i>spatial</i> mode.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.MAX_PARTITION_SCORE">MAX_PARTITION_SCORE</see>:</term>
        ///         <description>Maximum number of points * edges in a
        /// partition. Only relevant for <i>spatial</i> mode.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.X_COLUMN_NAME">X_COLUMN_NAME</see>:</term>
        ///         <description>Name of column containing x value of point
        /// being filtered in <i>spatial</i> mode.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="FilterByTableRequest.Options.Y_COLUMN_NAME">Y_COLUMN_NAME</see>:</term>
        ///         <description>Name of column containing y value of point
        /// being filtered in <i>spatial</i> mode.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByTableResponse filterByTable( string table_name,
                                                    string view_name,
                                                    string column_name,
                                                    string source_table_name,
                                                    string source_table_column_name,
                                                    IDictionary<string, string> options = null )
        {
            return filterByTable( new FilterByTableRequest( table_name, view_name,
                                                            column_name,
                                                            source_table_name,
                                                            source_table_column_name,
                                                            options ) );
        }


        /// <summary>Calculates which objects from a table has a particular
        /// value for a particular column. The input parameters provide a way
        /// to specify either a String or a Double valued column and a desired
        /// value for the column on which the filter is performed. The
        /// operation is synchronous, meaning that a response will not be
        /// returned until all the objects are fully available. The response
        /// payload provides the count of the resulting set. A new result view
        /// which satisfies the input filter restriction specification is also
        /// created with a view name passed in as part of the input payload.
        /// Although this functionality can also be accomplished with the
        /// standard filter function, it is more efficient.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByValueResponse filterByValue( FilterByValueRequest request_ )
        {
            FilterByValueResponse actualResponse_ = SubmitRequest<FilterByValueResponse>("/filter/byvalue", request_, false);

            return actualResponse_;
        }


        /// <summary>Calculates which objects from a table has a particular
        /// value for a particular column. The input parameters provide a way
        /// to specify either a String or a Double valued column and a desired
        /// value for the column on which the filter is performed. The
        /// operation is synchronous, meaning that a response will not be
        /// returned until all the objects are fully available. The response
        /// payload provides the count of the resulting set. A new result view
        /// which satisfies the input filter restriction specification is also
        /// created with a view name passed in as part of the input payload.
        /// Although this functionality can also be accomplished with the
        /// standard filter function, it is more efficient.</summary>
        /// 
        /// <param name="table_name">Name of an existing table on which to
        /// perform the calculation.  </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results. Has the same naming restrictions
        /// as <a href="../../../../concepts/tables.html"
        /// target="_top">tables</a>.  </param>
        /// <param name="is_string">Indicates whether the value being searched
        /// for is string or numeric.  </param>
        /// <param name="_value">The value to search for.  </param>
        /// <param name="value_str">The string value to search for.  </param>
        /// <param name="column_name">Name of a column on which the filter by
        /// value would be applied.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public FilterByValueResponse filterByValue( string table_name,
                                                    string view_name,
                                                    bool is_string,
                                                    double _value,
                                                    string value_str,
                                                    string column_name,
                                                    IDictionary<string, string> options = null )
        {
            return filterByValue( new FilterByValueRequest( table_name, view_name,
                                                            is_string, _value, value_str,
                                                            column_name, options ) );
        }


        /// <summary>Retrieves records from a given table, optionally filtered
        /// by an expression and/or sorted by a column. This operation can be
        /// performed on tables, views, or on homogeneous collections
        /// (collections containing tables of all the same type). Records can
        /// be returned encoded as binary or json.
        /// <br />
        /// This operation supports paging through the data via the <paramref
        /// cref="GetRecordsRequest.offset" /> and <paramref
        /// cref="GetRecordsRequest.limit" /> parameters. Note that when paging
        /// through a table, if the table (or the underlying table in case of a
        /// view) is updated (records are inserted, deleted or modified) the
        /// records retrieved may differ between calls based on the updates
        /// applied.</summary>
        /// 
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GetRecordsResponse<T> getRecords<T>( GetRecordsRequest request_ ) where T : new()
        {
            RawGetRecordsResponse actualResponse_ = SubmitRequest<RawGetRecordsResponse>("/get/records", request_, false);

            GetRecordsResponse<T> response_ = new GetRecordsResponse<T>();
            response_.table_name = actualResponse_.table_name;
            response_.type_name = actualResponse_.type_name;
            response_.type_schema = actualResponse_.type_schema;
            response_.data = new List<T>();
            this.DecodeRawBinaryDataUsingSchemaString<T>( response_.type_schema, actualResponse_.records_binary, response_.data );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            return response_;
        }


        /// <summary>Retrieves records from a given table, optionally filtered
        /// by an expression and/or sorted by a column. This operation can be
        /// performed on tables, views, or on homogeneous collections
        /// (collections containing tables of all the same type). Records can
        /// be returned encoded as binary or json.
        /// <br />
        /// This operation supports paging through the data via the <paramref
        /// name="offset" /> and <paramref name="limit" /> parameters. Note
        /// that when paging through a table, if the table (or the underlying
        /// table in case of a view) is updated (records are inserted, deleted
        /// or modified) the records retrieved may differ between calls based
        /// on the updates applied.</summary>
        /// 
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        /// 
        /// <param name="table_name">Name of the table from which the records
        /// will be fetched. Must be a table, view or homogeneous collection.
        /// </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned. Or END_OF_SET (-9999) to indicate
        /// that the max number of results should be returned.  </param>
        /// <param name="options">
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsRequest.Options.EXPRESSION">EXPRESSION</see>:</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsRequest.Options.FAST_INDEX_LOOKUP">FAST_INDEX_LOOKUP</see>:</term>
        ///         <description>Indicates if indexes should be used to perform
        /// the lookup for a given expression if possible. Only applicable if
        /// there is no sorting, the expression contains only equivalence
        /// comparisons based on existing tables indexes and the range of
        /// requested values is from [0 to END_OF_SET].
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="GetRecordsRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsRequest.Options.SORT_BY">SORT_BY</see>:</term>
        ///         <description>Optional column that the data should be sorted
        /// by. Empty by default (i.e. no sorting is applied).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsRequest.Options.SORT_ORDER">SORT_ORDER</see>:</term>
        ///         <description>String indicating how the returned values
        /// should be sorted - ascending or descending. If sort_order is
        /// provided, sort_by has to be provided.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsRequest.Options.ASCENDING">ASCENDING</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsRequest.Options.DESCENDING">DESCENDING</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="GetRecordsRequest.Options.ASCENDING">ASCENDING</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GetRecordsResponse<T> getRecords<T>( string table_name,
                                                    long offset = 0,
                                                    long limit = 10000,
                                                    IDictionary<string, string> options = null ) where T : new()
        {
            return getRecords<T>( new GetRecordsRequest( table_name, offset, limit,
                                                         options ) );
        }


        /// <summary>For a given table, retrieves the values of the given
        /// columns within a given range. It returns maps of column name to the
        /// vector of values for each supported data type (double, float, long,
        /// int and string). This operation supports pagination feature, i.e.
        /// values that are retrieved are those associated with the indices
        /// between the start (offset) and end value (offset + limit)
        /// parameters (inclusive). If there are num_points values in the table
        /// then each of the indices between 0 and num_points-1 retrieves a
        /// unique value.
        /// <br />
        /// Note that when using the pagination feature, if the table (or the
        /// underlying table in case of a view) is updated (records are
        /// inserted, deleted or modified) the records or values retrieved may
        /// differ between calls (discontiguous or overlap) based on the type
        /// of the update.
        /// <br />
        /// The response is returned as a dynamic schema. For details see: <a
        /// href="../../../../concepts/dynamic_schemas.html"
        /// target="_top">dynamic schemas documentation</a>.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GetRecordsByColumnResponse getRecordsByColumn( GetRecordsByColumnRequest request_ )
        {
            RawGetRecordsByColumnResponse actualResponse_ = SubmitRequest<RawGetRecordsByColumnResponse>("/get/records/bycolumn", request_, false);

            GetRecordsByColumnResponse response_ = new GetRecordsByColumnResponse();
            response_.table_name = actualResponse_.table_name;
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            return response_;
        }


        /// <summary>For a given table, retrieves the values of the given
        /// columns within a given range. It returns maps of column name to the
        /// vector of values for each supported data type (double, float, long,
        /// int and string). This operation supports pagination feature, i.e.
        /// values that are retrieved are those associated with the indices
        /// between the start (offset) and end value (offset + limit)
        /// parameters (inclusive). If there are num_points values in the table
        /// then each of the indices between 0 and num_points-1 retrieves a
        /// unique value.
        /// <br />
        /// Note that when using the pagination feature, if the table (or the
        /// underlying table in case of a view) is updated (records are
        /// inserted, deleted or modified) the records or values retrieved may
        /// differ between calls (discontiguous or overlap) based on the type
        /// of the update.
        /// <br />
        /// The response is returned as a dynamic schema. For details see: <a
        /// href="../../../../concepts/dynamic_schemas.html"
        /// target="_top">dynamic schemas documentation</a>.</summary>
        /// 
        /// <param name="table_name">Name of the table on which this operation
        /// will be performed. The table cannot be a parent set.  </param>
        /// <param name="column_names">The list of column values to retrieve.
        /// </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned (if not provided the default is
        /// 10000), or END_OF_SET (-9999) to indicate that the maximum number
        /// of results allowed by the server should be returned.  </param>
        /// <param name="options">
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsByColumnRequest.Options.EXPRESSION">EXPRESSION</see>:</term>
        ///         <description>Optional filter expression to apply to the
        /// table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsByColumnRequest.Options.SORT_BY">SORT_BY</see>:</term>
        ///         <description>Optional column that the data should be sorted
        /// by. Empty by default (i.e. no sorting is applied).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsByColumnRequest.Options.SORT_ORDER">SORT_ORDER</see>:</term>
        ///         <description>String indicating how the returned values
        /// should be sorted - ascending or descending. Default is 'ascending'.
        /// If sort_order is provided, sort_by has to be provided.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsByColumnRequest.Options.ASCENDING">ASCENDING</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsByColumnRequest.Options.DESCENDING">DESCENDING</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="GetRecordsByColumnRequest.Options.ASCENDING">ASCENDING</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsByColumnRequest.Options.ORDER_BY">ORDER_BY</see>:</term>
        ///         <description>Comma-separated list of the columns to be
        /// sorted by; e.g. 'timestamp asc, x desc'.  The columns specified
        /// must be present in <paramref
        /// cref="GetRecordsByColumnRequest.column_names" />.  If any alias is
        /// given for any column name, the alias must be used, rather than the
        /// original column name.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GetRecordsByColumnResponse getRecordsByColumn( string table_name,
                                                              IList<string> column_names,
                                                              long offset,
                                                              long limit,
                                                              IDictionary<string, string> options = null )
        {
            return getRecordsByColumn( new GetRecordsByColumnRequest( table_name,
                                                                      column_names,
                                                                      offset, limit,
                                                                      options ) );
        }


        /// <summary>Retrieves the complete series/track records from the given
        /// <paramref cref="GetRecordsBySeriesRequest.world_table_name" />
        /// based on the partial track information contained in the <paramref
        /// cref="GetRecordsBySeriesRequest.table_name" />.
        /// <br />
        /// This operation supports paging through the data via the <paramref
        /// cref="GetRecordsBySeriesRequest.offset" /> and <paramref
        /// cref="GetRecordsBySeriesRequest.limit" /> parameters.
        /// <br />
        /// In contrast to <see
        /// cref="Kinetica.getRecords{T}(string,long,long,IDictionary{string, string})"
        /// /> this returns records grouped by series/track. So if <paramref
        /// cref="GetRecordsBySeriesRequest.offset" /> is 0 and <paramref
        /// cref="GetRecordsBySeriesRequest.limit" /> is 5 this operation would
        /// return the first 5 series/tracks in <paramref
        /// cref="GetRecordsBySeriesRequest.table_name" />. Each series/track
        /// will be returned sorted by their TIMESTAMP column.</summary>
        /// 
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GetRecordsBySeriesResponse<T> getRecordsBySeries<T>( GetRecordsBySeriesRequest request_ ) where T : new()
        {
            RawGetRecordsBySeriesResponse actualResponse_ = SubmitRequest<RawGetRecordsBySeriesResponse>("/get/records/byseries", request_, false);

            GetRecordsBySeriesResponse<T> response_ = new GetRecordsBySeriesResponse<T>();
            response_.table_names = actualResponse_.table_names;
            response_.type_names = actualResponse_.type_names;
            response_.type_schemas = actualResponse_.type_schemas;
            response_.data = new List<IList<T>>();
            this.DecodeRawBinaryDataUsingTypeIDs<T>( response_.type_names, actualResponse_.list_records_binary, response_.data );
            return response_;
        }


        /// <summary>Retrieves the complete series/track records from the given
        /// <paramref name="world_table_name" /> based on the partial track
        /// information contained in the <paramref name="table_name" />.
        /// <br />
        /// This operation supports paging through the data via the <paramref
        /// name="offset" /> and <paramref name="limit" /> parameters.
        /// <br />
        /// In contrast to <see
        /// cref="Kinetica.getRecords{T}(string,long,long,IDictionary{string, string})"
        /// /> this returns records grouped by series/track. So if <paramref
        /// name="offset" /> is 0 and <paramref name="limit" /> is 5 this
        /// operation would return the first 5 series/tracks in <paramref
        /// name="table_name" />. Each series/track will be returned sorted by
        /// their TIMESTAMP column.</summary>
        /// 
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        /// 
        /// <param name="table_name">Name of the collection/table/view for
        /// which series/tracks will be fetched.  </param>
        /// <param name="world_table_name">Name of the table containing the
        /// complete series/track information to be returned for the tracks
        /// present in the <paramref
        /// cref="GetRecordsBySeriesRequest.table_name" />. Typically this is
        /// used when retrieving series/tracks from a view (which contains
        /// partial series/tracks) but the user wants to retrieve the entire
        /// original series/tracks. Can be blank.  </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial series/tracks to skip (useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of series/tracks to be returned. Or END_OF_SET (-9999) to
        /// indicate that the max number of results should be returned.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GetRecordsBySeriesResponse<T> getRecordsBySeries<T>( string table_name,
                                                                    string world_table_name,
                                                                    int offset = 0,
                                                                    int limit = 250,
                                                                    IDictionary<string, string> options = null ) where T : new()
        {
            return getRecordsBySeries<T>( new GetRecordsBySeriesRequest( table_name,
                                                                         world_table_name,
                                                                         offset, limit,
                                                                         options ) );
        }


        /// <summary>Retrieves records from a collection. The operation can
        /// optionally return the record IDs which can be used in certain
        /// queries such as <see
        /// cref="Kinetica.deleteRecords(string,IList{string},IDictionary{string, string})"
        /// />.
        /// <br />
        /// This operation supports paging through the data via the <paramref
        /// cref="GetRecordsFromCollectionRequest.offset" /> and <paramref
        /// cref="GetRecordsFromCollectionRequest.limit" /> parameters.
        /// <br />
        /// Note that when using the Java API, it is not possible to retrieve
        /// records from join tables using this operation.</summary>
        /// 
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GetRecordsFromCollectionResponse<T> getRecordsFromCollection<T>( GetRecordsFromCollectionRequest request_ ) where T : new()
        {
            RawGetRecordsFromCollectionResponse actualResponse_ = SubmitRequest<RawGetRecordsFromCollectionResponse>("/get/records/fromcollection", request_, false);

            GetRecordsFromCollectionResponse<T> response_ = new GetRecordsFromCollectionResponse<T>();
            response_.table_name = actualResponse_.table_name;
            response_.type_names = actualResponse_.type_names;
            response_.data = new List<T>();
            this.DecodeRawBinaryDataUsingTypeIDs<T>( response_.type_names, actualResponse_.records_binary, response_.data );
            response_.record_ids = actualResponse_.record_ids;
            return response_;
        }


        /// <summary>Retrieves records from a collection. The operation can
        /// optionally return the record IDs which can be used in certain
        /// queries such as <see
        /// cref="Kinetica.deleteRecords(string,IList{string},IDictionary{string, string})"
        /// />.
        /// <br />
        /// This operation supports paging through the data via the <paramref
        /// name="offset" /> and <paramref name="limit" /> parameters.
        /// <br />
        /// Note that when using the Java API, it is not possible to retrieve
        /// records from join tables using this operation.</summary>
        /// 
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        /// 
        /// <param name="table_name">Name of the collection or table from which
        /// records are to be retrieved. Must be an existing collection or
        /// table.  </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results).  The minimum allowed value is 0. The maximum allowed
        /// value is MAX_INT. </param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or END_OF_SET (-9999) to indicate
        /// that the max number of results should be returned.  </param>
        /// <param name="options">
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsFromCollectionRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If 'true' then return the internal record ID
        /// along with each returned record. Default is 'false'.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsFromCollectionRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GetRecordsFromCollectionRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="GetRecordsFromCollectionRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GetRecordsFromCollectionResponse<T> getRecordsFromCollection<T>( string table_name,
                                                                                long offset = 0,
                                                                                long limit = 10000,
                                                                                IDictionary<string, string> options = null ) where T : new()
        {
            return getRecordsFromCollection<T>( new GetRecordsFromCollectionRequest(
                                                                                     table_name,
                                                                                     offset,
                                                                                     limit,
                                                                                     options ) );
        }


        /// <summary>Grants a system-level permission to a user or
        /// role.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GrantPermissionSystemResponse grantPermissionSystem( GrantPermissionSystemRequest request_ )
        {
            GrantPermissionSystemResponse actualResponse_ = SubmitRequest<GrantPermissionSystemResponse>("/grant/permission/system", request_, false);

            return actualResponse_;
        }


        /// <summary>Grants a system-level permission to a user or
        /// role.</summary>
        /// 
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.  </param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GrantPermissionSystemRequest.Permission.SYSTEM_ADMIN">SYSTEM_ADMIN</see>:</term>
        ///         <description>Full access to all data and system
        /// functions.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GrantPermissionSystemRequest.Permission.SYSTEM_WRITE">SYSTEM_WRITE</see>:</term>
        ///         <description>Read and write access to all
        /// tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GrantPermissionSystemRequest.Permission.SYSTEM_READ">SYSTEM_READ</see>:</term>
        ///         <description>Read-only access to all tables.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GrantPermissionSystemResponse grantPermissionSystem( string name,
                                                                    string permission,
                                                                    IDictionary<string, string> options )
        {
            return grantPermissionSystem( new GrantPermissionSystemRequest( name,
                                                                            permission,
                                                                            options ) );
        }


        /// <summary>Grants a table-level permission to a user or
        /// role.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GrantPermissionTableResponse grantPermissionTable( GrantPermissionTableRequest request_ )
        {
            GrantPermissionTableResponse actualResponse_ = SubmitRequest<GrantPermissionTableResponse>("/grant/permission/table", request_, false);

            return actualResponse_;
        }


        /// <summary>Grants a table-level permission to a user or
        /// role.</summary>
        /// 
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.  </param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="GrantPermissionTableRequest.Permission.TABLE_ADMIN">TABLE_ADMIN</see>:</term>
        ///         <description>Full read/write and administrative access to
        /// the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GrantPermissionTableRequest.Permission.TABLE_INSERT">TABLE_INSERT</see>:</term>
        ///         <description>Insert access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GrantPermissionTableRequest.Permission.TABLE_UPDATE">TABLE_UPDATE</see>:</term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GrantPermissionTableRequest.Permission.TABLE_DELETE">TABLE_DELETE</see>:</term>
        ///         <description>Delete access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="GrantPermissionTableRequest.Permission.TABLE_READ">TABLE_READ</see>:</term>
        ///         <description>Read access to the table.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="table_name">Name of the table to which the permission
        /// grants access. Must be an existing table, collection, or view. If a
        /// collection, the permission also applies to tables and views in the
        /// collection.  </param>
        /// <param name="filter_expression">Reserved for future use.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GrantPermissionTableResponse grantPermissionTable( string name,
                                                                  string permission,
                                                                  string table_name,
                                                                  string filter_expression,
                                                                  IDictionary<string, string> options )
        {
            return grantPermissionTable( new GrantPermissionTableRequest( name,
                                                                          permission,
                                                                          table_name,
                                                                          filter_expression,
                                                                          options ) );
        }


        /// <summary>Grants membership in a role to a user or role.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GrantRoleResponse grantRole( GrantRoleRequest request_ )
        {
            GrantRoleResponse actualResponse_ = SubmitRequest<GrantRoleResponse>("/grant/role", request_, false);

            return actualResponse_;
        }


        /// <summary>Grants membership in a role to a user or role.</summary>
        /// 
        /// <param name="role">Name of the role in which membership will be
        /// granted. Must be an existing role.  </param>
        /// <param name="member">Name of the user or role that will be granted
        /// membership in <paramref cref="GrantRoleRequest.role" />. Must be an
        /// existing user or role.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public GrantRoleResponse grantRole( string role,
                                            string member,
                                            IDictionary<string, string> options )
        {
            return grantRole( new GrantRoleRequest( role, member, options ) );
        }


        /// <summary>Checks the existence of a proc with the given
        /// name.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public HasProcResponse hasProc( HasProcRequest request_ )
        {
            HasProcResponse actualResponse_ = SubmitRequest<HasProcResponse>("/has/proc", request_, false);

            return actualResponse_;
        }


        /// <summary>Checks the existence of a proc with the given
        /// name.</summary>
        /// 
        /// <param name="proc_name">Name of the proc to check for existence.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public HasProcResponse hasProc( string proc_name,
                                        IDictionary<string, string> options = null )
        {
            return hasProc( new HasProcRequest( proc_name, options ) );
        }


        /// <summary>Checks for the existence of a table with the given
        /// name.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public HasTableResponse hasTable( HasTableRequest request_ )
        {
            HasTableResponse actualResponse_ = SubmitRequest<HasTableResponse>("/has/table", request_, false);

            return actualResponse_;
        }


        /// <summary>Checks for the existence of a table with the given
        /// name.</summary>
        /// 
        /// <param name="table_name">Name of the table to check for existence.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public HasTableResponse hasTable( string table_name,
                                          IDictionary<string, string> options = null )
        {
            return hasTable( new HasTableRequest( table_name, options ) );
        }


        /// <summary>Check for the existence of a type.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public HasTypeResponse hasType( HasTypeRequest request_ )
        {
            HasTypeResponse actualResponse_ = SubmitRequest<HasTypeResponse>("/has/type", request_, false);

            return actualResponse_;
        }


        /// <summary>Check for the existence of a type.</summary>
        /// 
        /// <param name="type_id">Id of the type returned in response to
        /// /create/type request.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public HasTypeResponse hasType( string type_id,
                                        IDictionary<string, string> options = null )
        {
            return hasType( new HasTypeRequest( type_id, options ) );
        }


        /// <summary>Adds multiple records to the specified table. The
        /// operation is synchronous, meaning that a response will not be
        /// returned until all the records are fully inserted and available.
        /// The response payload provides the counts of the number of records
        /// actually inserted and/or updated, and can provide the unique
        /// identifier of each added record.
        /// <br />
        /// The <paramref cref="RawInsertRecordsRequest.options" /> parameter
        /// can be used to customize this function's behavior.
        /// <br />
        /// The <i>update_on_existing_pk</i> option specifies the record
        /// collision policy for inserting into a table with a <a
        /// href="../../../../concepts/tables.html#primary-keys"
        /// target="_top">primary key</a>, but is ignored if no primary key
        /// exists.
        /// <br />
        /// The <i>return_record_ids</i> option indicates that the database
        /// should return the unique identifiers of inserted records.
        /// <br />
        /// The <i>route_to_address</i> option directs that inserted records
        /// should be targeted for a particular database node.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public InsertRecordsResponse insertRecordsRaw( RawInsertRecordsRequest request_ )
        {
            InsertRecordsResponse actualResponse_ = SubmitRequest<InsertRecordsResponse>("/insert/records", request_, true);

            return actualResponse_;
        }


        /// <summary>Adds multiple records to the specified table. The
        /// operation is synchronous, meaning that a response will not be
        /// returned until all the records are fully inserted and available.
        /// The response payload provides the counts of the number of records
        /// actually inserted and/or updated, and can provide the unique
        /// identifier of each added record.
        /// <br />
        /// The <paramref cref="RawInsertRecordsRequest.options" /> parameter
        /// can be used to customize this function's behavior.
        /// <br />
        /// The <i>update_on_existing_pk</i> option specifies the record
        /// collision policy for inserting into a table with a <a
        /// href="../../../../concepts/tables.html#primary-keys"
        /// target="_top">primary key</a>, but is ignored if no primary key
        /// exists.
        /// <br />
        /// The <i>return_record_ids</i> option indicates that the database
        /// should return the unique identifiers of inserted records.
        /// <br />
        /// The <i>route_to_address</i> option directs that inserted records
        /// should be targeted for a particular database node.</summary>
        /// 
        /// <typeparam name="T">The type of object being added.</typeparam>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public InsertRecordsResponse insertRecords<T>( InsertRecordsRequest<T> request_ )
        {
            RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest();
            actualRequest_.table_name = request_.table_name;
            foreach (var thisObj in request_.data) actualRequest_.list.Add( AvroEncode( thisObj ) );
            actualRequest_.options = request_.options;
            InsertRecordsResponse actualResponse_ = SubmitRequest<InsertRecordsResponse>("/insert/records", actualRequest_, true);

            return actualResponse_;
        }


        /// <summary>Adds multiple records to the specified table. The
        /// operation is synchronous, meaning that a response will not be
        /// returned until all the records are fully inserted and available.
        /// The response payload provides the counts of the number of records
        /// actually inserted and/or updated, and can provide the unique
        /// identifier of each added record.
        /// <br />
        /// The <paramref name="options" /> parameter can be used to customize
        /// this function's behavior.
        /// <br />
        /// The <i>update_on_existing_pk</i> option specifies the record
        /// collision policy for inserting into a table with a <a
        /// href="../../../../concepts/tables.html#primary-keys"
        /// target="_top">primary key</a>, but is ignored if no primary key
        /// exists.
        /// <br />
        /// The <i>return_record_ids</i> option indicates that the database
        /// should return the unique identifiers of inserted records.
        /// <br />
        /// The <i>route_to_address</i> option directs that inserted records
        /// should be targeted for a particular database node.</summary>
        /// 
        /// <typeparam name="T">The type of object being added.</typeparam>
        /// 
        /// <param name="table_name">Table to which the records are to be
        /// added. Must be an existing table.  </param>
        /// <param name="data">An array of binary-encoded data for the records
        /// to be added. All records must be of the same type as that of the
        /// table. Empty array if <paramref
        /// cref="RawInsertRecordsRequest.list_encoding" /> is <i>json</i>.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Specifies the record collision policy for
        /// inserting into a table with a <a
        /// href="../../../../concepts/tables.html#primary-keys"
        /// target="_top">primary key</a>.  If set to <i>true</i>, any existing
        /// table record with primary key values that match those of a record
        /// being inserted will be replaced by that new record.  If set to
        /// <i>false</i>, any existing table record with primary key values
        /// that match those of a record being inserted will remain unchanged
        /// and the new record discarded.  If the specified table does not have
        /// a primary key, then this option is ignored.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:</term>
        ///         <description>If <i>true</i> then return the internal record
        /// id along for each inserted record.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawInsertRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawInsertRecordsRequest.Options.ROUTE_TO_ADDRESS">ROUTE_TO_ADDRESS</see>:</term>
        ///         <description>Route to a specific rank/tom. Option not
        /// suitable for tables using primary/shard keys</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public InsertRecordsResponse insertRecords<T>( string table_name,
                                                       IList<T> data,
                                                       IDictionary<string, string> options = null )
        {
            return insertRecords<T>( new InsertRecordsRequest<T>( table_name, data,
                                                                  options ) );
        }


        /// <summary>Generates a specified number of random records and adds
        /// them to the given table. There is an optional parameter that allows
        /// the user to customize the ranges of the column values. It also
        /// allows the user to specify linear profiles for some or all columns
        /// in which case linear values are generated rather than random ones.
        /// Only individual tables are supported for this operation.
        /// <br />
        /// This operation is synchronous, meaning that a response will not be
        /// returned until all random records are fully available.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public InsertRecordsRandomResponse insertRecordsRandom( InsertRecordsRandomRequest request_ )
        {
            InsertRecordsRandomResponse actualResponse_ = SubmitRequest<InsertRecordsRandomResponse>("/insert/records/random", request_, false);

            return actualResponse_;
        }


        /// <summary>Generates a specified number of random records and adds
        /// them to the given table. There is an optional parameter that allows
        /// the user to customize the ranges of the column values. It also
        /// allows the user to specify linear profiles for some or all columns
        /// in which case linear values are generated rather than random ones.
        /// Only individual tables are supported for this operation.
        /// <br />
        /// This operation is synchronous, meaning that a response will not be
        /// returned until all random records are fully available.</summary>
        /// 
        /// <param name="table_name">Table to which random records will be
        /// added. Must be an existing table.  Also, must be an individual
        /// table, not a collection of tables, nor a view of a table.  </param>
        /// <param name="count">Number of records to generate.  </param>
        /// <param name="options">Optional parameter to pass in specifications
        /// for the randomness of the values.  This map is different from the
        /// *options* parameter of most other endpoints in that it is a map of
        /// string to map of string to doubles, while most others are maps of
        /// string to string.  In this map, the top level keys represent which
        /// column's parameters are being specified, while the internal keys
        /// represents which parameter is being specified.  These parameters
        /// take on different meanings depending on the type of the column.
        /// Below follows a more detailed description of the map:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.SEED">SEED</see>:</term>
        ///         <description>If provided, the internal random number
        /// generator will be initialized with the given value.  The minimum is
        /// 0.  This allows for the same set of random numbers to be generated
        /// across invocation of this endpoint in case the user wants to repeat
        /// the test.  Since <paramref
        /// cref="InsertRecordsRandomRequest.options" />, is a map of maps, we
        /// need an internal map to provide the seed value.  For example, to
        /// pass 100 as the seed value through this parameter, you need
        /// something equivalent to: 'options' = {'seed': { 'value': 100 } }
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.VALUE">VALUE</see>:</term>
        ///         <description>Pass the seed value here.</description>
        ///     </item>
        /// </list>
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.ALL">ALL</see>:</term>
        ///         <description>This key indicates that the specifications
        /// relayed in the internal map are to be applied to all columns of the
        /// records.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.MIN">MIN</see>:</term>
        ///         <description>For numerical columns, the minimum of the
        /// generated values is set to this value.  Default is -99999.  For
        /// point, shape, and track semantic types, min for numeric 'x' and 'y'
        /// columns needs to be within [-180, 180] and [-90, 90], respectively.
        /// The default minimum possible values for these columns in such cases
        /// are -180.0 and -90.0. For the 'TIMESTAMP' column, the default
        /// minimum corresponds to Jan 1, 2010.
        /// For string columns, the minimum length of the randomly generated
        /// strings is set to this value (default is 0). If both minimum and
        /// maximum are provided, minimum must be less than or equal to max.
        /// Value needs to be within [0, 200].
        /// If the min is outside the accepted ranges for strings columns and
        /// 'x' and 'y' columns for point/shape/track types, then those
        /// parameters will not be set; however, an error will not be thrown in
        /// such a case. It is the responsibility of the user to use the
        /// <i>all</i> parameter judiciously.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.MAX">MAX</see>:</term>
        ///         <description>For numerical columns, the maximum of the
        /// generated values is set to this value. Default is 99999. For point,
        /// shape, and track semantic types, max for numeric 'x' and 'y'
        /// columns needs to be within [-180, 180] and [-90, 90], respectively.
        /// The default minimum possible values for these columns in such cases
        /// are 180.0 and 90.0.
        /// For string columns, the maximum length of the randomly generated
        /// strings is set to this value (default is 200). If both minimum and
        /// maximum are provided, *max* must be greater than or equal to *min*.
        /// Value needs to be within [0, 200].
        /// If the *max* is outside the accepted ranges for strings columns and
        /// 'x' and 'y' columns for point/shape/track types, then those
        /// parameters will not be set; however, an error will not be thrown in
        /// such a case. It is the responsibility of the user to use the
        /// <i>all</i> parameter judiciously.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.INTERVAL">INTERVAL</see>:</term>
        ///         <description>If specified, generate values for all columns
        /// evenly spaced with the given interval value. If a max value is
        /// specified for a given column the data is randomly generated between
        /// min and max and decimated down to the interval. If no max is
        /// provided the data is linerally generated starting at the minimum
        /// value (instead of generating random data). For non-decimated
        /// string-type columns the interval value is ignored. Instead the
        /// values are generated following the pattern:
        /// 'attrname_creationIndex#', i.e. the column name suffixed with an
        /// underscore and a running counter (starting at 0). For string types
        /// with limited size (eg char4) the prefix is dropped. No nulls will
        /// be generated for nullable columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.NULL_PERCENTAGE">NULL_PERCENTAGE</see>:</term>
        ///         <description>If specified, then generate the given
        /// percentage of the count as nulls for all nullable columns.  This
        /// option will be ignored for non-nullable columns.  The value must be
        /// within the range [0, 1.0].  The default value is 5%
        /// (0.05).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.CARDINALITY">CARDINALITY</see>:</term>
        ///         <description>If specified, limit the randomly generated
        /// values to a fixed set. Not allowed on a column with interval
        /// specified, and is not applicable to WKT or Track-specific columns.
        /// The value must be greater than 0. This option is disabled by
        /// default.</description>
        ///     </item>
        /// </list>
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.ATTR_NAME">ATTR_NAME</see>:</term>
        ///         <description>Set the following parameters for the column
        /// specified by the key. This overrides any parameter set by
        /// <i>all</i>.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.MIN">MIN</see>:</term>
        ///         <description>For numerical columns, the minimum of the
        /// generated values is set to this value.  Default is -99999.  For
        /// point, shape, and track semantic types, min for numeric 'x' and 'y'
        /// columns needs to be within [-180, 180] and [-90, 90], respectively.
        /// The default minimum possible values for these columns in such cases
        /// are -180.0 and -90.0. For the 'TIMESTAMP' column, the default
        /// minimum corresponds to Jan 1, 2010.
        /// For string columns, the minimum length of the randomly generated
        /// strings is set to this value (default is 0). If both minimum and
        /// maximum are provided, minimum must be less than or equal to max.
        /// Value needs to be within [0, 200].
        /// If the min is outside the accepted ranges for strings columns and
        /// 'x' and 'y' columns for point/shape/track types, then those
        /// parameters will not be set; however, an error will not be thrown in
        /// such a case. It is the responsibility of the user to use the
        /// <i>all</i> parameter judiciously.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.MAX">MAX</see>:</term>
        ///         <description>For numerical columns, the maximum of the
        /// generated values is set to this value. Default is 99999. For point,
        /// shape, and track semantic types, max for numeric 'x' and 'y'
        /// columns needs to be within [-180, 180] and [-90, 90], respectively.
        /// The default minimum possible values for these columns in such cases
        /// are 180.0 and 90.0.
        /// For string columns, the maximum length of the randomly generated
        /// strings is set to this value (default is 200). If both minimum and
        /// maximum are provided, *max* must be greater than or equal to *min*.
        /// Value needs to be within [0, 200].
        /// If the *max* is outside the accepted ranges for strings columns and
        /// 'x' and 'y' columns for point/shape/track types, then those
        /// parameters will not be set; however, an error will not be thrown in
        /// such a case. It is the responsibility of the user to use the
        /// <i>all</i> parameter judiciously.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.INTERVAL">INTERVAL</see>:</term>
        ///         <description>If specified, generate values for all columns
        /// evenly spaced with the given interval value. If a max value is
        /// specified for a given column the data is randomly generated between
        /// min and max and decimated down to the interval. If no max is
        /// provided the data is linerally generated starting at the minimum
        /// value (instead of generating random data). For non-decimated
        /// string-type columns the interval value is ignored. Instead the
        /// values are generated following the pattern:
        /// 'attrname_creationIndex#', i.e. the column name suffixed with an
        /// underscore and a running counter (starting at 0). For string types
        /// with limited size (eg char4) the prefix is dropped. No nulls will
        /// be generated for nullable columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.NULL_PERCENTAGE">NULL_PERCENTAGE</see>:</term>
        ///         <description>If specified and if this column is nullable,
        /// then generate the given percentage of the count as nulls.  This
        /// option will result in an error if the column is not nullable.  The
        /// value must be within the range [0, 1.0].  The default value is 5%
        /// (0.05).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.CARDINALITY">CARDINALITY</see>:</term>
        ///         <description>If specified, limit the randomly generated
        /// values to a fixed set. Not allowed on a column with interval
        /// specified, and is not applicable to WKT or Track-specific columns.
        /// The value must be greater than 0. This option is disabled by
        /// default.</description>
        ///     </item>
        /// </list>
        /// </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.TRACK_LENGTH">TRACK_LENGTH</see>:</term>
        ///         <description>This key-map pair is only valid for track type
        /// data sets (an error is thrown otherwise).  No nulls would be
        /// generated for nullable columns.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.MIN">MIN</see>:</term>
        ///         <description>Minimum possible length for generated series;
        /// default is 100 records per series. Must be an integral value within
        /// the range [1, 500]. If both min and max are specified, min must be
        /// less than or equal to max.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertRecordsRandomRequest.Options.MAX">MAX</see>:</term>
        ///         <description>Maximum possible length for generated series;
        /// default is 500 records per series. Must be an integral value within
        /// the range [1, 500]. If both min and max are specified, max must be
        /// greater than or equal to min.</description>
        ///     </item>
        /// </list>
        /// </description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public InsertRecordsRandomResponse insertRecordsRandom( string table_name,
                                                                long count,
                                                                IDictionary<string, IDictionary<string, double>> options = null )
        {
            return insertRecordsRandom( new InsertRecordsRandomRequest( table_name, count,
                                                                        options ) );
        }


        /// <summary>Adds a symbol or icon (i.e. an image) to represent data
        /// points when data is rendered visually. Users must provide the
        /// symbol identifier (string), a format (currently supported: 'svg'
        /// and 'svg_path'), the data for the symbol, and any additional
        /// optional parameter (e.g. color). To have a symbol used for
        /// rendering create a table with a string column named 'SYMBOLCODE'
        /// (along with 'x' or 'y' for example). Then when the table is
        /// rendered (via <a href="../../../../api/rest/wms_rest.html"
        /// target="_top">WMS</a>) if the 'dosymbology' parameter is 'true'
        /// then the value of the 'SYMBOLCODE' column is used to pick the
        /// symbol displayed for each point.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public InsertSymbolResponse insertSymbol( InsertSymbolRequest request_ )
        {
            InsertSymbolResponse actualResponse_ = SubmitRequest<InsertSymbolResponse>("/insert/symbol", request_, false);

            return actualResponse_;
        }


        /// <summary>Adds a symbol or icon (i.e. an image) to represent data
        /// points when data is rendered visually. Users must provide the
        /// symbol identifier (string), a format (currently supported: 'svg'
        /// and 'svg_path'), the data for the symbol, and any additional
        /// optional parameter (e.g. color). To have a symbol used for
        /// rendering create a table with a string column named 'SYMBOLCODE'
        /// (along with 'x' or 'y' for example). Then when the table is
        /// rendered (via <a href="../../../../api/rest/wms_rest.html"
        /// target="_top">WMS</a>) if the 'dosymbology' parameter is 'true'
        /// then the value of the 'SYMBOLCODE' column is used to pick the
        /// symbol displayed for each point.</summary>
        /// 
        /// <param name="symbol_id">The id of the symbol being added. This is
        /// the same id that should be in the 'SYMBOLCODE' column for objects
        /// using this symbol  </param>
        /// <param name="symbol_format">Specifies the symbol format. Must be
        /// either 'svg' or 'svg_path'.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertSymbolRequest.SymbolFormat.SVG">SVG</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="InsertSymbolRequest.SymbolFormat.SVG_PATH">SVG_PATH</see></term>
        ///     </item>
        /// </list>  </param>
        /// <param name="symbol_data">The actual symbol data. If <paramref
        /// cref="InsertSymbolRequest.symbol_format" /> is 'svg' then this
        /// should be the raw bytes representing an svg file. If <paramref
        /// cref="InsertSymbolRequest.symbol_format" /> is svg path then this
        /// should be an svg path string, for example:
        /// 'M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z'  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="InsertSymbolRequest.Options.COLOR">COLOR</see>:</term>
        ///         <description>If <paramref
        /// cref="InsertSymbolRequest.symbol_format" /> is 'svg' this is
        /// ignored. If <paramref cref="InsertSymbolRequest.symbol_format" />
        /// is 'svg_path' then this option specifies the color (in RRGGBB hex
        /// format) of the path. For example, to have the path rendered in red,
        /// used 'FF0000'. If 'color' is not provided then '00FF00' (i.e.
        /// green) is used by default.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public InsertSymbolResponse insertSymbol( string symbol_id,
                                                  string symbol_format,
                                                  byte[] symbol_data,
                                                  IDictionary<string, string> options = null )
        {
            return insertSymbol( new InsertSymbolRequest( symbol_id, symbol_format,
                                                          symbol_data, options ) );
        }


        /// <summary>Kills a running proc instance.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public KillProcResponse killProc( KillProcRequest request_ )
        {
            KillProcResponse actualResponse_ = SubmitRequest<KillProcResponse>("/kill/proc", request_, false);

            return actualResponse_;
        }


        /// <summary>Kills a running proc instance.</summary>
        /// 
        /// <param name="run_id">The run ID of the running proc instance. If
        /// the run ID is not found or the proc instance has already completed,
        /// this does nothing. If not specified, all running proc instances
        /// will be killed.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public KillProcResponse killProc( string run_id = "",
                                          IDictionary<string, string> options = null )
        {
            return killProc( new KillProcRequest( run_id, options ) );
        }


        /// <summary>Manages global access to a table's data.  By default a
        /// table has a <paramref cref="LockTableRequest.lock_type" /> of
        /// <i>read-write</i>, indicating all operations are permitted.  A user
        /// may request a <i>read-only</i> or a <i>write-only</i> lock, after
        /// which only read or write operations, respectively, are permitted on
        /// the table until the lock is removed.  When <paramref
        /// cref="LockTableRequest.lock_type" /> is <i>no-access</i> then no
        /// operations are permitted on the table.  The lock status can be
        /// queried by setting <paramref cref="LockTableRequest.lock_type" />
        /// to <i>status</i>.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public LockTableResponse lockTable( LockTableRequest request_ )
        {
            LockTableResponse actualResponse_ = SubmitRequest<LockTableResponse>("/lock/table", request_, false);

            return actualResponse_;
        }


        /// <summary>Manages global access to a table's data.  By default a
        /// table has a <paramref name="lock_type" /> of <i>read-write</i>,
        /// indicating all operations are permitted.  A user may request a
        /// <i>read-only</i> or a <i>write-only</i> lock, after which only read
        /// or write operations, respectively, are permitted on the table until
        /// the lock is removed.  When <paramref name="lock_type" /> is
        /// <i>no-access</i> then no operations are permitted on the table.
        /// The lock status can be queried by setting <paramref
        /// name="lock_type" /> to <i>status</i>.</summary>
        /// 
        /// <param name="table_name">Name of the table to be locked. It must be
        /// a currently existing table, collection, or view.  </param>
        /// <param name="lock_type">The type of lock being applied to the
        /// table. Setting it to <i>status</i> will return the current lock
        /// status of the table without changing it.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="LockTableRequest.LockType.STATUS">STATUS</see>:</term>
        ///         <description>Show locked status</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="LockTableRequest.LockType.NO_ACCESS">NO_ACCESS</see>:</term>
        ///         <description>Allow no read/write operations</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="LockTableRequest.LockType.READ_ONLY">READ_ONLY</see>:</term>
        ///         <description>Allow only read operations</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="LockTableRequest.LockType.WRITE_ONLY">WRITE_ONLY</see>:</term>
        ///         <description>Allow only write operations</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="LockTableRequest.LockType.READ_WRITE">READ_WRITE</see>:</term>
        ///         <description>Allow all read/write operations</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="LockTableRequest.LockType.STATUS">STATUS</see>.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public LockTableResponse lockTable( string table_name,
                                            string lock_type = LockTableRequest.LockType.STATUS,
                                            IDictionary<string, string> options = null )
        {
            return lockTable( new LockTableRequest( table_name, lock_type, options ) );
        }


        /// <summary>Create a new empty result table (specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />), and insert all records
        /// from source tables (specified by <paramref
        /// cref="MergeRecordsRequest.source_table_names" />) based on the
        /// field mapping information (specified by <paramref
        /// cref="MergeRecordsRequest.field_maps" />). The field map (specified
        /// by <paramref cref="MergeRecordsRequest.field_maps" />) holds the
        /// user specified maps of target table column names to source table
        /// columns.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public MergeRecordsResponse mergeRecords( MergeRecordsRequest request_ )
        {
            MergeRecordsResponse actualResponse_ = SubmitRequest<MergeRecordsResponse>("/merge/records", request_, false);

            return actualResponse_;
        }


        /// <summary>Create a new empty result table (specified by <paramref
        /// name="table_name" />), and insert all records from source tables
        /// (specified by <paramref name="source_table_names" />) based on the
        /// field mapping information (specified by <paramref name="field_maps"
        /// />). The field map (specified by <paramref name="field_maps" />)
        /// holds the user specified maps of target table column names to
        /// source table columns.</summary>
        /// 
        /// <param name="table_name">The new result table name for the records
        /// to be merged.  Must NOT be an existing table.  </param>
        /// <param name="source_table_names">The list of source table names to
        /// get the records from. Must be existing table names.  </param>
        /// <param name="field_maps">Contains the mapping of column names from
        /// result table (specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />) as the keys, and
        /// corresponding column names from a table from source tables
        /// (specified by <paramref
        /// cref="MergeRecordsRequest.source_table_names" />). Must be existing
        /// column names in source table and target table, and their types must
        /// be matched.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:</term>
        ///         <description>Name of a collection which is to contain the
        /// newly created merged table (specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />). If empty, then the newly
        /// created merged table will be a top-level table. If the collection
        /// does not allow duplicate types and it contains a table of the same
        /// type as the given one, then this table creation request will
        /// fail.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:</term>
        ///         <description>For a merged table (specified by <paramref
        /// cref="MergeRecordsRequest.table_name" />), indicates whether the
        /// table is to be replicated to all the database ranks. This may be
        /// necessary when the table is to be joined with other tables in a
        /// query.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the TTL of the merged table or collection
        /// (specified by <paramref cref="MergeRecordsRequest.table_name" />).
        /// The value must be the desired TTL in minutes.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="MergeRecordsRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:</term>
        ///         <description>If provided this indicates the chunk size to
        /// be used for the merged table.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public MergeRecordsResponse mergeRecords( string table_name,
                                                  IList<string> source_table_names,
                                                  IList<IDictionary<string, string>> field_maps,
                                                  IDictionary<string, string> options = null )
        {
            return mergeRecords( new MergeRecordsRequest( table_name, source_table_names,
                                                          field_maps, options ) );
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminReplaceTomResponse adminReplaceTom( AdminReplaceTomRequest request_ )
        {
            AdminReplaceTomResponse actualResponse_ = SubmitRequest<AdminReplaceTomResponse>("/replace/tom", request_, false);

            return actualResponse_;
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="old_rank_tom"></param>
        /// <param name="new_rank_tom"></param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public AdminReplaceTomResponse adminReplaceTom( long old_rank_tom,
                                                        long new_rank_tom )
        {
            return adminReplaceTom( new AdminReplaceTomRequest( old_rank_tom, new_rank_tom ) );
        }


        /// <summary>Revokes a system-level permission from a user or
        /// role.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public RevokePermissionSystemResponse revokePermissionSystem( RevokePermissionSystemRequest request_ )
        {
            RevokePermissionSystemResponse actualResponse_ = SubmitRequest<RevokePermissionSystemResponse>("/revoke/permission/system", request_, false);

            return actualResponse_;
        }


        /// <summary>Revokes a system-level permission from a user or
        /// role.</summary>
        /// 
        /// <param name="name">Name of the user or role from which the
        /// permission will be revoked. Must be an existing user or role.
        /// </param>
        /// <param name="permission">Permission to revoke from the user or
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RevokePermissionSystemRequest.Permission.SYSTEM_ADMIN">SYSTEM_ADMIN</see>:</term>
        ///         <description>Full access to all data and system
        /// functions.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RevokePermissionSystemRequest.Permission.SYSTEM_WRITE">SYSTEM_WRITE</see>:</term>
        ///         <description>Read and write access to all
        /// tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RevokePermissionSystemRequest.Permission.SYSTEM_READ">SYSTEM_READ</see>:</term>
        ///         <description>Read-only access to all tables.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public RevokePermissionSystemResponse revokePermissionSystem( string name,
                                                                      string permission,
                                                                      IDictionary<string, string> options )
        {
            return revokePermissionSystem( new RevokePermissionSystemRequest( name,
                                                                              permission,
                                                                              options ) );
        }


        /// <summary>Revokes a table-level permission from a user or
        /// role.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public RevokePermissionTableResponse revokePermissionTable( RevokePermissionTableRequest request_ )
        {
            RevokePermissionTableResponse actualResponse_ = SubmitRequest<RevokePermissionTableResponse>("/revoke/permission/table", request_, false);

            return actualResponse_;
        }


        /// <summary>Revokes a table-level permission from a user or
        /// role.</summary>
        /// 
        /// <param name="name">Name of the user or role from which the
        /// permission will be revoked. Must be an existing user or role.
        /// </param>
        /// <param name="permission">Permission to revoke from the user or
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RevokePermissionTableRequest.Permission.TABLE_ADMIN">TABLE_ADMIN</see>:</term>
        ///         <description>Full read/write and administrative access to
        /// the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RevokePermissionTableRequest.Permission.TABLE_INSERT">TABLE_INSERT</see>:</term>
        ///         <description>Insert access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RevokePermissionTableRequest.Permission.TABLE_UPDATE">TABLE_UPDATE</see>:</term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RevokePermissionTableRequest.Permission.TABLE_DELETE">TABLE_DELETE</see>:</term>
        ///         <description>Delete access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RevokePermissionTableRequest.Permission.TABLE_READ">TABLE_READ</see>:</term>
        ///         <description>Read access to the table.</description>
        ///     </item>
        /// </list>  </param>
        /// <param name="table_name">Name of the table to which the permission
        /// grants access. Must be an existing table, collection, or view.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public RevokePermissionTableResponse revokePermissionTable( string name,
                                                                    string permission,
                                                                    string table_name,
                                                                    IDictionary<string, string> options )
        {
            return revokePermissionTable( new RevokePermissionTableRequest( name,
                                                                            permission,
                                                                            table_name,
                                                                            options ) );
        }


        /// <summary>Revokes membership in a role from a user or
        /// role.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public RevokeRoleResponse revokeRole( RevokeRoleRequest request_ )
        {
            RevokeRoleResponse actualResponse_ = SubmitRequest<RevokeRoleResponse>("/revoke/role", request_, false);

            return actualResponse_;
        }


        /// <summary>Revokes membership in a role from a user or
        /// role.</summary>
        /// 
        /// <param name="role">Name of the role in which membership will be
        /// revoked. Must be an existing role.  </param>
        /// <param name="member">Name of the user or role that will be revoked
        /// membership in <paramref cref="RevokeRoleRequest.role" />. Must be
        /// an existing user or role.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public RevokeRoleResponse revokeRole( string role,
                                              string member,
                                              IDictionary<string, string> options )
        {
            return revokeRole( new RevokeRoleRequest( role, member, options ) );
        }


        /// <summary>Shows information about a proc.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowProcResponse showProc( ShowProcRequest request_ )
        {
            ShowProcResponse actualResponse_ = SubmitRequest<ShowProcResponse>("/show/proc", request_, false);

            return actualResponse_;
        }


        /// <summary>Shows information about a proc.</summary>
        /// 
        /// <param name="proc_name">Name of the proc to show information about.
        /// If specified, must be the name of a currently existing proc. If not
        /// specified, information about all procs will be returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowProcRequest.Options.INCLUDE_FILES">INCLUDE_FILES</see>:</term>
        ///         <description>If set to <i>true</i>, the files that make up
        /// the proc will be returned. If set to <i>false</i>, the files will
        /// not be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowProcRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowProcRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowProcRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowProcResponse showProc( string proc_name = "",
                                          IDictionary<string, string> options = null )
        {
            return showProc( new ShowProcRequest( proc_name, options ) );
        }


        /// <summary>Shows the statuses of running or completed proc instances.
        /// Results are grouped by run ID (as returned from <see
        /// cref="Kinetica.executeProc(string,IDictionary{string, string},IDictionary{string, byte[]},IList{string},IDictionary{string, IList{string}},IList{string},IDictionary{string, string})"
        /// />) and data segment ID (each invocation of the proc command on a
        /// data segment is assigned a data segment ID).</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowProcStatusResponse showProcStatus( ShowProcStatusRequest request_ )
        {
            ShowProcStatusResponse actualResponse_ = SubmitRequest<ShowProcStatusResponse>("/show/proc/status", request_, false);

            return actualResponse_;
        }


        /// <summary>Shows the statuses of running or completed proc instances.
        /// Results are grouped by run ID (as returned from <see
        /// cref="Kinetica.executeProc(string,IDictionary{string, string},IDictionary{string, byte[]},IList{string},IDictionary{string, IList{string}},IList{string},IDictionary{string, string})"
        /// />) and data segment ID (each invocation of the proc command on a
        /// data segment is assigned a data segment ID).</summary>
        /// 
        /// <param name="run_id">The run ID of a specific running or completed
        /// proc instance for which the status will be returned. If the run ID
        /// is not found, nothing will be returned. If not specified, the
        /// statuses of all running and completed proc instances will be
        /// returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowProcStatusRequest.Options.CLEAR_COMPLETE">CLEAR_COMPLETE</see>:</term>
        ///         <description>If set to <i>true</i>, if a proc instance has
        /// completed (either successfully or unsuccessfully) then its status
        /// will be cleared and no longer returned in subsequent calls.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowProcStatusRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowProcStatusRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowProcStatusRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowProcStatusResponse showProcStatus( string run_id = "",
                                                      IDictionary<string, string> options = null )
        {
            return showProcStatus( new ShowProcStatusRequest( run_id, options ) );
        }


        /// <summary>Shows security information relating to users and/or roles.
        /// If the caller is not a system administrator, only information
        /// relating to the caller and their roles is returned.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowSecurityResponse showSecurity( ShowSecurityRequest request_ )
        {
            ShowSecurityResponse actualResponse_ = SubmitRequest<ShowSecurityResponse>("/show/security", request_, false);

            return actualResponse_;
        }


        /// <summary>Shows security information relating to users and/or roles.
        /// If the caller is not a system administrator, only information
        /// relating to the caller and their roles is returned.</summary>
        /// 
        /// <param name="names">A list of names of users and/or roles about
        /// which security information is requested. If none are provided,
        /// information about all users and roles will be returned.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowSecurityResponse showSecurity( IList<string> names,
                                                  IDictionary<string, string> options )
        {
            return showSecurity( new ShowSecurityRequest( names, options ) );
        }


        /// <summary>Returns server configuration and version related
        /// information to the caller. The admin tool uses it to present server
        /// related information to the user.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowSystemPropertiesResponse showSystemProperties( ShowSystemPropertiesRequest request_ )
        {
            ShowSystemPropertiesResponse actualResponse_ = SubmitRequest<ShowSystemPropertiesResponse>("/show/system/properties", request_, false);

            return actualResponse_;
        }


        /// <summary>Returns server configuration and version related
        /// information to the caller. The admin tool uses it to present server
        /// related information to the user.</summary>
        /// 
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowSystemPropertiesRequest.Options.PROPERTIES">PROPERTIES</see>:</term>
        ///         <description>A list of comma separated names of properties
        /// requested. If not specified, all properties will be
        /// returned.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowSystemPropertiesResponse showSystemProperties( IDictionary<string, string> options = null )
        {
            return showSystemProperties( new ShowSystemPropertiesRequest( options ) );
        }


        /// <summary>Provides server configuration and health related status to
        /// the caller. The admin tool uses it to present server related
        /// information to the user.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowSystemStatusResponse showSystemStatus( ShowSystemStatusRequest request_ )
        {
            ShowSystemStatusResponse actualResponse_ = SubmitRequest<ShowSystemStatusResponse>("/show/system/status", request_, false);

            return actualResponse_;
        }


        /// <summary>Provides server configuration and health related status to
        /// the caller. The admin tool uses it to present server related
        /// information to the user.</summary>
        /// 
        /// <param name="options">Optional parameters, currently unused.
        /// </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowSystemStatusResponse showSystemStatus( IDictionary<string, string> options = null )
        {
            return showSystemStatus( new ShowSystemStatusRequest( options ) );
        }


        /// <summary>Returns the last 100 database requests along with the
        /// request timing and internal job id. The admin tool uses it to
        /// present request timing information to the user.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowSystemTimingResponse showSystemTiming( ShowSystemTimingRequest request_ )
        {
            ShowSystemTimingResponse actualResponse_ = SubmitRequest<ShowSystemTimingResponse>("/show/system/timing", request_, false);

            return actualResponse_;
        }


        /// <summary>Returns the last 100 database requests along with the
        /// request timing and internal job id. The admin tool uses it to
        /// present request timing information to the user.</summary>
        /// 
        /// <param name="options">Optional parameters, currently unused.
        /// </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowSystemTimingResponse showSystemTiming( IDictionary<string, string> options = null )
        {
            return showSystemTiming( new ShowSystemTimingRequest( options ) );
        }


        /// <summary>Retrieves detailed information about a table, view, or
        /// collection, specified in <paramref
        /// cref="ShowTableRequest.table_name" />. If the supplied <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection, the call can
        /// return information about either the collection itself or the tables
        /// and views it contains. If <paramref
        /// cref="ShowTableRequest.table_name" /> is empty, information about
        /// all collections and top-level tables and views can be returned.
        /// <br />
        /// If the option <i>get_sizes</i> is set to <i>true</i>, then the
        /// sizes (objects and elements) of each table are returned (in
        /// <paramref cref="ShowTableResponse.sizes" /> and <paramref
        /// cref="ShowTableResponse.full_sizes" />), along with the total
        /// number of objects in the requested table (in <paramref
        /// cref="ShowTableResponse.total_size" /> and <paramref
        /// cref="ShowTableResponse.total_full_size" />).
        /// <br />
        /// For a collection, setting the <i>show_children</i> option to
        /// <i>false</i> returns only information about the collection itself;
        /// setting <i>show_children</i> to <i>true</i> returns a list of
        /// tables and views contained in the collection, along with their
        /// description, type id, schema, type label, type properties, and
        /// additional information including TTL.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTableResponse showTable( ShowTableRequest request_ )
        {
            ShowTableResponse actualResponse_ = SubmitRequest<ShowTableResponse>("/show/table", request_, false);


            for ( int i_ = 0; i_ < actualResponse_.type_ids.Count; ++i_ )
            {
                SetDecoderIfMissing( actualResponse_.type_ids[i_],
                                     actualResponse_.type_labels[i_],
                                     actualResponse_.type_schemas[i_],
                                     actualResponse_.properties[i_] );
            }

            return actualResponse_;
        }


        /// <summary>Retrieves detailed information about a table, view, or
        /// collection, specified in <paramref name="table_name" />. If the
        /// supplied <paramref name="table_name" /> is a collection, the call
        /// can return information about either the collection itself or the
        /// tables and views it contains. If <paramref name="table_name" /> is
        /// empty, information about all collections and top-level tables and
        /// views can be returned.
        /// <br />
        /// If the option <i>get_sizes</i> is set to <i>true</i>, then the
        /// sizes (objects and elements) of each table are returned (in
        /// <paramref cref="ShowTableResponse.sizes" /> and <paramref
        /// cref="ShowTableResponse.full_sizes" />), along with the total
        /// number of objects in the requested table (in <paramref
        /// cref="ShowTableResponse.total_size" /> and <paramref
        /// cref="ShowTableResponse.total_full_size" />).
        /// <br />
        /// For a collection, setting the <i>show_children</i> option to
        /// <i>false</i> returns only information about the collection itself;
        /// setting <i>show_children</i> to <i>true</i> returns a list of
        /// tables and views contained in the collection, along with their
        /// description, type id, schema, type label, type properties, and
        /// additional information including TTL.</summary>
        /// 
        /// <param name="table_name">Name of the table for which to retrieve
        /// the information. If blank, then information about all collections
        /// and top-level tables and views is returned.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.GET_SIZES">GET_SIZES</see>:</term>
        ///         <description>If <i>true</i> then the table sizes will be
        /// returned; blank, otherwise.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>:</term>
        ///         <description>If <paramref
        /// cref="ShowTableRequest.table_name" /> is a collection, then
        /// <i>true</i> will return information about the children of the
        /// collection, and <i>false</i> will return information about the
        /// collection itself. If <paramref cref="ShowTableRequest.table_name"
        /// /> is a table or view, <i>show_children</i> must be <i>false</i>.
        /// If <paramref cref="ShowTableRequest.table_name" /> is empty, then
        /// <i>show_children</i> must be <i>true</i>.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:</term>
        ///         <description>If <i>false</i> will return an error if the
        /// provided <paramref cref="ShowTableRequest.table_name" /> does not
        /// exist. If <i>true</i> then it will return an empty result.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.GET_COLUMN_INFO">GET_COLUMN_INFO</see>:</term>
        ///         <description>If <i>true</i> then column info (memory usage,
        /// etc) will be returned.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="ShowTableRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTableResponse showTable( string table_name,
                                            IDictionary<string, string> options = null )
        {
            return showTable( new ShowTableRequest( table_name, options ) );
        }


        /// <summary>Retrieves the user provided metadata for the specified
        /// tables.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTableMetadataResponse showTableMetadata( ShowTableMetadataRequest request_ )
        {
            ShowTableMetadataResponse actualResponse_ = SubmitRequest<ShowTableMetadataResponse>("/show/table/metadata", request_, false);

            return actualResponse_;
        }


        /// <summary>Retrieves the user provided metadata for the specified
        /// tables.</summary>
        /// 
        /// <param name="table_names">Tables whose metadata will be fetched.
        /// All provided tables must exist, or an error is returned.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTableMetadataResponse showTableMetadata( IList<string> table_names,
                                                            IDictionary<string, string> options = null )
        {
            return showTableMetadata( new ShowTableMetadataRequest( table_names, options ) );
        }


        /// <summary>Gets names of the tables whose type matches the given
        /// criteria. Each table has a particular type. This type is made out
        /// of the type label, schema of the table, and the semantic type of
        /// the table. This function allows a look up of the existing tables
        /// based on full or partial type information. The operation is
        /// synchronous.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTablesByTypeResponse showTablesByType( ShowTablesByTypeRequest request_ )
        {
            ShowTablesByTypeResponse actualResponse_ = SubmitRequest<ShowTablesByTypeResponse>("/show/tables/bytype", request_, false);

            return actualResponse_;
        }


        /// <summary>Gets names of the tables whose type matches the given
        /// criteria. Each table has a particular type. This type is made out
        /// of the type label, schema of the table, and the semantic type of
        /// the table. This function allows a look up of the existing tables
        /// based on full or partial type information. The operation is
        /// synchronous.</summary>
        /// 
        /// <param name="type_id">Type id returned by a call to /create/type.
        /// </param>
        /// <param name="label">Optional user supplied label which can be used
        /// instead of the type_id to retrieve all tables with the given label.
        /// </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTablesByTypeResponse showTablesByType( string type_id,
                                                          string label,
                                                          IDictionary<string, string> options = null )
        {
            return showTablesByType( new ShowTablesByTypeRequest( type_id, label, options ) );
        }


        /// <summary>Retrieves information regarding the specified triggers or
        /// all existing triggers currently active.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTriggersResponse showTriggers( ShowTriggersRequest request_ )
        {
            ShowTriggersResponse actualResponse_ = SubmitRequest<ShowTriggersResponse>("/show/triggers", request_, false);

            return actualResponse_;
        }


        /// <summary>Retrieves information regarding the specified triggers or
        /// all existing triggers currently active.</summary>
        /// 
        /// <param name="trigger_ids">List of IDs of the triggers whose
        /// information is to be retrieved. An empty list means information
        /// will be retrieved on all active triggers.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTriggersResponse showTriggers( IList<string> trigger_ids,
                                                  IDictionary<string, string> options = null )
        {
            return showTriggers( new ShowTriggersRequest( trigger_ids, options ) );
        }


        /// <summary>Retrieves information for the specified data type. Given a
        /// type ID, the database returns the data type schema, the label, and
        /// the semantic type along with the type ID. If the user provides any
        /// combination of label and semantic type, then the database returns
        /// the pertinent information for all data types that match the input
        /// criteria.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTypesResponse showTypes( ShowTypesRequest request_ )
        {
            ShowTypesResponse actualResponse_ = SubmitRequest<ShowTypesResponse>("/show/types", request_, false);


            for ( int i_ = 0; i_ < actualResponse_.type_ids.Count; ++i_ )
            {
                SetDecoderIfMissing( actualResponse_.type_ids[i_],
                                     actualResponse_.labels[i_],
                                     actualResponse_.type_schemas[i_],
                                     actualResponse_.properties[i_] );
            }

            return actualResponse_;
        }


        /// <summary>Retrieves information for the specified data type. Given a
        /// type ID, the database returns the data type schema, the label, and
        /// the semantic type along with the type ID. If the user provides any
        /// combination of label and semantic type, then the database returns
        /// the pertinent information for all data types that match the input
        /// criteria.</summary>
        /// 
        /// <param name="type_id">Type Id returned in response to a call to
        /// /create/type.  </param>
        /// <param name="label">Option string that was supplied by user in a
        /// call to /create/type.  </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public ShowTypesResponse showTypes( string type_id,
                                            string label,
                                            IDictionary<string, string> options = null )
        {
            return showTypes( new ShowTypesRequest( type_id, label, options ) );
        }


        /// <summary>Runs multiple predicate-based updates in a single call.
        /// With the list of given expressions, any matching record's column
        /// values will be updated as provided in <paramref
        /// cref="RawUpdateRecordsRequest.new_values_maps" />.  There is also
        /// an optional 'upsert' capability where if a particular predicate
        /// doesn't match any existing record, then a new record can be
        /// inserted.
        /// <br />
        /// Note that this operation can only be run on an original table and
        /// not on a collection or a result view.
        /// <br />
        /// This operation can update primary key values.  By default only
        /// 'pure primary key' predicates are allowed when updating primary key
        /// values. If the primary key for a table is the column 'attr1', then
        /// the operation will only accept predicates of the form: "attr1 ==
        /// 'foo'" if the attr1 column is being updated.  For a composite
        /// primary key (e.g. columns 'attr1' and 'attr2') then this operation
        /// will only accept predicates of the form: "(attr1 == 'foo') and
        /// (attr2 == 'bar')".  Meaning, all primary key columns must appear in
        /// an equality predicate in the expressions.  Furthermore each 'pure
        /// primary key' predicate must be unique within a given request.
        /// These restrictions can be removed by utilizing some available
        /// options through <paramref cref="RawUpdateRecordsRequest.options"
        /// />.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public UpdateRecordsResponse updateRecordsRaw( RawUpdateRecordsRequest request_ )
        {
            UpdateRecordsResponse actualResponse_ = SubmitRequest<UpdateRecordsResponse>("/update/records", request_, true);

            return actualResponse_;
        }


        /// <summary>Runs multiple predicate-based updates in a single call.
        /// With the list of given expressions, any matching record's column
        /// values will be updated as provided in <paramref
        /// cref="RawUpdateRecordsRequest.new_values_maps" />.  There is also
        /// an optional 'upsert' capability where if a particular predicate
        /// doesn't match any existing record, then a new record can be
        /// inserted.
        /// <br />
        /// Note that this operation can only be run on an original table and
        /// not on a collection or a result view.
        /// <br />
        /// This operation can update primary key values.  By default only
        /// 'pure primary key' predicates are allowed when updating primary key
        /// values. If the primary key for a table is the column 'attr1', then
        /// the operation will only accept predicates of the form: "attr1 ==
        /// 'foo'" if the attr1 column is being updated.  For a composite
        /// primary key (e.g. columns 'attr1' and 'attr2') then this operation
        /// will only accept predicates of the form: "(attr1 == 'foo') and
        /// (attr2 == 'bar')".  Meaning, all primary key columns must appear in
        /// an equality predicate in the expressions.  Furthermore each 'pure
        /// primary key' predicate must be unique within a given request.
        /// These restrictions can be removed by utilizing some available
        /// options through <paramref cref="RawUpdateRecordsRequest.options"
        /// />.</summary>
        /// 
        /// <typeparam name="T">The type of object being added.</typeparam>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public UpdateRecordsResponse updateRecords<T>( UpdateRecordsRequest<T> request_ )
        {
            RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest();
            actualRequest_.table_name = request_.table_name;
            actualRequest_.expressions = request_.expressions;
            actualRequest_.new_values_maps = request_.new_values_maps;
            foreach (var thisObj in request_.data) actualRequest_.records_to_insert.Add( AvroEncode( thisObj ) );
            actualRequest_.options = request_.options;
            UpdateRecordsResponse actualResponse_ = SubmitRequest<UpdateRecordsResponse>("/update/records", actualRequest_, true);

            return actualResponse_;
        }


        /// <summary>Runs multiple predicate-based updates in a single call.
        /// With the list of given expressions, any matching record's column
        /// values will be updated as provided in <paramref
        /// name="new_values_maps" />.  There is also an optional 'upsert'
        /// capability where if a particular predicate doesn't match any
        /// existing record, then a new record can be inserted.
        /// <br />
        /// Note that this operation can only be run on an original table and
        /// not on a collection or a result view.
        /// <br />
        /// This operation can update primary key values.  By default only
        /// 'pure primary key' predicates are allowed when updating primary key
        /// values. If the primary key for a table is the column 'attr1', then
        /// the operation will only accept predicates of the form: "attr1 ==
        /// 'foo'" if the attr1 column is being updated.  For a composite
        /// primary key (e.g. columns 'attr1' and 'attr2') then this operation
        /// will only accept predicates of the form: "(attr1 == 'foo') and
        /// (attr2 == 'bar')".  Meaning, all primary key columns must appear in
        /// an equality predicate in the expressions.  Furthermore each 'pure
        /// primary key' predicate must be unique within a given request.
        /// These restrictions can be removed by utilizing some available
        /// options through <paramref name="options" />.</summary>
        /// 
        /// <typeparam name="T">The type of object being added.</typeparam>
        /// 
        /// <param name="table_name">Table to be updated. Must be a currently
        /// existing table and not a collection or view.  </param>
        /// <param name="expressions">A list of the actual predicates, one for
        /// each update; format should follow the guidelines /filter.  </param>
        /// <param name="new_values_maps">List of new values for the matching
        /// records.  Each element is a map with (key, value) pairs where the
        /// keys are the names of the columns whose values are to be updated;
        /// the values are the new values.  The number of elements in the list
        /// should match the length of <paramref
        /// cref="RawUpdateRecordsRequest.expressions" />.  </param>
        /// <param name="data">An *optional* list of new binary-avro encoded
        /// records to insert, one for each update.  If one of <paramref
        /// cref="RawUpdateRecordsRequest.expressions" /> does not yield a
        /// matching record to be updated, then the corresponding element from
        /// this list will be added to the table.  </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawUpdateRecordsRequest.Options.GLOBAL_EXPRESSION">GLOBAL_EXPRESSION</see>:</term>
        ///         <description>An optional global expression to reduce the
        /// search space of the predicates listed in <paramref
        /// cref="RawUpdateRecordsRequest.expressions" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawUpdateRecordsRequest.Options.BYPASS_SAFETY_CHECKS">BYPASS_SAFETY_CHECKS</see>:</term>
        ///         <description>When set to 'true', all predicates are
        /// available for primary key updates.  Keep in mind that it is
        /// possible to destroy data in this case, since a single predicate may
        /// match multiple objects (potentially all of records of a table), and
        /// then updating all of those records to have the same primary key
        /// will, due to the primary key uniqueness constraints, effectively
        /// delete all but one of those updated records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawUpdateRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawUpdateRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawUpdateRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawUpdateRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:</term>
        ///         <description>Can be used to customize behavior when the
        /// updated primary key value already exists, as described in
        /// /insert/records.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="RawUpdateRecordsRequest.Options.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawUpdateRecordsRequest.Options.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="RawUpdateRecordsRequest.Options.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="RawUpdateRecordsRequest.Options.RECORD_ID">RECORD_ID</see>:</term>
        ///         <description>ID of a single record to be updated (returned
        /// in the call to /insert/records or
        /// /get/records/fromcollection).</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public UpdateRecordsResponse updateRecords<T>( string table_name,
                                                       IList<string> expressions,
                                                       IList<IDictionary<string, string>> new_values_maps,
                                                       IList<T> data = null,
                                                       IDictionary<string, string> options = null )
        {
            return updateRecords<T>( new UpdateRecordsRequest<T>( table_name, expressions,
                                                                  new_values_maps, data,
                                                                  options ) );
        }


        /// <summary>Updates the view specified by <paramref
        /// cref="UpdateRecordsBySeriesRequest.table_name" /> to include full
        /// series (track) information from the <paramref
        /// cref="UpdateRecordsBySeriesRequest.world_table_name" /> for the
        /// series (tracks) present in the <paramref
        /// cref="UpdateRecordsBySeriesRequest.view_name" />.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public UpdateRecordsBySeriesResponse updateRecordsBySeries( UpdateRecordsBySeriesRequest request_ )
        {
            UpdateRecordsBySeriesResponse actualResponse_ = SubmitRequest<UpdateRecordsBySeriesResponse>("/update/records/byseries", request_, false);

            return actualResponse_;
        }


        /// <summary>Updates the view specified by <paramref name="table_name"
        /// /> to include full series (track) information from the <paramref
        /// name="world_table_name" /> for the series (tracks) present in the
        /// <paramref name="view_name" />.</summary>
        /// 
        /// <param name="table_name">Name of the view on which the update
        /// operation will be performed. Must be an existing view.  </param>
        /// <param name="world_table_name">Name of the table containing the
        /// complete series (track) information.  </param>
        /// <param name="view_name">Optional name of the view containing the
        /// series (tracks) which have to be updated.  </param>
        /// <param name="reserved"></param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public UpdateRecordsBySeriesResponse updateRecordsBySeries( string table_name,
                                                                    string world_table_name,
                                                                    string view_name = "",
                                                                    IList<string> reserved = null,
                                                                    IDictionary<string, string> options = null )
        {
            return updateRecordsBySeries( new UpdateRecordsBySeriesRequest( table_name,
                                                                            world_table_name,
                                                                            view_name,
                                                                            reserved,
                                                                            options ) );
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageResponse visualizeImage( VisualizeImageRequest request_ )
        {
            VisualizeImageResponse actualResponse_ = SubmitRequest<VisualizeImageResponse>("/visualize/image", request_, false);

            return actualResponse_;
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="table_names"></param>
        /// <param name="world_table_names"></param>
        /// <param name="x_column_name"></param>
        /// <param name="y_column_name"></param>
        /// <param name="geometry_column_name"></param>
        /// <param name="track_ids"></param>
        /// <param name="min_x"></param>
        /// <param name="max_x"></param>
        /// <param name="min_y"></param>
        /// <param name="max_y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="projection">
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection.EPSG_4326">EPSG_4326</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection.PLATE_CARREE">PLATE_CARREE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection._900913">_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection.EPSG_900913">EPSG_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection._102100">_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection.EPSG_102100">EPSG_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection._3857">_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection.EPSG_3857">EPSG_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.Projection.WEB_MERCATOR">WEB_MERCATOR</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageRequest.Projection.PLATE_CARREE">PLATE_CARREE</see>.</param>
        /// <param name="bg_color"></param>
        /// <param name="style_options">
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.DO_POINTS">DO_POINTS</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.DO_SHAPES">DO_SHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.DO_TRACKS">DO_TRACKS</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.DO_SYMBOLOGY">DO_SYMBOLOGY</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageRequest.StyleOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.POINTCOLORS">POINTCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.POINTSIZES">POINTSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.POINTSHAPES">POINTSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageRequest.StyleOptions.SQUARE">SQUARE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SHAPELINEWIDTHS">SHAPELINEWIDTHS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SHAPELINECOLORS">SHAPELINECOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SHAPEFILLCOLORS">SHAPEFILLCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRACKLINEWIDTHS">TRACKLINEWIDTHS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRACKLINECOLORS">TRACKLINECOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRACKMARKERSIZES">TRACKMARKERSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRACKMARKERCOLORS">TRACKMARKERCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRACKMARKERSHAPES">TRACKMARKERSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.ORIENTED_ARROW">ORIENTED_ARROW</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.ORIENTED_TRIANGLE">ORIENTED_TRIANGLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageRequest.StyleOptions.CIRCLE">CIRCLE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRACKHEADCOLORS">TRACKHEADCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRACKHEADSIZES">TRACKHEADSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.TRACKHEADSHAPES">TRACKHEADSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see>.</description>
        ///     </item>
        /// </list>
        /// </param>
        /// <param name="options"></param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageResponse visualizeImage( IList<string> table_names,
                                                      IList<string> world_table_names,
                                                      string x_column_name,
                                                      string y_column_name,
                                                      string geometry_column_name,
                                                      IList<IList<string>> track_ids,
                                                      double min_x,
                                                      double max_x,
                                                      double min_y,
                                                      double max_y,
                                                      int width,
                                                      int height,
                                                      string projection,
                                                      long bg_color,
                                                      IDictionary<string, IList<string>> style_options,
                                                      IDictionary<string, string> options = null )
        {
            return visualizeImage( new VisualizeImageRequest( table_names,
                                                              world_table_names,
                                                              x_column_name,
                                                              y_column_name,
                                                              geometry_column_name,
                                                              track_ids, min_x, max_x,
                                                              min_y, max_y, width, height,
                                                              projection, bg_color,
                                                              style_options, options ) );
        }


        /// <summary>Scatter plot is the only plot type currently supported. A
        /// non-numeric column can be specified as x or y column and jitters
        /// can be added to them to avoid excessive overlapping. All color
        /// values must be in the format RRGGBB or AARRGGBB (to specify the
        /// alpha value).
        /// The image is contained in the <paramref
        /// cref="VisualizeImageChartResponse.image_data" /> field.</summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageChartResponse visualizeImageChart( VisualizeImageChartRequest request_ )
        {
            VisualizeImageChartResponse actualResponse_ = SubmitRequest<VisualizeImageChartResponse>("/visualize/image/chart", request_, false);

            return actualResponse_;
        }


        /// <summary>Scatter plot is the only plot type currently supported. A
        /// non-numeric column can be specified as x or y column and jitters
        /// can be added to them to avoid excessive overlapping. All color
        /// values must be in the format RRGGBB or AARRGGBB (to specify the
        /// alpha value).
        /// The image is contained in the <paramref
        /// cref="VisualizeImageChartResponse.image_data" /> field.</summary>
        /// 
        /// <param name="table_name">Name of the table containing the data to
        /// be drawn as a chart.  </param>
        /// <param name="x_column_name">Name of the column containing the data
        /// mapped to the x axis of a chart.  </param>
        /// <param name="y_column_name">Name of the column containing the data
        /// mapped to the y axis of a chart.  </param>
        /// <param name="min_x">Lower bound for the x column values. For
        /// non-numeric x column, each x column item is mapped to an integral
        /// value starting from 0.  </param>
        /// <param name="max_x">Upper bound for the x column values. For
        /// non-numeric x column, each x column item is mapped to an integral
        /// value starting from 0.  </param>
        /// <param name="min_y">Lower bound for the y column values. For
        /// non-numeric y column, each y column item is mapped to an integral
        /// value starting from 0.  </param>
        /// <param name="max_y">Upper bound for the y column values. For
        /// non-numeric y column, each y column item is mapped to an integral
        /// value starting from 0.  </param>
        /// <param name="width">Width of the generated image in pixels.
        /// </param>
        /// <param name="height">Height of the generated image in pixels.
        /// </param>
        /// <param name="bg_color">Background color of the generated image.
        /// </param>
        /// <param name="style_options">Rendering style options for a chart.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.POINTCOLOR">POINTCOLOR</see>:</term>
        ///         <description>The color of points in the plot represented as
        /// a hexadecimal number.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.POINTSIZE">POINTSIZE</see>:</term>
        ///         <description>The size of points in the plot represented as
        /// number of pixels.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.POINTSHAPE">POINTSHAPE</see>:</term>
        ///         <description>The shape of points in the plot.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageChartRequest.StyleOptions.SQUARE">SQUARE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.CB_POINTCOLORS">CB_POINTCOLORS</see>:</term>
        ///         <description>Point color class break information consisting
        /// of three entries: class-break attribute, class-break values/ranges,
        /// and point color values. This option overrides the pointcolor option
        /// if both are provided. Class-break ranges are represented in the
        /// form of "min:max". Class-break values/ranges and point color values
        /// are separated by cb_delimiter, e.g. {"price", "20:30;30:40;40:50",
        /// "0xFF0000;0x00FF00;0x0000FF"}.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.CB_POINTSIZES">CB_POINTSIZES</see>:</term>
        ///         <description>Point size class break information consisting
        /// of three entries: class-break attribute, class-break values/ranges,
        /// and point size values. This option overrides the pointsize option
        /// if both are provided. Class-break ranges are represented in the
        /// form of "min:max". Class-break values/ranges and point size values
        /// are separated by cb_delimiter, e.g. {"states", "NY;TX;CA",
        /// "3;5;7"}.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.CB_POINTSHAPES">CB_POINTSHAPES</see>:</term>
        ///         <description>Point shape class break information consisting
        /// of three entries: class-break attribute, class-break values/ranges,
        /// and point shape names. This option overrides the pointshape option
        /// if both are provided. Class-break ranges are represented in the
        /// form of "min:max". Class-break values/ranges and point shape names
        /// are separated by cb_delimiter, e.g. {"states", "NY;TX;CA",
        /// "circle;square;diamond"}.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.CB_DELIMITER">CB_DELIMITER</see>:</term>
        ///         <description>A character or string which separates
        /// per-class values in a class-break style option
        /// string.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.X_ORDER_BY">X_ORDER_BY</see>:</term>
        ///         <description>An expression or aggregate expression by which
        /// non-numeric x column values are sorted, e.g.
        /// avg(price).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.Y_ORDER_BY">Y_ORDER_BY</see>:</term>
        ///         <description>An expression or aggregate expression by which
        /// non-numeric y column values are sorted, e.g.
        /// avg(price).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.JITTER_X">JITTER_X</see>:</term>
        ///         <description>Amplitude of horizontal jitter applied to
        /// non-numaric x column values.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.JITTER_Y">JITTER_Y</see>:</term>
        ///         <description>Amplitude of vertical jitter applied to
        /// non-numaric y column values.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageChartRequest.StyleOptions.PLOT_ALL">PLOT_ALL</see>:</term>
        ///         <description>If this options is set to "true", all
        /// non-numeric column values are plotted ignoring min_x, max_x, min_y
        /// and max_y parameters.</description>
        ///     </item>
        /// </list>
        ///   </param>
        /// <param name="options">Optional parameters.  </param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageChartResponse visualizeImageChart( string table_name,
                                                                string x_column_name,
                                                                string y_column_name,
                                                                double min_x,
                                                                double max_x,
                                                                double min_y,
                                                                double max_y,
                                                                int width,
                                                                int height,
                                                                string bg_color,
                                                                IDictionary<string, IList<string>> style_options,
                                                                IDictionary<string, string> options = null )
        {
            return visualizeImageChart( new VisualizeImageChartRequest( table_name,
                                                                        x_column_name,
                                                                        y_column_name,
                                                                        min_x, max_x,
                                                                        min_y, max_y,
                                                                        width, height,
                                                                        bg_color,
                                                                        style_options,
                                                                        options ) );
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageClassbreakResponse visualizeImageClassbreak( VisualizeImageClassbreakRequest request_ )
        {
            VisualizeImageClassbreakResponse actualResponse_ = SubmitRequest<VisualizeImageClassbreakResponse>("/visualize/image/classbreak", request_, false);

            return actualResponse_;
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="table_names"></param>
        /// <param name="world_table_names"></param>
        /// <param name="x_column_name"></param>
        /// <param name="y_column_name"></param>
        /// <param name="geometry_column_name"></param>
        /// <param name="track_ids"></param>
        /// <param name="cb_column_name1"></param>
        /// <param name="cb_vals1"></param>
        /// <param name="cb_column_name2"></param>
        /// <param name="cb_vals2"></param>
        /// <param name="min_x"></param>
        /// <param name="max_x"></param>
        /// <param name="min_y"></param>
        /// <param name="max_y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="projection">
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection.EPSG_4326">EPSG_4326</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection.PLATE_CARREE">PLATE_CARREE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection._900913">_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection.EPSG_900913">EPSG_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection._102100">_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection.EPSG_102100">EPSG_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection._3857">_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection.EPSG_3857">EPSG_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.Projection.WEB_MERCATOR">WEB_MERCATOR</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageClassbreakRequest.Projection.PLATE_CARREE">PLATE_CARREE</see>.</param>
        /// <param name="bg_color"></param>
        /// <param name="style_options">
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.DO_POINTS">DO_POINTS</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.DO_SHAPES">DO_SHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.DO_TRACKS">DO_TRACKS</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.DO_SYMBOLOGY">DO_SYMBOLOGY</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.FALSE">FALSE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.POINTCOLORS">POINTCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.POINTSIZES">POINTSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.POINTSHAPES">POINTSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.NONE">NONE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SHAPELINEWIDTHS">SHAPELINEWIDTHS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SHAPELINECOLORS">SHAPELINECOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SHAPEFILLCOLORS">SHAPEFILLCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRACKLINEWIDTHS">TRACKLINEWIDTHS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRACKLINECOLORS">TRACKLINECOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRACKMARKERSIZES">TRACKMARKERSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRACKMARKERCOLORS">TRACKMARKERCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRACKMARKERSHAPES">TRACKMARKERSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.NONE">NONE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRACKHEADCOLORS">TRACKHEADCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRACKHEADSIZES">TRACKHEADSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.TRACKHEADSHAPES">TRACKHEADSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageClassbreakRequest.StyleOptions.CIRCLE">CIRCLE</see>.</description>
        ///     </item>
        /// </list>
        /// </param>
        /// <param name="options"></param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageClassbreakResponse visualizeImageClassbreak( IList<string> table_names,
                                                                          IList<string> world_table_names,
                                                                          string x_column_name,
                                                                          string y_column_name,
                                                                          string geometry_column_name,
                                                                          IList<IList<string>> track_ids,
                                                                          string cb_column_name1,
                                                                          IList<string> cb_vals1,
                                                                          IList<string> cb_column_name2,
                                                                          IList<IList<string>> cb_vals2,
                                                                          double min_x,
                                                                          double max_x,
                                                                          double min_y,
                                                                          double max_y,
                                                                          int width,
                                                                          int height,
                                                                          string projection,
                                                                          long bg_color,
                                                                          IDictionary<string, IList<string>> style_options,
                                                                          IDictionary<string, string> options = null )
        {
            return visualizeImageClassbreak( new VisualizeImageClassbreakRequest(
                                                                                  table_names,
                                                                                  world_table_names,
                                                                                  x_column_name,
                                                                                  y_column_name,
                                                                                  geometry_column_name,
                                                                                  track_ids,
                                                                                  cb_column_name1,
                                                                                  cb_vals1,
                                                                                  cb_column_name2,
                                                                                  cb_vals2,
                                                                                  min_x,
                                                                                  max_x,
                                                                                  min_y,
                                                                                  max_y,
                                                                                  width,
                                                                                  height,
                                                                                  projection,
                                                                                  bg_color,
                                                                                  style_options,
                                                                                  options ) );
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageHeatmapResponse visualizeImageHeatmap( VisualizeImageHeatmapRequest request_ )
        {
            VisualizeImageHeatmapResponse actualResponse_ = SubmitRequest<VisualizeImageHeatmapResponse>("/visualize/image/heatmap", request_, false);

            return actualResponse_;
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="table_names"></param>
        /// <param name="x_column_name"></param>
        /// <param name="y_column_name"></param>
        /// <param name="value_column_name"></param>
        /// <param name="min_x"></param>
        /// <param name="max_x"></param>
        /// <param name="min_y"></param>
        /// <param name="max_y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="projection">
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection.EPSG_4326">EPSG_4326</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection.PLATE_CARREE">PLATE_CARREE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection._900913">_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection.EPSG_900913">EPSG_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection._102100">_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection.EPSG_102100">EPSG_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection._3857">_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection.EPSG_3857">EPSG_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.Projection.WEB_MERCATOR">WEB_MERCATOR</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageHeatmapRequest.Projection.PLATE_CARREE">PLATE_CARREE</see>.</param>
        /// <param name="style_options">
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.COLORMAP">COLORMAP</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.JET">JET</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.HOT">HOT</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.HSV">HSV</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.GRAY">GRAY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.BLUES">BLUES</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.GREENS">GREENS</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.GREYS">GREYS</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.ORANGES">ORANGES</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.PURPLES">PURPLES</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.REDS">REDS</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.VIRIDIS">VIRIDIS</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.JET">JET</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.BLUR_RADIUS">BLUR_RADIUS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.BG_COLOR">BG_COLOR</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.GRADIENT_START_COLOR">GRADIENT_START_COLOR</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageHeatmapRequest.StyleOptions.GRADIENT_END_COLOR">GRADIENT_END_COLOR</see>:</term>
        ///         <description></description>
        ///     </item>
        /// </list>
        /// </param>
        /// <param name="options"></param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageHeatmapResponse visualizeImageHeatmap( IList<string> table_names,
                                                                    string x_column_name,
                                                                    string y_column_name,
                                                                    string value_column_name,
                                                                    double min_x,
                                                                    double max_x,
                                                                    double min_y,
                                                                    double max_y,
                                                                    int width,
                                                                    int height,
                                                                    string projection,
                                                                    IDictionary<string, string> style_options,
                                                                    IDictionary<string, string> options = null )
        {
            return visualizeImageHeatmap( new VisualizeImageHeatmapRequest( table_names,
                                                                            x_column_name,
                                                                            y_column_name,
                                                                            value_column_name,
                                                                            min_x, max_x,
                                                                            min_y, max_y,
                                                                            width, height,
                                                                            projection,
                                                                            style_options,
                                                                            options ) );
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageLabelsResponse visualizeImageLabels( VisualizeImageLabelsRequest request_ )
        {
            VisualizeImageLabelsResponse actualResponse_ = SubmitRequest<VisualizeImageLabelsResponse>("/visualize/image/labels", request_, false);

            return actualResponse_;
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="table_name"></param>
        /// <param name="x_column_name"></param>
        /// <param name="y_column_name"></param>
        /// <param name="x_offset"></param>
        /// <param name="y_offset"></param>
        /// <param name="text_string"></param>
        /// <param name="font"></param>
        /// <param name="text_color"></param>
        /// <param name="text_angle"></param>
        /// <param name="text_scale"></param>
        /// <param name="draw_box"></param>
        /// <param name="draw_leader"></param>
        /// <param name="line_width"></param>
        /// <param name="line_color"></param>
        /// <param name="fill_color"></param>
        /// <param name="leader_x_column_name"></param>
        /// <param name="leader_y_column_name"></param>
        /// <param name="filter"></param>
        /// <param name="min_x"></param>
        /// <param name="max_x"></param>
        /// <param name="min_y"></param>
        /// <param name="max_y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="projection">
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection.EPSG_4326">EPSG_4326</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection.PLATE_CARREE">PLATE_CARREE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection._900913">_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection.EPSG_900913">EPSG_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection._102100">_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection.EPSG_102100">EPSG_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection._3857">_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection.EPSG_3857">EPSG_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeImageLabelsRequest.Projection.WEB_MERCATOR">WEB_MERCATOR</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeImageLabelsRequest.Projection.PLATE_CARREE">PLATE_CARREE</see>.</param>
        /// <param name="options"></param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeImageLabelsResponse visualizeImageLabels( string table_name,
                                                                  string x_column_name,
                                                                  string y_column_name,
                                                                  string x_offset,
                                                                  string y_offset,
                                                                  string text_string,
                                                                  string font,
                                                                  string text_color,
                                                                  string text_angle,
                                                                  string text_scale,
                                                                  string draw_box,
                                                                  string draw_leader,
                                                                  string line_width,
                                                                  string line_color,
                                                                  string fill_color,
                                                                  string leader_x_column_name,
                                                                  string leader_y_column_name,
                                                                  string filter,
                                                                  double min_x,
                                                                  double max_x,
                                                                  double min_y,
                                                                  double max_y,
                                                                  int width,
                                                                  int height,
                                                                  string projection = VisualizeImageLabelsRequest.Projection.PLATE_CARREE,
                                                                  IDictionary<string, string> options = null )
        {
            return visualizeImageLabels( new VisualizeImageLabelsRequest( table_name,
                                                                          x_column_name,
                                                                          y_column_name,
                                                                          x_offset,
                                                                          y_offset,
                                                                          text_string,
                                                                          font,
                                                                          text_color,
                                                                          text_angle,
                                                                          text_scale,
                                                                          draw_box,
                                                                          draw_leader,
                                                                          line_width,
                                                                          line_color,
                                                                          fill_color,
                                                                          leader_x_column_name,
                                                                          leader_y_column_name,
                                                                          filter, min_x,
                                                                          max_x, min_y,
                                                                          max_y, width,
                                                                          height,
                                                                          projection,
                                                                          options ) );
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeVideoResponse visualizeVideo( VisualizeVideoRequest request_ )
        {
            VisualizeVideoResponse actualResponse_ = SubmitRequest<VisualizeVideoResponse>("/visualize/video", request_, false);

            return actualResponse_;
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="table_names"></param>
        /// <param name="world_table_names"></param>
        /// <param name="track_ids"></param>
        /// <param name="x_column_name"></param>
        /// <param name="y_column_name"></param>
        /// <param name="geometry_column_name"></param>
        /// <param name="min_x"></param>
        /// <param name="max_x"></param>
        /// <param name="min_y"></param>
        /// <param name="max_y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="projection">
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection.EPSG_4326">EPSG_4326</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection.PLATE_CARREE">PLATE_CARREE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection._900913">_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection.EPSG_900913">EPSG_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection._102100">_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection.EPSG_102100">EPSG_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection._3857">_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection.EPSG_3857">EPSG_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.Projection.WEB_MERCATOR">WEB_MERCATOR</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeVideoRequest.Projection.PLATE_CARREE">PLATE_CARREE</see>.</param>
        /// <param name="bg_color"></param>
        /// <param name="time_intervals"></param>
        /// <param name="video_style"></param>
        /// <param name="session_key"></param>
        /// <param name="style_options">
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.DO_POINTS">DO_POINTS</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeVideoRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.DO_SHAPES">DO_SHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeVideoRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.DO_TRACKS">DO_TRACKS</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.FALSE">FALSE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeVideoRequest.StyleOptions.TRUE">TRUE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.POINTCOLORS">POINTCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.POINTSIZES">POINTSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.POINTSHAPES">POINTSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SHAPELINEWIDTHS">SHAPELINEWIDTHS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SHAPELINECOLORS">SHAPELINECOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SHAPEFILLCOLORS">SHAPEFILLCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRACKLINEWIDTHS">TRACKLINEWIDTHS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRACKLINECOLORS">TRACKLINECOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRACKMARKERSIZES">TRACKMARKERSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRACKMARKERCOLORS">TRACKMARKERCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRACKMARKERSHAPES">TRACKMARKERSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeVideoRequest.StyleOptions.NONE">NONE</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRACKHEADCOLORS">TRACKHEADCOLORS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRACKHEADSIZES">TRACKHEADSIZES</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.TRACKHEADSHAPES">TRACKHEADSHAPES</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.NONE">NONE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.CIRCLE">CIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SQUARE">SQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.DIAMOND">DIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoRequest.StyleOptions.SYMBOLCODE">SYMBOLCODE</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeVideoRequest.StyleOptions.CIRCLE">CIRCLE</see>.</description>
        ///     </item>
        /// </list>
        /// </param>
        /// <param name="options"></param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeVideoResponse visualizeVideo( IList<string> table_names,
                                                      IList<string> world_table_names,
                                                      IList<IList<string>> track_ids,
                                                      string x_column_name,
                                                      string y_column_name,
                                                      string geometry_column_name,
                                                      double min_x,
                                                      double max_x,
                                                      double min_y,
                                                      double max_y,
                                                      int width,
                                                      int height,
                                                      string projection,
                                                      long bg_color,
                                                      IList<IList<double>> time_intervals,
                                                      string video_style,
                                                      string session_key,
                                                      IDictionary<string, IList<string>> style_options,
                                                      IDictionary<string, string> options = null )
        {
            return visualizeVideo( new VisualizeVideoRequest( table_names,
                                                              world_table_names,
                                                              track_ids, x_column_name,
                                                              y_column_name,
                                                              geometry_column_name, min_x,
                                                              max_x, min_y, max_y, width,
                                                              height, projection,
                                                              bg_color, time_intervals,
                                                              video_style, session_key,
                                                              style_options, options ) );
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeVideoHeatmapResponse visualizeVideoHeatmap( VisualizeVideoHeatmapRequest request_ )
        {
            VisualizeVideoHeatmapResponse actualResponse_ = SubmitRequest<VisualizeVideoHeatmapResponse>("/visualize/video/heatmap", request_, false);

            return actualResponse_;
        }


        /// <summary>@private
        /// </summary>
        /// 
        /// <param name="table_names"></param>
        /// <param name="x_column_name"></param>
        /// <param name="y_column_name"></param>
        /// <param name="min_x"></param>
        /// <param name="max_x"></param>
        /// <param name="min_y"></param>
        /// <param name="max_y"></param>
        /// <param name="time_intervals"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="projection">
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection.EPSG_4326">EPSG_4326</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection.PLATE_CARREE">PLATE_CARREE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection._900913">_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection.EPSG_900913">EPSG_900913</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection._102100">_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection.EPSG_102100">EPSG_102100</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection._3857">_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection.EPSG_3857">EPSG_3857</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.Projection.WEB_MERCATOR">WEB_MERCATOR</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeVideoHeatmapRequest.Projection.PLATE_CARREE">PLATE_CARREE</see>.</param>
        /// <param name="video_style"></param>
        /// <param name="session_key"></param>
        /// <param name="style_options">
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.COLORMAP">COLORMAP</see>:</term>
        ///         <description>
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.JET">JET</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.HOT">HOT</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.HSV">HSV</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.GRAY">GRAY</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.BLUES">BLUES</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.GREENS">GREENS</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.GREYS">GREYS</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.ORANGES">ORANGES</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.PURPLES">PURPLES</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.REDS">REDS</see></term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.REDS">REDS</see>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.BLUR_RADIUS">BLUR_RADIUS</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.BG_COLOR">BG_COLOR</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.GRADIENT_START_COLOR">GRADIENT_START_COLOR</see>:</term>
        ///         <description></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        /// cref="VisualizeVideoHeatmapRequest.StyleOptions.GRADIENT_END_COLOR">GRADIENT_END_COLOR</see>:</term>
        ///         <description></description>
        ///     </item>
        /// </list>
        /// </param>
        /// <param name="options"></param>
        /// 
        /// <returns>Response object containing the result of the
        /// operation.</returns>
        /// 
        public VisualizeVideoHeatmapResponse visualizeVideoHeatmap( IList<string> table_names,
                                                                    string x_column_name,
                                                                    string y_column_name,
                                                                    double min_x,
                                                                    double max_x,
                                                                    double min_y,
                                                                    double max_y,
                                                                    IList<IList<double>> time_intervals,
                                                                    int width,
                                                                    int height,
                                                                    string projection,
                                                                    string video_style,
                                                                    string session_key,
                                                                    IDictionary<string, string> style_options,
                                                                    IDictionary<string, string> options = null )
        {
            return visualizeVideoHeatmap( new VisualizeVideoHeatmapRequest( table_names,
                                                                            x_column_name,
                                                                            y_column_name,
                                                                            min_x, max_x,
                                                                            min_y, max_y,
                                                                            time_intervals,
                                                                            width, height,
                                                                            projection,
                                                                            video_style,
                                                                            session_key,
                                                                            style_options,
                                                                            options ) );
        }


    }  // end class Kinetica
}  // end namespace kinetica

