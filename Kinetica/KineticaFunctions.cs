/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */

using Avro;
using System.Collections.Generic;

namespace kinetica
{
    public partial class Kinetica
    {
        // Kinetica Version
        public const string API_VERSION = "7.2.1.0";

        /// <summary>Adds a host to an existing cluster.</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminAddHostResponse adminAddHost( AdminAddHostRequest request_ )
        {
            AdminAddHostResponse actualResponse_ = SubmitRequest<AdminAddHostResponse>("/admin/add/host", request_, false);

            return actualResponse_;
        }

        /// <summary>Adds a host to an existing cluster.</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="host_address">IP address of the host that will be
        /// added to the cluster. This host must have installed the same
        /// version of Kinetica as the cluster to which it is being added.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminAddHostRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="AdminAddHostRequest.Options.TRUE">TRUE</see>, only
        ///         validation checks will be performed. No host is added.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminAddHostRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminAddHostRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminAddHostRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminAddHostRequest.Options.ACCEPTS_FAILOVER">ACCEPTS_FAILOVER</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="AdminAddHostRequest.Options.TRUE">TRUE</see>, the
        ///         host will accept processes (ranks, graph server, etc.) in
        ///         the event of a failover on another node in the cluster.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminAddHostRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminAddHostRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminAddHostRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminAddHostRequest.Options.PUBLIC_ADDRESS">PUBLIC_ADDRESS</see>:
        ///         </term>
        ///         <description>The publicly-accessible IP address for the
        ///         host being added, typically specified for clients using
        ///         multi-head operations. This setting is required if any
        ///         other host(s) in the cluster specify a public address.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminAddHostRequest.Options.HOST_MANAGER_PUBLIC_URL">HOST_MANAGER_PUBLIC_URL</see>:
        ///         </term>
        ///         <description>The publicly-accessible full path URL to the
        ///         host manager on the host being added, e.g.,
        ///         'http://172.123.45.67:9300'. The default host manager port
        ///         can be found in the <a
        ///         href="../../../install/shared/ports/" target="_top">list of
        ///         ports</a> used by Kinetica.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminAddHostRequest.Options.RAM_LIMIT">RAM_LIMIT</see>:
        ///         </term>
        ///         <description>The desired RAM limit for the host being
        ///         added, i.e. the sum of RAM usage for all processes on the
        ///         host will not be able to exceed this value. Supported
        ///         units: K (thousand), KB (kilobytes), M (million), MB
        ///         (megabytes), G (billion), GB (gigabytes); if no unit is
        ///         provided, the value is assumed to be in bytes. For example,
        ///         if <see
        ///         cref="AdminAddHostRequest.Options.RAM_LIMIT">RAM_LIMIT</see>
        ///         is set to 10M, the resulting RAM limit is 10 million bytes.
        ///         Set <see
        ///         cref="AdminAddHostRequest.Options.RAM_LIMIT">RAM_LIMIT</see>
        ///         to -1 to have no RAM limit.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminAddHostRequest.Options.GPUS">GPUS</see>:</term>
        ///         <description>Comma-delimited list of GPU indices (starting
        ///         at 1) that are eligible for running worker processes. If
        ///         left blank, all GPUs on the host being added will be
        ///         eligible.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminAddHostResponse adminAddHost( string host_address,
                                                  IDictionary<string, string> options = null )
        {
            return adminAddHost( new AdminAddHostRequest( host_address, options ) );
        }

        /// <summary>Add one or more ranks to an existing Kinetica cluster.
        /// </summary>
        /// <remarks><para>The new ranks will not contain any data initially
        /// (other than replicated tables) and will not be assigned any shards.
        /// To rebalance data and shards across the cluster, use <see
        /// cref="adminRebalance(AdminRebalanceRequest)">adminRebalance</see>.</para>
        /// <para>The database must be offline for this operation, see <see
        /// cref="adminOffline(AdminOfflineRequest)">adminOffline</see></para>
        /// <para>For example, if attempting to add three new ranks (two ranks
        /// on host 172.123.45.67 and one rank on host 172.123.45.68) to a
        /// Kinetica cluster with additional configuration parameters:</para>
        /// <para>* <see cref="AdminAddRanksRequest.hosts">hosts</see> would be
        /// an array including 172.123.45.67 in the first two indices
        /// (signifying two ranks being added to host 172.123.45.67) and
        /// 172.123.45.68 in the last index (signifying one rank being added to
        /// host 172.123.45.67)</para>
        /// <para>* <see
        /// cref="AdminAddRanksRequest.config_params">config_params</see> would
        /// be an array of maps, with each map corresponding to the ranks being
        /// added in <see cref="AdminAddRanksRequest.hosts">hosts</see>. The
        /// key of each map would be the configuration parameter name and the
        /// value would be the parameter's value, e.g.
        /// '{"rank.gpu":"1"}'</para>
        /// <para>This endpoint's processing includes copying all replicated
        /// table data to the new rank(s) and therefore could take a long time.
        /// The API call may time out if run directly.  It is recommended to
        /// run this endpoint asynchronously via <see
        /// cref="createJob(CreateJobRequest)">createJob</see>.</para>
        /// <para>This method should be used for on-premise deployments only.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminAddRanksResponse adminAddRanks( AdminAddRanksRequest request_ )
        {
            AdminAddRanksResponse actualResponse_ = SubmitRequest<AdminAddRanksResponse>("/admin/add/ranks", request_, false);

            return actualResponse_;
        }

        /// <summary>Add one or more ranks to an existing Kinetica cluster.
        /// </summary>
        /// <remarks><para>The new ranks will not contain any data initially
        /// (other than replicated tables) and will not be assigned any shards.
        /// To rebalance data and shards across the cluster, use <see
        /// cref="adminRebalance(IDictionary{string,string})">adminRebalance</see>.</para>
        /// <para>The database must be offline for this operation, see <see
        /// cref="adminOffline(bool,IDictionary{string,string})">adminOffline</see></para>
        /// <para>For example, if attempting to add three new ranks (two ranks
        /// on host 172.123.45.67 and one rank on host 172.123.45.68) to a
        /// Kinetica cluster with additional configuration parameters:</para>
        /// <para>* <paramref name="hosts" /> would be an array including
        /// 172.123.45.67 in the first two indices (signifying two ranks being
        /// added to host 172.123.45.67) and 172.123.45.68 in the last index
        /// (signifying one rank being added to host 172.123.45.67)</para>
        /// <para>* <paramref name="config_params" /> would be an array of
        /// maps, with each map corresponding to the ranks being added in
        /// <paramref name="hosts" />. The key of each map would be the
        /// configuration parameter name and the value would be the parameter's
        /// value, e.g. '{"rank.gpu":"1"}'</para>
        /// <para>This endpoint's processing includes copying all replicated
        /// table data to the new rank(s) and therefore could take a long time.
        /// The API call may time out if run directly.  It is recommended to
        /// run this endpoint asynchronously via <see
        /// cref="createJob(string,string,byte[],string,IDictionary{string,string})">createJob</see>.</para>
        /// <para>This method should be used for on-premise deployments only.
        /// </para></remarks>
        ///
        /// <param name="hosts">Array of host IP addresses (matching a
        /// hostN.address from the gpudb.conf file), or host identifiers (e.g.
        /// 'host0' from the gpudb.conf file), on which to add ranks to the
        /// cluster. The hosts must already be in the cluster. If needed
        /// beforehand, to add a new host to the cluster use <see
        /// cref="adminAddHost(string,IDictionary{string,string})">adminAddHost</see>.
        /// Include the same entry as many times as there are ranks to add to
        /// the cluster, e.g., if two ranks on host 172.123.45.67 should be
        /// added, <paramref name="hosts" /> could look like '["172.123.45.67",
        /// "172.123.45.67"]'. All ranks will be added simultaneously, i.e.
        /// they're not added in the order of this array. Each entry in this
        /// array corresponds to the entry at the same index in the <paramref
        /// name="config_params" />.</param>
        /// <param name="config_params">Array of maps containing configuration
        /// parameters to apply to the new ranks found in <paramref
        /// name="hosts" />. For example, '{"rank.gpu":"2",
        /// "tier.ram.rank.limit":"10000000000"}'. Currently, the available
        /// parameters are rank-specific parameters in the <a
        /// href="../../../config/#config-main-network"
        /// target="_top">Network</a>, <a
        /// href="../../../config/#config-main-hardware"
        /// target="_top">Hardware</a>, <a
        /// href="../../../config/#config-main-text-search" target="_top">Text
        /// Search</a>, and <a href="../../../config/#config-main-ram-tier"
        /// target="_top">RAM Tiered Storage</a> sections in the gpudb.conf
        /// file, with the key exception of the 'rankN.host' settings in the
        /// Network section that will be determined by <paramref name="hosts"
        /// /> instead. Though many of these configuration parameters typically
        /// are affixed with 'rankN' in the gpudb.conf file (where N is the
        /// rank number), the 'N' should be omitted in <paramref
        /// name="config_params" /> as the new rank number(s) are not allocated
        /// until the ranks have been added to the cluster. Each entry in this
        /// array corresponds to the entry at the same index in the <paramref
        /// name="hosts" />. This array must either be completely empty or have
        /// the same number of elements as the <paramref name="hosts" />.  An
        /// empty <paramref name="config_params" /> array will result in the
        /// new ranks being set with default parameters.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminAddRanksRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminAddRanksRequest.Options.TRUE">TRUE</see>, only
        ///         validation checks will be performed. No ranks are added.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminAddRanksRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminAddRanksRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminAddRanksRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminAddRanksResponse adminAddRanks( IList<string> hosts,
                                                    IList<IDictionary<string, string>> config_params,
                                                    IDictionary<string, string> options = null )
        {
            return adminAddRanks( new AdminAddRanksRequest( hosts, config_params, options ) );
        }

        /// <summary>Alter properties on an existing host in the cluster.
        /// </summary>
        /// <remarks><para>Currently, the only property that can be altered is
        /// a hosts ability to accept failover processes.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminAlterHostResponse adminAlterHost( AdminAlterHostRequest request_ )
        {
            AdminAlterHostResponse actualResponse_ = SubmitRequest<AdminAlterHostResponse>("/admin/alter/host", request_, false);

            return actualResponse_;
        }

        /// <summary>Alter properties on an existing host in the cluster.
        /// </summary>
        /// <remarks><para>Currently, the only property that can be altered is
        /// a hosts ability to accept failover processes.</para></remarks>
        ///
        /// <param name="host">Identifies the host this applies to. Can be the
        /// host address, or formatted as 'hostN' where N is the host number as
        /// specified in gpudb.conf</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminAlterHostRequest.Options.ACCEPTS_FAILOVER">ACCEPTS_FAILOVER</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="AdminAlterHostRequest.Options.TRUE">TRUE</see>, the
        ///         host will accept processes (ranks, graph server, etc.) in
        ///         the event of a failover on another node in the cluster.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminAlterHostRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminAlterHostRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminAlterHostRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminAlterHostResponse adminAlterHost( string host,
                                                      IDictionary<string, string> options = null )
        {
            return adminAlterHost( new AdminAlterHostRequest( host, options ) );
        }

        /// <summary>Perform the requested action on a list of one or more
        /// job(s).</summary>
        /// <remarks><para>Based on the type of job and the current state of
        /// execution, the action may not be successfully executed. The final
        /// result of the attempted actions for each specified job is returned
        /// in the status array of the response. See <a
        /// href="../../../admin/job_manager/" target="_top">Job Manager</a>
        /// for more information.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminAlterJobsResponse adminAlterJobs( AdminAlterJobsRequest request_ )
        {
            AdminAlterJobsResponse actualResponse_ = SubmitRequest<AdminAlterJobsResponse>("/admin/alter/jobs", request_, false);

            return actualResponse_;
        }

        /// <summary>Perform the requested action on a list of one or more
        /// job(s).</summary>
        /// <remarks><para>Based on the type of job and the current state of
        /// execution, the action may not be successfully executed. The final
        /// result of the attempted actions for each specified job is returned
        /// in the status array of the response. See <a
        /// href="../../../admin/job_manager/" target="_top">Job Manager</a>
        /// for more information.</para></remarks>
        ///
        /// <param name="job_ids">Jobs to be modified.</param>
        /// <param name="action">Action to be performed on the jobs specified
        /// by job_ids.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminAlterJobsRequest.Action.CANCEL">CANCEL</see>
        ///         </term>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminAlterJobsRequest.Options.JOB_TAG">JOB_TAG</see>:
        ///         </term>
        ///         <description>Job tag returned in call to create the job
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminAlterJobsResponse adminAlterJobs( IList<long> job_ids,
                                                      string action,
                                                      IDictionary<string, string> options = null )
        {
            return adminAlterJobs( new AdminAlterJobsRequest( job_ids, action, options ) );
        }

        /// <summary>Prepares the system for a backup by closing all open file
        /// handles after allowing current active jobs to complete.</summary>
        /// <remarks><para>When the database is in backup mode, queries that
        /// result in a disk write operation will be blocked until backup mode
        /// has been completed by using <see
        /// cref="adminBackupEnd(AdminBackupEndRequest)">adminBackupEnd</see>.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminBackupBeginResponse adminBackupBegin( AdminBackupBeginRequest request_ )
        {
            AdminBackupBeginResponse actualResponse_ = SubmitRequest<AdminBackupBeginResponse>("/admin/backup/begin", request_, false);

            return actualResponse_;
        }

        /// <summary>Prepares the system for a backup by closing all open file
        /// handles after allowing current active jobs to complete.</summary>
        /// <remarks><para>When the database is in backup mode, queries that
        /// result in a disk write operation will be blocked until backup mode
        /// has been completed by using <see
        /// cref="adminBackupEnd(IDictionary{string,string})">adminBackupEnd</see>.
        /// </para></remarks>
        ///
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminBackupBeginResponse adminBackupBegin( IDictionary<string, string> options = null )
        {
            return adminBackupBegin( new AdminBackupBeginRequest( options ) );
        }

        /// <summary>Restores the system to normal operating mode after a
        /// backup has completed, allowing any queries that were blocked to
        /// complete.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminBackupEndResponse adminBackupEnd( AdminBackupEndRequest request_ )
        {
            AdminBackupEndResponse actualResponse_ = SubmitRequest<AdminBackupEndResponse>("/admin/backup/end", request_, false);

            return actualResponse_;
        }

        /// <summary>Restores the system to normal operating mode after a
        /// backup has completed, allowing any queries that were blocked to
        /// complete.</summary>
        ///
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminBackupEndResponse adminBackupEnd( IDictionary<string, string> options = null )
        {
            return adminBackupEnd( new AdminBackupEndRequest( options ) );
        }

        /// <summary>Restarts the HA processing on the given cluster as a
        /// mechanism of accepting breaking HA conf changes.</summary>
        /// <remarks><para>Additionally the cluster is put into read-only while
        /// HA is restarting.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminHaRefreshResponse adminHaRefresh( AdminHaRefreshRequest request_ )
        {
            AdminHaRefreshResponse actualResponse_ = SubmitRequest<AdminHaRefreshResponse>("/admin/ha/refresh", request_, false);

            return actualResponse_;
        }

        /// <summary>Restarts the HA processing on the given cluster as a
        /// mechanism of accepting breaking HA conf changes.</summary>
        /// <remarks><para>Additionally the cluster is put into read-only while
        /// HA is restarting.</para></remarks>
        ///
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminHaRefreshResponse adminHaRefresh( IDictionary<string, string> options = null )
        {
            return adminHaRefresh( new AdminHaRefreshRequest( options ) );
        }

        /// <summary>Take the system offline.</summary>
        /// <remarks><para>When the system is offline, no user operations can
        /// be performed with the exception of a system shutdown.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminOfflineResponse adminOffline( AdminOfflineRequest request_ )
        {
            AdminOfflineResponse actualResponse_ = SubmitRequest<AdminOfflineResponse>("/admin/offline", request_, false);

            return actualResponse_;
        }

        /// <summary>Take the system offline.</summary>
        /// <remarks><para>When the system is offline, no user operations can
        /// be performed with the exception of a system shutdown.</para>
        /// </remarks>
        ///
        /// <param name="offline">Set to true if desired state is offline.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminOfflineRequest.Offline.TRUE">TRUE</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminOfflineRequest.Offline.FALSE">FALSE</see></term>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminOfflineRequest.Options.FLUSH_TO_DISK">FLUSH_TO_DISK</see>:
        ///         </term>
        ///         <description>Flush to disk when going offline.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminOfflineRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminOfflineRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminOfflineResponse adminOffline( bool offline,
                                                  IDictionary<string, string> options = null )
        {
            return adminOffline( new AdminOfflineRequest( offline, options ) );
        }

        /// <summary>Rebalance the data in the cluster so that all nodes
        /// contain an equal number of records approximately and/or rebalance
        /// the shards to be equally distributed (as much as possible) across
        /// all the ranks.</summary>
        /// <remarks><para> The database must be offline for this operation,
        /// see <see
        /// cref="adminOffline(AdminOfflineRequest)">adminOffline</see></para>
        /// <para>* If <see
        /// cref="adminRebalance(AdminRebalanceRequest)">adminRebalance</see>
        /// is invoked after a change is made to the cluster, e.g., a host was
        /// added or removed, <a href="../../../concepts/tables/#sharding"
        /// target="_top">sharded data</a> will be evenly redistributed across
        /// the cluster by number of shards per rank while unsharded data will
        /// be redistributed across the cluster by data size per rank</para>
        /// <para>* If <see
        /// cref="adminRebalance(AdminRebalanceRequest)">adminRebalance</see>
        /// is invoked at some point when unsharded data (a.k.a. <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly-sharded</a>) in the cluster is unevenly
        /// distributed over time, sharded data will not move while unsharded
        /// data will be redistributed across the cluster by data size per
        /// rank</para>
        /// <para>NOTE: Replicated data will not move as a result of this
        /// call</para>
        /// <para>This endpoint's processing time depends on the amount of data
        /// in the system, thus the API call may time out if run directly.  It
        /// is recommended to run this endpoint asynchronously via <see
        /// cref="createJob(CreateJobRequest)">createJob</see>.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminRebalanceResponse adminRebalance( AdminRebalanceRequest request_ )
        {
            AdminRebalanceResponse actualResponse_ = SubmitRequest<AdminRebalanceResponse>("/admin/rebalance", request_, false);

            return actualResponse_;
        }

        /// <summary>Rebalance the data in the cluster so that all nodes
        /// contain an equal number of records approximately and/or rebalance
        /// the shards to be equally distributed (as much as possible) across
        /// all the ranks.</summary>
        /// <remarks><para> The database must be offline for this operation,
        /// see <see
        /// cref="adminOffline(bool,IDictionary{string,string})">adminOffline</see></para>
        /// <para>* If <see
        /// cref="adminRebalance(IDictionary{string,string})">adminRebalance</see>
        /// is invoked after a change is made to the cluster, e.g., a host was
        /// added or removed, <a href="../../../concepts/tables/#sharding"
        /// target="_top">sharded data</a> will be evenly redistributed across
        /// the cluster by number of shards per rank while unsharded data will
        /// be redistributed across the cluster by data size per rank</para>
        /// <para>* If <see
        /// cref="adminRebalance(IDictionary{string,string})">adminRebalance</see>
        /// is invoked at some point when unsharded data (a.k.a. <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly-sharded</a>) in the cluster is unevenly
        /// distributed over time, sharded data will not move while unsharded
        /// data will be redistributed across the cluster by data size per
        /// rank</para>
        /// <para>NOTE: Replicated data will not move as a result of this
        /// call</para>
        /// <para>This endpoint's processing time depends on the amount of data
        /// in the system, thus the API call may time out if run directly.  It
        /// is recommended to run this endpoint asynchronously via <see
        /// cref="createJob(string,string,byte[],string,IDictionary{string,string})">createJob</see>.
        /// </para></remarks>
        ///
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminRebalanceRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>, <a
        ///         href="../../../concepts/tables/#sharding"
        ///         target="_top">sharded data</a> will be rebalanced
        ///         approximately equally across the cluster. Note that for
        ///         clusters with large amounts of sharded data, this data
        ///         transfer could be time consuming and result in delayed
        ///         query responses.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRebalanceRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>,
        ///         unsharded data (a.k.a. <a
        ///         href="../../../concepts/tables/#random-sharding"
        ///         target="_top">randomly-sharded</a>) will be rebalanced
        ///         approximately equally across the cluster. Note that for
        ///         clusters with large amounts of unsharded data, this data
        ///         transfer could be time consuming and result in delayed
        ///         query responses.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRebalanceRequest.Options.TABLE_INCLUDES">TABLE_INCLUDES</see>:
        ///         </term>
        ///         <description>Comma-separated list of unsharded table names
        ///         to rebalance. Not applicable to sharded tables because they
        ///         are always rebalanced. Cannot be used simultaneously with
        ///         <see
        ///         cref="AdminRebalanceRequest.Options.TABLE_EXCLUDES">TABLE_EXCLUDES</see>.
        ///         This parameter is ignored if <see
        ///         cref="AdminRebalanceRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>
        ///         is <see
        ///         cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRebalanceRequest.Options.TABLE_EXCLUDES">TABLE_EXCLUDES</see>:
        ///         </term>
        ///         <description>Comma-separated list of unsharded table names
        ///         to not rebalance. Not applicable to sharded tables because
        ///         they are always rebalanced. Cannot be used simultaneously
        ///         with <see
        ///         cref="AdminRebalanceRequest.Options.TABLE_INCLUDES">TABLE_INCLUDES</see>.
        ///         This parameter is ignored if <see
        ///         cref="AdminRebalanceRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>
        ///         is <see
        ///         cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRebalanceRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>:
        ///         </term>
        ///         <description>Influences how much data is moved at a time
        ///         during rebalance.  A higher <see
        ///         cref="AdminRebalanceRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>
        ///         will complete the rebalance faster.  A lower <see
        ///         cref="AdminRebalanceRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>
        ///         will take longer but allow for better interleaving between
        ///         the rebalance and other queries. Valid values are constants
        ///         from 1 (lowest) to 10 (highest). The default value is '10'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRebalanceRequest.Options.COMPACT_AFTER_REBALANCE">COMPACT_AFTER_REBALANCE</see>:
        ///         </term>
        ///         <description>Perform compaction of deleted records once the
        ///         rebalance completes to reclaim memory and disk space.
        ///         Default is <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>,
        ///         unless <see
        ///         cref="AdminRebalanceRequest.Options.REPAIR_INCORRECTLY_SHARDED_DATA">REPAIR_INCORRECTLY_SHARDED_DATA</see>
        ///         is set to <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRebalanceRequest.Options.COMPACT_ONLY">COMPACT_ONLY</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>,
        ///         ignore rebalance options and attempt to perform compaction
        ///         of deleted records to reclaim memory and disk space without
        ///         rebalancing first.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRebalanceRequest.Options.REPAIR_INCORRECTLY_SHARDED_DATA">REPAIR_INCORRECTLY_SHARDED_DATA</see>:
        ///         </term>
        ///         <description>Scans for any data sharded incorrectly and
        ///         re-routes the data to the correct location. Only necessary
        ///         if <see
        ///         cref="adminVerifyDb(IDictionary{string,string})">adminVerifyDb</see>
        ///         reports an error in sharding alignment. This can be done as
        ///         part of a typical rebalance after expanding the cluster or
        ///         in a standalone fashion when it is believed that data is
        ///         sharded incorrectly somewhere in the cluster. Compaction
        ///         will not be performed by default when this is enabled. If
        ///         this option is set to <see
        ///         cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>, the
        ///         time necessary to rebalance and the memory used by the
        ///         rebalance may increase.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminRebalanceRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminRebalanceResponse adminRebalance( IDictionary<string, string> options = null )
        {
            return adminRebalance( new AdminRebalanceRequest( options ) );
        }

        /// <summary>Removes a host from an existing cluster.</summary>
        /// <remarks><para>If the host to be removed has any ranks running on
        /// it, the ranks must be removed using <see
        /// cref="adminRemoveRanks(AdminRemoveRanksRequest)">adminRemoveRanks</see>
        /// or manually switched over to a new host using <see
        /// cref="adminSwitchover(AdminSwitchoverRequest)">adminSwitchover</see>
        /// prior to host removal. If the host to be removed has the graph
        /// server or SQL planner running on it, these must be manually
        /// switched over to a new host using <see
        /// cref="adminSwitchover(AdminSwitchoverRequest)">adminSwitchover</see>.</para>
        /// <para>This method should be used for on-premise deployments only.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminRemoveHostResponse adminRemoveHost( AdminRemoveHostRequest request_ )
        {
            AdminRemoveHostResponse actualResponse_ = SubmitRequest<AdminRemoveHostResponse>("/admin/remove/host", request_, false);

            return actualResponse_;
        }

        /// <summary>Removes a host from an existing cluster.</summary>
        /// <remarks><para>If the host to be removed has any ranks running on
        /// it, the ranks must be removed using <see
        /// cref="adminRemoveRanks(IList{string},IDictionary{string,string})">adminRemoveRanks</see>
        /// or manually switched over to a new host using <see
        /// cref="adminSwitchover(IList{string},IList{string},IDictionary{string,string})">adminSwitchover</see>
        /// prior to host removal. If the host to be removed has the graph
        /// server or SQL planner running on it, these must be manually
        /// switched over to a new host using <see
        /// cref="adminSwitchover(IList{string},IList{string},IDictionary{string,string})">adminSwitchover</see>.</para>
        /// <para>This method should be used for on-premise deployments only.
        /// </para></remarks>
        ///
        /// <param name="host">Identifies the host this applies to. Can be the
        /// host address, or formatted as 'hostN' where N is the host number as
        /// specified in gpudb.conf</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminRemoveHostRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="AdminRemoveHostRequest.Options.TRUE">TRUE</see>, only
        ///         validation checks will be performed. No host is removed.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRemoveHostRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRemoveHostRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminRemoveHostRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminRemoveHostResponse adminRemoveHost( string host,
                                                        IDictionary<string, string> options = null )
        {
            return adminRemoveHost( new AdminRemoveHostRequest( host, options ) );
        }

        /// <summary>Remove one or more ranks from an existing Kinetica
        /// cluster.</summary>
        /// <remarks><para>All data will be rebalanced to other ranks before
        /// the rank(s) is removed unless the <see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>
        /// or <see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>
        /// parameters are set to <see
        /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see> in the
        /// <see cref="AdminRemoveRanksRequest.options">options</see>, in which
        /// case the corresponding <a href="../../../concepts/tables/#sharding"
        /// target="_top">sharded data</a> and/or unsharded data (a.k.a. <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly-sharded</a>) will be deleted.</para>
        /// <para>The database must be offline for this operation, see <see
        /// cref="adminOffline(AdminOfflineRequest)">adminOffline</see></para>
        /// <para>This endpoint's processing time depends on the amount of data
        /// in the system, thus the API call may time out if run directly.  It
        /// is recommended to run this endpoint asynchronously via <see
        /// cref="createJob(CreateJobRequest)">createJob</see>.</para>
        /// <para>This method should be used for on-premise deployments only.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminRemoveRanksResponse adminRemoveRanks( AdminRemoveRanksRequest request_ )
        {
            AdminRemoveRanksResponse actualResponse_ = SubmitRequest<AdminRemoveRanksResponse>("/admin/remove/ranks", request_, false);

            return actualResponse_;
        }

        /// <summary>Remove one or more ranks from an existing Kinetica
        /// cluster.</summary>
        /// <remarks><para>All data will be rebalanced to other ranks before
        /// the rank(s) is removed unless the <see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>
        /// or <see
        /// cref="AdminRemoveRanksRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>
        /// parameters are set to <see
        /// cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see> in the
        /// <paramref name="options" />, in which case the corresponding <a
        /// href="../../../concepts/tables/#sharding" target="_top">sharded
        /// data</a> and/or unsharded data (a.k.a. <a
        /// href="../../../concepts/tables/#random-sharding"
        /// target="_top">randomly-sharded</a>) will be deleted.</para>
        /// <para>The database must be offline for this operation, see <see
        /// cref="adminOffline(bool,IDictionary{string,string})">adminOffline</see></para>
        /// <para>This endpoint's processing time depends on the amount of data
        /// in the system, thus the API call may time out if run directly.  It
        /// is recommended to run this endpoint asynchronously via <see
        /// cref="createJob(string,string,byte[],string,IDictionary{string,string})">createJob</see>.</para>
        /// <para>This method should be used for on-premise deployments only.
        /// </para></remarks>
        ///
        /// <param name="ranks">Each array value designates one or more ranks
        /// to remove from the cluster. Values can be formatted as 'rankN' for
        /// a specific rank, 'hostN' (from the gpudb.conf file) to remove all
        /// ranks on that host, or the host IP address (hostN.address from the
        /// gpub.conf file) which also removes all ranks on that host. Rank 0
        /// (the head rank) cannot be removed (but can be moved to another host
        /// using <see
        /// cref="adminSwitchover(IList{string},IList{string},IDictionary{string,string})">adminSwitchover</see>).
        /// At least one worker rank must be left in the cluster after the
        /// operation.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminRemoveRanksRequest.Options.REBALANCE_SHARDED_DATA">REBALANCE_SHARDED_DATA</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>, <a
        ///         href="../../../concepts/tables/#sharding"
        ///         target="_top">sharded data</a> will be rebalanced
        ///         approximately equally across the cluster. Note that for
        ///         clusters with large amounts of sharded data, this data
        ///         transfer could be time consuming and result in delayed
        ///         query responses.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRemoveRanksRequest.Options.REBALANCE_UNSHARDED_DATA">REBALANCE_UNSHARDED_DATA</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>,
        ///         unsharded data (a.k.a. <a
        ///         href="../../../concepts/tables/#random-sharding"
        ///         target="_top">randomly-sharded</a>) will be rebalanced
        ///         approximately equally across the cluster. Note that for
        ///         clusters with large amounts of unsharded data, this data
        ///         transfer could be time consuming and result in delayed
        ///         query responses.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRemoveRanksRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminRemoveRanksRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminRemoveRanksRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>:
        ///         </term>
        ///         <description>Influences how much data is moved at a time
        ///         during rebalance.  A higher <see
        ///         cref="AdminRemoveRanksRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>
        ///         will complete the rebalance faster.  A lower <see
        ///         cref="AdminRemoveRanksRequest.Options.AGGRESSIVENESS">AGGRESSIVENESS</see>
        ///         will take longer but allow for better interleaving between
        ///         the rebalance and other queries. Valid values are constants
        ///         from 1 (lowest) to 10 (highest). The default value is '10'.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminRemoveRanksResponse adminRemoveRanks( IList<string> ranks,
                                                          IDictionary<string, string> options = null )
        {
            return adminRemoveRanks( new AdminRemoveRanksRequest( ranks, options ) );
        }

        /// <summary>Manually repair a corrupted table.Returns information
        /// about affected tables.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminRepairTableResponse adminRepairTable( AdminRepairTableRequest request_ )
        {
            AdminRepairTableResponse actualResponse_ = SubmitRequest<AdminRepairTableResponse>("/admin/repair/table", request_, false);

            return actualResponse_;
        }

        /// <summary>Manually repair a corrupted table.Returns information
        /// about affected tables.</summary>
        ///
        /// <param name="table_names">List of tables to query. An asterisk
        /// returns all tables.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminRepairTableRequest.Options.REPAIR_POLICY">REPAIR_POLICY</see>:
        ///         </term>
        ///         <description>Corrective action to take.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRepairTableRequest.Options.DELETE_CHUNKS">DELETE_CHUNKS</see>:
        ///                 </term>
        ///                 <description>Deletes any corrupted chunks
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRepairTableRequest.Options.SHRINK_COLUMNS">SHRINK_COLUMNS</see>:
        ///                 </term>
        ///                 <description>Shrinks corrupted chunks to the
        ///                 shortest column</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminRepairTableRequest.Options.REPLAY_WAL">REPLAY_WAL</see>:
        ///                 </term>
        ///                 <description>Manually invokes wal replay on the
        ///                 table</description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminRepairTableResponse adminRepairTable( IList<string> table_names,
                                                          IDictionary<string, string> options = null )
        {
            return adminRepairTable( new AdminRepairTableRequest( table_names, options ) );
        }

        /// <summary>Requests a list of the most recent alerts.Returns lists of
        /// alert data, including timestamp and type.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShowAlertsResponse adminShowAlerts( AdminShowAlertsRequest request_ )
        {
            AdminShowAlertsResponse actualResponse_ = SubmitRequest<AdminShowAlertsResponse>("/admin/show/alerts", request_, false);

            return actualResponse_;
        }

        /// <summary>Requests a list of the most recent alerts.Returns lists of
        /// alert data, including timestamp and type.</summary>
        ///
        /// <param name="num_alerts">Number of most recent alerts to request.
        /// The response will include up to <paramref name="num_alerts" />
        /// depending on how many alerts there are in the system. A value of 0
        /// returns all stored alerts.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShowAlertsResponse adminShowAlerts( int num_alerts,
                                                        IDictionary<string, string> options = null )
        {
            return adminShowAlerts( new AdminShowAlertsRequest( num_alerts, options ) );
        }

        /// <summary>Requests the detailed status of the current operation (by
        /// default) or a prior cluster operation specified by <see
        /// cref="AdminShowClusterOperationsRequest.history_index">history_index</see>.Returns
        /// details on the requested cluster operation.</summary>
        /// <remarks><para> The response will also indicate how many cluster
        /// operations are stored in the history.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShowClusterOperationsResponse adminShowClusterOperations( AdminShowClusterOperationsRequest request_ )
        {
            AdminShowClusterOperationsResponse actualResponse_ = SubmitRequest<AdminShowClusterOperationsResponse>("/admin/show/cluster/operations", request_, false);

            return actualResponse_;
        }

        /// <summary>Requests the detailed status of the current operation (by
        /// default) or a prior cluster operation specified by <paramref
        /// name="history_index" />.Returns details on the requested cluster
        /// operation.</summary>
        /// <remarks><para> The response will also indicate how many cluster
        /// operations are stored in the history.</para></remarks>
        ///
        /// <param name="history_index">Indicates which cluster operation to
        /// retrieve.  Use 0 for the most recent. The default value is 0.
        /// </param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShowClusterOperationsResponse adminShowClusterOperations( int history_index = 0,
                                                                              IDictionary<string, string> options = null )
        {
            return adminShowClusterOperations( new AdminShowClusterOperationsRequest( history_index,
                                                                                      options ) );
        }

        /// <summary>Get a list of the current jobs in GPUdb.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShowJobsResponse adminShowJobs( AdminShowJobsRequest request_ )
        {
            AdminShowJobsResponse actualResponse_ = SubmitRequest<AdminShowJobsResponse>("/admin/show/jobs", request_, false);

            return actualResponse_;
        }

        /// <summary>Get a list of the current jobs in GPUdb.</summary>
        ///
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminShowJobsRequest.Options.SHOW_ASYNC_JOBS">SHOW_ASYNC_JOBS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminShowJobsRequest.Options.TRUE">TRUE</see>, then
        ///         the completed async jobs are also included in the response.
        ///         By default, once the async jobs are completed they are no
        ///         longer included in the jobs list.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminShowJobsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminShowJobsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminShowJobsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminShowJobsRequest.Options.SHOW_WORKER_INFO">SHOW_WORKER_INFO</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminShowJobsRequest.Options.TRUE">TRUE</see>, then
        ///         information is also returned from worker ranks. By default
        ///         only status from the head rank is returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminShowJobsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminShowJobsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShowJobsResponse adminShowJobs( IDictionary<string, string> options = null )
        {
            return adminShowJobs( new AdminShowJobsRequest( options ) );
        }

        /// <summary>Show the mapping of shards to the corresponding rank and
        /// tom.</summary>
        /// <remarks><para> The response message contains list of 16384 (total
        /// number of shards in the system) Rank and TOM numbers corresponding
        /// to each shard.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShowShardsResponse adminShowShards( AdminShowShardsRequest request_ )
        {
            AdminShowShardsResponse actualResponse_ = SubmitRequest<AdminShowShardsResponse>("/admin/show/shards", request_, false);

            return actualResponse_;
        }

        /// <summary>Show the mapping of shards to the corresponding rank and
        /// tom.</summary>
        /// <remarks><para> The response message contains list of 16384 (total
        /// number of shards in the system) Rank and TOM numbers corresponding
        /// to each shard.</para></remarks>
        ///
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShowShardsResponse adminShowShards( IDictionary<string, string> options = null )
        {
            return adminShowShards( new AdminShowShardsRequest( options ) );
        }

        /// <summary>Exits the database server application.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShutdownResponse adminShutdown( AdminShutdownRequest request_ )
        {
            AdminShutdownResponse actualResponse_ = SubmitRequest<AdminShutdownResponse>("/admin/shutdown", request_, false);

            return actualResponse_;
        }

        /// <summary>Exits the database server application.</summary>
        ///
        /// <param name="exit_type">Reserved for future use. User can pass an
        /// empty string.</param>
        /// <param name="authorization">No longer used. User can pass an empty
        /// string.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminShutdownResponse adminShutdown( string exit_type,
                                                    string authorization,
                                                    IDictionary<string, string> options = null )
        {
            return adminShutdown( new AdminShutdownRequest( exit_type, authorization,
                                                            options ) );
        }

        /// <summary>Manually switch over one or more processes to another
        /// host.</summary>
        /// <remarks><para>Individual ranks or entire hosts may be moved to
        /// another host.</para>
        /// <para>This method should be used for on-premise deployments only.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminSwitchoverResponse adminSwitchover( AdminSwitchoverRequest request_ )
        {
            AdminSwitchoverResponse actualResponse_ = SubmitRequest<AdminSwitchoverResponse>("/admin/switchover", request_, false);

            return actualResponse_;
        }

        /// <summary>Manually switch over one or more processes to another
        /// host.</summary>
        /// <remarks><para>Individual ranks or entire hosts may be moved to
        /// another host.</para>
        /// <para>This method should be used for on-premise deployments only.
        /// </para></remarks>
        ///
        /// <param name="processes">Indicates the process identifier to switch
        /// over to another host. Options are 'hostN' and 'rankN' where 'N'
        /// corresponds to the number associated with a host or rank in the <a
        /// href="../../../config/#config-main-network"
        /// target="_top">Network</a> section of the gpudb.conf file; e.g.,
        /// 'host[N].address' or 'rank[N].host'. If 'hostN' is provided, all
        /// processes on that host will be moved to another host. Each entry in
        /// this array will be switched over to the corresponding host entry at
        /// the same index in <paramref name="destinations" />.</param>
        /// <param name="destinations">Indicates to which host to switch over
        /// each corresponding process given in <paramref name="processes" />.
        /// Each index must be specified as 'hostN' where 'N' corresponds to
        /// the number associated with a host or rank in the <a
        /// href="../../../config/#config-main-network"
        /// target="_top">Network</a> section of the gpudb.conf file; e.g.,
        /// 'host[N].address'. Each entry in this array will receive the
        /// corresponding process entry at the same index in <paramref
        /// name="processes" />.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminSwitchoverRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="AdminSwitchoverRequest.Options.TRUE">TRUE</see>, only
        ///         validation checks will be performed. Nothing is switched
        ///         over.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminSwitchoverRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminSwitchoverRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminSwitchoverResponse adminSwitchover( IList<string> processes,
                                                        IList<string> destinations,
                                                        IDictionary<string, string> options = null )
        {
            return adminSwitchover( new AdminSwitchoverRequest( processes, destinations,
                                                                options ) );
        }

        /// <summary>Verify database is in a consistent state.</summary>
        /// <remarks><para> When inconsistencies or errors are found, the
        /// verified_ok flag in the response is set to false and the list of
        /// errors found is provided in the error_list.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminVerifyDbResponse adminVerifyDb( AdminVerifyDbRequest request_ )
        {
            AdminVerifyDbResponse actualResponse_ = SubmitRequest<AdminVerifyDbResponse>("/admin/verifydb", request_, false);

            return actualResponse_;
        }

        /// <summary>Verify database is in a consistent state.</summary>
        /// <remarks><para> When inconsistencies or errors are found, the
        /// verified_ok flag in the response is set to false and the list of
        /// errors found is provided in the error_list.</para></remarks>
        ///
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AdminVerifyDbRequest.Options.REBUILD_ON_ERROR">REBUILD_ON_ERROR</see>:
        ///         </term>
        ///         <description>[DEPRECATED -- Use the Rebuild DB feature of
        ///         GAdmin instead.].
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminVerifyDbRequest.Options.VERIFY_NULLS">VERIFY_NULLS</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>,
        ///         verifies that null values are set to zero.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminVerifyDbRequest.Options.VERIFY_PERSIST">VERIFY_PERSIST</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>,
        ///         persistent objects will be compared against their state in
        ///         memory and workers will be checked for orphaned table data
        ///         in persist. To check for orphaned worker data, either set
        ///         <see
        ///         cref="AdminVerifyDbRequest.Options.CONCURRENT_SAFE">CONCURRENT_SAFE</see>
        ///         in <paramref name="options" /> to <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see> or
        ///         place the database offline.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminVerifyDbRequest.Options.CONCURRENT_SAFE">CONCURRENT_SAFE</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>, allows
        ///         this endpoint to be run safely with other concurrent
        ///         database operations. Other operations may be slower while
        ///         this is running.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminVerifyDbRequest.Options.VERIFY_RANK0">VERIFY_RANK0</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>,
        ///         compare rank0 table metadata against workers' metadata.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminVerifyDbRequest.Options.DELETE_ORPHANED_TABLES">DELETE_ORPHANED_TABLES</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>,
        ///         orphaned table directories found on workers for which there
        ///         is no corresponding metadata will be deleted. Must set <see
        ///         cref="AdminVerifyDbRequest.Options.VERIFY_PERSIST">VERIFY_PERSIST</see>
        ///         in <paramref name="options" /> to <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>. It is
        ///         recommended to run this while the database is offline OR
        ///         set <see
        ///         cref="AdminVerifyDbRequest.Options.CONCURRENT_SAFE">CONCURRENT_SAFE</see>
        ///         in <paramref name="options" /> to <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AdminVerifyDbRequest.Options.VERIFY_ORPHANED_TABLES_ONLY">VERIFY_ORPHANED_TABLES_ONLY</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>, only
        ///         the presence of orphaned table directories will be checked,
        ///         all persistence checks will be skipped.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AdminVerifyDbRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AdminVerifyDbResponse adminVerifyDb( IDictionary<string, string> options = null )
        {
            return adminVerifyDb( new AdminVerifyDbRequest( options ) );
        }

        /// <summary>Calculates and returns the convex hull for the values in a
        /// table specified by <see
        /// cref="AggregateConvexHullRequest.table_name">table_name</see>.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateConvexHullResponse aggregateConvexHull( AggregateConvexHullRequest request_ )
        {
            AggregateConvexHullResponse actualResponse_ = SubmitRequest<AggregateConvexHullResponse>("/aggregate/convexhull", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates and returns the convex hull for the values in a
        /// table specified by <paramref name="table_name" />.</summary>
        ///
        /// <param name="table_name">Name of table on which the operation will
        /// be performed. Must be an existing table, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="x_column_name">Name of the column containing the x
        /// coordinates of the points for the operation being performed.
        /// </param>
        /// <param name="y_column_name">Name of the column containing the y
        /// coordinates of the points for the operation being performed.
        /// </param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateConvexHullResponse aggregateConvexHull( string table_name,
                                                                string x_column_name,
                                                                string y_column_name,
                                                                IDictionary<string, string> options = null )
        {
            return aggregateConvexHull( new AggregateConvexHullRequest( table_name,
                                                                        x_column_name,
                                                                        y_column_name,
                                                                        options ) );
        }

        /// <summary>Calculates unique combinations (groups) of values for the
        /// given columns in a given table or view and computes aggregates on
        /// each unique combination.</summary>
        /// <remarks><para>This is somewhat analogous to an SQL-style
        /// SELECT...GROUP BY.</para>
        /// <para>For aggregation details and examples, see <a
        /// href="../../../concepts/aggregation/"
        /// target="_top">Aggregation</a>.  For limitations, see <a
        /// href="../../../concepts/aggregation/#limitations"
        /// target="_top">Aggregation Limitations</a>.</para>
        /// <para>Any column(s) can be grouped on, and all column types except
        /// unrestricted-length strings may be used for computing applicable
        /// aggregates; columns marked as <a
        /// href="../../../concepts/types/#data-handling"
        /// target="_top">store-only</a> are unable to be used in grouping or
        /// aggregation.</para>
        /// <para>The results can be paged via the <see
        /// cref="AggregateGroupByRequest.offset">offset</see> and <see
        /// cref="AggregateGroupByRequest.limit">limit</see> parameters. For
        /// example, to get 10 groups with the largest counts the inputs would
        /// be: limit=10, options={"sort_order":"descending",
        /// "sort_by":"value"}.</para>
        /// <para><see cref="AggregateGroupByRequest.options">options</see> can
        /// be used to customize behavior of this call e.g. filtering or
        /// sorting the results.</para>
        /// <para>To group by columns 'x' and 'y' and compute the number of
        /// objects within each group, use:
        /// column_names=['x','y','count(*)'].</para>
        /// <para>To also compute the sum of 'z' over each group, use:
        /// column_names=['x','y','count(*)','sum(z)'].</para>
        /// <para>Available <a
        /// href="../../../concepts/expressions/#aggregate-expressions"
        /// target="_top">aggregation functions</a> are: count(*), sum, min,
        /// max, avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop,
        /// var_samp, arg_min, arg_max and count_distinct.</para>
        /// <para>Available grouping functions are <a
        /// href="../../../concepts/rollup/" target="_top">Rollup</a>, <a
        /// href="../../../concepts/cube/" target="_top">Cube</a>, and <a
        /// href="../../../concepts/grouping_sets/" target="_top">Grouping
        /// Sets</a></para>
        /// <para>This service also provides support for <a
        /// href="../../../concepts/pivot/" target="_top">Pivot</a>
        /// operations.</para>
        /// <para>Filtering on aggregates is supported via expressions using <a
        /// href="../../../concepts/expressions/#aggregate-expressions"
        /// target="_top">aggregation functions</a> supplied to <see
        /// cref="AggregateGroupByRequest.Options.HAVING">HAVING</see>.</para>
        /// <para>The response is returned as a dynamic schema. For details
        /// see: <a href="../../../api/concepts/#dynamic-schemas"
        /// target="_top">dynamic schemas documentation</a>.</para>
        /// <para>If a <see
        /// cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        /// name is specified in the <see
        /// cref="AggregateGroupByRequest.options">options</see>, the results
        /// are stored in a new table with that name--no results are returned
        /// in the response.  Both the table name and resulting column names
        /// must adhere to <a href="../../../concepts/tables/#table"
        /// target="_top">standard naming conventions</a>; column/aggregation
        /// expressions will need to be aliased.  If the source table's <a
        /// href="../../../concepts/tables/#shard-keys" target="_top">shard
        /// key</a> is used as the grouping column(s) and all result records
        /// are selected (<see
        /// cref="AggregateGroupByRequest.offset">offset</see> is 0 and <see
        /// cref="AggregateGroupByRequest.limit">limit</see> is -9999), the
        /// result table will be sharded, in all other cases it will be
        /// replicated.  Sorting will properly function only if the result
        /// table is replicated or if there is only one processing node and
        /// should not be relied upon in other cases.  Not available when any
        /// of the values of <see
        /// cref="AggregateGroupByRequest.column_names">column_names</see> is
        /// an unrestricted-length string.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateGroupByResponse aggregateGroupBy( AggregateGroupByRequest request_ )
        {
            RawAggregateGroupByResponse actualResponse_ = SubmitRequest<RawAggregateGroupByResponse>("/aggregate/groupby", request_, false);

            AggregateGroupByResponse response_ = new AggregateGroupByResponse();
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            response_.info = actualResponse_.info;
            return response_;
        }

        /// <summary>Calculates unique combinations (groups) of values for the
        /// given columns in a given table or view and computes aggregates on
        /// each unique combination.</summary>
        /// <remarks><para>This is somewhat analogous to an SQL-style
        /// SELECT...GROUP BY.</para>
        /// <para>For aggregation details and examples, see <a
        /// href="../../../concepts/aggregation/"
        /// target="_top">Aggregation</a>.  For limitations, see <a
        /// href="../../../concepts/aggregation/#limitations"
        /// target="_top">Aggregation Limitations</a>.</para>
        /// <para>Any column(s) can be grouped on, and all column types except
        /// unrestricted-length strings may be used for computing applicable
        /// aggregates; columns marked as <a
        /// href="../../../concepts/types/#data-handling"
        /// target="_top">store-only</a> are unable to be used in grouping or
        /// aggregation.</para>
        /// <para>The results can be paged via the <paramref name="offset" />
        /// and <paramref name="limit" /> parameters. For example, to get 10
        /// groups with the largest counts the inputs would be: limit=10,
        /// options={"sort_order":"descending", "sort_by":"value"}.</para>
        /// <para><paramref name="options" /> can be used to customize behavior
        /// of this call e.g. filtering or sorting the results.</para>
        /// <para>To group by columns 'x' and 'y' and compute the number of
        /// objects within each group, use:
        /// column_names=['x','y','count(*)'].</para>
        /// <para>To also compute the sum of 'z' over each group, use:
        /// column_names=['x','y','count(*)','sum(z)'].</para>
        /// <para>Available <a
        /// href="../../../concepts/expressions/#aggregate-expressions"
        /// target="_top">aggregation functions</a> are: count(*), sum, min,
        /// max, avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop,
        /// var_samp, arg_min, arg_max and count_distinct.</para>
        /// <para>Available grouping functions are <a
        /// href="../../../concepts/rollup/" target="_top">Rollup</a>, <a
        /// href="../../../concepts/cube/" target="_top">Cube</a>, and <a
        /// href="../../../concepts/grouping_sets/" target="_top">Grouping
        /// Sets</a></para>
        /// <para>This service also provides support for <a
        /// href="../../../concepts/pivot/" target="_top">Pivot</a>
        /// operations.</para>
        /// <para>Filtering on aggregates is supported via expressions using <a
        /// href="../../../concepts/expressions/#aggregate-expressions"
        /// target="_top">aggregation functions</a> supplied to <see
        /// cref="AggregateGroupByRequest.Options.HAVING">HAVING</see>.</para>
        /// <para>The response is returned as a dynamic schema. For details
        /// see: <a href="../../../api/concepts/#dynamic-schemas"
        /// target="_top">dynamic schemas documentation</a>.</para>
        /// <para>If a <see
        /// cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        /// name is specified in the <paramref name="options" />, the results
        /// are stored in a new table with that name--no results are returned
        /// in the response.  Both the table name and resulting column names
        /// must adhere to <a href="../../../concepts/tables/#table"
        /// target="_top">standard naming conventions</a>; column/aggregation
        /// expressions will need to be aliased.  If the source table's <a
        /// href="../../../concepts/tables/#shard-keys" target="_top">shard
        /// key</a> is used as the grouping column(s) and all result records
        /// are selected (<paramref name="offset" /> is 0 and <paramref
        /// name="limit" /> is -9999), the result table will be sharded, in all
        /// other cases it will be replicated.  Sorting will properly function
        /// only if the result table is replicated or if there is only one
        /// processing node and should not be relied upon in other cases.  Not
        /// available when any of the values of <paramref name="column_names"
        /// /> is an unrestricted-length string.</para></remarks>
        ///
        /// <param name="table_name">Name of an existing table or view on which
        /// the operation will be performed, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_names">List of one or more column names,
        /// expressions, and aggregate expressions.</param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results). The default value is 0. The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT.</param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or END_OF_SET (-9999) to indicate
        /// that the maximum number of results allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the <a
        /// href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration. Use <see
        /// cref="AggregateGroupByResponse.has_more_records">has_more_records</see>
        /// to see if more records exist in the result to be fetched, and
        /// <paramref name="offset" /> & <paramref name="limit" /> to request
        /// subsequent pages of results. The default value is -9999.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateGroupByRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         If <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>
        ///         is <see
        ///         cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>
        ///         (or unspecified), then this is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="AggregateGroupByResponse.Info.QUALIFIED_RESULT_TABLE_NAME">QUALIFIED_RESULT_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema as part of <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema
        ///         which is to contain the table specified in <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         If the schema provided is non-existent, it will be
        ///         automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Filter expression to apply to the table prior
        ///         to computing the aggregate group by.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.HAVING">HAVING</see>:
        ///         </term>
        ///         <description>Filter expression to apply to the aggregated
        ///         results.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.SORT_ORDER">SORT_ORDER</see>:
        ///         </term>
        ///         <description>String indicating how the returned values
        ///         should be sorted - ascending or descending.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.ASCENDING">ASCENDING</see>:
        ///                 </term>
        ///                 <description>Indicates that the returned values
        ///                 should be sorted in ascending order.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.DESCENDING">DESCENDING</see>:
        ///                 </term>
        ///                 <description>Indicates that the returned values
        ///                 should be sorted in descending order.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateGroupByRequest.Options.ASCENDING">ASCENDING</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.SORT_BY">SORT_BY</see>:
        ///         </term>
        ///         <description>String determining how the results are sorted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.KEY">KEY</see>:
        ///                 </term>
        ///                 <description>Indicates that the returned values
        ///                 should be sorted by key, which corresponds to the
        ///                 grouping columns. If you have multiple grouping
        ///                 columns (and are sorting by key), it will first
        ///                 sort the first grouping column, then the second
        ///                 grouping column, etc.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.VALUE">VALUE</see>:
        ///                 </term>
        ///                 <description>Indicates that the returned values
        ///                 should be sorted by value, which corresponds to the
        ///                 aggregates. If you have multiple aggregates (and
        ///                 are sorting by value), it will first sort by the
        ///                 first aggregate, then the second aggregate, etc.
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateGroupByRequest.Options.VALUE">VALUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.ORDER_BY">ORDER_BY</see>:
        ///         </term>
        ///         <description>Comma-separated list of the columns to be
        ///         sorted by as well as the sort direction, e.g., 'timestamp
        ///         asc, x desc'. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>:
        ///         </term>
        ///         <description>The name of a table used to store the results,
        ///         in [schema_name.]table_name format, using standard <a
        ///         href="../../../concepts/tables/#table-name-resolution"
        ///         target="_top">name resolution rules</a> and meeting <a
        ///         href="../../../concepts/tables/#table-naming-criteria"
        ///         target="_top">table naming criteria</a>.  Column names
        ///         (group-by and aggregate fields) need to be given aliases
        ///         e.g. ["FChar256 as fchar256", "sum(FDouble) as sfd"].  If
        ///         present, no results are returned in the response.  This
        ///         option is not available if one of the grouping attributes
        ///         is an unrestricted string (i.e.; not charN) type.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateGroupByRequest.Options.TRUE">TRUE</see>,
        ///         then the result table specified in <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         will be persisted and will not expire unless a <see
        ///         cref="AggregateGroupByRequest.Options.TTL">TTL</see> is
        ///         specified.   If <see
        ///         cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>,
        ///         then the result table will be an in-memory table and will
        ///         expire unless a <see
        ///         cref="AggregateGroupByRequest.Options.TTL">TTL</see> is
        ///         specified otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE_FORCE_REPLICATED">RESULT_TABLE_FORCE_REPLICATED</see>:
        ///         </term>
        ///         <description>Force the result table to be replicated
        ///         (ignores any sharding). Must be used in combination with
        ///         the <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE_GENERATE_PK">RESULT_TABLE_GENERATE_PK</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateGroupByRequest.Options.TRUE">TRUE</see> then
        ///         set a primary key for the result table. Must be used in
        ///         combination with the <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateGroupByRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for the result table. Must be used in combination
        ///         with the <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for the result table.
        ///         Must be used in combination with the <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for the result table. Must be
        ///         used in combination with the <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.CREATE_INDEXES">CREATE_INDEXES</see>:
        ///         </term>
        ///         <description>Comma-separated list of columns on which to
        ///         create indexes on the result table. Must be used in
        ///         combination with the <see
        ///         cref="AggregateGroupByRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.VIEW_ID">VIEW_ID</see>:
        ///         </term>
        ///         <description>ID of view of which the result table will be a
        ///         member. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.PIVOT">PIVOT</see>:
        ///         </term>
        ///         <description>pivot column</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.PIVOT_VALUES">PIVOT_VALUES</see>:
        ///         </term>
        ///         <description>The value list provided will become the column
        ///         headers in the output. Should be the values from the
        ///         pivot_column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.GROUPING_SETS">GROUPING_SETS</see>:
        ///         </term>
        ///         <description>Customize the grouping attribute sets to
        ///         compute the aggregates. These sets can include ROLLUP or
        ///         CUBE operartors. The attribute sets should be enclosed in
        ///         paranthesis and can include composite attributes. All
        ///         attributes specified in the grouping sets must present in
        ///         the groupby attributes.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.ROLLUP">ROLLUP</see>:
        ///         </term>
        ///         <description>This option is used to specify the multilevel
        ///         aggregates.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.CUBE">CUBE</see>:
        ///         </term>
        ///         <description>This option is used to specify the
        ///         multidimensional aggregates.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateGroupByRequest.Options.SHARD_KEY">SHARD_KEY</see>:
        ///         </term>
        ///         <description>Comma-separated list of the columns to be
        ///         sharded on; e.g. 'column1, column2'.  The columns specified
        ///         must be present in <paramref name="column_names" />.  If
        ///         any alias is given for any column name, the alias must be
        ///         used, rather than the original column name. The default
        ///         value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateGroupByResponse aggregateGroupBy( string table_name,
                                                          IList<string> column_names,
                                                          long offset = 0,
                                                          long limit = -9999,
                                                          IDictionary<string, string> options = null )
        {
            return aggregateGroupBy( new AggregateGroupByRequest( table_name,
                                                                  column_names, offset,
                                                                  limit, options ) );
        }

        /// <summary>Performs a histogram calculation given a table, a column,
        /// and an interval function.</summary>
        /// <remarks><para>The <see
        /// cref="AggregateHistogramRequest.interval">interval</see> is used to
        /// produce bins of that size and the result, computed over the records
        /// falling within each bin, is returned. For each bin, the start value
        /// is inclusive, but the end value is exclusive--except for the very
        /// last bin for which the end value is also inclusive.  The value
        /// returned for each bin is the number of records in it, except when a
        /// column name is provided as a <see
        /// cref="AggregateHistogramRequest.Options.VALUE_COLUMN">VALUE_COLUMN</see>.
        /// In this latter case the sum of the values corresponding to the <see
        /// cref="AggregateHistogramRequest.Options.VALUE_COLUMN">VALUE_COLUMN</see>
        /// is used as the result instead.  The total number of bins requested
        /// cannot exceed 10,000.</para>
        /// <para>NOTE:  The Kinetica instance being accessed must be running a
        /// CUDA (GPU-based) build to service a request that specifies a <see
        /// cref="AggregateHistogramRequest.Options.VALUE_COLUMN">VALUE_COLUMN</see>.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateHistogramResponse aggregateHistogram( AggregateHistogramRequest request_ )
        {
            AggregateHistogramResponse actualResponse_ = SubmitRequest<AggregateHistogramResponse>("/aggregate/histogram", request_, false);

            return actualResponse_;
        }

        /// <summary>Performs a histogram calculation given a table, a column,
        /// and an interval function.</summary>
        /// <remarks><para>The <paramref name="interval" /> is used to produce
        /// bins of that size and the result, computed over the records falling
        /// within each bin, is returned. For each bin, the start value is
        /// inclusive, but the end value is exclusive--except for the very last
        /// bin for which the end value is also inclusive.  The value returned
        /// for each bin is the number of records in it, except when a column
        /// name is provided as a <see
        /// cref="AggregateHistogramRequest.Options.VALUE_COLUMN">VALUE_COLUMN</see>.
        /// In this latter case the sum of the values corresponding to the <see
        /// cref="AggregateHistogramRequest.Options.VALUE_COLUMN">VALUE_COLUMN</see>
        /// is used as the result instead.  The total number of bins requested
        /// cannot exceed 10,000.</para>
        /// <para>NOTE:  The Kinetica instance being accessed must be running a
        /// CUDA (GPU-based) build to service a request that specifies a <see
        /// cref="AggregateHistogramRequest.Options.VALUE_COLUMN">VALUE_COLUMN</see>.
        /// </para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_name">Name of a column or an expression of one
        /// or more column names over which the histogram will be calculated.
        /// </param>
        /// <param name="start">Lower end value of the histogram interval,
        /// inclusive.</param>
        /// <param name="end">Upper end value of the histogram interval,
        /// inclusive.</param>
        /// <param name="interval">The size of each bin within the start and
        /// end parameters.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AggregateHistogramRequest.Options.VALUE_COLUMN">VALUE_COLUMN</see>:
        ///         </term>
        ///         <description>The name of the column to use when calculating
        ///         the bin values (values are summed).  The column must be a
        ///         numerical type (int, double, long, float).</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateHistogramResponse aggregateHistogram( string table_name,
                                                              string column_name,
                                                              double start,
                                                              double end,
                                                              double interval,
                                                              IDictionary<string, string> options = null )
        {
            return aggregateHistogram( new AggregateHistogramRequest( table_name,
                                                                      column_name, start,
                                                                      end, interval,
                                                                      options ) );
        }

        /// <summary>This endpoint runs the k-means algorithm - a heuristic
        /// algorithm that attempts to do k-means clustering.</summary>
        /// <remarks><para> An ideal k-means clustering algorithm selects k
        /// points such that the sum of the mean squared distances of each
        /// member of the set to the nearest of the k points is minimized.  The
        /// k-means algorithm however does not necessarily produce such an
        /// ideal cluster.   It begins with a randomly selected set of k points
        /// and then refines the location of the points iteratively and settles
        /// to a local minimum.  Various parameters and options are provided to
        /// control the heuristic search.</para>
        /// <para>NOTE:  The Kinetica instance being accessed must be running a
        /// CUDA (GPU-based) build to service this request.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateKMeansResponse aggregateKMeans( AggregateKMeansRequest request_ )
        {
            AggregateKMeansResponse actualResponse_ = SubmitRequest<AggregateKMeansResponse>("/aggregate/kmeans", request_, false);

            return actualResponse_;
        }

        /// <summary>This endpoint runs the k-means algorithm - a heuristic
        /// algorithm that attempts to do k-means clustering.</summary>
        /// <remarks><para> An ideal k-means clustering algorithm selects k
        /// points such that the sum of the mean squared distances of each
        /// member of the set to the nearest of the k points is minimized.  The
        /// k-means algorithm however does not necessarily produce such an
        /// ideal cluster.   It begins with a randomly selected set of k points
        /// and then refines the location of the points iteratively and settles
        /// to a local minimum.  Various parameters and options are provided to
        /// control the heuristic search.</para>
        /// <para>NOTE:  The Kinetica instance being accessed must be running a
        /// CUDA (GPU-based) build to service this request.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_names">List of column names on which the
        /// operation would be performed. If n columns are provided then each
        /// of the k result points will have n dimensions corresponding to the
        /// n columns.</param>
        /// <param name="k">The number of mean points to be determined by the
        /// algorithm.</param>
        /// <param name="tolerance">Stop iterating when the distances between
        /// successive points is less than the given tolerance.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AggregateKMeansRequest.Options.WHITEN">WHITEN</see>:
        ///         </term>
        ///         <description>When set to 1 each of the columns is first
        ///         normalized by its stdv - default is not to whiten.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateKMeansRequest.Options.MAX_ITERS">MAX_ITERS</see>:
        ///         </term>
        ///         <description>Number of times to try to hit the tolerance
        ///         limit before giving up - default is 10.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateKMeansRequest.Options.NUM_TRIES">NUM_TRIES</see>:
        ///         </term>
        ///         <description>Number of times to run the k-means algorithm
        ///         with a different randomly selected starting points - helps
        ///         avoid local minimum. Default is 1.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateKMeansRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateKMeansRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <see
        ///         cref="AggregateKMeansRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         If <see
        ///         cref="AggregateKMeansRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>
        ///         is <see
        ///         cref="AggregateKMeansRequest.Options.FALSE">FALSE</see> (or
        ///         unspecified), then this is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="AggregateKMeansResponse.Info.QUALIFIED_RESULT_TABLE_NAME">QUALIFIED_RESULT_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateKMeansRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateKMeansRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateKMeansRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateKMeansRequest.Options.RESULT_TABLE">RESULT_TABLE</see>:
        ///         </term>
        ///         <description>The name of a table used to store the results,
        ///         in [schema_name.]table_name format, using standard <a
        ///         href="../../../concepts/tables/#table-name-resolution"
        ///         target="_top">name resolution rules</a> and meeting <a
        ///         href="../../../concepts/tables/#table-naming-criteria"
        ///         target="_top">table naming criteria</a>.  If this option is
        ///         specified, the results are not returned in the response.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateKMeansRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateKMeansRequest.Options.TRUE">TRUE</see>, then
        ///         the result table specified in <see
        ///         cref="AggregateKMeansRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         will be persisted and will not expire unless a <see
        ///         cref="AggregateKMeansRequest.Options.TTL">TTL</see> is
        ///         specified.   If <see
        ///         cref="AggregateKMeansRequest.Options.FALSE">FALSE</see>,
        ///         then the result table will be an in-memory table and will
        ///         expire unless a <see
        ///         cref="AggregateKMeansRequest.Options.TTL">TTL</see> is
        ///         specified otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateKMeansRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateKMeansRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateKMeansRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateKMeansRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <see
        ///         cref="AggregateKMeansRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateKMeansResponse aggregateKMeans( string table_name,
                                                        IList<string> column_names,
                                                        int k,
                                                        double tolerance,
                                                        IDictionary<string, string> options = null )
        {
            return aggregateKMeans( new AggregateKMeansRequest( table_name, column_names,
                                                                k, tolerance, options ) );
        }

        /// <summary>Calculates and returns the minimum and maximum values of a
        /// particular column in a table.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateMinMaxResponse aggregateMinMax( AggregateMinMaxRequest request_ )
        {
            AggregateMinMaxResponse actualResponse_ = SubmitRequest<AggregateMinMaxResponse>("/aggregate/minmax", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates and returns the minimum and maximum values of a
        /// particular column in a table.</summary>
        ///
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_name">Name of a column or an expression of one
        /// or more column on which the min-max will be calculated.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateMinMaxResponse aggregateMinMax( string table_name,
                                                        string column_name,
                                                        IDictionary<string, string> options = null )
        {
            return aggregateMinMax( new AggregateMinMaxRequest( table_name, column_name,
                                                                options ) );
        }

        /// <summary>Calculates and returns the minimum and maximum x- and
        /// y-coordinates of a particular geospatial geometry column in a
        /// table.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateMinMaxGeometryResponse aggregateMinMaxGeometry( AggregateMinMaxGeometryRequest request_ )
        {
            AggregateMinMaxGeometryResponse actualResponse_ = SubmitRequest<AggregateMinMaxGeometryResponse>("/aggregate/minmax/geometry", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates and returns the minimum and maximum x- and
        /// y-coordinates of a particular geospatial geometry column in a
        /// table.</summary>
        ///
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_name">Name of a geospatial geometry column on
        /// which the min-max will be calculated.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateMinMaxGeometryResponse aggregateMinMaxGeometry( string table_name,
                                                                        string column_name,
                                                                        IDictionary<string, string> options = null )
        {
            return aggregateMinMaxGeometry( new AggregateMinMaxGeometryRequest( table_name,
                                                                                column_name,
                                                                                options ) );
        }

        /// <summary>Calculates the requested statistics of the given column(s)
        /// in a given table.</summary>
        /// <remarks><para> The available statistics are: <see
        /// cref="AggregateStatisticsRequest.Stats.COUNT">COUNT</see> (number
        /// of total objects), <see
        /// cref="AggregateStatisticsRequest.Stats.MEAN">MEAN</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.STDV">STDV</see> (standard
        /// deviation), <see
        /// cref="AggregateStatisticsRequest.Stats.VARIANCE">VARIANCE</see>,
        /// <see cref="AggregateStatisticsRequest.Stats.SKEW">SKEW</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.KURTOSIS">KURTOSIS</see>,
        /// <see cref="AggregateStatisticsRequest.Stats.SUM">SUM</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.MIN">MIN</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.MAX">MAX</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.WEIGHTED_AVERAGE">WEIGHTED_AVERAGE</see>,
        /// <see
        /// cref="AggregateStatisticsRequest.Stats.CARDINALITY">CARDINALITY</see>
        /// (unique count), <see
        /// cref="AggregateStatisticsRequest.Stats.ESTIMATED_CARDINALITY">ESTIMATED_CARDINALITY</see>,
        /// <see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE">PERCENTILE</see>,
        /// and <see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>.</para>
        /// <para>Estimated cardinality is calculated by using the hyperloglog
        /// approximation technique.</para>
        /// <para>Percentiles and percentile ranks are approximate and are
        /// calculated using the t-digest algorithm. They must include the
        /// desired <see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE">PERCENTILE</see>/<see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>.
        /// To compute multiple percentiles each value must be specified
        /// separately (i.e.
        /// 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').</para>
        /// <para>A second, comma-separated value can be added to the <see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE">PERCENTILE</see>
        /// statistic to calculate percentile resolution, e.g., a 50th
        /// percentile with 200 resolution would be
        /// 'percentile(50,200)'.</para>
        /// <para>The weighted average statistic requires a weight column to be
        /// specified in <see
        /// cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>.
        /// The weighted average is then defined as the sum of the products of
        /// <see
        /// cref="AggregateStatisticsRequest.column_name">column_name</see>
        /// times the <see
        /// cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>
        /// values divided by the sum of the <see
        /// cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>
        /// values.</para>
        /// <para>Additional columns can be used in the calculation of
        /// statistics via <see
        /// cref="AggregateStatisticsRequest.Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>.
        /// Values in these columns will be included in the overall aggregate
        /// calculation--individual aggregates will not be calculated per
        /// additional column.  For instance, requesting the <see
        /// cref="AggregateStatisticsRequest.Stats.COUNT">COUNT</see> & <see
        /// cref="AggregateStatisticsRequest.Stats.MEAN">MEAN</see> of <see
        /// cref="AggregateStatisticsRequest.column_name">column_name</see> x
        /// and <see
        /// cref="AggregateStatisticsRequest.Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>
        /// y & z, where x holds the numbers 1-10, y holds 11-20, and z holds
        /// 21-30, would return the total number of x, y, & z values (30), and
        /// the single average value across all x, y, & z values (15.5).</para>
        /// <para>The response includes a list of key/value pairs of each
        /// statistic requested and its corresponding value.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateStatisticsResponse aggregateStatistics( AggregateStatisticsRequest request_ )
        {
            AggregateStatisticsResponse actualResponse_ = SubmitRequest<AggregateStatisticsResponse>("/aggregate/statistics", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates the requested statistics of the given column(s)
        /// in a given table.</summary>
        /// <remarks><para> The available statistics are: <see
        /// cref="AggregateStatisticsRequest.Stats.COUNT">COUNT</see> (number
        /// of total objects), <see
        /// cref="AggregateStatisticsRequest.Stats.MEAN">MEAN</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.STDV">STDV</see> (standard
        /// deviation), <see
        /// cref="AggregateStatisticsRequest.Stats.VARIANCE">VARIANCE</see>,
        /// <see cref="AggregateStatisticsRequest.Stats.SKEW">SKEW</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.KURTOSIS">KURTOSIS</see>,
        /// <see cref="AggregateStatisticsRequest.Stats.SUM">SUM</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.MIN">MIN</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.MAX">MAX</see>, <see
        /// cref="AggregateStatisticsRequest.Stats.WEIGHTED_AVERAGE">WEIGHTED_AVERAGE</see>,
        /// <see
        /// cref="AggregateStatisticsRequest.Stats.CARDINALITY">CARDINALITY</see>
        /// (unique count), <see
        /// cref="AggregateStatisticsRequest.Stats.ESTIMATED_CARDINALITY">ESTIMATED_CARDINALITY</see>,
        /// <see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE">PERCENTILE</see>,
        /// and <see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>.</para>
        /// <para>Estimated cardinality is calculated by using the hyperloglog
        /// approximation technique.</para>
        /// <para>Percentiles and percentile ranks are approximate and are
        /// calculated using the t-digest algorithm. They must include the
        /// desired <see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE">PERCENTILE</see>/<see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>.
        /// To compute multiple percentiles each value must be specified
        /// separately (i.e.
        /// 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').</para>
        /// <para>A second, comma-separated value can be added to the <see
        /// cref="AggregateStatisticsRequest.Stats.PERCENTILE">PERCENTILE</see>
        /// statistic to calculate percentile resolution, e.g., a 50th
        /// percentile with 200 resolution would be
        /// 'percentile(50,200)'.</para>
        /// <para>The weighted average statistic requires a weight column to be
        /// specified in <see
        /// cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>.
        /// The weighted average is then defined as the sum of the products of
        /// <paramref name="column_name" /> times the <see
        /// cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>
        /// values divided by the sum of the <see
        /// cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>
        /// values.</para>
        /// <para>Additional columns can be used in the calculation of
        /// statistics via <see
        /// cref="AggregateStatisticsRequest.Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>.
        /// Values in these columns will be included in the overall aggregate
        /// calculation--individual aggregates will not be calculated per
        /// additional column.  For instance, requesting the <see
        /// cref="AggregateStatisticsRequest.Stats.COUNT">COUNT</see> & <see
        /// cref="AggregateStatisticsRequest.Stats.MEAN">MEAN</see> of
        /// <paramref name="column_name" /> x and <see
        /// cref="AggregateStatisticsRequest.Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>
        /// y & z, where x holds the numbers 1-10, y holds 11-20, and z holds
        /// 21-30, would return the total number of x, y, & z values (30), and
        /// the single average value across all x, y, & z values (15.5).</para>
        /// <para>The response includes a list of key/value pairs of each
        /// statistic requested and its corresponding value.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the statistics
        /// operation will be performed, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_name">Name of the primary column for which the
        /// statistics are to be calculated.</param>
        /// <param name="stats">Comma separated list of the statistics to
        /// calculate, e.g. "sum,mean".
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.COUNT">COUNT</see>:
        ///         </term>
        ///         <description>Number of objects (independent of the given
        ///         column(s)).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.MEAN">MEAN</see>:
        ///         </term>
        ///         <description>Arithmetic mean (average), equivalent to
        ///         sum/count.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.STDV">STDV</see>:
        ///         </term>
        ///         <description>Sample standard deviation (denominator is
        ///         count-1).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.VARIANCE">VARIANCE</see>:
        ///         </term>
        ///         <description>Unbiased sample variance (denominator is
        ///         count-1).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.SKEW">SKEW</see>:
        ///         </term>
        ///         <description>Skewness (third standardized moment).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.KURTOSIS">KURTOSIS</see>:
        ///         </term>
        ///         <description>Kurtosis (fourth standardized moment).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.SUM">SUM</see>:
        ///         </term>
        ///         <description>Sum of all values in the column(s).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.MIN">MIN</see>:
        ///         </term>
        ///         <description>Minimum value of the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.MAX">MAX</see>:
        ///         </term>
        ///         <description>Maximum value of the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.WEIGHTED_AVERAGE">WEIGHTED_AVERAGE</see>:
        ///         </term>
        ///         <description>Weighted arithmetic mean (using the option
        ///         <see
        ///         cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>
        ///         as the weighting column).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.CARDINALITY">CARDINALITY</see>:
        ///         </term>
        ///         <description>Number of unique values in the column(s).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.ESTIMATED_CARDINALITY">ESTIMATED_CARDINALITY</see>:
        ///         </term>
        ///         <description>Estimate (via hyperloglog technique) of the
        ///         number of unique values in the column(s).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.PERCENTILE">PERCENTILE</see>:
        ///         </term>
        ///         <description>Estimate (via t-digest) of the given
        ///         percentile of the column(s) (percentile(50.0) will be an
        ///         approximation of the median). Add a second, comma-separated
        ///         value to calculate percentile resolution, e.g.,
        ///         'percentile(75,150)'</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Stats.PERCENTILE_RANK">PERCENTILE_RANK</see>:
        ///         </term>
        ///         <description>Estimate (via t-digest) of the percentile rank
        ///         of the given value in the column(s) (if the given value is
        ///         the median of the column(s),
        ///         percentile_rank(&lt;median&gt;) will return approximately
        ///         50.0).</description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>:
        ///         </term>
        ///         <description>A list of comma separated column names over
        ///         which statistics can be accumulated along with the primary
        ///         column.  All columns listed and <paramref
        ///         name="column_name" /> must be of the same type.  Must not
        ///         include the column specified in <paramref
        ///         name="column_name" /> and no column can be listed twice.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>:
        ///         </term>
        ///         <description>Name of column used as weighting attribute for
        ///         the weighted average statistic.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateStatisticsResponse aggregateStatistics( string table_name,
                                                                string column_name,
                                                                string stats,
                                                                IDictionary<string, string> options = null )
        {
            return aggregateStatistics( new AggregateStatisticsRequest( table_name,
                                                                        column_name,
                                                                        stats, options ) );
        }

        /// <summary>Divides the given set into bins and calculates statistics
        /// of the values of a value-column in each bin.</summary>
        /// <remarks><para> The bins are based on the values of a given
        /// binning-column.  The statistics that may be requested are mean,
        /// stdv (standard deviation), variance, skew, kurtosis, sum, min, max,
        /// first, last and weighted average. In addition to the requested
        /// statistics the count of total samples in each bin is returned. This
        /// counts vector is just the histogram of the column used to divide
        /// the set members into bins. The weighted average statistic requires
        /// a weight column to be specified in <see
        /// cref="AggregateStatisticsByRangeRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>.
        /// The weighted average is then defined as the sum of the products of
        /// the value column times the weight column divided by the sum of the
        /// weight column.</para>
        /// <para>There are two methods for binning the set members. In the
        /// first, which can be used for numeric valued binning-columns, a min,
        /// max and interval are specified. The number of bins, nbins, is the
        /// integer upper bound of (max-min)/interval. Values that fall in the
        /// range [min+n*interval,min+(n+1)*interval) are placed in the nth bin
        /// where n ranges from 0..nbin-2. The final bin is
        /// [min+(nbin-1)*interval,max]. In the second method, <see
        /// cref="AggregateStatisticsByRangeRequest.Options.BIN_VALUES">BIN_VALUES</see>
        /// specifies a list of binning column values. Binning-columns whose
        /// value matches the nth member of the <see
        /// cref="AggregateStatisticsByRangeRequest.Options.BIN_VALUES">BIN_VALUES</see>
        /// list are placed in the nth bin. When a list is provided, the
        /// binning-column must be of type string or int.</para>
        /// <para>NOTE:  The Kinetica instance being accessed must be running a
        /// CUDA (GPU-based) build to service this request.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateStatisticsByRangeResponse aggregateStatisticsByRange( AggregateStatisticsByRangeRequest request_ )
        {
            AggregateStatisticsByRangeResponse actualResponse_ = SubmitRequest<AggregateStatisticsByRangeResponse>("/aggregate/statistics/byrange", request_, false);

            return actualResponse_;
        }

        /// <summary>Divides the given set into bins and calculates statistics
        /// of the values of a value-column in each bin.</summary>
        /// <remarks><para> The bins are based on the values of a given
        /// binning-column.  The statistics that may be requested are mean,
        /// stdv (standard deviation), variance, skew, kurtosis, sum, min, max,
        /// first, last and weighted average. In addition to the requested
        /// statistics the count of total samples in each bin is returned. This
        /// counts vector is just the histogram of the column used to divide
        /// the set members into bins. The weighted average statistic requires
        /// a weight column to be specified in <see
        /// cref="AggregateStatisticsByRangeRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>.
        /// The weighted average is then defined as the sum of the products of
        /// the value column times the weight column divided by the sum of the
        /// weight column.</para>
        /// <para>There are two methods for binning the set members. In the
        /// first, which can be used for numeric valued binning-columns, a min,
        /// max and interval are specified. The number of bins, nbins, is the
        /// integer upper bound of (max-min)/interval. Values that fall in the
        /// range [min+n*interval,min+(n+1)*interval) are placed in the nth bin
        /// where n ranges from 0..nbin-2. The final bin is
        /// [min+(nbin-1)*interval,max]. In the second method, <see
        /// cref="AggregateStatisticsByRangeRequest.Options.BIN_VALUES">BIN_VALUES</see>
        /// specifies a list of binning column values. Binning-columns whose
        /// value matches the nth member of the <see
        /// cref="AggregateStatisticsByRangeRequest.Options.BIN_VALUES">BIN_VALUES</see>
        /// list are placed in the nth bin. When a list is provided, the
        /// binning-column must be of type string or int.</para>
        /// <para>NOTE:  The Kinetica instance being accessed must be running a
        /// CUDA (GPU-based) build to service this request.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the
        /// ranged-statistics operation will be performed, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="select_expression">For a non-empty expression
        /// statistics are calculated for those records for which the
        /// expression is true. The default value is ''.</param>
        /// <param name="column_name">Name of the binning-column used to divide
        /// the set samples into bins.</param>
        /// <param name="value_column_name">Name of the value-column for which
        /// statistics are to be computed.</param>
        /// <param name="stats">A string of comma separated list of the
        /// statistics to calculate, e.g. 'sum,mean'. Available statistics:
        /// mean, stdv (standard deviation), variance, skew, kurtosis, sum.
        /// </param>
        /// <param name="start">The lower bound of the binning-column.</param>
        /// <param name="end">The upper bound of the binning-column.</param>
        /// <param name="interval">The interval of a bin. Set members fall into
        /// bin i if the binning-column falls in the range [start+interval*i,
        /// start+interval*(i+1)).</param>
        /// <param name="options">Map of optional parameters:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsByRangeRequest.Options.ADDITIONAL_COLUMN_NAMES">ADDITIONAL_COLUMN_NAMES</see>:
        ///         </term>
        ///         <description>A list of comma separated value-column names
        ///         over which statistics can be accumulated along with the
        ///         primary value_column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsByRangeRequest.Options.BIN_VALUES">BIN_VALUES</see>:
        ///         </term>
        ///         <description>A list of comma separated binning-column
        ///         values. Values that match the nth bin_values value are
        ///         placed in the nth bin.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsByRangeRequest.Options.WEIGHT_COLUMN_NAME">WEIGHT_COLUMN_NAME</see>:
        ///         </term>
        ///         <description>Name of the column used as weighting column
        ///         for the weighted_average statistic.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateStatisticsByRangeRequest.Options.ORDER_COLUMN_NAME">ORDER_COLUMN_NAME</see>:
        ///         </term>
        ///         <description>Name of the column used for candlestick
        ///         charting techniques.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateStatisticsByRangeResponse aggregateStatisticsByRange( string table_name,
                                                                              string select_expression,
                                                                              string column_name,
                                                                              string value_column_name,
                                                                              string stats,
                                                                              double start,
                                                                              double end,
                                                                              double interval,
                                                                              IDictionary<string, string> options = null )
        {
            return aggregateStatisticsByRange( new AggregateStatisticsByRangeRequest( table_name,
                                                                                      select_expression,
                                                                                      column_name,
                                                                                      value_column_name,
                                                                                      stats,
                                                                                      start,
                                                                                      end,
                                                                                      interval,
                                                                                      options ) );
        }

        /// <summary>Returns all the unique values from a particular column
        /// (specified by <see
        /// cref="AggregateUniqueRequest.column_name">column_name</see>) of a
        /// particular table or view (specified by <see
        /// cref="AggregateUniqueRequest.table_name">table_name</see>).
        /// </summary>
        /// <remarks><para>If <see
        /// cref="AggregateUniqueRequest.column_name">column_name</see> is a
        /// numeric column, the values will be in <see
        /// cref="AggregateUniqueResponse.data">data</see>. Otherwise if <see
        /// cref="AggregateUniqueRequest.column_name">column_name</see> is a
        /// string column, the values will be in <c>json_encoded_response</c>.
        /// The results can be paged via <see
        /// cref="AggregateUniqueRequest.offset">offset</see> and <see
        /// cref="AggregateUniqueRequest.limit">limit</see> parameters.</para>
        /// <para>Columns marked as <a
        /// href="../../../concepts/types/#data-handling"
        /// target="_top">store-only</a> are unable to be used with this
        /// function.</para>
        /// <para>To get the first 10 unique values sorted in descending order
        /// <see cref="AggregateUniqueRequest.options">options</see> would
        /// be:</para>
        /// <code>
        ///     {"limit":"10","sort_order":"descending"}
        /// </code>
        /// <para>The response is returned as a dynamic schema. For details
        /// see: <a href="../../../api/concepts/#dynamic-schemas"
        /// target="_top">dynamic schemas documentation</a>.</para>
        /// <para>If a <see
        /// cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        /// name is specified in the <see
        /// cref="AggregateUniqueRequest.options">options</see>, the results
        /// are stored in a new table with that name--no results are returned
        /// in the response.  Both the table name and resulting column name
        /// must adhere to <a href="../../../concepts/tables/#table"
        /// target="_top">standard naming conventions</a>; any column
        /// expression will need to be aliased.  If the source table's <a
        /// href="../../../concepts/tables/#shard-keys" target="_top">shard
        /// key</a> is used as the <see
        /// cref="AggregateUniqueRequest.column_name">column_name</see>, the
        /// result table will be sharded, in all other cases it will be
        /// replicated.  Sorting will properly function only if the result
        /// table is replicated or if there is only one processing node and
        /// should not be relied upon in other cases.  Not available if the
        /// value of <see
        /// cref="AggregateUniqueRequest.column_name">column_name</see> is an
        /// unrestricted-length string.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateUniqueResponse aggregateUnique( AggregateUniqueRequest request_ )
        {
            RawAggregateUniqueResponse actualResponse_ = SubmitRequest<RawAggregateUniqueResponse>("/aggregate/unique", request_, false);

            AggregateUniqueResponse response_ = new AggregateUniqueResponse();
            response_.table_name = actualResponse_.table_name;
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.has_more_records = actualResponse_.has_more_records;
            response_.info = actualResponse_.info;
            return response_;
        }

        /// <summary>Returns all the unique values from a particular column
        /// (specified by <paramref name="column_name" />) of a particular
        /// table or view (specified by <paramref name="table_name" />).
        /// </summary>
        /// <remarks><para>If <paramref name="column_name" /> is a numeric
        /// column, the values will be in <see
        /// cref="AggregateUniqueResponse.data">data</see>. Otherwise if
        /// <paramref name="column_name" /> is a string column, the values will
        /// be in <c>json_encoded_response</c>.  The results can be paged via
        /// <paramref name="offset" /> and <paramref name="limit" />
        /// parameters.</para>
        /// <para>Columns marked as <a
        /// href="../../../concepts/types/#data-handling"
        /// target="_top">store-only</a> are unable to be used with this
        /// function.</para>
        /// <para>To get the first 10 unique values sorted in descending order
        /// <paramref name="options" /> would be:</para>
        /// <code>
        ///     {"limit":"10","sort_order":"descending"}
        /// </code>
        /// <para>The response is returned as a dynamic schema. For details
        /// see: <a href="../../../api/concepts/#dynamic-schemas"
        /// target="_top">dynamic schemas documentation</a>.</para>
        /// <para>If a <see
        /// cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        /// name is specified in the <paramref name="options" />, the results
        /// are stored in a new table with that name--no results are returned
        /// in the response.  Both the table name and resulting column name
        /// must adhere to <a href="../../../concepts/tables/#table"
        /// target="_top">standard naming conventions</a>; any column
        /// expression will need to be aliased.  If the source table's <a
        /// href="../../../concepts/tables/#shard-keys" target="_top">shard
        /// key</a> is used as the <paramref name="column_name" />, the result
        /// table will be sharded, in all other cases it will be replicated.
        /// Sorting will properly function only if the result table is
        /// replicated or if there is only one processing node and should not
        /// be relied upon in other cases.  Not available if the value of
        /// <paramref name="column_name" /> is an unrestricted-length string.
        /// </para></remarks>
        ///
        /// <param name="table_name">Name of an existing table or view on which
        /// the operation will be performed, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_name">Name of the column or an expression
        /// containing one or more column names on which the unique function
        /// would be applied.</param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results). The default value is 0. The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT.</param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or END_OF_SET (-9999) to indicate
        /// that the maximum number of results allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the <a
        /// href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration. Use <see
        /// cref="AggregateUniqueResponse.has_more_records">has_more_records</see>
        /// to see if more records exist in the result to be fetched, and
        /// <paramref name="offset" /> & <paramref name="limit" /> to request
        /// subsequent pages of results. The default value is -9999.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateUniqueRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         If <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>
        ///         is <see
        ///         cref="AggregateUniqueRequest.Options.FALSE">FALSE</see> (or
        ///         unspecified), then this is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="AggregateUniqueResponse.Info.QUALIFIED_RESULT_TABLE_NAME">QUALIFIED_RESULT_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema as part of <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema
        ///         which is to contain the table specified in <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         If the schema provided is non-existent, it will be
        ///         automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Optional filter expression to apply to the
        ///         table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.SORT_ORDER">SORT_ORDER</see>:
        ///         </term>
        ///         <description>String indicating how the returned values
        ///         should be sorted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.ASCENDING">ASCENDING</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.DESCENDING">DESCENDING</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateUniqueRequest.Options.ASCENDING">ASCENDING</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.ORDER_BY">ORDER_BY</see>:
        ///         </term>
        ///         <description>Comma-separated list of the columns to be
        ///         sorted by as well as the sort direction, e.g., 'timestamp
        ///         asc, x desc'. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>:
        ///         </term>
        ///         <description>The name of the table used to store the
        ///         results, in [schema_name.]table_name format, using standard
        ///         <a href="../../../concepts/tables/#table-name-resolution"
        ///         target="_top">name resolution rules</a> and meeting <a
        ///         href="../../../concepts/tables/#table-naming-criteria"
        ///         target="_top">table naming criteria</a>.  If present, no
        ///         results are returned in the response.  Not available if
        ///         <paramref name="column_name" /> is an unrestricted-length
        ///         string.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateUniqueRequest.Options.TRUE">TRUE</see>, then
        ///         the result table specified in <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         will be persisted and will not expire unless a <see
        ///         cref="AggregateUniqueRequest.Options.TTL">TTL</see> is
        ///         specified.   If <see
        ///         cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>,
        ///         then the result table will be an in-memory table and will
        ///         expire unless a <see
        ///         cref="AggregateUniqueRequest.Options.TTL">TTL</see> is
        ///         specified otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE_FORCE_REPLICATED">RESULT_TABLE_FORCE_REPLICATED</see>:
        ///         </term>
        ///         <description>Force the result table to be replicated
        ///         (ignores any sharding). Must be used in combination with
        ///         the <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE_GENERATE_PK">RESULT_TABLE_GENERATE_PK</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateUniqueRequest.Options.TRUE">TRUE</see> then
        ///         set a primary key for the result table. Must be used in
        ///         combination with the <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateUniqueRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for the result table. Must be used in combination
        ///         with the <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for the result table.
        ///         Must be used in combination with the <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for the result table. Must be
        ///         used in combination with the <see
        ///         cref="AggregateUniqueRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUniqueRequest.Options.VIEW_ID">VIEW_ID</see>:
        ///         </term>
        ///         <description>ID of view of which the result table will be a
        ///         member. The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateUniqueResponse aggregateUnique( string table_name,
                                                        string column_name,
                                                        long offset = 0,
                                                        long limit = -9999,
                                                        IDictionary<string, string> options = null )
        {
            return aggregateUnique( new AggregateUniqueRequest( table_name, column_name,
                                                                offset, limit, options ) );
        }

        /// <summary>Rotate the column values into rows values.</summary>
        /// <remarks><para></para>
        /// <para>For unpivot details and examples, see <a
        /// href="../../../concepts/unpivot/" target="_top">Unpivot</a>.  For
        /// limitations, see <a href="../../../concepts/unpivot/#limitations"
        /// target="_top">Unpivot Limitations</a>.</para>
        /// <para>Unpivot is used to normalize tables that are built for cross
        /// tabular reporting purposes. The unpivot operator rotates the column
        /// values for all the pivoted columns. A variable column, value column
        /// and all columns from the source table except the unpivot columns
        /// are projected into the result table. The variable column and value
        /// columns in the result table indicate the pivoted column name and
        /// values respectively.</para>
        /// <para>The response is returned as a dynamic schema. For details
        /// see: <a href="../../../api/concepts/#dynamic-schemas"
        /// target="_top">dynamic schemas documentation</a>.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateUnpivotResponse aggregateUnpivot( AggregateUnpivotRequest request_ )
        {
            RawAggregateUnpivotResponse actualResponse_ = SubmitRequest<RawAggregateUnpivotResponse>("/aggregate/unpivot", request_, false);

            AggregateUnpivotResponse response_ = new AggregateUnpivotResponse();
            response_.table_name = actualResponse_.table_name;
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            response_.info = actualResponse_.info;
            return response_;
        }

        /// <summary>Rotate the column values into rows values.</summary>
        /// <remarks><para></para>
        /// <para>For unpivot details and examples, see <a
        /// href="../../../concepts/unpivot/" target="_top">Unpivot</a>.  For
        /// limitations, see <a href="../../../concepts/unpivot/#limitations"
        /// target="_top">Unpivot Limitations</a>.</para>
        /// <para>Unpivot is used to normalize tables that are built for cross
        /// tabular reporting purposes. The unpivot operator rotates the column
        /// values for all the pivoted columns. A variable column, value column
        /// and all columns from the source table except the unpivot columns
        /// are projected into the result table. The variable column and value
        /// columns in the result table indicate the pivoted column name and
        /// values respectively.</para>
        /// <para>The response is returned as a dynamic schema. For details
        /// see: <a href="../../../api/concepts/#dynamic-schemas"
        /// target="_top">dynamic schemas documentation</a>.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the operation
        /// will be performed. Must be an existing table/view, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_names">List of column names or expressions. A
        /// wildcard '*' can be used to include all the non-pivoted columns
        /// from the source table.</param>
        /// <param name="variable_column_name">Specifies the variable/parameter
        /// column name. The default value is ''.</param>
        /// <param name="value_column_name">Specifies the value column name.
        /// The default value is ''.</param>
        /// <param name="pivoted_columns">List of one or more values typically
        /// the column names of the input table. All the columns in the source
        /// table must have the same data type.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateUnpivotRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         If <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>
        ///         is <see
        ///         cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>
        ///         (or unspecified), then this is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="AggregateUnpivotResponse.Info.QUALIFIED_RESULT_TABLE_NAME">QUALIFIED_RESULT_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUnpivotRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema as part of <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema
        ///         which is to contain the table specified in <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         If the schema is non-existent, it will be automatically
        ///         created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>:
        ///         </term>
        ///         <description>The name of a table used to store the results,
        ///         in [schema_name.]table_name format, using standard <a
        ///         href="../../../concepts/tables/#table-name-resolution"
        ///         target="_top">name resolution rules</a> and meeting <a
        ///         href="../../../concepts/tables/#table-naming-criteria"
        ///         target="_top">table naming criteria</a>. If present, no
        ///         results are returned in the response.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE_PERSIST">RESULT_TABLE_PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AggregateUnpivotRequest.Options.TRUE">TRUE</see>,
        ///         then the result table specified in <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         will be persisted and will not expire unless a <see
        ///         cref="AggregateUnpivotRequest.Options.TTL">TTL</see> is
        ///         specified.   If <see
        ///         cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>,
        ///         then the result table will be an in-memory table and will
        ///         expire unless a <see
        ///         cref="AggregateUnpivotRequest.Options.TTL">TTL</see> is
        ///         specified otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUnpivotRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Filter expression to apply to the table prior
        ///         to unpivot processing.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.ORDER_BY">ORDER_BY</see>:
        ///         </term>
        ///         <description>Comma-separated list of the columns to be
        ///         sorted by; e.g. 'timestamp asc, x desc'.  The columns
        ///         specified must be present in input table.  If any alias is
        ///         given for any column name, the alias must be used, rather
        ///         than the original column name. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for the result table. Must be used in combination
        ///         with the <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for the result table.
        ///         Must be used in combination with the <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for the result table. Must be
        ///         used in combination with the <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.LIMIT">LIMIT</see>:
        ///         </term>
        ///         <description>The number of records to keep. The default
        ///         value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.VIEW_ID">VIEW_ID</see>:
        ///         </term>
        ///         <description>view this result table is part of. The default
        ///         value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.CREATE_INDEXES">CREATE_INDEXES</see>:
        ///         </term>
        ///         <description>Comma-separated list of columns on which to
        ///         create indexes on the table specified in <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>.
        ///         The columns specified must be present in output column
        ///         names.  If any alias is given for any column name, the
        ///         alias must be used, rather than the original column name.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE_FORCE_REPLICATED">RESULT_TABLE_FORCE_REPLICATED</see>:
        ///         </term>
        ///         <description>Force the result table to be replicated
        ///         (ignores any sharding). Must be used in combination with
        ///         the <see
        ///         cref="AggregateUnpivotRequest.Options.RESULT_TABLE">RESULT_TABLE</see>
        ///         option.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUnpivotRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AggregateUnpivotRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AggregateUnpivotResponse aggregateUnpivot( string table_name,
                                                          IList<string> column_names,
                                                          string variable_column_name,
                                                          string value_column_name,
                                                          IList<string> pivoted_columns,
                                                          IDictionary<string, string> options = null )
        {
            return aggregateUnpivot( new AggregateUnpivotRequest( table_name,
                                                                  column_names,
                                                                  variable_column_name,
                                                                  value_column_name,
                                                                  pivoted_columns, options ) );
        }

        /// <summary>Alter the properties of an existing <a
        /// href="../../../concepts/credentials/" target="_top">credential</a>.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterCredentialResponse alterCredential( AlterCredentialRequest request_ )
        {
            AlterCredentialResponse actualResponse_ = SubmitRequest<AlterCredentialResponse>("/alter/credential", request_, false);

            return actualResponse_;
        }

        /// <summary>Alter the properties of an existing <a
        /// href="../../../concepts/credentials/" target="_top">credential</a>.
        /// </summary>
        ///
        /// <param name="credential_name">Name of the credential to be altered.
        /// Must be an existing credential.</param>
        /// <param name="credential_updates_map">Map containing the properties
        /// of the credential to be updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterCredentialRequest.CredentialUpdatesMap.TYPE">TYPE</see>:
        ///         </term>
        ///         <description>New type for the credential.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.AWS_ACCESS_KEY">AWS_ACCESS_KEY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.AWS_IAM_ROLE">AWS_IAM_ROLE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.AZURE_AD">AZURE_AD</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.AZURE_OAUTH">AZURE_OAUTH</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.AZURE_SAS">AZURE_SAS</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.AZURE_STORAGE_KEY">AZURE_STORAGE_KEY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.DOCKER">DOCKER</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.GCS_SERVICE_ACCOUNT_ID">GCS_SERVICE_ACCOUNT_ID</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.GCS_SERVICE_ACCOUNT_KEYS">GCS_SERVICE_ACCOUNT_KEYS</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.HDFS">HDFS</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterCredentialRequest.CredentialUpdatesMap.KAFKA">KAFKA</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterCredentialRequest.CredentialUpdatesMap.IDENTITY">IDENTITY</see>:
        ///         </term>
        ///         <description>New user for the credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterCredentialRequest.CredentialUpdatesMap.SECRET">SECRET</see>:
        ///         </term>
        ///         <description>New password for the credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterCredentialRequest.CredentialUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>:
        ///         </term>
        ///         <description>Updates the schema name.  If <see
        ///         cref="AlterCredentialRequest.CredentialUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>
        ///         doesn't exist, an error will be thrown. If <see
        ///         cref="AlterCredentialRequest.CredentialUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>
        ///         is empty, then the user's default schema will be used.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterCredentialResponse alterCredential( string credential_name,
                                                        IDictionary<string, string> credential_updates_map,
                                                        IDictionary<string, string> options )
        {
            return alterCredential( new AlterCredentialRequest( credential_name,
                                                                credential_updates_map,
                                                                options ) );
        }

        /// <summary>Alters the properties of an existing <a
        /// href="../../../concepts/data_sinks/" target="_top">data sink</a>
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterDatasinkResponse alterDatasink( AlterDatasinkRequest request_ )
        {
            AlterDatasinkResponse actualResponse_ = SubmitRequest<AlterDatasinkResponse>("/alter/datasink", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters the properties of an existing <a
        /// href="../../../concepts/data_sinks/" target="_top">data sink</a>
        /// </summary>
        ///
        /// <param name="name">Name of the data sink to be altered. Must be an
        /// existing data sink.</param>
        /// <param name="datasink_updates_map">Map containing the properties of
        /// the data sink to be updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.DESTINATION">DESTINATION</see>:
        ///         </term>
        ///         <description>Destination for the output data in format
        ///         'destination_type://path[:port]'.
        ///         Supported destination types are 'http', 'https' and
        ///         'kafka'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.CONNECTION_TIMEOUT">CONNECTION_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for connecting to this sink
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.WAIT_TIMEOUT">WAIT_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for waiting for a response
        ///         from this sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Name of the <a
        ///         href="../../../concepts/credentials/"
        ///         target="_top">credential</a> object to be used in this data
        ///         sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.S3_BUCKET_NAME">S3_BUCKET_NAME</see>:
        ///         </term>
        ///         <description>Name of the Amazon S3 bucket to use as the
        ///         data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.S3_REGION">S3_REGION</see>:
        ///         </term>
        ///         <description>Name of the Amazon S3 region where the given
        ///         bucket is located</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.S3_AWS_ROLE_ARN">S3_AWS_ROLE_ARN</see>:
        ///         </term>
        ///         <description>Amazon IAM Role ARN which has required S3
        ///         permissions that can be assumed for the given S3 IAM user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.HDFS_KERBEROS_KEYTAB">HDFS_KERBEROS_KEYTAB</see>:
        ///         </term>
        ///         <description>Kerberos keytab file location for the given
        ///         HDFS user.  This may be a KIFS file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.HDFS_DELEGATION_TOKEN">HDFS_DELEGATION_TOKEN</see>:
        ///         </term>
        ///         <description>Delegation token for the given HDFS user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.HDFS_USE_KERBEROS">HDFS_USE_KERBEROS</see>:
        ///         </term>
        ///         <description>Use kerberos authentication for the given HDFS
        ///         cluster.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.AZURE_STORAGE_ACCOUNT_NAME">AZURE_STORAGE_ACCOUNT_NAME</see>:
        ///         </term>
        ///         <description>Name of the Azure storage account to use as
        ///         the data sink, this is valid only if tenant_id is specified
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.AZURE_CONTAINER_NAME">AZURE_CONTAINER_NAME</see>:
        ///         </term>
        ///         <description>Name of the Azure storage container to use as
        ///         the data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.AZURE_TENANT_ID">AZURE_TENANT_ID</see>:
        ///         </term>
        ///         <description>Active Directory tenant ID (or directory ID)
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.AZURE_SAS_TOKEN">AZURE_SAS_TOKEN</see>:
        ///         </term>
        ///         <description>Shared access signature token for Azure
        ///         storage account to use as the data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.AZURE_OAUTH_TOKEN">AZURE_OAUTH_TOKEN</see>:
        ///         </term>
        ///         <description>Oauth token to access given storage container
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.GCS_BUCKET_NAME">GCS_BUCKET_NAME</see>:
        ///         </term>
        ///         <description>Name of the Google Cloud Storage bucket to use
        ///         as the data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.GCS_PROJECT_ID">GCS_PROJECT_ID</see>:
        ///         </term>
        ///         <description>Name of the Google Cloud project to use as the
        ///         data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.GCS_SERVICE_ACCOUNT_KEYS">GCS_SERVICE_ACCOUNT_KEYS</see>:
        ///         </term>
        ///         <description>Google Cloud service account keys to use for
        ///         authenticating the data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.KAFKA_URL">KAFKA_URL</see>:
        ///         </term>
        ///         <description>The publicly-accessible full path URL to the
        ///         kafka broker, e.g., 'http://172.123.45.67:9300'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.KAFKA_TOPIC_NAME">KAFKA_TOPIC_NAME</see>:
        ///         </term>
        ///         <description>Name of the Kafka topic to use for this data
        ///         sink, if it references a Kafka broker</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.ANONYMOUS">ANONYMOUS</see>:
        ///         </term>
        ///         <description>Create an anonymous connection to the storage
        ///         provider--DEPRECATED: this is now the default.  Specify
        ///         use_managed_credentials for non-anonymous connection.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.USE_MANAGED_CREDENTIALS">USE_MANAGED_CREDENTIALS</see>:
        ///         </term>
        ///         <description>When no credentials are supplied, we use
        ///         anonymous access by default.  If this is set, we will use
        ///         cloud provider user settings.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.USE_HTTPS">USE_HTTPS</see>:
        ///         </term>
        ///         <description>Use https to connect to datasink if true,
        ///         otherwise use http.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.MAX_BATCH_SIZE">MAX_BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of records per notification
        ///         message. The default value is '1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.MAX_MESSAGE_SIZE">MAX_MESSAGE_SIZE</see>:
        ///         </term>
        ///         <description>Maximum size in bytes of each notification
        ///         message. The default value is '1000000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.JSON_FORMAT">JSON_FORMAT</see>:
        ///         </term>
        ///         <description>The desired format of JSON encoded
        ///         notifications message.
        ///         If <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.NESTED">NESTED</see>,
        ///         records are returned as an array. Otherwise, only a single
        ///         record per messages is returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.FLAT">FLAT</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.NESTED">NESTED</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.FLAT">FLAT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.SKIP_VALIDATION">SKIP_VALIDATION</see>:
        ///         </term>
        ///         <description>Bypass validation of connection to this data
        ///         sink.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasinkRequest.DatasinkUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>:
        ///         </term>
        ///         <description>Updates the schema name.  If <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>
        ///         doesn't exist, an error will be thrown. If <see
        ///         cref="AlterDatasinkRequest.DatasinkUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>
        ///         is empty, then the user's default schema will be used.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterDatasinkResponse alterDatasink( string name,
                                                    IDictionary<string, string> datasink_updates_map,
                                                    IDictionary<string, string> options )
        {
            return alterDatasink( new AlterDatasinkRequest( name, datasink_updates_map,
                                                            options ) );
        }

        /// <summary>Alters the properties of an existing <a
        /// href="../../../concepts/data_sources/" target="_top">data
        /// source</a></summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterDatasourceResponse alterDatasource( AlterDatasourceRequest request_ )
        {
            AlterDatasourceResponse actualResponse_ = SubmitRequest<AlterDatasourceResponse>("/alter/datasource", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters the properties of an existing <a
        /// href="../../../concepts/data_sources/" target="_top">data
        /// source</a></summary>
        ///
        /// <param name="name">Name of the data source to be altered. Must be
        /// an existing data source.</param>
        /// <param name="datasource_updates_map">Map containing the properties
        /// of the data source to be updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.LOCATION">LOCATION</see>:
        ///         </term>
        ///         <description>Location of the remote storage in
        ///         'storage_provider_type://[storage_path[:storage_port]]'
        ///         format.
        ///         Supported storage provider types are
        ///         'azure','gcs','hdfs','kafka' and 's3'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.USER_NAME">USER_NAME</see>:
        ///         </term>
        ///         <description>Name of the remote system user; may be an
        ///         empty string</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.PASSWORD">PASSWORD</see>:
        ///         </term>
        ///         <description>Password for the remote system user; may be an
        ///         empty string</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.SKIP_VALIDATION">SKIP_VALIDATION</see>:
        ///         </term>
        ///         <description>Bypass validation of connection to remote
        ///         source.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.CONNECTION_TIMEOUT">CONNECTION_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for connecting to this
        ///         storage provider</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.WAIT_TIMEOUT">WAIT_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for reading from this
        ///         storage provider</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Name of the <a
        ///         href="../../../concepts/credentials"
        ///         target="_top">credential</a> object to be used in data
        ///         source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.S3_BUCKET_NAME">S3_BUCKET_NAME</see>:
        ///         </term>
        ///         <description>Name of the Amazon S3 bucket to use as the
        ///         data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.S3_REGION">S3_REGION</see>:
        ///         </term>
        ///         <description>Name of the Amazon S3 region where the given
        ///         bucket is located</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.S3_AWS_ROLE_ARN">S3_AWS_ROLE_ARN</see>:
        ///         </term>
        ///         <description>Amazon IAM Role ARN which has required S3
        ///         permissions that can be assumed for the given S3 IAM user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.S3_ENCRYPTION_CUSTOMER_ALGORITHM">S3_ENCRYPTION_CUSTOMER_ALGORITHM</see>:
        ///         </term>
        ///         <description>Customer encryption algorithm used encrypting
        ///         data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.S3_ENCRYPTION_CUSTOMER_KEY">S3_ENCRYPTION_CUSTOMER_KEY</see>:
        ///         </term>
        ///         <description>Customer encryption key to encrypt or decrypt
        ///         data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.HDFS_KERBEROS_KEYTAB">HDFS_KERBEROS_KEYTAB</see>:
        ///         </term>
        ///         <description>Kerberos keytab file location for the given
        ///         HDFS user.  This may be a KIFS file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.HDFS_DELEGATION_TOKEN">HDFS_DELEGATION_TOKEN</see>:
        ///         </term>
        ///         <description>Delegation token for the given HDFS user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.HDFS_USE_KERBEROS">HDFS_USE_KERBEROS</see>:
        ///         </term>
        ///         <description>Use kerberos authentication for the given HDFS
        ///         cluster.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.AZURE_STORAGE_ACCOUNT_NAME">AZURE_STORAGE_ACCOUNT_NAME</see>:
        ///         </term>
        ///         <description>Name of the Azure storage account to use as
        ///         the data source, this is valid only if tenant_id is
        ///         specified</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.AZURE_CONTAINER_NAME">AZURE_CONTAINER_NAME</see>:
        ///         </term>
        ///         <description>Name of the Azure storage container to use as
        ///         the data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.AZURE_TENANT_ID">AZURE_TENANT_ID</see>:
        ///         </term>
        ///         <description>Active Directory tenant ID (or directory ID)
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.AZURE_SAS_TOKEN">AZURE_SAS_TOKEN</see>:
        ///         </term>
        ///         <description>Shared access signature token for Azure
        ///         storage account to use as the data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.AZURE_OAUTH_TOKEN">AZURE_OAUTH_TOKEN</see>:
        ///         </term>
        ///         <description>OAuth token to access given storage container
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.GCS_BUCKET_NAME">GCS_BUCKET_NAME</see>:
        ///         </term>
        ///         <description>Name of the Google Cloud Storage bucket to use
        ///         as the data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.GCS_PROJECT_ID">GCS_PROJECT_ID</see>:
        ///         </term>
        ///         <description>Name of the Google Cloud project to use as the
        ///         data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.GCS_SERVICE_ACCOUNT_KEYS">GCS_SERVICE_ACCOUNT_KEYS</see>:
        ///         </term>
        ///         <description>Google Cloud service account keys to use for
        ///         authenticating the data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.KAFKA_URL">KAFKA_URL</see>:
        ///         </term>
        ///         <description>The publicly-accessible full path URL to the
        ///         Kafka broker, e.g., 'http://172.123.45.67:9300'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.KAFKA_TOPIC_NAME">KAFKA_TOPIC_NAME</see>:
        ///         </term>
        ///         <description>Name of the Kafka topic to use as the data
        ///         source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.JDBC_DRIVER_JAR_PATH">JDBC_DRIVER_JAR_PATH</see>:
        ///         </term>
        ///         <description>JDBC driver jar file location.  This may be a
        ///         KIFS file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.JDBC_DRIVER_CLASS_NAME">JDBC_DRIVER_CLASS_NAME</see>:
        ///         </term>
        ///         <description>Name of the JDBC driver class</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.ANONYMOUS">ANONYMOUS</see>:
        ///         </term>
        ///         <description>Create an anonymous connection to the storage
        ///         provider--DEPRECATED: this is now the default.  Specify
        ///         use_managed_credentials for non-anonymous connection.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.USE_MANAGED_CREDENTIALS">USE_MANAGED_CREDENTIALS</see>:
        ///         </term>
        ///         <description>When no credentials are supplied, we use
        ///         anonymous access by default.  If this is set, we will use
        ///         cloud provider user settings.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.USE_HTTPS">USE_HTTPS</see>:
        ///         </term>
        ///         <description>Use https to connect to datasource if true,
        ///         otherwise use http.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterDatasourceRequest.DatasourceUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>:
        ///         </term>
        ///         <description>Updates the schema name.  If <see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>
        ///         doesn't exist, an error will be thrown. If <see
        ///         cref="AlterDatasourceRequest.DatasourceUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>
        ///         is empty, then the user's default schema will be used.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterDatasourceResponse alterDatasource( string name,
                                                        IDictionary<string, string> datasource_updates_map,
                                                        IDictionary<string, string> options )
        {
            return alterDatasource( new AlterDatasourceRequest( name,
                                                                datasource_updates_map,
                                                                options ) );
        }

        /// <summary>Alters an existing directory in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterDirectoryResponse alterDirectory( AlterDirectoryRequest request_ )
        {
            AlterDirectoryResponse actualResponse_ = SubmitRequest<AlterDirectoryResponse>("/alter/directory", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters an existing directory in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        ///
        /// <param name="directory_name">Name of the directory in KiFS to be
        /// altered.</param>
        /// <param name="directory_updates_map">Map containing the properties
        /// of the directory to be altered. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterDirectoryRequest.DirectoryUpdatesMap.DATA_LIMIT">DATA_LIMIT</see>:
        ///         </term>
        ///         <description>The maximum capacity, in bytes, to apply to
        ///         the directory. Set to -1 to indicate no upper limit.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterDirectoryResponse alterDirectory( string directory_name,
                                                      IDictionary<string, string> directory_updates_map,
                                                      IDictionary<string, string> options = null )
        {
            return alterDirectory( new AlterDirectoryRequest( directory_name,
                                                              directory_updates_map,
                                                              options ) );
        }

        /// <summary>Alters an existing environment which can be referenced by
        /// a <a href="../../../concepts/udf/" target="_top">user-defined
        /// function</a> (UDF).</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterEnvironmentResponse alterEnvironment( AlterEnvironmentRequest request_ )
        {
            AlterEnvironmentResponse actualResponse_ = SubmitRequest<AlterEnvironmentResponse>("/alter/environment", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters an existing environment which can be referenced by
        /// a <a href="../../../concepts/udf/" target="_top">user-defined
        /// function</a> (UDF).</summary>
        ///
        /// <param name="environment_name">Name of the environment to be
        /// altered.</param>
        /// <param name="action">Modification operation to be applied.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterEnvironmentRequest.Action.INSTALL_PACKAGE">INSTALL_PACKAGE</see>:
        ///         </term>
        ///         <description>Install a python package from PyPI, an
        ///         external data source or KiFS</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterEnvironmentRequest.Action.INSTALL_REQUIREMENTS">INSTALL_REQUIREMENTS</see>:
        ///         </term>
        ///         <description>Install packages from a requirements file
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterEnvironmentRequest.Action.UNINSTALL_PACKAGE">UNINSTALL_PACKAGE</see>:
        ///         </term>
        ///         <description>Uninstall a python package.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterEnvironmentRequest.Action.UNINSTALL_REQUIREMENTS">UNINSTALL_REQUIREMENTS</see>:
        ///         </term>
        ///         <description>Uninstall packages from a requirements file
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterEnvironmentRequest.Action.RESET">RESET</see>:
        ///         </term>
        ///         <description>Uninstalls all packages in the environment and
        ///         resets it to the original state at time of creation
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterEnvironmentRequest.Action.REBUILD">REBUILD</see>:
        ///         </term>
        ///         <description>Recreates the environment and re-installs all
        ///         packages, upgrades the packages if necessary based on
        ///         dependencies</description>
        ///     </item>
        /// </list></param>
        /// <param name="_value">The value of the modification, depending on
        /// <paramref name="action" />.  For example, if <paramref
        /// name="action" /> is <see
        /// cref="AlterEnvironmentRequest.Action.INSTALL_PACKAGE">INSTALL_PACKAGE</see>,
        /// this would be the python package name.
        /// If <paramref name="action" /> is <see
        /// cref="AlterEnvironmentRequest.Action.INSTALL_REQUIREMENTS">INSTALL_REQUIREMENTS</see>,
        /// this would be the path of a requirements file from which to install
        /// packages.
        /// If an external data source is specified in <see
        /// cref="AlterEnvironmentRequest.Options.DATASOURCE_NAME">DATASOURCE_NAME</see>,
        /// this can be the path to a wheel file or source archive.
        /// Alternatively, if installing from a file (wheel or source archive),
        /// the value may be a reference to a file in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterEnvironmentRequest.Options.DATASOURCE_NAME">DATASOURCE_NAME</see>:
        ///         </term>
        ///         <description>Name of an existing external data source from
        ///         which packages specified in <paramref name="_value" /> can
        ///         be loaded</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterEnvironmentResponse alterEnvironment( string environment_name,
                                                          string action,
                                                          string _value,
                                                          IDictionary<string, string> options = null )
        {
            return alterEnvironment( new AlterEnvironmentRequest( environment_name,
                                                                  action, _value, options ) );
        }

        /// @cond NO_DOCS
        public AlterGraphResponse alterGraph( AlterGraphRequest request_ )
        {
            AlterGraphResponse actualResponse_ = SubmitRequest<AlterGraphResponse>("/alter/graph", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public AlterGraphResponse alterGraph( string graph_name,
                                              string action,
                                              string action_arg,
                                              IDictionary<string, string> options = null )
        {
            return alterGraph( new AlterGraphRequest( graph_name, action, action_arg,
                                                      options ) );
        }
        /// @endcond

        /// @cond NO_DOCS
        public AlterModelResponse alterModel( AlterModelRequest request_ )
        {
            AlterModelResponse actualResponse_ = SubmitRequest<AlterModelResponse>("/alter/model", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public AlterModelResponse alterModel( string model_name,
                                              string action,
                                              string _value,
                                              IDictionary<string, string> options = null )
        {
            return alterModel( new AlterModelRequest( model_name, action, _value, options ) );
        }
        /// @endcond

        /// <summary>Alters the properties of an exisiting resource group to
        /// facilitate resource management.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterResourceGroupResponse alterResourceGroup( AlterResourceGroupRequest request_ )
        {
            AlterResourceGroupResponse actualResponse_ = SubmitRequest<AlterResourceGroupResponse>("/alter/resourcegroup", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters the properties of an exisiting resource group to
        /// facilitate resource management.</summary>
        ///
        /// <param name="name">Name of the group to be altered. Must be an
        /// existing resource group name or an empty string when used
        /// inconjunction with the is_default_group option.</param>
        /// <param name="tier_attributes">Optional map containing tier names
        /// and their respective attribute group limits.  The only valid
        /// attribute limit that can be set is max_memory (in bytes) for the
        /// VRAM & RAM tiers.
        /// For instance, to set max VRAM capacity to 1GB and max RAM capacity
        /// to 10GB, use:  {'VRAM':{'max_memory':'1000000000'},
        /// 'RAM':{'max_memory':'10000000000'}}.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.TierAttributes.MAX_MEMORY">MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Maximum amount of memory usable in the given
        ///         tier at one time for this group.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="ranking">If the resource group ranking is to be
        /// updated, this indicates the relative ranking among existing
        /// resource groups where this resource group will be moved; leave
        /// blank if not changing the ranking.  When using <see
        /// cref="AlterResourceGroupRequest.Ranking.BEFORE">BEFORE</see> or
        /// <see cref="AlterResourceGroupRequest.Ranking.AFTER">AFTER</see>,
        /// specify which resource group this one will be inserted before or
        /// after in <paramref name="adjoining_resource_group" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Ranking.EMPTY_STRING">EMPTY_STRING</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Ranking.FIRST">FIRST</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Ranking.LAST">LAST</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Ranking.BEFORE">BEFORE</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Ranking.AFTER">AFTER</see>
        ///         </term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="AlterResourceGroupRequest.Ranking.EMPTY_STRING">EMPTY_STRING</see>.
        /// </param>
        /// <param name="adjoining_resource_group">If <paramref name="ranking"
        /// /> is <see
        /// cref="AlterResourceGroupRequest.Ranking.BEFORE">BEFORE</see> or
        /// <see cref="AlterResourceGroupRequest.Ranking.AFTER">AFTER</see>,
        /// this field indicates the resource group before or after which the
        /// current group will be placed; otherwise, leave blank. The default
        /// value is ''.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Options.MAX_CPU_CONCURRENCY">MAX_CPU_CONCURRENCY</see>:
        ///         </term>
        ///         <description>Maximum number of simultaneous threads that
        ///         will be used to execute a request for this group. The
        ///         minimum allowed value is '4'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Options.MAX_DATA">MAX_DATA</see>:
        ///         </term>
        ///         <description>Maximum amount of cumulative ram usage
        ///         regardless of tier status for this group. The minimum
        ///         allowed value is '-1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Options.MAX_SCHEDULING_PRIORITY">MAX_SCHEDULING_PRIORITY</see>:
        ///         </term>
        ///         <description>Maximum priority of a scheduled task for this
        ///         group. The minimum allowed value is '1'. The maximum
        ///         allowed value is '100'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Options.MAX_TIER_PRIORITY">MAX_TIER_PRIORITY</see>:
        ///         </term>
        ///         <description>Maximum priority of a tiered object for this
        ///         group. The minimum allowed value is '1'. The maximum
        ///         allowed value is '10'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Options.IS_DEFAULT_GROUP">IS_DEFAULT_GROUP</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterResourceGroupRequest.Options.TRUE">TRUE</see>,
        ///         this request applies to the global default resource group.
        ///         It is an error for this field to be <see
        ///         cref="AlterResourceGroupRequest.Options.TRUE">TRUE</see>
        ///         when the <paramref name="name" /> field is also populated.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterResourceGroupRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterResourceGroupRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterResourceGroupRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterResourceGroupRequest.Options.PERSIST">PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterResourceGroupRequest.Options.TRUE">TRUE</see>
        ///         and a system-level change was requested, the system
        ///         configuration will be written to disk upon successful
        ///         application of this request. This will commit the changes
        ///         from this request and any additional in-memory
        ///         modifications.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterResourceGroupRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterResourceGroupRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterResourceGroupRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterResourceGroupResponse alterResourceGroup( string name,
                                                              IDictionary<string, IDictionary<string, string>> tier_attributes = null,
                                                              string ranking = AlterResourceGroupRequest.Ranking.EMPTY_STRING,
                                                              string adjoining_resource_group = "",
                                                              IDictionary<string, string> options = null )
        {
            return alterResourceGroup( new AlterResourceGroupRequest( name,
                                                                      tier_attributes,
                                                                      ranking,
                                                                      adjoining_resource_group,
                                                                      options ) );
        }

        /// <summary>Alters a Role.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterRoleResponse alterRole( AlterRoleRequest request_ )
        {
            AlterRoleResponse actualResponse_ = SubmitRequest<AlterRoleResponse>("/alter/role", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters a Role.</summary>
        ///
        /// <param name="name">Name of the role to be altered. Must be an
        /// existing role.</param>
        /// <param name="action">Modification operation to be applied to the
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterRoleRequest.Action.SET_COMMENT">SET_COMMENT</see>:
        ///         </term>
        ///         <description>Sets the comment for an internal role.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterRoleRequest.Action.SET_RESOURCE_GROUP">SET_RESOURCE_GROUP</see>:
        ///         </term>
        ///         <description>Sets the resource group for an internal role.
        ///         The resource group must exist, otherwise, an empty string
        ///         assigns the role to the default resource group.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="_value">The value of the modification, depending on
        /// <paramref name="action" />.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterRoleResponse alterRole( string name,
                                            string action,
                                            string _value,
                                            IDictionary<string, string> options = null )
        {
            return alterRole( new AlterRoleRequest( name, action, _value, options ) );
        }

        /// <summary>Used to change the name of a SQL-style <a
        /// href="../../../concepts/schemas/" target="_top">schema</a>,
        /// specified in <see
        /// cref="AlterSchemaRequest.schema_name">schema_name</see>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterSchemaResponse alterSchema( AlterSchemaRequest request_ )
        {
            AlterSchemaResponse actualResponse_ = SubmitRequest<AlterSchemaResponse>("/alter/schema", request_, false);

            return actualResponse_;
        }

        /// <summary>Used to change the name of a SQL-style <a
        /// href="../../../concepts/schemas/" target="_top">schema</a>,
        /// specified in <paramref name="schema_name" />.</summary>
        ///
        /// <param name="schema_name">Name of the schema to be altered.</param>
        /// <param name="action">Modification operation to be applied.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterSchemaRequest.Action.ADD_COMMENT">ADD_COMMENT</see>:
        ///         </term>
        ///         <description>Adds a comment describing the schema
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSchemaRequest.Action.RENAME_SCHEMA">RENAME_SCHEMA</see>:
        ///         </term>
        ///         <description>Renames a schema to <paramref name="_value"
        ///         />. Has the same naming restrictions as <a
        ///         href="../../../concepts/tables/" target="_top">tables</a>.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="_value">The value of the modification, depending on
        /// <paramref name="action" />.  For now the only value of <paramref
        /// name="action" /> is <see
        /// cref="AlterSchemaRequest.Action.RENAME_SCHEMA">RENAME_SCHEMA</see>.
        /// In this case the value is the new name of the schema.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterSchemaResponse alterSchema( string schema_name,
                                                string action,
                                                string _value,
                                                IDictionary<string, string> options = null )
        {
            return alterSchema( new AlterSchemaRequest( schema_name, action, _value,
                                                        options ) );
        }

        /// <summary>The <see
        /// cref="alterSystemProperties(AlterSystemPropertiesRequest)">alterSystemProperties</see>
        /// endpoint is primarily used to simplify the testing of the system
        /// and is not expected to be used during normal execution.</summary>
        /// <remarks><para> Commands are given through the <see
        /// cref="AlterSystemPropertiesRequest.property_updates_map">property_updates_map</see>
        /// whose keys are commands and values are strings representing integer
        /// values (for example '8000') or boolean values ('true' or 'false').
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterSystemPropertiesResponse alterSystemProperties( AlterSystemPropertiesRequest request_ )
        {
            AlterSystemPropertiesResponse actualResponse_ = SubmitRequest<AlterSystemPropertiesResponse>("/alter/system/properties", request_, false);

            return actualResponse_;
        }

        /// <summary>The <see
        /// cref="alterSystemProperties(IDictionary{string,string},IDictionary{string,string})">alterSystemProperties</see>
        /// endpoint is primarily used to simplify the testing of the system
        /// and is not expected to be used during normal execution.</summary>
        /// <remarks><para> Commands are given through the <paramref
        /// name="property_updates_map" /> whose keys are commands and values
        /// are strings representing integer values (for example '8000') or
        /// boolean values ('true' or 'false').</para></remarks>
        ///
        /// <param name="property_updates_map">Map containing the properties of
        /// the system to be updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.CONCURRENT_KERNEL_EXECUTION">CONCURRENT_KERNEL_EXECUTION</see>:
        ///         </term>
        ///         <description>Enables concurrent kernel execution if the
        ///         value is <see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.TRUE">TRUE</see>
        ///         and disables it if the value is <see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.FALSE">FALSE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SUBTASK_CONCURRENCY_LIMIT">SUBTASK_CONCURRENCY_LIMIT</see>:
        ///         </term>
        ///         <description>Sets the maximum number of simultaneous
        ///         threads allocated to a given request, on each rank. Note
        ///         that thread allocation may also be limted by resource group
        ///         limits and/or system load.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Sets the number of records per chunk to be
        ///         used for all new tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Sets the target maximum data size for each
        ///         column in a chunk to be used for all new tables.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for all new tables.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.EVICT_COLUMNS">EVICT_COLUMNS</see>:
        ///         </term>
        ///         <description>Attempts to evict columns from memory to the
        ///         persistent store.  Value string is a semicolon separated
        ///         list of entries, each entry being a table name optionally
        ///         followed by a comma and a comma separated list of column
        ///         names to attempt to evict.  An empty value string will
        ///         attempt to evict all tables and columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.EXECUTION_MODE">EXECUTION_MODE</see>:
        ///         </term>
        ///         <description>Sets the execution_mode for kernel executions
        ///         to the specified string value. Possible values are host,
        ///         device, default (engine decides) or an integer value that
        ///         indicates max chunk size to exec on host</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.EXTERNAL_FILES_DIRECTORY">EXTERNAL_FILES_DIRECTORY</see>:
        ///         </term>
        ///         <description>Sets the root directory path where external
        ///         table data files are accessed from.  Path must exist on the
        ///         head node</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.FLUSH_TO_DISK">FLUSH_TO_DISK</see>:
        ///         </term>
        ///         <description>Flushes any changes to any tables to the
        ///         persistent store.  These changes include updates to the
        ///         vector store, object store, and text search store.  Value
        ///         string can be 'true', 'false' or 'text_search' to flush the
        ///         text search store only.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.CLEAR_CACHE">CLEAR_CACHE</see>:
        ///         </term>
        ///         <description>Clears cached results.  Useful to allow
        ///         repeated timing of endpoints.  Value string is the name of
        ///         the table for which to clear the cached results, or an
        ///         empty string to clear the cached results for all tables.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.COMMUNICATOR_TEST">COMMUNICATOR_TEST</see>:
        ///         </term>
        ///         <description>Invoke the communicator test and report timing
        ///         results. Value string is a semicolon separated list of
        ///         [key]=[value] expressions.  Expressions are:
        ///         num_transactions=[num] where num is the number of request
        ///         reply transactions to invoke per test; message_size=[bytes]
        ///         where bytes is the size in bytes of the messages to send;
        ///         check_values=[enabled] where if enabled is true the value
        ///         of the messages received are verified.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.NETWORK_SPEED">NETWORK_SPEED</see>:
        ///         </term>
        ///         <description>Invoke the network speed test and report
        ///         timing results. Value string is a semicolon-separated list
        ///         of [key]=[value] expressions.  Valid expressions are:
        ///         seconds=[time] where time is the time in seconds to run the
        ///         test; data_size=[bytes] where bytes is the size in bytes of
        ///         the block to be transferred; threads=[number of threads];
        ///         to_ranks=[space-separated list of ranks] where the list of
        ///         ranks is the ranks that rank 0 will send data to and get
        ///         data from. If to_ranks is unspecified then all worker ranks
        ///         are used.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.REQUEST_TIMEOUT">REQUEST_TIMEOUT</see>:
        ///         </term>
        ///         <description>Number of minutes after which filtering (e.g.,
        ///         <see
        ///         cref="filter(string,string,string,IDictionary{string,string})">filter</see>)
        ///         and aggregating (e.g., <see
        ///         cref="aggregateGroupBy(string,IList{string},long,long,IDictionary{string,string})">aggregateGroupBy</see>)
        ///         queries will timeout. The default value is '20'. The
        ///         minimum allowed value is '0'. The maximum allowed value is
        ///         '1440'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.MAX_GET_RECORDS_SIZE">MAX_GET_RECORDS_SIZE</see>:
        ///         </term>
        ///         <description>The maximum number of records the database
        ///         will serve for a given data retrieval call. The default
        ///         value is '20000'. The minimum allowed value is '0'. The
        ///         maximum allowed value is '1000000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.MAX_GRBC_BATCH_SIZE">MAX_GRBC_BATCH_SIZE</see>:
        ///         </term>
        ///         <description>&lt;DEVELOPER&gt;</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.ENABLE_AUDIT">ENABLE_AUDIT</see>:
        ///         </term>
        ///         <description>Enable or disable auditing.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AUDIT_HEADERS">AUDIT_HEADERS</see>:
        ///         </term>
        ///         <description>Enable or disable auditing of request headers.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AUDIT_BODY">AUDIT_BODY</see>:
        ///         </term>
        ///         <description>Enable or disable auditing of request bodies.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AUDIT_DATA">AUDIT_DATA</see>:
        ///         </term>
        ///         <description>Enable or disable auditing of request data.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AUDIT_RESPONSE">AUDIT_RESPONSE</see>:
        ///         </term>
        ///         <description>Enable or disable auditing of response
        ///         information.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SHADOW_AGG_SIZE">SHADOW_AGG_SIZE</see>:
        ///         </term>
        ///         <description>Size of the shadow aggregate chunk cache in
        ///         bytes. The default value is '10000000'. The minimum allowed
        ///         value is '0'. The maximum allowed value is '2147483647'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SHADOW_FILTER_SIZE">SHADOW_FILTER_SIZE</see>:
        ///         </term>
        ///         <description>Size of the shadow filter chunk cache in
        ///         bytes. The default value is '10000000'. The minimum allowed
        ///         value is '0'. The maximum allowed value is '2147483647'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SYNCHRONOUS_COMPRESSION">SYNCHRONOUS_COMPRESSION</see>:
        ///         </term>
        ///         <description>compress vector on set_compression (instead of
        ///         waiting for background thread). The default value is
        ///         'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.ENABLE_OVERLAPPED_EQUI_JOIN">ENABLE_OVERLAPPED_EQUI_JOIN</see>:
        ///         </term>
        ///         <description>Enable overlapped-equi-join filter. The
        ///         default value is 'true'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.KAFKA_BATCH_SIZE">KAFKA_BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of records to be ingested in a
        ///         single batch. The default value is '1000'. The minimum
        ///         allowed value is '1'. The maximum allowed value is
        ///         '10000000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.KAFKA_POLL_TIMEOUT">KAFKA_POLL_TIMEOUT</see>:
        ///         </term>
        ///         <description>Maximum time (milliseconds) for each poll to
        ///         get records from kafka. The default value is '0'. The
        ///         minimum allowed value is '0'. The maximum allowed value is
        ///         '1000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.KAFKA_WAIT_TIME">KAFKA_WAIT_TIME</see>:
        ///         </term>
        ///         <description>Maximum time (seconds) to buffer records
        ///         received from kafka before ingestion. The default value is
        ///         '30'. The minimum allowed value is '1'. The maximum allowed
        ///         value is '120'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.EGRESS_PARQUET_COMPRESSION">EGRESS_PARQUET_COMPRESSION</see>:
        ///         </term>
        ///         <description>Parquet file compression type.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.UNCOMPRESSED">UNCOMPRESSED</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SNAPPY">SNAPPY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.GZIP">GZIP</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SNAPPY">SNAPPY</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.EGRESS_SINGLE_FILE_MAX_SIZE">EGRESS_SINGLE_FILE_MAX_SIZE</see>:
        ///         </term>
        ///         <description>Max file size (in MB) to allow saving to a
        ///         single file. May be overridden by target limitations. The
        ///         default value is '10000'. The minimum allowed value is '1'.
        ///         The maximum allowed value is '200000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.MAX_CONCURRENT_KERNELS">MAX_CONCURRENT_KERNELS</see>:
        ///         </term>
        ///         <description>Sets the max_concurrent_kernels value of the
        ///         conf. The minimum allowed value is '0'. The maximum allowed
        ///         value is '256'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.SYSTEM_METADATA_RETENTION_PERIOD">SYSTEM_METADATA_RETENTION_PERIOD</see>:
        ///         </term>
        ///         <description>Sets the system_metadata.retention_period
        ///         value of the conf. The minimum allowed value is '1'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.TCS_PER_TOM">TCS_PER_TOM</see>:
        ///         </term>
        ///         <description>Sets the tcs_per_tom value of the conf. The
        ///         minimum allowed value is '2'. The maximum allowed value is
        ///         '8192'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.TPS_PER_TOM">TPS_PER_TOM</see>:
        ///         </term>
        ///         <description>Sets the tps_per_tom value of the conf. The
        ///         minimum allowed value is '2'. The maximum allowed value is
        ///         '8192'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AI_API_PROVIDER">AI_API_PROVIDER</see>:
        ///         </term>
        ///         <description>AI API provider type</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AI_API_URL">AI_API_URL</see>:
        ///         </term>
        ///         <description>AI API URL</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AI_API_KEY">AI_API_KEY</see>:
        ///         </term>
        ///         <description>AI API key</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AI_API_CONNECTION_TIMEOUT">AI_API_CONNECTION_TIMEOUT</see>:
        ///         </term>
        ///         <description>AI API connection timeout in seconds
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.AI_API_EMBEDDINGS_MODEL">AI_API_EMBEDDINGS_MODEL</see>:
        ///         </term>
        ///         <description>AI API model name</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.TELM_PERSIST_QUERY_METRICS">TELM_PERSIST_QUERY_METRICS</see>:
        ///         </term>
        ///         <description>Enable or disable persisting of query metrics.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT">POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT</see>:
        ///         </term>
        ///         <description>Idle connection timeout in seconds
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.PropertyUpdatesMap.POSTGRES_PROXY_KEEP_ALIVE">POSTGRES_PROXY_KEEP_ALIVE</see>:
        ///         </term>
        ///         <description>Enable  postgres proxy keep alive. The default
        ///         value is 'false'.</description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.Options.EVICT_TO_COLD">EVICT_TO_COLD</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterSystemPropertiesRequest.Options.TRUE">TRUE</see>
        ///         and evict_columns is specified, the given objects will be
        ///         evicted to cold storage (if such a tier exists).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterSystemPropertiesRequest.Options.PERSIST">PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterSystemPropertiesRequest.Options.TRUE">TRUE</see>
        ///         the system configuration will be written to disk upon
        ///         successful application of this request. This will commit
        ///         the changes from this request and any additional in-memory
        ///         modifications.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterSystemPropertiesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterSystemPropertiesRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterSystemPropertiesResponse alterSystemProperties( IDictionary<string, string> property_updates_map,
                                                                    IDictionary<string, string> options = null )
        {
            return alterSystemProperties( new AlterSystemPropertiesRequest( property_updates_map,
                                                                            options ) );
        }

        /// <summary>Apply various modifications to a table or view.</summary>
        /// <remarks><para> The available modifications include the
        /// following:</para>
        /// <para>Manage a table's columns--a column can be added, removed, or
        /// have its <a href="../../../concepts/types/" target="_top">type and
        /// properties</a> modified, including whether it is <a
        /// href="../../../concepts/dictionary_encoding/"
        /// target="_top">dictionary encoded</a> or not.</para>
        /// <para>External tables cannot be modified except for their refresh
        /// method.</para>
        /// <para>Create or delete a <a
        /// href="../../../concepts/indexes/#column-index"
        /// target="_top">column</a>, <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip</a>, <a
        /// href="../../../concepts/indexes/#geospatial-index"
        /// target="_top">geospatial</a>, <a
        /// href="../../../concepts/indexes/#cagra-index"
        /// target="_top">CAGRA</a>, or <a
        /// href="../../../concepts/indexes/#hnsw-index" target="_top">HNSW</a>
        /// index. This can speed up certain operations when using expressions
        /// containing equality or relational operators on indexed columns.
        /// This only applies to tables.</para>
        /// <para>Create or delete a <a
        /// href="../../../concepts/tables/#foreign-key" target="_top">foreign
        /// key</a> on a particular column.</para>
        /// <para>Manage a <a
        /// href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or a <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table's
        /// partitions.</para>
        /// <para>Set (or reset) the <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a> of a table or view.</para>
        /// <para>Refresh and manage the refresh mode of a <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> or an <a
        /// href="../../../concepts/external_tables/" target="_top">external
        /// table</a>.</para>
        /// <para>Set the <a href="../../../concepts/ttl/"
        /// target="_top">time-to-live (TTL)</a>. This can be applied to tables
        /// or views.</para>
        /// <para>Set the global access mode (i.e. locking) for a table. This
        /// setting trumps any role-based access controls that may be in place;
        /// e.g., a user with write access to a table marked read-only will not
        /// be able to insert records into it. The mode can be set to
        /// read-only, write-only, read/write, and no access.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTableResponse alterTable( AlterTableRequest request_ )
        {
            AlterTableResponse actualResponse_ = SubmitRequest<AlterTableResponse>("/alter/table", request_, false);

            return actualResponse_;
        }

        /// <summary>Apply various modifications to a table or view.</summary>
        /// <remarks><para> The available modifications include the
        /// following:</para>
        /// <para>Manage a table's columns--a column can be added, removed, or
        /// have its <a href="../../../concepts/types/" target="_top">type and
        /// properties</a> modified, including whether it is <a
        /// href="../../../concepts/dictionary_encoding/"
        /// target="_top">dictionary encoded</a> or not.</para>
        /// <para>External tables cannot be modified except for their refresh
        /// method.</para>
        /// <para>Create or delete a <a
        /// href="../../../concepts/indexes/#column-index"
        /// target="_top">column</a>, <a
        /// href="../../../concepts/indexes/#chunk-skip-index"
        /// target="_top">chunk skip</a>, <a
        /// href="../../../concepts/indexes/#geospatial-index"
        /// target="_top">geospatial</a>, <a
        /// href="../../../concepts/indexes/#cagra-index"
        /// target="_top">CAGRA</a>, or <a
        /// href="../../../concepts/indexes/#hnsw-index" target="_top">HNSW</a>
        /// index. This can speed up certain operations when using expressions
        /// containing equality or relational operators on indexed columns.
        /// This only applies to tables.</para>
        /// <para>Create or delete a <a
        /// href="../../../concepts/tables/#foreign-key" target="_top">foreign
        /// key</a> on a particular column.</para>
        /// <para>Manage a <a
        /// href="../../../concepts/tables/#partitioning-by-range"
        /// target="_top">range-partitioned</a> or a <a
        /// href="../../../concepts/tables/#partitioning-by-list-manual"
        /// target="_top">manual list-partitioned</a> table's
        /// partitions.</para>
        /// <para>Set (or reset) the <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a> of a table or view.</para>
        /// <para>Refresh and manage the refresh mode of a <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">materialized view</a> or an <a
        /// href="../../../concepts/external_tables/" target="_top">external
        /// table</a>.</para>
        /// <para>Set the <a href="../../../concepts/ttl/"
        /// target="_top">time-to-live (TTL)</a>. This can be applied to tables
        /// or views.</para>
        /// <para>Set the global access mode (i.e. locking) for a table. This
        /// setting trumps any role-based access controls that may be in place;
        /// e.g., a user with write access to a table marked read-only will not
        /// be able to insert records into it. The mode can be set to
        /// read-only, write-only, read/write, and no access.</para></remarks>
        ///
        /// <param name="table_name">Table on which the operation will be
        /// performed, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. Must be an existing table
        /// or view.</param>
        /// <param name="action">Modification operation to be applied.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.ALLOW_HOMOGENEOUS_TABLES">ALLOW_HOMOGENEOUS_TABLES</see>:
        ///         </term>
        ///         <description>No longer supported; action will be ignored.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>:
        ///         </term>
        ///         <description>Creates a <a
        ///         href="../../../concepts/indexes/#column-index"
        ///         target="_top">column (attribute) index</a>, <a
        ///         href="../../../concepts/indexes/#chunk-skip-index"
        ///         target="_top">chunk skip index</a>, <a
        ///         href="../../../concepts/indexes/#geospatial-index"
        ///         target="_top">geospatial index</a>, <a
        ///         href="../../../concepts/indexes/#cagra-index"
        ///         target="_top">CAGRA index</a>, or <a
        ///         href="../../../concepts/indexes/#hnsw-index"
        ///         target="_top">HNSW index</a> (depending on the specified
        ///         <see
        ///         cref="AlterTableRequest.Options.INDEX_TYPE">INDEX_TYPE</see>),
        ///         on the column name specified in <paramref name="_value" />.
        ///         If this column already has the specified index, an error
        ///         will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.REFRESH_INDEX">REFRESH_INDEX</see>:
        ///         </term>
        ///         <description>Refreshes an index identified by <see
        ///         cref="AlterTableRequest.Options.INDEX_TYPE">INDEX_TYPE</see>,
        ///         on the column name specified in <paramref name="_value" />.
        ///         Currently applicable only to CAGRA indices.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>:
        ///         </term>
        ///         <description>Deletes a <a
        ///         href="../../../concepts/indexes/#column-index"
        ///         target="_top">column (attribute) index</a>, <a
        ///         href="../../../concepts/indexes/#chunk-skip-index"
        ///         target="_top">chunk skip index</a>, <a
        ///         href="../../../concepts/indexes/#geospatial-index"
        ///         target="_top">geospatial index</a>, <a
        ///         href="../../../concepts/indexes/#cagra-index"
        ///         target="_top">CAGRA index</a>, or <a
        ///         href="../../../concepts/indexes/#hnsw-index"
        ///         target="_top">HNSW index</a> (depending on the specified
        ///         <see
        ///         cref="AlterTableRequest.Options.INDEX_TYPE">INDEX_TYPE</see>),
        ///         on the column name specified in <paramref name="_value" />.
        ///         If this column does not have the specified index, an error
        ///         will be returned.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.MOVE_TO_COLLECTION">MOVE_TO_COLLECTION</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please use <see
        ///         cref="AlterTableRequest.Action.MOVE_TO_SCHEMA">MOVE_TO_SCHEMA</see>
        ///         and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Moves a table or
        ///         view into a schema named <paramref name="_value" />.  If
        ///         the schema provided is non-existent, it will be
        ///         automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.MOVE_TO_SCHEMA">MOVE_TO_SCHEMA</see>:
        ///         </term>
        ///         <description>Moves a table or view into a schema named
        ///         <paramref name="_value" />. If the schema provided is
        ///         nonexistent, an error will be thrown. If <paramref
        ///         name="_value" /> is empty, then the table or view will be
        ///         placed in the user's default schema.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.PROTECTED">PROTECTED</see>:
        ///         </term>
        ///         <description>No longer used.  Previously set whether the
        ///         given <paramref name="table_name" /> should be protected or
        ///         not. The <paramref name="_value" /> would have been either
        ///         'true' or 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.RENAME_TABLE">RENAME_TABLE</see>:
        ///         </term>
        ///         <description>Renames a table or view to <paramref
        ///         name="_value" />. Has the same naming restrictions as <a
        ///         href="../../../concepts/tables/" target="_top">tables</a>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="AlterTableRequest.Action.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">time-to-live</a> in minutes of the table or
        ///         view specified in <paramref name="table_name" />.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.ADD_COMMENT">ADD_COMMENT</see>:
        ///         </term>
        ///         <description>Adds the comment specified in <paramref
        ///         name="_value" /> to the table specified in <paramref
        ///         name="table_name" />. Use <see
        ///         cref="AlterTableRequest.Options.COLUMN_NAME">COLUMN_NAME</see>
        ///         to set the comment for a column.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>:
        ///         </term>
        ///         <description>Adds the column specified in <paramref
        ///         name="_value" /> to the table specified in <paramref
        ///         name="table_name" />. Use <see
        ///         cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>
        ///         and <see
        ///         cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>
        ///         in <paramref name="options" /> to set the column's type and
        ///         properties, respectively.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.CHANGE_COLUMN">CHANGE_COLUMN</see>:
        ///         </term>
        ///         <description>Changes type and properties of the column
        ///         specified in <paramref name="_value" />. Use <see
        ///         cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>
        ///         and <see
        ///         cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>
        ///         in <paramref name="options" /> to set the column's type and
        ///         properties, respectively. Note that primary key and/or
        ///         shard key columns cannot be changed. All unchanging column
        ///         properties must be listed for the change to take place,
        ///         e.g., to add dictionary encoding to an existing 'char4'
        ///         column, both 'char4' and 'dict' must be specified in the
        ///         <paramref name="options" /> map.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_COLUMN_COMPRESSION">SET_COLUMN_COMPRESSION</see>:
        ///         </term>
        ///         <description>No longer supported; action will be ignored.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.DELETE_COLUMN">DELETE_COLUMN</see>:
        ///         </term>
        ///         <description>Deletes the column specified in <paramref
        ///         name="_value" /> from the table specified in <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.CREATE_FOREIGN_KEY">CREATE_FOREIGN_KEY</see>:
        ///         </term>
        ///         <description>Creates a <a
        ///         href="../../../concepts/tables/#foreign-key"
        ///         target="_top">foreign key</a> specified in <paramref
        ///         name="_value" /> using the format '(source_column_name [,
        ///         ...]) references target_table_name(primary_key_column_name
        ///         [, ...]) [as foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.DELETE_FOREIGN_KEY">DELETE_FOREIGN_KEY</see>:
        ///         </term>
        ///         <description>Deletes a <a
        ///         href="../../../concepts/tables/#foreign-key"
        ///         target="_top">foreign key</a>.  The <paramref name="_value"
        ///         /> should be the foreign_key_name specified when creating
        ///         the key or the complete string used to define it.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.ADD_PARTITION">ADD_PARTITION</see>:
        ///         </term>
        ///         <description>Adds the partition specified in <paramref
        ///         name="_value" />, to either a <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range-partitioned</a> or <a
        ///         href="../../../concepts/tables/#partitioning-by-list-manual"
        ///         target="_top">manual list-partitioned</a> table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.REMOVE_PARTITION">REMOVE_PARTITION</see>:
        ///         </term>
        ///         <description>Removes the partition specified in <paramref
        ///         name="_value" /> (and relocates all of its data to the
        ///         default partition) from either a <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range-partitioned</a> or <a
        ///         href="../../../concepts/tables/#partitioning-by-list-manual"
        ///         target="_top">manual list-partitioned</a> table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.DELETE_PARTITION">DELETE_PARTITION</see>:
        ///         </term>
        ///         <description>Deletes the partition specified in <paramref
        ///         name="_value" /> (and all of its data) from either a <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range-partitioned</a> or <a
        ///         href="../../../concepts/tables/#partitioning-by-list-manual"
        ///         target="_top">manual list-partitioned</a> table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_GLOBAL_ACCESS_MODE">SET_GLOBAL_ACCESS_MODE</see>:
        ///         </term>
        ///         <description>Sets the global access mode (i.e. locking) for
        ///         the table specified in <paramref name="table_name" />.
        ///         Specify the access mode in <paramref name="_value" />.
        ///         Valid modes are 'no_access', 'read_only', 'write_only' and
        ///         'read_write'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.REFRESH">REFRESH</see>:
        ///         </term>
        ///         <description>For a <a
        ///         href="../../../concepts/materialized_views/"
        ///         target="_top">materialized view</a>, replays all the table
        ///         creation commands required to create the view.  For an <a
        ///         href="../../../concepts/external_tables/"
        ///         target="_top">external table</a>, reloads all data in the
        ///         table from its associated source files or <a
        ///         href="../../../concepts/data_sources/" target="_top">data
        ///         source</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_REFRESH_METHOD">SET_REFRESH_METHOD</see>:
        ///         </term>
        ///         <description>For a <a
        ///         href="../../../concepts/materialized_views/"
        ///         target="_top">materialized view</a>, sets the method by
        ///         which the view is refreshed to the method specified in
        ///         <paramref name="_value" /> - one of 'manual', 'periodic',
        ///         or 'on_change'.  For an <a
        ///         href="../../../concepts/external_tables/"
        ///         target="_top">external table</a>, sets the method by which
        ///         the table is refreshed to the method specified in <paramref
        ///         name="_value" /> - either 'manual' or 'on_start'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_REFRESH_START_TIME">SET_REFRESH_START_TIME</see>:
        ///         </term>
        ///         <description>Sets the time to start periodic refreshes of
        ///         this <a href="../../../concepts/materialized_views/"
        ///         target="_top">materialized view</a> to the datetime string
        ///         specified in <paramref name="_value" /> with format
        ///         'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes occur at the
        ///         specified time + N * the refresh period.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_REFRESH_STOP_TIME">SET_REFRESH_STOP_TIME</see>:
        ///         </term>
        ///         <description>Sets the time to stop periodic refreshes of
        ///         this <a href="../../../concepts/materialized_views/"
        ///         target="_top">materialized view</a> to the datetime string
        ///         specified in <paramref name="_value" /> with format
        ///         'YYYY-MM-DD HH:MM:SS'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_REFRESH_PERIOD">SET_REFRESH_PERIOD</see>:
        ///         </term>
        ///         <description>Sets the time interval in seconds at which to
        ///         refresh this <a
        ///         href="../../../concepts/materialized_views/"
        ///         target="_top">materialized view</a> to the value specified
        ///         in <paramref name="_value" />.  Also, sets the refresh
        ///         method to periodic if not already set.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_REFRESH_SPAN">SET_REFRESH_SPAN</see>:
        ///         </term>
        ///         <description>Sets the future time-offset(in seconds) for
        ///         the view refresh to stop.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_REFRESH_EXECUTE_AS">SET_REFRESH_EXECUTE_AS</see>:
        ///         </term>
        ///         <description>Sets the user name to refresh this <a
        ///         href="../../../concepts/materialized_views/"
        ///         target="_top">materialized view</a> to the value specified
        ///         in <paramref name="_value" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.REMOVE_TEXT_SEARCH_ATTRIBUTES">REMOVE_TEXT_SEARCH_ATTRIBUTES</see>:
        ///         </term>
        ///         <description>Removes <a
        ///         href="../../../concepts/full_text_search/"
        ///         target="_top">text search</a> attribute from all columns.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.REMOVE_SHARD_KEYS">REMOVE_SHARD_KEYS</see>:
        ///         </term>
        ///         <description>Removes the shard key property from all
        ///         columns, so that the table will be considered randomly
        ///         sharded.  The data is not moved.  The <paramref
        ///         name="_value" /> is ignored.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.SET_STRATEGY_DEFINITION">SET_STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>Sets the <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns to the one specified in <paramref name="_value" />,
        ///         replacing the existing tier strategy in its entirety.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.CANCEL_DATASOURCE_SUBSCRIPTION">CANCEL_DATASOURCE_SUBSCRIPTION</see>:
        ///         </term>
        ///         <description>Permanently unsubscribe a data source that is
        ///         loading continuously as a stream. The data source can be
        ///         Kafka / S3 / Azure.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.PAUSE_DATASOURCE_SUBSCRIPTION">PAUSE_DATASOURCE_SUBSCRIPTION</see>:
        ///         </term>
        ///         <description>Temporarily unsubscribe a data source that is
        ///         loading continuously as a stream. The data source can be
        ///         Kafka / S3 / Azure.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.RESUME_DATASOURCE_SUBSCRIPTION">RESUME_DATASOURCE_SUBSCRIPTION</see>:
        ///         </term>
        ///         <description>Resubscribe to a paused data source
        ///         subscription. The data source can be Kafka / S3 / Azure.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Action.CHANGE_OWNER">CHANGE_OWNER</see>:
        ///         </term>
        ///         <description>Change the owner resource group of the table.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="_value">The value of the modification, depending on
        /// <paramref name="action" />. For example, if <paramref name="action"
        /// /> is <see
        /// cref="AlterTableRequest.Action.ADD_COLUMN">ADD_COLUMN</see>, this
        /// would be the column name; while the column's definition would be
        /// covered by the <see
        /// cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>,
        /// <see
        /// cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>,
        /// <see
        /// cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>,
        /// and <see
        /// cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>
        /// in <paramref name="options" />. If <paramref name="action" /> is
        /// <see cref="AlterTableRequest.Action.TTL">TTL</see>, it would be the
        /// number of minutes for the new TTL. If <paramref name="action" /> is
        /// <see cref="AlterTableRequest.Action.REFRESH">REFRESH</see>, this
        /// field would be blank.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.ACTION">ACTION</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.COLUMN_NAME">COLUMN_NAME</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.TABLE_NAME">TABLE_NAME</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.COLUMN_DEFAULT_VALUE">COLUMN_DEFAULT_VALUE</see>:
        ///         </term>
        ///         <description>When adding a column, set a default value for
        ///         existing records.  For nullable columns, the default value
        ///         will be null, regardless of data type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.COLUMN_PROPERTIES">COLUMN_PROPERTIES</see>:
        ///         </term>
        ///         <description>When adding or changing a column, set the
        ///         column properties (strings, separated by a comma: data,
        ///         store_only, text_search, char8, int8 etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.COLUMN_TYPE">COLUMN_TYPE</see>:
        ///         </term>
        ///         <description>When adding or changing a column, set the
        ///         column type (strings, separated by a comma: int, double,
        ///         string, null etc).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:
        ///         </term>
        ///         <description>No longer supported; option will be ignored.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.NONE">NONE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.LZ4">LZ4</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.LZ4HC">LZ4HC</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterTableRequest.Options.SNAPPY">SNAPPY</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.COPY_VALUES_FROM_COLUMN">COPY_VALUES_FROM_COLUMN</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please use <see
        ///         cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>
        ///         instead.]</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.RENAME_COLUMN">RENAME_COLUMN</see>:
        ///         </term>
        ///         <description>When changing a column, specify new column
        ///         name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:
        ///         </term>
        ///         <description>When changing a column, validate the change
        ///         before applying it (or not).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Validate all values. A value too large
        ///                 (or too long) for the new type will prevent any
        ///                 change.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>When a value is too large or long, it
        ///                 will be truncated.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterTableRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.UPDATE_LAST_ACCESS_TIME">UPDATE_LAST_ACCESS_TIME</see>:
        ///         </term>
        ///         <description>Indicates whether the <a
        ///         href="../../../concepts/ttl/"
        ///         target="_top">time-to-live</a> (TTL) expiration countdown
        ///         timer should be reset to the table's TTL.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Reset the expiration countdown timer
        ///                 to the table's configured TTL.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Don't reset the timer; expiration
        ///                 countdown will continue from where it is, as if the
        ///                 table had not been accessed.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterTableRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.ADD_COLUMN_EXPRESSION">ADD_COLUMN_EXPRESSION</see>:
        ///         </term>
        ///         <description>When adding a column, an optional expression
        ///         to use for the new column's values. Any valid expression
        ///         may be used, including one containing references to
        ///         existing columns in the same table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>Optional parameter for specifying the <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns when <paramref name="action" /> is <see
        ///         cref="AlterTableRequest.Action.SET_STRATEGY_DEFINITION">SET_STRATEGY_DEFINITION</see>,
        ///         replacing the existing tier strategy in its entirety.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.INDEX_TYPE">INDEX_TYPE</see>:
        ///         </term>
        ///         <description>Type of index to create, when <paramref
        ///         name="action" /> is <see
        ///         cref="AlterTableRequest.Action.CREATE_INDEX">CREATE_INDEX</see>;
        ///         to refresh, when <paramref name="action" /> is <see
        ///         cref="AlterTableRequest.Action.REFRESH_INDEX">REFRESH_INDEX</see>;
        ///         or to delete, when <paramref name="action" /> is <see
        ///         cref="AlterTableRequest.Action.DELETE_INDEX">DELETE_INDEX</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.COLUMN">COLUMN</see>:
        ///                 </term>
        ///                 <description>Create or delete a <a
        ///                 href="../../../concepts/indexes/#column-index"
        ///                 target="_top">column (attribute) index</a>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.CHUNK_SKIP">CHUNK_SKIP</see>:
        ///                 </term>
        ///                 <description>Create or delete a <a
        ///                 href="../../../concepts/indexes/#chunk-skip-index"
        ///                 target="_top">chunk skip index</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.GEOSPATIAL">GEOSPATIAL</see>:
        ///                 </term>
        ///                 <description>Create or delete a <a
        ///                 href="../../../concepts/indexes/#geospatial-index"
        ///                 target="_top">geospatial index</a></description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.CAGRA">CAGRA</see>:
        ///                 </term>
        ///                 <description>Create or delete a <a
        ///                 href="../../../concepts/indexes/#cagra-index"
        ///                 target="_top">CAGRA index</a> on a <a
        ///                 href="../../../vector_search/#vector-type"
        ///                 target="_top">vector column</a></description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTableRequest.Options.HNSW">HNSW</see>:
        ///                 </term>
        ///                 <description>Create or delete an <a
        ///                 href="../../../concepts/indexes/#hnsw-index"
        ///                 target="_top">HNSW index</a> on a <a
        ///                 href="../../../vector_search/#vector-type"
        ///                 target="_top">vector column</a></description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterTableRequest.Options.COLUMN">COLUMN</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableRequest.Options.INDEX_OPTIONS">INDEX_OPTIONS</see>:
        ///         </term>
        ///         <description>Options to use when creating an index, in the
        ///         format "key: value [, key: value [, ...]]". Valid options
        ///         vary by index type.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTableResponse alterTable( string table_name,
                                              string action,
                                              string _value,
                                              IDictionary<string, string> options = null )
        {
            return alterTable( new AlterTableRequest( table_name, action, _value, options ) );
        }

        /// <summary>Apply various modifications to columns in a table, view.
        /// </summary>
        /// <remarks><para> The available modifications include the
        /// following:</para>
        /// <para>Create or delete an <a
        /// href="../../../concepts/indexes/#column-index"
        /// target="_top">index</a> on a particular column. This can speed up
        /// certain operations when using expressions containing equality or
        /// relational operators on indexed columns. This only applies to
        /// tables.</para>
        /// <para>Manage a table's columns--a column can be added, removed, or
        /// have its <a href="../../../concepts/types/" target="_top">type and
        /// properties</a> modified, including whether it is <a
        /// href="../../../concepts/dictionary_encoding/"
        /// target="_top">dictionary encoded</a> or not.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTableColumnsResponse alterTableColumns( AlterTableColumnsRequest request_ )
        {
            AlterTableColumnsResponse actualResponse_ = SubmitRequest<AlterTableColumnsResponse>("/alter/table/columns", request_, false);

            return actualResponse_;
        }

        /// <summary>Apply various modifications to columns in a table, view.
        /// </summary>
        /// <remarks><para> The available modifications include the
        /// following:</para>
        /// <para>Create or delete an <a
        /// href="../../../concepts/indexes/#column-index"
        /// target="_top">index</a> on a particular column. This can speed up
        /// certain operations when using expressions containing equality or
        /// relational operators on indexed columns. This only applies to
        /// tables.</para>
        /// <para>Manage a table's columns--a column can be added, removed, or
        /// have its <a href="../../../concepts/types/" target="_top">type and
        /// properties</a> modified, including whether it is <a
        /// href="../../../concepts/dictionary_encoding/"
        /// target="_top">dictionary encoded</a> or not.</para></remarks>
        ///
        /// <param name="table_name">Table on which the operation will be
        /// performed. Must be an existing table or view, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_alterations">List of alter table
        /// add/delete/change column requests - all for the same table. Each
        /// request is a map that includes 'column_name', 'action' and the
        /// options specific for the action. Note that the same options as in
        /// alter table requests but in the same map as the column name and the
        /// action. For example:
        /// [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
        /// 'type':'int','default_value':'1'}]</param>
        /// <param name="options">Optional parameters.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTableColumnsResponse alterTableColumns( string table_name,
                                                            IList<IDictionary<string, string>> column_alterations,
                                                            IDictionary<string, string> options )
        {
            return alterTableColumns( new AlterTableColumnsRequest( table_name,
                                                                    column_alterations,
                                                                    options ) );
        }

        /// <summary>Updates (adds or changes) metadata for tables.</summary>
        /// <remarks><para>The metadata key and values must both be strings.
        /// This is an easy way to annotate whole tables rather than single
        /// records within tables.  Some examples of metadata are owner of the
        /// table, table creation timestamp etc.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTableMetadataResponse alterTableMetadata( AlterTableMetadataRequest request_ )
        {
            AlterTableMetadataResponse actualResponse_ = SubmitRequest<AlterTableMetadataResponse>("/alter/table/metadata", request_, false);

            return actualResponse_;
        }

        /// <summary>Updates (adds or changes) metadata for tables.</summary>
        /// <remarks><para>The metadata key and values must both be strings.
        /// This is an easy way to annotate whole tables rather than single
        /// records within tables.  Some examples of metadata are owner of the
        /// table, table creation timestamp etc.</para></remarks>
        ///
        /// <param name="table_names">Names of the tables whose metadata will
        /// be updated, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  All specified tables must
        /// exist, or an error will be returned.</param>
        /// <param name="metadata_map">A map which contains the metadata of the
        /// tables that are to be updated. Note that only one map is provided
        /// for all the tables; so the change will be applied to every table.
        /// If the provided map is empty, then all existing metadata for the
        /// table(s) will be cleared.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTableMetadataResponse alterTableMetadata( IList<string> table_names,
                                                              IDictionary<string, string> metadata_map,
                                                              IDictionary<string, string> options = null )
        {
            return alterTableMetadata( new AlterTableMetadataRequest( table_names,
                                                                      metadata_map,
                                                                      options ) );
        }

        /// <summary>Alters a table monitor previously created with <see
        /// cref="createTableMonitor(CreateTableMonitorRequest)">createTableMonitor</see>.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTableMonitorResponse alterTableMonitor( AlterTableMonitorRequest request_ )
        {
            AlterTableMonitorResponse actualResponse_ = SubmitRequest<AlterTableMonitorResponse>("/alter/tablemonitor", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters a table monitor previously created with <see
        /// cref="createTableMonitor(string,IDictionary{string,string})">createTableMonitor</see>.
        /// </summary>
        ///
        /// <param name="topic_id">The topic ID returned by <see
        /// cref="createTableMonitor(string,IDictionary{string,string})">createTableMonitor</see>.
        /// </param>
        /// <param name="monitor_updates_map">Map containing the properties of
        /// the table monitor to be updated. Error if empty.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterTableMonitorRequest.MonitorUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>:
        ///         </term>
        ///         <description>Updates the schema name.  If <see
        ///         cref="AlterTableMonitorRequest.MonitorUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>
        ///         doesn't exist, an error will be thrown. If <see
        ///         cref="AlterTableMonitorRequest.MonitorUpdatesMap.SCHEMA_NAME">SCHEMA_NAME</see>
        ///         is empty, then the user's default schema will be used.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTableMonitorResponse alterTableMonitor( string topic_id,
                                                            IDictionary<string, string> monitor_updates_map,
                                                            IDictionary<string, string> options )
        {
            return alterTableMonitor( new AlterTableMonitorRequest( topic_id,
                                                                    monitor_updates_map,
                                                                    options ) );
        }

        /// <summary>Alters properties of an exisiting <a
        /// href="../../../rm/concepts/#storage-tiers" target="_top">tier</a>
        /// to facilitate <a href="../../../rm/concepts/"
        /// target="_top">resource management</a>.</summary>
        /// <remarks><para> To disable <a
        /// href="../../../rm/concepts/#watermark-based-eviction"
        /// target="_top">watermark-based eviction</a>, set both <see
        /// cref="AlterTierRequest.Options.HIGH_WATERMARK">HIGH_WATERMARK</see>
        /// and <see
        /// cref="AlterTierRequest.Options.LOW_WATERMARK">LOW_WATERMARK</see>
        /// to 100.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTierResponse alterTier( AlterTierRequest request_ )
        {
            AlterTierResponse actualResponse_ = SubmitRequest<AlterTierResponse>("/alter/tier", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters properties of an exisiting <a
        /// href="../../../rm/concepts/#storage-tiers" target="_top">tier</a>
        /// to facilitate <a href="../../../rm/concepts/"
        /// target="_top">resource management</a>.</summary>
        /// <remarks><para> To disable <a
        /// href="../../../rm/concepts/#watermark-based-eviction"
        /// target="_top">watermark-based eviction</a>, set both <see
        /// cref="AlterTierRequest.Options.HIGH_WATERMARK">HIGH_WATERMARK</see>
        /// and <see
        /// cref="AlterTierRequest.Options.LOW_WATERMARK">LOW_WATERMARK</see>
        /// to 100.</para></remarks>
        ///
        /// <param name="name">Name of the tier to be altered. Must be an
        /// existing tier group name.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterTierRequest.Options.CAPACITY">CAPACITY</see>:
        ///         </term>
        ///         <description>Maximum size in bytes this tier may hold at
        ///         once.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTierRequest.Options.HIGH_WATERMARK">HIGH_WATERMARK</see>:
        ///         </term>
        ///         <description>Threshold of usage of this tier's resource
        ///         that once exceeded, will trigger watermark-based eviction
        ///         from this tier. The minimum allowed value is '0'. The
        ///         maximum allowed value is '100'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTierRequest.Options.LOW_WATERMARK">LOW_WATERMARK</see>:
        ///         </term>
        ///         <description>Threshold of resource usage that once fallen
        ///         below after crossing the <see
        ///         cref="AlterTierRequest.Options.HIGH_WATERMARK">HIGH_WATERMARK</see>,
        ///         will cease watermark-based eviction from this tier. The
        ///         minimum allowed value is '0'. The maximum allowed value is
        ///         '100'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTierRequest.Options.WAIT_TIMEOUT">WAIT_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for reading from or writing
        ///         to this resource. Applies to cold storage tiers only.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterTierRequest.Options.PERSIST">PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterTierRequest.Options.TRUE">TRUE</see> the system
        ///         configuration will be written to disk upon successful
        ///         application of this request. This will commit the changes
        ///         from this request and any additional in-memory
        ///         modifications.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTierRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterTierRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterTierRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="AlterTierRequest.Options.RANK">RANK</see>:
        ///         </term>
        ///         <description>Apply the requested change only to a specific
        ///         rank. The minimum allowed value is '0'. The maximum allowed
        ///         value is '10000'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterTierResponse alterTier( string name,
                                            IDictionary<string, string> options = null )
        {
            return alterTier( new AlterTierRequest( name, options ) );
        }

        /// <summary>Alters a user.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterUserResponse alterUser( AlterUserRequest request_ )
        {
            AlterUserResponse actualResponse_ = SubmitRequest<AlterUserResponse>("/alter/user", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters a user.</summary>
        ///
        /// <param name="name">Name of the user to be altered. Must be an
        /// existing user.</param>
        /// <param name="action">Modification operation to be applied to the
        /// user.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterUserRequest.Action.SET_COMMENT">SET_COMMENT</see>:
        ///         </term>
        ///         <description>Sets the comment for an internal user.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterUserRequest.Action.SET_PASSWORD">SET_PASSWORD</see>:
        ///         </term>
        ///         <description>Sets the password of the user. The user must
        ///         be an internal user.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterUserRequest.Action.SET_RESOURCE_GROUP">SET_RESOURCE_GROUP</see>:
        ///         </term>
        ///         <description>Sets the resource group for an internal user.
        ///         The resource group must exist, otherwise, an empty string
        ///         assigns the user to the default resource group.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterUserRequest.Action.SET_DEFAULT_SCHEMA">SET_DEFAULT_SCHEMA</see>:
        ///         </term>
        ///         <description>Set the default_schema for an internal user.
        ///         An empty string means the user will have no default schema.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="_value">The value of the modification, depending on
        /// <paramref name="action" />.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterUserResponse alterUser( string name,
                                            string action,
                                            string _value,
                                            IDictionary<string, string> options = null )
        {
            return alterUser( new AlterUserRequest( name, action, _value, options ) );
        }

        /// <summary>Alters a video.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterVideoResponse alterVideo( AlterVideoRequest request_ )
        {
            AlterVideoResponse actualResponse_ = SubmitRequest<AlterVideoResponse>("/alter/video", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters a video.</summary>
        ///
        /// <param name="path">Fully-qualified <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a> path to the video to be altered.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="AlterVideoRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the video.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterVideoResponse alterVideo( string path,
                                              IDictionary<string, string> options = null )
        {
            return alterVideo( new AlterVideoRequest( path, options ) );
        }

        /// <summary>Alters table wal settings.Returns information about the
        /// requested table wal modifications.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterWalResponse alterWal( AlterWalRequest request_ )
        {
            AlterWalResponse actualResponse_ = SubmitRequest<AlterWalResponse>("/alter/wal", request_, false);

            return actualResponse_;
        }

        /// <summary>Alters table wal settings.Returns information about the
        /// requested table wal modifications.</summary>
        ///
        /// <param name="table_names">List of tables to modify. An asterisk
        /// changes the system settings.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AlterWalRequest.Options.MAX_SEGMENT_SIZE">MAX_SEGMENT_SIZE</see>:
        ///         </term>
        ///         <description>Maximum size of an individual segment file
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterWalRequest.Options.SEGMENT_COUNT">SEGMENT_COUNT</see>:
        ///         </term>
        ///         <description>Approximate number of segment files to split
        ///         the wal across. Must be at least two.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterWalRequest.Options.SYNC_POLICY">SYNC_POLICY</see>:
        ///         </term>
        ///         <description>Maximum size of an individual segment file.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>Disables the wal</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.BACKGROUND">BACKGROUND</see>:
        ///                 </term>
        ///                 <description>Wal entries are periodically written
        ///                 instead of immediately after each operation
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.FLUSH">FLUSH</see>:
        ///                 </term>
        ///                 <description>Protects entries in the event of a
        ///                 database crash</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.FSYNC">FSYNC</see>:
        ///                 </term>
        ///                 <description>Protects entries in the event of an OS
        ///                 crash</description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterWalRequest.Options.FLUSH_FREQUENCY">FLUSH_FREQUENCY</see>:
        ///         </term>
        ///         <description>Specifies how frequently wal entries are
        ///         written with background sync. This is a global setting and
        ///         can only be used with the system {options.table_names}
        ///         specifier '*'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterWalRequest.Options.CHECKSUM">CHECKSUM</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterWalRequest.Options.TRUE">TRUE</see> each entry
        ///         will be checked against a protective checksum.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterWalRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterWalRequest.Options.OVERRIDE_NON_DEFAULT">OVERRIDE_NON_DEFAULT</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterWalRequest.Options.TRUE">TRUE</see> tables with
        ///         unique wal settings will be overridden when applying a
        ///         system level change.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterWalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterWalRequest.Options.RESTORE_SYSTEM_SETTINGS">RESTORE_SYSTEM_SETTINGS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterWalRequest.Options.TRUE">TRUE</see> tables with
        ///         unique wal settings will be reverted to the current global
        ///         settings. Cannot be used in conjunction with any other
        ///         option.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterWalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AlterWalRequest.Options.PERSIST">PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="AlterWalRequest.Options.TRUE">TRUE</see> and a
        ///         system-level change was requested, the system configuration
        ///         will be written to disk upon successful application of this
        ///         request. This will commit the changes from this request and
        ///         any additional in-memory modifications.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AlterWalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AlterWalRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AlterWalResponse alterWal( IList<string> table_names,
                                          IDictionary<string, string> options = null )
        {
            return alterWal( new AlterWalRequest( table_names, options ) );
        }

        /// <summary>Append (or insert) all records from a source table
        /// (specified by <see
        /// cref="AppendRecordsRequest.source_table_name">source_table_name</see>)
        /// to a particular target table (specified by <see
        /// cref="AppendRecordsRequest.table_name">table_name</see>).</summary>
        /// <remarks><para>The field map (specified by <see
        /// cref="AppendRecordsRequest.field_map">field_map</see>) holds the
        /// user specified map of target table column names with their mapped
        /// source column names.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AppendRecordsResponse appendRecords( AppendRecordsRequest request_ )
        {
            AppendRecordsResponse actualResponse_ = SubmitRequest<AppendRecordsResponse>("/append/records", request_, false);

            return actualResponse_;
        }

        /// <summary>Append (or insert) all records from a source table
        /// (specified by <paramref name="source_table_name" />) to a
        /// particular target table (specified by <paramref name="table_name"
        /// />).</summary>
        /// <remarks><para>The field map (specified by <paramref
        /// name="field_map" />) holds the user specified map of target table
        /// column names with their mapped source column names.</para>
        /// </remarks>
        ///
        /// <param name="table_name">The table name for the records to be
        /// appended, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="source_table_name">The source table name to get
        /// records from, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing table
        /// name.</param>
        /// <param name="field_map">Contains the mapping of column names from
        /// the target table (specified by <paramref name="table_name" />) as
        /// the keys, and corresponding column names or expressions (e.g.,
        /// 'col_name+1') from the source table (specified by <paramref
        /// name="source_table_name" />). Must be existing column names in
        /// source table and target table, and their types must be matched. For
        /// details on using expressions, see <a
        /// href="../../../concepts/expressions/"
        /// target="_top">Expressions</a>.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="AppendRecordsRequest.Options.OFFSET">OFFSET</see>:
        ///         </term>
        ///         <description>A positive integer indicating the number of
        ///         initial results to skip from <paramref
        ///         name="source_table_name" />. Default is 0. The minimum
        ///         allowed value is 0. The maximum allowed value is MAX_INT.
        ///         The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AppendRecordsRequest.Options.LIMIT">LIMIT</see>:
        ///         </term>
        ///         <description>A positive integer indicating the maximum
        ///         number of results to be returned from <paramref
        ///         name="source_table_name" />. Or END_OF_SET (-9999) to
        ///         indicate that the max number of results should be returned.
        ///         The default value is '-9999'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AppendRecordsRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Optional filter expression to apply to the
        ///         <paramref name="source_table_name" />. The default value is
        ///         ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AppendRecordsRequest.Options.ORDER_BY">ORDER_BY</see>:
        ///         </term>
        ///         <description>Comma-separated list of the columns to be
        ///         sorted by from source table (specified by <paramref
        ///         name="source_table_name" />), e.g., 'timestamp asc, x
        ///         desc'. The <see
        ///         cref="AppendRecordsRequest.Options.ORDER_BY">ORDER_BY</see>
        ///         columns do not have to be present in <paramref
        ///         name="field_map" />. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AppendRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision policy for
        ///         inserting source table records (specified by <paramref
        ///         name="source_table_name" />) into a target table (specified
        ///         by <paramref name="table_name" />) with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>. If set to <see
        ///         cref="AppendRecordsRequest.Options.TRUE">TRUE</see>, any
        ///         existing table record with primary key values that match
        ///         those of a source table record being inserted will be
        ///         replaced by that new record (the new data will be
        ///         "upserted"). If set to <see
        ///         cref="AppendRecordsRequest.Options.FALSE">FALSE</see>, any
        ///         existing table record with primary key values that match
        ///         those of a source table record being inserted will remain
        ///         unchanged, while the source record will be rejected and an
        ///         error handled as determined by <see
        ///         cref="AppendRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>.
        ///         If the specified table does not have a primary key, then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AppendRecordsRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Upsert new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AppendRecordsRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Reject new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AppendRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AppendRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision
        ///         error-suppression policy for inserting source table records
        ///         (specified by <paramref name="source_table_name" />) into a
        ///         target table (specified by <paramref name="table_name" />)
        ///         with a <a href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>, only used when not in upsert
        ///         mode (upsert mode is disabled when <see
        ///         cref="AppendRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="AppendRecordsRequest.Options.FALSE">FALSE</see>).  If
        ///         set to <see
        ///         cref="AppendRecordsRequest.Options.TRUE">TRUE</see>, any
        ///         source table record being inserted that is rejected for
        ///         having primary key values that match those of an existing
        ///         target table record will be ignored with no error
        ///         generated.  If <see
        ///         cref="AppendRecordsRequest.Options.FALSE">FALSE</see>, the
        ///         rejection of any source table record for having primary key
        ///         values matching an existing target table record will result
        ///         in an error being raised.  If the specified table does not
        ///         have a primary key or if upsert mode is in effect (<see
        ///         cref="AppendRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="AppendRecordsRequest.Options.TRUE">TRUE</see>), then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AppendRecordsRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Ignore source table records whose
        ///                 primary key values collide with those of target
        ///                 table records</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AppendRecordsRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Raise an error for any source table
        ///                 record whose primary key values collide with those
        ///                 of a target table record</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AppendRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="AppendRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="AppendRecordsRequest.Options.TRUE">TRUE</see>, it
        ///         allows inserting longer strings into smaller charN string
        ///         columns by truncating the longer strings to fit.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="AppendRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="AppendRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="AppendRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public AppendRecordsResponse appendRecords( string table_name,
                                                    string source_table_name,
                                                    IDictionary<string, string> field_map,
                                                    IDictionary<string, string> options = null )
        {
            return appendRecords( new AppendRecordsRequest( table_name, source_table_name,
                                                            field_map, options ) );
        }

        /// <summary>Clears statistics (cardinality, mean value, etc.) for a
        /// column in a specified table.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ClearStatisticsResponse clearStatistics( ClearStatisticsRequest request_ )
        {
            ClearStatisticsResponse actualResponse_ = SubmitRequest<ClearStatisticsResponse>("/clear/statistics", request_, false);

            return actualResponse_;
        }

        /// <summary>Clears statistics (cardinality, mean value, etc.) for a
        /// column in a specified table.</summary>
        ///
        /// <param name="table_name">Name of a table, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. Must be an existing table.
        /// The default value is ''.</param>
        /// <param name="column_name">Name of the column in <paramref
        /// name="table_name" /> for which to clear statistics. The column must
        /// be from an existing table. An empty string clears statistics for
        /// all columns in the table. The default value is ''.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ClearStatisticsResponse clearStatistics( string table_name = "",
                                                        string column_name = "",
                                                        IDictionary<string, string> options = null )
        {
            return clearStatistics( new ClearStatisticsRequest( table_name, column_name,
                                                                options ) );
        }

        /// <summary>Clears (drops) one or all tables in the database cluster.
        /// </summary>
        /// <remarks><para>The operation is synchronous meaning that the table
        /// will be cleared before the function returns. The response payload
        /// returns the status of the operation along with the name of the
        /// table that was cleared.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ClearTableResponse clearTable( ClearTableRequest request_ )
        {
            ClearTableResponse actualResponse_ = SubmitRequest<ClearTableResponse>("/clear/table", request_, false);

            return actualResponse_;
        }

        /// <summary>Clears (drops) one or all tables in the database cluster.
        /// </summary>
        /// <remarks><para>The operation is synchronous meaning that the table
        /// will be cleared before the function returns. The response payload
        /// returns the status of the operation along with the name of the
        /// table that was cleared.</para></remarks>
        ///
        /// <param name="table_name">Name of the table to be cleared, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. Must be an existing table.
        /// Empty string clears all available tables, though this behavior is
        /// be prevented by default via gpudb.conf parameter
        /// 'disable_clear_all'. The default value is ''.</param>
        /// <param name="authorization">No longer used. User can pass an empty
        /// string. The default value is ''.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ClearTableRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ClearTableRequest.Options.TRUE">TRUE</see> and if the
        ///         table specified in <paramref name="table_name" /> does not
        ///         exist no error is returned. If <see
        ///         cref="ClearTableRequest.Options.FALSE">FALSE</see> and if
        ///         the table specified in <paramref name="table_name" /> does
        ///         not exist then an error is returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ClearTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ClearTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ClearTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ClearTableResponse clearTable( string table_name = "",
                                              string authorization = "",
                                              IDictionary<string, string> options = null )
        {
            return clearTable( new ClearTableRequest( table_name, authorization, options ) );
        }

        /// <summary>Deactivates a table monitor previously created with <see
        /// cref="createTableMonitor(CreateTableMonitorRequest)">createTableMonitor</see>.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ClearTableMonitorResponse clearTableMonitor( ClearTableMonitorRequest request_ )
        {
            ClearTableMonitorResponse actualResponse_ = SubmitRequest<ClearTableMonitorResponse>("/clear/tablemonitor", request_, false);

            return actualResponse_;
        }

        /// <summary>Deactivates a table monitor previously created with <see
        /// cref="createTableMonitor(string,IDictionary{string,string})">createTableMonitor</see>.
        /// </summary>
        ///
        /// <param name="topic_id">The topic ID returned by <see
        /// cref="createTableMonitor(string,IDictionary{string,string})">createTableMonitor</see>.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ClearTableMonitorRequest.Options.KEEP_AUTOGENERATED_SINK">KEEP_AUTOGENERATED_SINK</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ClearTableMonitorRequest.Options.TRUE">TRUE</see>,
        ///         the auto-generated <a href="../../../concepts/data_sinks/"
        ///         target="_top">datasink</a> associated with this monitor, if
        ///         there is one, will be retained for further use. If <see
        ///         cref="ClearTableMonitorRequest.Options.FALSE">FALSE</see>,
        ///         then the auto-generated sink will be dropped if there are
        ///         no other monitors referencing it.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ClearTableMonitorRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ClearTableMonitorRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ClearTableMonitorRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ClearTableMonitorRequest.Options.CLEAR_ALL_REFERENCES">CLEAR_ALL_REFERENCES</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ClearTableMonitorRequest.Options.TRUE">TRUE</see>,
        ///         all references that share the same <paramref
        ///         name="topic_id" /> will be cleared.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ClearTableMonitorRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ClearTableMonitorRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ClearTableMonitorRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ClearTableMonitorResponse clearTableMonitor( string topic_id,
                                                            IDictionary<string, string> options = null )
        {
            return clearTableMonitor( new ClearTableMonitorRequest( topic_id, options ) );
        }

        /// <summary>Clears or cancels the trigger identified by the specified
        /// handle.</summary>
        /// <remarks><para>The output returns the handle of the trigger cleared
        /// as well as indicating success or failure of the trigger
        /// deactivation.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ClearTriggerResponse clearTrigger( ClearTriggerRequest request_ )
        {
            ClearTriggerResponse actualResponse_ = SubmitRequest<ClearTriggerResponse>("/clear/trigger", request_, false);

            return actualResponse_;
        }

        /// <summary>Clears or cancels the trigger identified by the specified
        /// handle.</summary>
        /// <remarks><para>The output returns the handle of the trigger cleared
        /// as well as indicating success or failure of the trigger
        /// deactivation.</para></remarks>
        ///
        /// <param name="trigger_id">ID for the trigger to be deactivated.
        /// </param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ClearTriggerResponse clearTrigger( string trigger_id,
                                                  IDictionary<string, string> options = null )
        {
            return clearTrigger( new ClearTriggerRequest( trigger_id, options ) );
        }

        /// <summary>Collect statistics for a column(s) in a specified table.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CollectStatisticsResponse collectStatistics( CollectStatisticsRequest request_ )
        {
            CollectStatisticsResponse actualResponse_ = SubmitRequest<CollectStatisticsResponse>("/collect/statistics", request_, false);

            return actualResponse_;
        }

        /// <summary>Collect statistics for a column(s) in a specified table.
        /// </summary>
        ///
        /// <param name="table_name">Name of a table, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="column_names">List of one or more column names in
        /// <paramref name="table_name" /> for which to collect statistics
        /// (cardinality, mean value, etc.).</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CollectStatisticsResponse collectStatistics( string table_name,
                                                            IList<string> column_names,
                                                            IDictionary<string, string> options = null )
        {
            return collectStatistics( new CollectStatisticsRequest( table_name,
                                                                    column_names, options ) );
        }

        /// @cond NO_DOCS
        public CreateContainerRegistryResponse createContainerRegistry( CreateContainerRegistryRequest request_ )
        {
            CreateContainerRegistryResponse actualResponse_ = SubmitRequest<CreateContainerRegistryResponse>("/create/container/registry", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public CreateContainerRegistryResponse createContainerRegistry( string registry_name,
                                                                        string uri,
                                                                        string credential,
                                                                        IDictionary<string, string> options = null )
        {
            return createContainerRegistry( new CreateContainerRegistryRequest( registry_name,
                                                                                uri,
                                                                                credential,
                                                                                options ) );
        }
        /// @endcond

        /// <summary>Create a new <a href="../../../concepts/credentials/"
        /// target="_top">credential</a>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateCredentialResponse createCredential( CreateCredentialRequest request_ )
        {
            CreateCredentialResponse actualResponse_ = SubmitRequest<CreateCredentialResponse>("/create/credential", request_, false);

            return actualResponse_;
        }

        /// <summary>Create a new <a href="../../../concepts/credentials/"
        /// target="_top">credential</a>.</summary>
        ///
        /// <param name="credential_name">Name of the credential to be created.
        /// Must contain only letters, digits, and underscores, and cannot
        /// begin with a digit. Must not match an existing credential name.
        /// </param>
        /// <param name="type">Type of the credential to be created.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.AWS_ACCESS_KEY">AWS_ACCESS_KEY</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.AWS_IAM_ROLE">AWS_IAM_ROLE</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.AZURE_AD">AZURE_AD</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.AZURE_OAUTH">AZURE_OAUTH</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.AZURE_SAS">AZURE_SAS</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.AZURE_STORAGE_KEY">AZURE_STORAGE_KEY</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.CONFLUENT">CONFLUENT</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.DOCKER">DOCKER</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.GCS_SERVICE_ACCOUNT_ID">GCS_SERVICE_ACCOUNT_ID</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.GCS_SERVICE_ACCOUNT_KEYS">GCS_SERVICE_ACCOUNT_KEYS</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.HDFS">HDFS</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.JDBC">JDBC</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.KAFKA">KAFKA</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.NVIDIA_API_KEY">NVIDIA_API_KEY</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateCredentialRequest.Type.OPENAI_API_KEY">OPENAI_API_KEY</see>
        ///         </term>
        ///     </item>
        /// </list></param>
        /// <param name="identity">User of the credential to be created.
        /// </param>
        /// <param name="secret">Password of the credential to be created.
        /// </param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateCredentialResponse createCredential( string credential_name,
                                                          string type,
                                                          string identity,
                                                          string secret,
                                                          IDictionary<string, string> options = null )
        {
            return createCredential( new CreateCredentialRequest( credential_name, type,
                                                                  identity, secret,
                                                                  options ) );
        }

        /// <summary>Creates a <a href="../../../concepts/data_sinks/"
        /// target="_top">data sink</a>, which contains the destination
        /// information for a data sink that is external to the database.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateDatasinkResponse createDatasink( CreateDatasinkRequest request_ )
        {
            CreateDatasinkResponse actualResponse_ = SubmitRequest<CreateDatasinkResponse>("/create/datasink", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a <a href="../../../concepts/data_sinks/"
        /// target="_top">data sink</a>, which contains the destination
        /// information for a data sink that is external to the database.
        /// </summary>
        ///
        /// <param name="name">Name of the data sink to be created.</param>
        /// <param name="destination">Destination for the output data in format
        /// 'storage_provider_type://path[:port]'.
        /// Supported storage provider types are 'azure', 'gcs', 'hdfs',
        /// 'http', 'https', 'jdbc', 'kafka' and 's3'.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.CONNECTION_TIMEOUT">CONNECTION_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for connecting to this data
        ///         sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.WAIT_TIMEOUT">WAIT_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for waiting for a response
        ///         from this data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Name of the <a
        ///         href="../../../concepts/credentials/"
        ///         target="_top">credential</a> object to be used in this data
        ///         sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.S3_BUCKET_NAME">S3_BUCKET_NAME</see>:
        ///         </term>
        ///         <description>Name of the Amazon S3 bucket to use as the
        ///         data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.S3_REGION">S3_REGION</see>:
        ///         </term>
        ///         <description>Name of the Amazon S3 region where the given
        ///         bucket is located</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.S3_VERIFY_SSL">S3_VERIFY_SSL</see>:
        ///         </term>
        ///         <description>Set to false for testing purposes or when
        ///         necessary to bypass TLS errors (e.g. self-signed
        ///         certificates). This value is true by default.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.S3_USE_VIRTUAL_ADDRESSING">S3_USE_VIRTUAL_ADDRESSING</see>:
        ///         </term>
        ///         <description>When true (default), the requests URI should
        ///         be specified in virtual-hosted-style format where the
        ///         bucket name is part of the domain name in the URL.
        ///         Otherwise set to false to use path-style URI for requests.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.S3_AWS_ROLE_ARN">S3_AWS_ROLE_ARN</see>:
        ///         </term>
        ///         <description>Amazon IAM Role ARN which has required S3
        ///         permissions that can be assumed for the given S3 IAM user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.S3_ENCRYPTION_CUSTOMER_ALGORITHM">S3_ENCRYPTION_CUSTOMER_ALGORITHM</see>:
        ///         </term>
        ///         <description>Customer encryption algorithm used encrypting
        ///         data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.S3_ENCRYPTION_CUSTOMER_KEY">S3_ENCRYPTION_CUSTOMER_KEY</see>:
        ///         </term>
        ///         <description>Customer encryption key to encrypt or decrypt
        ///         data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.HDFS_KERBEROS_KEYTAB">HDFS_KERBEROS_KEYTAB</see>:
        ///         </term>
        ///         <description>Kerberos keytab file location for the given
        ///         HDFS user.  This may be a KIFS file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.HDFS_DELEGATION_TOKEN">HDFS_DELEGATION_TOKEN</see>:
        ///         </term>
        ///         <description>Delegation token for the given HDFS user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.HDFS_USE_KERBEROS">HDFS_USE_KERBEROS</see>:
        ///         </term>
        ///         <description>Use kerberos authentication for the given HDFS
        ///         cluster.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.AZURE_STORAGE_ACCOUNT_NAME">AZURE_STORAGE_ACCOUNT_NAME</see>:
        ///         </term>
        ///         <description>Name of the Azure storage account to use as
        ///         the data sink, this is valid only if tenant_id is specified
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.AZURE_CONTAINER_NAME">AZURE_CONTAINER_NAME</see>:
        ///         </term>
        ///         <description>Name of the Azure storage container to use as
        ///         the data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.AZURE_TENANT_ID">AZURE_TENANT_ID</see>:
        ///         </term>
        ///         <description>Active Directory tenant ID (or directory ID)
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.AZURE_SAS_TOKEN">AZURE_SAS_TOKEN</see>:
        ///         </term>
        ///         <description>Shared access signature token for Azure
        ///         storage account to use as the data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.AZURE_OAUTH_TOKEN">AZURE_OAUTH_TOKEN</see>:
        ///         </term>
        ///         <description>Oauth token to access given storage container
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.GCS_BUCKET_NAME">GCS_BUCKET_NAME</see>:
        ///         </term>
        ///         <description>Name of the Google Cloud Storage bucket to use
        ///         as the data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.GCS_PROJECT_ID">GCS_PROJECT_ID</see>:
        ///         </term>
        ///         <description>Name of the Google Cloud project to use as the
        ///         data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.GCS_SERVICE_ACCOUNT_KEYS">GCS_SERVICE_ACCOUNT_KEYS</see>:
        ///         </term>
        ///         <description>Google Cloud service account keys to use for
        ///         authenticating the data sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.JDBC_DRIVER_JAR_PATH">JDBC_DRIVER_JAR_PATH</see>:
        ///         </term>
        ///         <description>JDBC driver jar file location</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.JDBC_DRIVER_CLASS_NAME">JDBC_DRIVER_CLASS_NAME</see>:
        ///         </term>
        ///         <description>Name of the JDBC driver class</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.KAFKA_TOPIC_NAME">KAFKA_TOPIC_NAME</see>:
        ///         </term>
        ///         <description>Name of the Kafka topic to publish to if
        ///         <paramref name="destination" /> is a Kafka broker
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.MAX_BATCH_SIZE">MAX_BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of records per notification
        ///         message. The default value is '1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.MAX_MESSAGE_SIZE">MAX_MESSAGE_SIZE</see>:
        ///         </term>
        ///         <description>Maximum size in bytes of each notification
        ///         message. The default value is '1000000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.JSON_FORMAT">JSON_FORMAT</see>:
        ///         </term>
        ///         <description>The desired format of JSON encoded
        ///         notifications message.
        ///         If <see
        ///         cref="CreateDatasinkRequest.Options.NESTED">NESTED</see>,
        ///         records are returned as an array. Otherwise, only a single
        ///         record per messages is returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.FLAT">FLAT</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.NESTED">NESTED</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasinkRequest.Options.FLAT">FLAT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.USE_MANAGED_CREDENTIALS">USE_MANAGED_CREDENTIALS</see>:
        ///         </term>
        ///         <description>When no credentials are supplied, we use
        ///         anonymous access by default.  If this is set, we will use
        ///         cloud provider user settings.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.USE_HTTPS">USE_HTTPS</see>:
        ///         </term>
        ///         <description>Use https to connect to datasink if true,
        ///         otherwise use http.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasinkRequest.Options.SKIP_VALIDATION">SKIP_VALIDATION</see>:
        ///         </term>
        ///         <description>Bypass validation of connection to this data
        ///         sink.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasinkRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateDatasinkResponse createDatasink( string name,
                                                      string destination,
                                                      IDictionary<string, string> options = null )
        {
            return createDatasink( new CreateDatasinkRequest( name, destination, options ) );
        }

        /// <summary>Creates a <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>, which contains the location and
        /// connection information for a data store that is external to the
        /// database.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateDatasourceResponse createDatasource( CreateDatasourceRequest request_ )
        {
            CreateDatasourceResponse actualResponse_ = SubmitRequest<CreateDatasourceResponse>("/create/datasource", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>, which contains the location and
        /// connection information for a data store that is external to the
        /// database.</summary>
        ///
        /// <param name="name">Name of the data source to be created.</param>
        /// <param name="location">Location of the remote storage in
        /// 'storage_provider_type://[storage_path[:storage_port]]' format.
        /// Supported storage provider types are
        /// 'azure','gcs','hdfs','jdbc','kafka', 'confluent' and 's3'.</param>
        /// <param name="user_name">Name of the remote system user; may be an
        /// empty string</param>
        /// <param name="password">Password for the remote system user; may be
        /// an empty string</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.SKIP_VALIDATION">SKIP_VALIDATION</see>:
        ///         </term>
        ///         <description>Bypass validation of connection to remote
        ///         source.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.CONNECTION_TIMEOUT">CONNECTION_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for connecting to this
        ///         storage provider</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.WAIT_TIMEOUT">WAIT_TIMEOUT</see>:
        ///         </term>
        ///         <description>Timeout in seconds for reading from this
        ///         storage provider</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Name of the <a
        ///         href="../../../concepts/credentials"
        ///         target="_top">credential</a> object to be used in data
        ///         source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.S3_BUCKET_NAME">S3_BUCKET_NAME</see>:
        ///         </term>
        ///         <description>Name of the Amazon S3 bucket to use as the
        ///         data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.S3_REGION">S3_REGION</see>:
        ///         </term>
        ///         <description>Name of the Amazon S3 region where the given
        ///         bucket is located</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.S3_VERIFY_SSL">S3_VERIFY_SSL</see>:
        ///         </term>
        ///         <description>Set to false for testing purposes or when
        ///         necessary to bypass TLS errors (e.g. self-signed
        ///         certificates). This value is true by default.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.S3_USE_VIRTUAL_ADDRESSING">S3_USE_VIRTUAL_ADDRESSING</see>:
        ///         </term>
        ///         <description>Whether to use virtual addressing when
        ///         referencing the Amazon S3 source.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>The requests URI should be specified
        ///                 in virtual-hosted-style format where the bucket
        ///                 name is part of the domain name in the URL.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Use path-style URI for requests.
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.S3_AWS_ROLE_ARN">S3_AWS_ROLE_ARN</see>:
        ///         </term>
        ///         <description>Amazon IAM Role ARN which has required S3
        ///         permissions that can be assumed for the given S3 IAM user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.S3_ENCRYPTION_CUSTOMER_ALGORITHM">S3_ENCRYPTION_CUSTOMER_ALGORITHM</see>:
        ///         </term>
        ///         <description>Customer encryption algorithm used encrypting
        ///         data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.S3_ENCRYPTION_CUSTOMER_KEY">S3_ENCRYPTION_CUSTOMER_KEY</see>:
        ///         </term>
        ///         <description>Customer encryption key to encrypt or decrypt
        ///         data</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.HDFS_KERBEROS_KEYTAB">HDFS_KERBEROS_KEYTAB</see>:
        ///         </term>
        ///         <description>Kerberos keytab file location for the given
        ///         HDFS user.  This may be a KIFS file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.HDFS_DELEGATION_TOKEN">HDFS_DELEGATION_TOKEN</see>:
        ///         </term>
        ///         <description>Delegation token for the given HDFS user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.HDFS_USE_KERBEROS">HDFS_USE_KERBEROS</see>:
        ///         </term>
        ///         <description>Use kerberos authentication for the given HDFS
        ///         cluster.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.AZURE_STORAGE_ACCOUNT_NAME">AZURE_STORAGE_ACCOUNT_NAME</see>:
        ///         </term>
        ///         <description>Name of the Azure storage account to use as
        ///         the data source, this is valid only if tenant_id is
        ///         specified</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.AZURE_CONTAINER_NAME">AZURE_CONTAINER_NAME</see>:
        ///         </term>
        ///         <description>Name of the Azure storage container to use as
        ///         the data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.AZURE_TENANT_ID">AZURE_TENANT_ID</see>:
        ///         </term>
        ///         <description>Active Directory tenant ID (or directory ID)
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.AZURE_SAS_TOKEN">AZURE_SAS_TOKEN</see>:
        ///         </term>
        ///         <description>Shared access signature token for Azure
        ///         storage account to use as the data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.AZURE_OAUTH_TOKEN">AZURE_OAUTH_TOKEN</see>:
        ///         </term>
        ///         <description>OAuth token to access given storage container
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.GCS_BUCKET_NAME">GCS_BUCKET_NAME</see>:
        ///         </term>
        ///         <description>Name of the Google Cloud Storage bucket to use
        ///         as the data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.GCS_PROJECT_ID">GCS_PROJECT_ID</see>:
        ///         </term>
        ///         <description>Name of the Google Cloud project to use as the
        ///         data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.GCS_SERVICE_ACCOUNT_KEYS">GCS_SERVICE_ACCOUNT_KEYS</see>:
        ///         </term>
        ///         <description>Google Cloud service account keys to use for
        ///         authenticating the data source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.IS_STREAM">IS_STREAM</see>:
        ///         </term>
        ///         <description>To load from Azure/GCS/S3 as a stream
        ///         continuously.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.KAFKA_TOPIC_NAME">KAFKA_TOPIC_NAME</see>:
        ///         </term>
        ///         <description>Name of the Kafka topic to use as the data
        ///         source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.JDBC_DRIVER_JAR_PATH">JDBC_DRIVER_JAR_PATH</see>:
        ///         </term>
        ///         <description>JDBC driver jar file location.  This may be a
        ///         KIFS file.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.JDBC_DRIVER_CLASS_NAME">JDBC_DRIVER_CLASS_NAME</see>:
        ///         </term>
        ///         <description>Name of the JDBC driver class</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.ANONYMOUS">ANONYMOUS</see>:
        ///         </term>
        ///         <description>Use anonymous connection to storage
        ///         provider--DEPRECATED: this is now the default.  Specify
        ///         use_managed_credentials for non-anonymous connection.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.USE_MANAGED_CREDENTIALS">USE_MANAGED_CREDENTIALS</see>:
        ///         </term>
        ///         <description>When no credentials are supplied, we use
        ///         anonymous access by default.  If this is set, we will use
        ///         cloud provider user settings.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.USE_HTTPS">USE_HTTPS</see>:
        ///         </term>
        ///         <description>Use https to connect to datasource if true,
        ///         otherwise use http.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDatasourceRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDatasourceRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.SCHEMA_REGISTRY_LOCATION">SCHEMA_REGISTRY_LOCATION</see>:
        ///         </term>
        ///         <description>Location of Confluent Schema Registry in
        ///         '[storage_path[:storage_port]]' format.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.SCHEMA_REGISTRY_CREDENTIAL">SCHEMA_REGISTRY_CREDENTIAL</see>:
        ///         </term>
        ///         <description>Confluent Schema Registry <a
        ///         href="../../../concepts/credentials"
        ///         target="_top">credential</a> object name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDatasourceRequest.Options.SCHEMA_REGISTRY_PORT">SCHEMA_REGISTRY_PORT</see>:
        ///         </term>
        ///         <description>Confluent Schema Registry port (optional).
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateDatasourceResponse createDatasource( string name,
                                                          string location,
                                                          string user_name,
                                                          string password,
                                                          IDictionary<string, string> options = null )
        {
            return createDatasource( new CreateDatasourceRequest( name, location,
                                                                  user_name, password,
                                                                  options ) );
        }

        /// @cond NO_DOCS
        public CreateDeltaTableResponse createDeltaTable( CreateDeltaTableRequest request_ )
        {
            CreateDeltaTableResponse actualResponse_ = SubmitRequest<CreateDeltaTableResponse>("/create/deltatable", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public CreateDeltaTableResponse createDeltaTable( string delta_table_name,
                                                          string table_name,
                                                          IDictionary<string, string> options = null )
        {
            return createDeltaTable( new CreateDeltaTableRequest( delta_table_name,
                                                                  table_name, options ) );
        }
        /// @endcond

        /// <summary>Creates a new directory in <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a>.</summary>
        /// <remarks><para>The new directory serves as a location in which the
        /// user can upload files using <see
        /// cref="uploadFiles(UploadFilesRequest)">uploadFiles</see>.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateDirectoryResponse createDirectory( CreateDirectoryRequest request_ )
        {
            CreateDirectoryResponse actualResponse_ = SubmitRequest<CreateDirectoryResponse>("/create/directory", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new directory in <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a>.</summary>
        /// <remarks><para>The new directory serves as a location in which the
        /// user can upload files using <see
        /// cref="uploadFiles(IList{string},IList{byte[]},IDictionary{string,string})">uploadFiles</see>.
        /// </para></remarks>
        ///
        /// <param name="directory_name">Name of the directory in KiFS to be
        /// created.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateDirectoryRequest.Options.CREATE_HOME_DIRECTORY">CREATE_HOME_DIRECTORY</see>:
        ///         </term>
        ///         <description>When set, a home directory is created for the
        ///         user name provided in the value. The <paramref
        ///         name="directory_name" /> must be an empty string in this
        ///         case. The user must exist.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDirectoryRequest.Options.DATA_LIMIT">DATA_LIMIT</see>:
        ///         </term>
        ///         <description>The maximum capacity, in bytes, to apply to
        ///         the created directory. Set to -1 to indicate no upper
        ///         limit. If empty, the system default limit is applied.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateDirectoryRequest.Options.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateDirectoryRequest.Options.TRUE">TRUE</see>, does
        ///         not return an error if the directory already exists.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDirectoryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateDirectoryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateDirectoryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateDirectoryResponse createDirectory( string directory_name,
                                                        IDictionary<string, string> options = null )
        {
            return createDirectory( new CreateDirectoryRequest( directory_name, options ) );
        }

        /// <summary>Creates a new environment which can be used by <a
        /// href="../../../concepts/udf/" target="_top">user-defined
        /// functions</a> (UDF).</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateEnvironmentResponse createEnvironment( CreateEnvironmentRequest request_ )
        {
            CreateEnvironmentResponse actualResponse_ = SubmitRequest<CreateEnvironmentResponse>("/create/environment", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new environment which can be used by <a
        /// href="../../../concepts/udf/" target="_top">user-defined
        /// functions</a> (UDF).</summary>
        ///
        /// <param name="environment_name">Name of the environment to be
        /// created.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateEnvironmentResponse createEnvironment( string environment_name,
                                                            IDictionary<string, string> options = null )
        {
            return createEnvironment( new CreateEnvironmentRequest( environment_name,
                                                                    options ) );
        }

        /// <summary>Creates a new graph network using given nodes, edges,
        /// weights, and restrictions.</summary>
        /// <remarks><para> IMPORTANT: It's highly recommended that you review
        /// the <a href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
        /// target="_top">graph examples</a> before using this endpoint.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateGraphResponse createGraph( CreateGraphRequest request_ )
        {
            CreateGraphResponse actualResponse_ = SubmitRequest<CreateGraphResponse>("/create/graph", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new graph network using given nodes, edges,
        /// weights, and restrictions.</summary>
        /// <remarks><para> IMPORTANT: It's highly recommended that you review
        /// the <a href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
        /// target="_top">graph examples</a> before using this endpoint.</para>
        /// </remarks>
        ///
        /// <param name="graph_name">Name of the graph resource to generate.
        /// </param>
        /// <param name="directed_graph">If set to <see
        /// cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see>, the graph
        /// will be directed. If set to <see
        /// cref="CreateGraphRequest.DirectedGraph.FALSE">FALSE</see>, the
        /// graph will not be directed. Consult <a
        /// href="../../../graph_solver/network_graph_solver/#directed-graphs"
        /// target="_top">Directed Graphs</a> for more details.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.DirectedGraph.FALSE">FALSE</see>
        ///         </term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateGraphRequest.DirectedGraph.TRUE">TRUE</see>.</param>
        /// <param name="nodes">Nodes represent fundamental topological units
        /// of a graph. Nodes must be specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS NODE_ID',
        /// expressions, e.g., 'ST_MAKEPOINT(column1, column2) AS
        /// NODE_WKTPOINT', or constant values, e.g., '{9, 10, 11} AS NODE_ID'.
        /// If using constant values in an identifier combination, the number
        /// of values specified must match across the combination.</param>
        /// <param name="edges">Edges represent the required fundamental
        /// topological unit of a graph that typically connect nodes. Edges
        /// must be specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS EDGE_ID',
        /// expressions, e.g., 'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or
        /// constant values, e.g., "{'family', 'coworker'} AS EDGE_LABEL". If
        /// using constant values in an identifier combination, the number of
        /// values specified must match across the combination.</param>
        /// <param name="weights">Weights represent a method of informing the
        /// graph solver of the cost of including a given edge in a solution.
        /// Weights must be specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS WEIGHTS_EDGE_ID',
        /// expressions, e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or
        /// constant values, e.g., '{4, 15} AS WEIGHTS_VALUESPECIFIED'. If
        /// using constant values in an identifier combination, the number of
        /// values specified must match across the combination.</param>
        /// <param name="restrictions">Restrictions represent a method of
        /// informing the graph solver which edges and/or nodes should be
        /// ignored for the solution. Restrictions must be specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED', or constant values, e.g., '{0, 0, 0,
        /// 1} AS RESTRICTIONS_ONOFFCOMPARED'. If using constant values in an
        /// identifier combination, the number of values specified must match
        /// across the combination.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.MERGE_TOLERANCE">MERGE_TOLERANCE</see>:
        ///         </term>
        ///         <description>If node geospatial positions are input (e.g.,
        ///         WKTPOINT, X, Y), determines the minimum separation allowed
        ///         between unique nodes. If nodes are within the tolerance of
        ///         each other, they will be merged as a single node. The
        ///         default value is '1.0E-5'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.RECREATE">RECREATE</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="CreateGraphRequest.Options.TRUE">TRUE</see> and the
        ///         graph (using <paramref name="graph_name" />) already
        ///         exists, the graph is deleted and recreated.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="CreateGraphRequest.Options.TRUE">TRUE</see>, the
        ///         graph will be saved in the persist directory (see the <a
        ///         href="../../../config/#config-main-persistence"
        ///         target="_top">config reference</a> for more information).
        ///         If set to <see
        ///         cref="CreateGraphRequest.Options.FALSE">FALSE</see>, the
        ///         graph will be removed when the graph server is shutdown.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.ADD_TABLE_MONITOR">ADD_TABLE_MONITOR</see>:
        ///         </term>
        ///         <description>Adds a table monitor to every table used in
        ///         the creation of the graph; this table monitor will trigger
        ///         the graph to update dynamically upon inserts to the source
        ///         table(s). Note that upon database restart, if <see
        ///         cref="CreateGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>
        ///         is also set to <see
        ///         cref="CreateGraphRequest.Options.TRUE">TRUE</see>, the
        ///         graph will be fully reconstructed and the table monitors
        ///         will be reattached. For more details on table monitors, see
        ///         <see
        ///         cref="createTableMonitor(string,IDictionary{string,string})">createTableMonitor</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>:
        ///         </term>
        ///         <description>If specified, the created graph is also
        ///         created as a table with the given name, in
        ///         [schema_name.]table_name format, using standard <a
        ///         href="../../../concepts/tables/#table-name-resolution"
        ///         target="_top">name resolution rules</a> and meeting <a
        ///         href="../../../concepts/tables/#table-naming-criteria"
        ///         target="_top">table naming criteria</a>.  The table will
        ///         have the following identifier columns: 'EDGE_ID',
        ///         'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left blank, no table
        ///         is created. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.ADD_TURNS">ADD_TURNS</see>:
        ///         </term>
        ///         <description>Adds dummy 'pillowed' edges around
        ///         intersection nodes where there are more than three edges so
        ///         that additional weight penalties can be imposed by the
        ///         solve endpoints. (increases the total number of edges).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.IS_PARTITIONED">IS_PARTITIONED</see>:
        ///         </term>
        ///         <description>Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.SERVER_ID">SERVER_ID</see>:
        ///         </term>
        ///         <description>Indicates which graph server(s) to send the
        ///         request to. Default is to send to the server with the most
        ///         available memory.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.USE_RTREE">USE_RTREE</see>:
        ///         </term>
        ///         <description>Use an range tree structure to accelerate and
        ///         improve the accuracy of snapping, especially to edges.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.LABEL_DELIMITER">LABEL_DELIMITER</see>:
        ///         </term>
        ///         <description>If provided the label string will be split
        ///         according to this delimiter and each sub-string will be
        ///         applied as a separate label onto the specified edge. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.ALLOW_MULTIPLE_EDGES">ALLOW_MULTIPLE_EDGES</see>:
        ///         </term>
        ///         <description>Multigraph choice; allowing multiple edges
        ///         with the same node pairs if set to true, otherwise, new
        ///         edges with existing same node pairs will not be inserted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateGraphRequest.Options.EMBEDDING_TABLE">EMBEDDING_TABLE</see>:
        ///         </term>
        ///         <description>If table exists (should be generated by the
        ///         match/graph match_embedding solver), the vector embeddings
        ///         for the newly inserted nodes will be appended into this
        ///         table. The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateGraphResponse createGraph( string graph_name,
                                                bool directed_graph,
                                                IList<string> nodes,
                                                IList<string> edges,
                                                IList<string> weights,
                                                IList<string> restrictions,
                                                IDictionary<string, string> options = null )
        {
            return createGraph( new CreateGraphRequest( graph_name, directed_graph, nodes,
                                                        edges, weights, restrictions,
                                                        options ) );
        }

        /// <summary>Create a job which will run asynchronously.</summary>
        /// <remarks><para>The response returns a job ID, which can be used to
        /// query the status and result of the job. The status and the result
        /// of the job upon completion can be requested by <see
        /// cref="getJob(GetJobRequest)">getJob</see>.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateJobResponse createJob( CreateJobRequest request_ )
        {
            CreateJobResponse actualResponse_ = SubmitRequest<CreateJobResponse>("/create/job", request_, false);

            return actualResponse_;
        }

        /// <summary>Create a job which will run asynchronously.</summary>
        /// <remarks><para>The response returns a job ID, which can be used to
        /// query the status and result of the job. The status and the result
        /// of the job upon completion can be requested by <see
        /// cref="getJob(long,IDictionary{string,string})">getJob</see>.</para>
        /// </remarks>
        ///
        /// <param name="endpoint">Indicates which endpoint to execute, e.g.
        /// '/alter/table'.</param>
        /// <param name="request_encoding">The encoding of the request payload
        /// for the job.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJobRequest.RequestEncoding.JSON">JSON</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJobRequest.RequestEncoding.SNAPPY">SNAPPY</see>
        ///         </term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see>.
        /// </param>
        /// <param name="data">Binary-encoded payload for the job to be run
        /// asynchronously.  The payload must contain the relevant input
        /// parameters for the endpoint indicated in <paramref name="endpoint"
        /// />.  Please see the documentation for the appropriate endpoint to
        /// see what values must (or can) be specified.  If this parameter is
        /// used, then <paramref name="request_encoding" /> must be <see
        /// cref="CreateJobRequest.RequestEncoding.BINARY">BINARY</see> or <see
        /// cref="CreateJobRequest.RequestEncoding.SNAPPY">SNAPPY</see>.
        /// </param>
        /// <param name="data_str">JSON-encoded payload for the job to be run
        /// asynchronously.  The payload must contain the relevant input
        /// parameters for the endpoint indicated in <paramref name="endpoint"
        /// />.  Please see the documentation for the appropriate endpoint to
        /// see what values must (or can) be specified.  If this parameter is
        /// used, then <paramref name="request_encoding" /> must be <see
        /// cref="CreateJobRequest.RequestEncoding.JSON">JSON</see>.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateJobRequest.Options.REMOVE_JOB_ON_COMPLETE">REMOVE_JOB_ON_COMPLETE</see>:
        ///         </term>
        ///         <description>Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateJobRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateJobRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJobRequest.Options.JOB_TAG">JOB_TAG</see>:
        ///         </term>
        ///         <description>Tag to use for submitted job. The same tag
        ///         could be used on backup cluster to retrieve response for
        ///         the job. Tags can use letter, numbers, '_' and '-'
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateJobResponse createJob( string endpoint,
                                            string request_encoding,
                                            byte[] data,
                                            string data_str,
                                            IDictionary<string, string> options = null )
        {
            return createJob( new CreateJobRequest( endpoint, request_encoding, data,
                                                    data_str, options ) );
        }

        /// <summary>Creates a table that is the result of a SQL JOIN.
        /// </summary>
        /// <remarks><para> For join details and examples see: <a
        /// href="../../../concepts/joins/" target="_top">Joins</a>.  For
        /// limitations, see <a
        /// href="../../../concepts/joins/#limitations-cautions"
        /// target="_top">Join Limitations and Cautions</a>.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateJoinTableResponse createJoinTable( CreateJoinTableRequest request_ )
        {
            CreateJoinTableResponse actualResponse_ = SubmitRequest<CreateJoinTableResponse>("/create/jointable", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a table that is the result of a SQL JOIN.
        /// </summary>
        /// <remarks><para> For join details and examples see: <a
        /// href="../../../concepts/joins/" target="_top">Joins</a>.  For
        /// limitations, see <a
        /// href="../../../concepts/joins/#limitations-cautions"
        /// target="_top">Join Limitations and Cautions</a>.</para></remarks>
        ///
        /// <param name="join_table_name">Name of the join table to be created,
        /// in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="table_names">The list of table names composing the
        /// join, each in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Corresponds to a SQL
        /// statement FROM clause.</param>
        /// <param name="column_names">List of member table columns or column
        /// expressions to be included in the join. Columns can be prefixed
        /// with 'table_id.column_name', where 'table_id' is the table name or
        /// alias.  Columns can be aliased via the syntax 'column_name as
        /// alias'. Wild cards '*' can be used to include all columns across
        /// member tables or 'table_id.*' for all of a single table's columns.
        /// Columns and column expressions composing the join must be uniquely
        /// named or aliased--therefore, the '*' wild card cannot be used if
        /// column names aren't unique across all tables.</param>
        /// <param name="expressions">An optional list of expressions to
        /// combine and filter the joined tables.  Corresponds to a SQL
        /// statement WHERE clause. For details see: <a
        /// href="../../../concepts/expressions/"
        /// target="_top">expressions</a>. The default value is an empty List.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateJoinTableRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="join_table_name" />. This is always allowed even if
        ///         the caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="CreateJoinTableResponse.Info.QUALIFIED_JOIN_TABLE_NAME">QUALIFIED_JOIN_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateJoinTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateJoinTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateJoinTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the join as part of <paramref
        ///         name="join_table_name" /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the join. If the schema is non-existent, it will be
        ///         automatically created. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.MAX_QUERY_DIMENSIONS">MAX_QUERY_DIMENSIONS</see>:
        ///         </term>
        ///         <description>No longer used.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.OPTIMIZE_LOOKUPS">OPTIMIZE_LOOKUPS</see>:
        ///         </term>
        ///         <description>Use more memory to speed up the joining of
        ///         tables.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateJoinTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateJoinTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateJoinTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the join table specified in
        ///         <paramref name="join_table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.VIEW_ID">VIEW_ID</see>:
        ///         </term>
        ///         <description>view this projection is part of. The default
        ///         value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.NO_COUNT">NO_COUNT</see>:
        ///         </term>
        ///         <description>Return a count of 0 for the join table for
        ///         logging and for <see
        ///         cref="showTable(string,IDictionary{string,string})">showTable</see>;
        ///         optimization needed for large overlapped equi-join
        ///         stencils. The default value is 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of records per joined-chunk for
        ///         this table. Defaults to the gpudb.conf file chunk size
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateJoinTableRequest.Options.ENABLE_VIRTUAL_CHUNKING">ENABLE_VIRTUAL_CHUNKING</see>:
        ///         </term>
        ///         <description>Collect chunks with accumulated size less than
        ///         chunk_size into a single chunk. The default value is
        ///         'false'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateJoinTableResponse createJoinTable( string join_table_name,
                                                        IList<string> table_names,
                                                        IList<string> column_names,
                                                        IList<string> expressions = null,
                                                        IDictionary<string, string> options = null )
        {
            return createJoinTable( new CreateJoinTableRequest( join_table_name,
                                                                table_names, column_names,
                                                                expressions, options ) );
        }

        /// <summary>Initiates the process of creating a materialized view,
        /// reserving the view's name to prevent other views or tables from
        /// being created with that name.</summary>
        /// <remarks><para> For materialized view details and examples, see <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">Materialized Views</a>.</para>
        /// <para>The response contains <see
        /// cref="CreateMaterializedViewResponse.view_id">view_id</see>, which
        /// is used to tag each subsequent operation (projection, union,
        /// aggregation, filter, or join) that will compose the view.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateMaterializedViewResponse createMaterializedView( CreateMaterializedViewRequest request_ )
        {
            CreateMaterializedViewResponse actualResponse_ = SubmitRequest<CreateMaterializedViewResponse>("/create/materializedview", request_, false);

            return actualResponse_;
        }

        /// <summary>Initiates the process of creating a materialized view,
        /// reserving the view's name to prevent other views or tables from
        /// being created with that name.</summary>
        /// <remarks><para> For materialized view details and examples, see <a
        /// href="../../../concepts/materialized_views/"
        /// target="_top">Materialized Views</a>.</para>
        /// <para>The response contains <see
        /// cref="CreateMaterializedViewResponse.view_id">view_id</see>, which
        /// is used to tag each subsequent operation (projection, union,
        /// aggregation, filter, or join) that will compose the view.</para>
        /// </remarks>
        ///
        /// <param name="table_name">Name of the table to be created that is
        /// the top-level table of the materialized view, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the materialized view as part of <paramref
        ///         name="table_name" /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema
        ///         which is to contain the newly created view. If the schema
        ///         provided is non-existent, it will be automatically created.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.EXECUTE_AS">EXECUTE_AS</see>:
        ///         </term>
        ///         <description>User name to use to run the refresh job
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.PERSIST">PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateMaterializedViewRequest.Options.TRUE">TRUE</see>,
        ///         then the materialized view specified in <paramref
        ///         name="table_name" /> will be persisted and will not expire
        ///         unless a <see
        ///         cref="CreateMaterializedViewRequest.Options.TTL">TTL</see>
        ///         is specified.   If <see
        ///         cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see>,
        ///         then the materialized view will be an in-memory table and
        ///         will expire unless a <see
        ///         cref="CreateMaterializedViewRequest.Options.TTL">TTL</see>
        ///         is specified otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateMaterializedViewRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateMaterializedViewRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.REFRESH_SPAN">REFRESH_SPAN</see>:
        ///         </term>
        ///         <description>Sets the future time-offset(in seconds) at
        ///         which periodic refresh stops</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.REFRESH_STOP_TIME">REFRESH_STOP_TIME</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="CreateMaterializedViewRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>
        ///         is <see
        ///         cref="CreateMaterializedViewRequest.Options.PERIODIC">PERIODIC</see>,
        ///         specifies the time at which a periodic refresh is stopped.
        ///         Value is a datetime string with format 'YYYY-MM-DD
        ///         HH:MM:SS'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>:
        ///         </term>
        ///         <description>Method by which the join can be refreshed when
        ///         the data in underlying member tables have changed.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>:
        ///                 </term>
        ///                 <description>Refresh only occurs when manually
        ///                 requested by calling <see
        ///                 cref="alterTable(string,string,string,IDictionary{string,string})">alterTable</see>
        ///                 with an 'action' of 'refresh'</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateMaterializedViewRequest.Options.ON_QUERY">ON_QUERY</see>:
        ///                 </term>
        ///                 <description>Refresh any time the view is queried.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateMaterializedViewRequest.Options.ON_CHANGE">ON_CHANGE</see>:
        ///                 </term>
        ///                 <description>If possible, incrementally refresh
        ///                 (refresh just those records added) whenever an
        ///                 insert, update, delete or refresh of input table is
        ///                 done.  A full refresh is done if an incremental
        ///                 refresh is not possible.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateMaterializedViewRequest.Options.PERIODIC">PERIODIC</see>:
        ///                 </term>
        ///                 <description>Refresh table periodically at rate
        ///                 specified by <see
        ///                 cref="CreateMaterializedViewRequest.Options.REFRESH_PERIOD">REFRESH_PERIOD</see>
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateMaterializedViewRequest.Options.MANUAL">MANUAL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.REFRESH_PERIOD">REFRESH_PERIOD</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="CreateMaterializedViewRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>
        ///         is <see
        ///         cref="CreateMaterializedViewRequest.Options.PERIODIC">PERIODIC</see>,
        ///         specifies the period in seconds at which refresh occurs
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.REFRESH_START_TIME">REFRESH_START_TIME</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="CreateMaterializedViewRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>
        ///         is <see
        ///         cref="CreateMaterializedViewRequest.Options.PERIODIC">PERIODIC</see>,
        ///         specifies the first time at which a refresh is to be done.
        ///         Value is a datetime string with format 'YYYY-MM-DD
        ///         HH:MM:SS'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateMaterializedViewRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateMaterializedViewResponse createMaterializedView( string table_name,
                                                                      IDictionary<string, string> options = null )
        {
            return createMaterializedView( new CreateMaterializedViewRequest( table_name,
                                                                              options ) );
        }

        /// <summary>Creates an instance (proc) of the <a
        /// href="../../../concepts/udf/" target="_top">user-defined
        /// functions</a> (UDF) specified by the given command, options, and
        /// files, and makes it available for execution.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateProcResponse createProc( CreateProcRequest request_ )
        {
            CreateProcResponse actualResponse_ = SubmitRequest<CreateProcResponse>("/create/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates an instance (proc) of the <a
        /// href="../../../concepts/udf/" target="_top">user-defined
        /// functions</a> (UDF) specified by the given command, options, and
        /// files, and makes it available for execution.</summary>
        ///
        /// <param name="proc_name">Name of the proc to be created. Must not be
        /// the name of a currently existing proc.</param>
        /// <param name="execution_mode">The execution mode of the proc.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateProcRequest.ExecutionMode.DISTRIBUTED">DISTRIBUTED</see>:
        ///         </term>
        ///         <description>Input table data will be divided into data
        ///         segments that are distributed across all nodes in the
        ///         cluster, and the proc command will be invoked once per data
        ///         segment in parallel. Output table data from each invocation
        ///         will be saved to the same node as the corresponding input
        ///         data.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProcRequest.ExecutionMode.NONDISTRIBUTED">NONDISTRIBUTED</see>:
        ///         </term>
        ///         <description>The proc command will be invoked only once per
        ///         execution, and will not have direct access to any tables
        ///         named as input or output table parameters in the call to
        ///         <see
        ///         cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>.
        ///         It will, however, be able to access the database using
        ///         native API calls.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="CreateProcRequest.ExecutionMode.DISTRIBUTED">DISTRIBUTED</see>.
        /// </param>
        /// <param name="files">A map of the files that make up the proc. The
        /// keys of the map are file names, and the values are the binary
        /// contents of the files. The file names may include subdirectory
        /// names (e.g. 'subdir/file') but must not resolve to a directory
        /// above the root for the proc.
        /// Files may be loaded from existing files in KiFS. Those file names
        /// should be prefixed with the uri kifs:// and the values in the map
        /// should be empty. The default value is an empty Dictionary.</param>
        /// <param name="command">The command (excluding arguments) that will
        /// be invoked when the proc is executed. It will be invoked from the
        /// directory containing the proc <paramref name="files" /> and may be
        /// any command that can be resolved from that directory. It need not
        /// refer to a file actually in that directory; for example, it could
        /// be 'java' if the proc is a Java application; however, any necessary
        /// external programs must be preinstalled on every database node. If
        /// the command refers to a file in that directory, it must be preceded
        /// with './' as per Linux convention. If not specified, and exactly
        /// one file is provided in <paramref name="files" />, that file will
        /// be invoked. The default value is ''.</param>
        /// <param name="args">An array of command-line arguments that will be
        /// passed to <paramref name="command" /> when the proc is executed.
        /// The default value is an empty List.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateProcRequest.Options.MAX_CONCURRENCY_PER_NODE">MAX_CONCURRENCY_PER_NODE</see>:
        ///         </term>
        ///         <description>The maximum number of concurrent instances of
        ///         the proc that will be executed per node. 0 allows unlimited
        ///         concurrency. The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProcRequest.Options.SET_ENVIRONMENT">SET_ENVIRONMENT</see>:
        ///         </term>
        ///         <description>A python environment to use when executing the
        ///         proc. Must be an existing environment, else an error will
        ///         be returned. The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateProcResponse createProc( string proc_name,
                                              string execution_mode = CreateProcRequest.ExecutionMode.DISTRIBUTED,
                                              IDictionary<string, byte[]> files = null,
                                              string command = "",
                                              IList<string> args = null,
                                              IDictionary<string, string> options = null )
        {
            return createProc( new CreateProcRequest( proc_name, execution_mode, files,
                                                      command, args, options ) );
        }

        /// <summary>Creates a new <a href="../../../concepts/projections/"
        /// target="_top">projection</a> of an existing table.</summary>
        /// <remarks><para>A projection represents a subset of the columns
        /// (potentially including derived columns) of a table.</para>
        /// <para>For projection details and examples, see <a
        /// href="../../../concepts/projections/"
        /// target="_top">Projections</a>.  For limitations, see <a
        /// href="../../../concepts/projections/#limitations-and-cautions"
        /// target="_top">Projection Limitations and Cautions</a>.</para>
        /// <para><a href="../../../concepts/window/" target="_top">Window
        /// functions</a>, which can perform operations like moving averages,
        /// are available through this endpoint as well as <see
        /// cref="getRecordsByColumn(GetRecordsByColumnRequest)">getRecordsByColumn</see>.</para>
        /// <para>A projection can be created with a different <a
        /// href="../../../concepts/tables/#shard-keys" target="_top">shard
        /// key</a> than the source table. By specifying <see
        /// cref="CreateProjectionRequest.Options.SHARD_KEY">SHARD_KEY</see>,
        /// the projection will be sharded according to the specified columns,
        /// regardless of how the source table is sharded.  The source table
        /// can even be unsharded or replicated.</para>
        /// <para>If <see
        /// cref="CreateProjectionRequest.table_name">table_name</see> is
        /// empty, selection is performed against a single-row virtual table.
        /// This can be useful in executing temporal (<a
        /// href="../../../concepts/expressions/#date-time-functions"
        /// target="_top">NOW()</a>), identity (<a
        /// href="../../../concepts/expressions/#user-security-functions"
        /// target="_top">USER()</a>), or constant-based functions (<a
        /// href="../../../concepts/expressions/#scalar-functions"
        /// target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateProjectionResponse createProjection( CreateProjectionRequest request_ )
        {
            CreateProjectionResponse actualResponse_ = SubmitRequest<CreateProjectionResponse>("/create/projection", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new <a href="../../../concepts/projections/"
        /// target="_top">projection</a> of an existing table.</summary>
        /// <remarks><para>A projection represents a subset of the columns
        /// (potentially including derived columns) of a table.</para>
        /// <para>For projection details and examples, see <a
        /// href="../../../concepts/projections/"
        /// target="_top">Projections</a>.  For limitations, see <a
        /// href="../../../concepts/projections/#limitations-and-cautions"
        /// target="_top">Projection Limitations and Cautions</a>.</para>
        /// <para><a href="../../../concepts/window/" target="_top">Window
        /// functions</a>, which can perform operations like moving averages,
        /// are available through this endpoint as well as <see
        /// cref="getRecordsByColumn(string,IList{string},long,long,IDictionary{string,string})">getRecordsByColumn</see>.</para>
        /// <para>A projection can be created with a different <a
        /// href="../../../concepts/tables/#shard-keys" target="_top">shard
        /// key</a> than the source table. By specifying <see
        /// cref="CreateProjectionRequest.Options.SHARD_KEY">SHARD_KEY</see>,
        /// the projection will be sharded according to the specified columns,
        /// regardless of how the source table is sharded.  The source table
        /// can even be unsharded or replicated.</para>
        /// <para>If <paramref name="table_name" /> is empty, selection is
        /// performed against a single-row virtual table.  This can be useful
        /// in executing temporal (<a
        /// href="../../../concepts/expressions/#date-time-functions"
        /// target="_top">NOW()</a>), identity (<a
        /// href="../../../concepts/expressions/#user-security-functions"
        /// target="_top">USER()</a>), or constant-based functions (<a
        /// href="../../../concepts/expressions/#scalar-functions"
        /// target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).</para>
        /// </remarks>
        ///
        /// <param name="table_name">Name of the existing table on which the
        /// projection is to be applied, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  An empty table name
        /// creates a projection from a single-row virtual table, where columns
        /// specified should be constants or constant expressions.</param>
        /// <param name="projection_name">Name of the projection to be created,
        /// in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="column_names">List of columns from <paramref
        /// name="table_name" /> to be included in the projection. Can include
        /// derived columns. Can be specified as aliased via the syntax
        /// 'column_name as alias'.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateProjectionRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="projection_name" />. If <see
        ///         cref="CreateProjectionRequest.Options.PERSIST">PERSIST</see>
        ///         is <see
        ///         cref="CreateProjectionRequest.Options.FALSE">FALSE</see>
        ///         (or unspecified), then this is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="CreateProjectionResponse.Info.QUALIFIED_PROJECTION_NAME">QUALIFIED_PROJECTION_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateProjectionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the projection as part of <paramref
        ///         name="projection_name" /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the projection. If the schema is non-existent, it will be
        ///         automatically created. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>An optional filter <a
        ///         href="../../../concepts/expressions/"
        ///         target="_top">expression</a> to be applied to the source
        ///         table prior to the projection. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateProjectionRequest.Options.TRUE">TRUE</see> then
        ///         the projection will be replicated even if the source table
        ///         is not.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateProjectionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.OFFSET">OFFSET</see>:
        ///         </term>
        ///         <description>The number of initial results to skip (this
        ///         can be useful for paging through the results). The default
        ///         value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.LIMIT">LIMIT</see>:
        ///         </term>
        ///         <description>The number of records to keep. The default
        ///         value is '-9999'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.ORDER_BY">ORDER_BY</see>:
        ///         </term>
        ///         <description>Comma-separated list of the columns to be
        ///         sorted by; e.g. 'timestamp asc, x desc'.  The columns
        ///         specified must be present in <paramref name="column_names"
        ///         />.  If any alias is given for any column name, the alias
        ///         must be used, rather than the original column name. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for this projection.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for this projection.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for this projection.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.CREATE_INDEXES">CREATE_INDEXES</see>:
        ///         </term>
        ///         <description>Comma-separated list of columns on which to
        ///         create indexes on the projection.  The columns specified
        ///         must be present in <paramref name="column_names" />.  If
        ///         any alias is given for any column name, the alias must be
        ///         used, rather than the original column name.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the projection specified in
        ///         <paramref name="projection_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.SHARD_KEY">SHARD_KEY</see>:
        ///         </term>
        ///         <description>Comma-separated list of the columns to be
        ///         sharded on; e.g. 'column1, column2'.  The columns specified
        ///         must be present in <paramref name="column_names" />.  If
        ///         any alias is given for any column name, the alias must be
        ///         used, rather than the original column name. The default
        ///         value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.PERSIST">PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateProjectionRequest.Options.TRUE">TRUE</see>,
        ///         then the projection specified in <paramref
        ///         name="projection_name" /> will be persisted and will not
        ///         expire unless a <see
        ///         cref="CreateProjectionRequest.Options.TTL">TTL</see> is
        ///         specified.   If <see
        ///         cref="CreateProjectionRequest.Options.FALSE">FALSE</see>,
        ///         then the projection will be an in-memory table and will
        ///         expire unless a <see
        ///         cref="CreateProjectionRequest.Options.TTL">TTL</see> is
        ///         specified otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateProjectionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.PRESERVE_DICT_ENCODING">PRESERVE_DICT_ENCODING</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateProjectionRequest.Options.TRUE">TRUE</see>,
        ///         then columns that were dict encoded in the source table
        ///         will be dict encoded in the projection.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateProjectionRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.RETAIN_PARTITIONS">RETAIN_PARTITIONS</see>:
        ///         </term>
        ///         <description>Determines whether the created projection will
        ///         retain the partitioning scheme from the source table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateProjectionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.PARTITION_TYPE">PARTITION_TYPE</see>:
        ///         </term>
        ///         <description><a
        ///         href="../../../concepts/tables/#partitioning"
        ///         target="_top">Partitioning</a> scheme to use.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.RANGE">RANGE</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-range"
        ///                 target="_top">range partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.INTERVAL">INTERVAL</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-interval"
        ///                 target="_top">interval partitioning</a>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.LIST">LIST</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-list"
        ///                 target="_top">list partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.HASH">HASH</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-hash"
        ///                 target="_top">hash partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.SERIES">SERIES</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-series"
        ///                 target="_top">series partitioning</a>.
        ///                 </description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.PARTITION_KEYS">PARTITION_KEYS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition keys, which
        ///         are the columns or column expressions by which records will
        ///         be assigned to partitions defined by <see
        ///         cref="CreateProjectionRequest.Options.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition definitions,
        ///         whose format depends on the choice of <see
        ///         cref="CreateProjectionRequest.Options.PARTITION_TYPE">PARTITION_TYPE</see>.
        ///         See <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-interval"
        ///         target="_top">interval partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-hash"
        ///         target="_top">hash partitioning</a>, or <a
        ///         href="../../../concepts/tables/#partitioning-by-series"
        ///         target="_top">series partitioning</a> for example formats.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateProjectionRequest.Options.TRUE">TRUE</see>, a
        ///         new partition will be created for values which don't fall
        ///         into an existing partition.  Currently only supported for
        ///         <a href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitions</a>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateProjectionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateProjectionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.VIEW_ID">VIEW_ID</see>:
        ///         </term>
        ///         <description>ID of view of which this projection is a
        ///         member. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.JOIN_WINDOW_FUNCTIONS">JOIN_WINDOW_FUNCTIONS</see>:
        ///         </term>
        ///         <description>If set, window functions which require a
        ///         reshard will be computed separately and joined back
        ///         together, if the width of the projection is greater than
        ///         the join_window_functions_threshold. The default value is
        ///         'true'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateProjectionRequest.Options.JOIN_WINDOW_FUNCTIONS_THRESHOLD">JOIN_WINDOW_FUNCTIONS_THRESHOLD</see>:
        ///         </term>
        ///         <description>If the projection is greater than this width
        ///         (in bytes), then window functions which require a reshard
        ///         will be computed separately and joined back together. The
        ///         default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateProjectionResponse createProjection( string table_name,
                                                          string projection_name,
                                                          IList<string> column_names,
                                                          IDictionary<string, string> options = null )
        {
            return createProjection( new CreateProjectionRequest( table_name,
                                                                  projection_name,
                                                                  column_names, options ) );
        }

        /// <summary>Creates a new resource group to facilitate resource
        /// management.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateResourceGroupResponse createResourceGroup( CreateResourceGroupRequest request_ )
        {
            CreateResourceGroupResponse actualResponse_ = SubmitRequest<CreateResourceGroupResponse>("/create/resourcegroup", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new resource group to facilitate resource
        /// management.</summary>
        ///
        /// <param name="name">Name of the group to be created. Must contain
        /// only letters, digits, and underscores, and cannot begin with a
        /// digit. Must not match existing resource group name.</param>
        /// <param name="tier_attributes">Optional map containing tier names
        /// and their respective attribute group limits.  The only valid
        /// attribute limit that can be set is max_memory (in bytes) for the
        /// VRAM & RAM tiers.
        /// For instance, to set max VRAM capacity to 1GB and max RAM capacity
        /// to 10GB, use:  {'VRAM':{'max_memory':'1000000000'},
        /// 'RAM':{'max_memory':'10000000000'}}.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.TierAttributes.MAX_MEMORY">MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Maximum amount of memory usable in the given
        ///         tier at one time for this group.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="ranking">Indicates the relative ranking among existing
        /// resource groups where this new resource group will be placed.  When
        /// using <see
        /// cref="CreateResourceGroupRequest.Ranking.BEFORE">BEFORE</see> or
        /// <see cref="CreateResourceGroupRequest.Ranking.AFTER">AFTER</see>,
        /// specify which resource group this one will be inserted before or
        /// after in <paramref name="adjoining_resource_group" />.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.Ranking.FIRST">FIRST</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.Ranking.LAST">LAST</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.Ranking.BEFORE">BEFORE</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.Ranking.AFTER">AFTER</see>
        ///         </term>
        ///     </item>
        /// </list></param>
        /// <param name="adjoining_resource_group">If <paramref name="ranking"
        /// /> is <see
        /// cref="CreateResourceGroupRequest.Ranking.BEFORE">BEFORE</see> or
        /// <see cref="CreateResourceGroupRequest.Ranking.AFTER">AFTER</see>,
        /// this field indicates the resource group before or after which the
        /// current group will be placed; otherwise, leave blank. The default
        /// value is ''.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.Options.MAX_CPU_CONCURRENCY">MAX_CPU_CONCURRENCY</see>:
        ///         </term>
        ///         <description>Maximum number of simultaneous threads that
        ///         will be used to execute a request for this group. The
        ///         minimum allowed value is '4'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.Options.MAX_DATA">MAX_DATA</see>:
        ///         </term>
        ///         <description>Maximum amount of cumulative ram usage
        ///         regardless of tier status for this group. The minimum
        ///         allowed value is '-1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.Options.MAX_SCHEDULING_PRIORITY">MAX_SCHEDULING_PRIORITY</see>:
        ///         </term>
        ///         <description>Maximum priority of a scheduled task for this
        ///         group. The minimum allowed value is '1'. The maximum
        ///         allowed value is '100'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateResourceGroupRequest.Options.MAX_TIER_PRIORITY">MAX_TIER_PRIORITY</see>:
        ///         </term>
        ///         <description>Maximum priority of a tiered object for this
        ///         group. The minimum allowed value is '1'. The maximum
        ///         allowed value is '10'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateResourceGroupResponse createResourceGroup( string name,
                                                                IDictionary<string, IDictionary<string, string>> tier_attributes,
                                                                string ranking,
                                                                string adjoining_resource_group = "",
                                                                IDictionary<string, string> options = null )
        {
            return createResourceGroup( new CreateResourceGroupRequest( name,
                                                                        tier_attributes,
                                                                        ranking,
                                                                        adjoining_resource_group,
                                                                        options ) );
        }

        /// <summary>Creates a new role.</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateRoleResponse createRole( CreateRoleRequest request_ )
        {
            CreateRoleResponse actualResponse_ = SubmitRequest<CreateRoleResponse>("/create/role", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new role.</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="name">Name of the role to be created. Must contain
        /// only lowercase letters, digits, and underscores, and cannot begin
        /// with a digit. Must not be the same name as an existing user or
        /// role.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateRoleRequest.Options.RESOURCE_GROUP">RESOURCE_GROUP</see>:
        ///         </term>
        ///         <description>Name of an existing resource group to
        ///         associate with this user</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateRoleResponse createRole( string name,
                                              IDictionary<string, string> options = null )
        {
            return createRole( new CreateRoleRequest( name, options ) );
        }

        /// <summary>Creates a SQL-style <a href="../../../concepts/schemas/"
        /// target="_top">schema</a>.</summary>
        /// <remarks><para>Schemas are containers for tables and views.
        /// Multiple tables and views can be defined with the same name in
        /// different schemas.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateSchemaResponse createSchema( CreateSchemaRequest request_ )
        {
            CreateSchemaResponse actualResponse_ = SubmitRequest<CreateSchemaResponse>("/create/schema", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a SQL-style <a href="../../../concepts/schemas/"
        /// target="_top">schema</a>.</summary>
        /// <remarks><para>Schemas are containers for tables and views.
        /// Multiple tables and views can be defined with the same name in
        /// different schemas.</para></remarks>
        ///
        /// <param name="schema_name">Name of the schema to be created.  Has
        /// the same naming restrictions as <a href="../../../concepts/tables/"
        /// target="_top">tables</a>.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateSchemaRequest.Options.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateSchemaRequest.Options.TRUE">TRUE</see>,
        ///         prevents an error from occurring if the schema already
        ///         exists.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateSchemaRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateSchemaRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateSchemaRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateSchemaResponse createSchema( string schema_name,
                                                  IDictionary<string, string> options = null )
        {
            return createSchema( new CreateSchemaRequest( schema_name, options ) );
        }

        /// @cond NO_DOCS
        public CreateStateTableResponse createStateTable( CreateStateTableRequest request_ )
        {
            CreateStateTableResponse actualResponse_ = SubmitRequest<CreateStateTableResponse>("/create/statetable", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public CreateStateTableResponse createStateTable( string table_name,
                                                          string input_table_name,
                                                          string init_table_name,
                                                          IDictionary<string, string> options = null )
        {
            return createStateTable( new CreateStateTableRequest( table_name,
                                                                  input_table_name,
                                                                  init_table_name, options ) );
        }
        /// @endcond

        /// <summary>Creates a new table.</summary>
        /// <remarks><para>If a new table is being created, the type of the
        /// table is given by <see
        /// cref="CreateTableRequest.type_id">type_id</see>, which must be the
        /// ID of a currently registered type (i.e. one created via <see
        /// cref="createType(CreateTypeRequest)">createType</see>).</para>
        /// <para>A table may optionally be designated to use a <a
        /// href="../../../concepts/tables/#replication"
        /// target="_top">replicated</a> distribution scheme, or be assigned:
        /// <a href="../../../concepts/tables/#foreign-keys"
        /// target="_top">foreign keys</a> to other tables, a <a
        /// href="../../../concepts/tables/#partitioning"
        /// target="_top">partitioning</a> scheme, and/or a <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a>.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTableResponse createTable( CreateTableRequest request_ )
        {
            CreateTableResponse actualResponse_ = SubmitRequest<CreateTableResponse>("/create/table", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new table.</summary>
        /// <remarks><para>If a new table is being created, the type of the
        /// table is given by <paramref name="type_id" />, which must be the ID
        /// of a currently registered type (i.e. one created via <see
        /// cref="createType(string,string,IDictionary{string,IList{string}},IDictionary{string,string})">createType</see>).</para>
        /// <para>A table may optionally be designated to use a <a
        /// href="../../../concepts/tables/#replication"
        /// target="_top">replicated</a> distribution scheme, or be assigned:
        /// <a href="../../../concepts/tables/#foreign-keys"
        /// target="_top">foreign keys</a> to other tables, a <a
        /// href="../../../concepts/tables/#partitioning"
        /// target="_top">partitioning</a> scheme, and/or a <a
        /// href="../../../rm/concepts/#tier-strategies" target="_top">tier
        /// strategy</a>.</para></remarks>
        ///
        /// <param name="table_name">Name of the table to be created, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>. Error for requests with
        /// existing table of the same name and type ID may be suppressed by
        /// using the <see
        /// cref="CreateTableRequest.Options.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>
        /// option.</param>
        /// <param name="type_id">ID of a currently registered type. All
        /// objects added to the newly created table will be of this type.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateTableRequest.Options.TRUE">TRUE</see>, prevents
        ///         an error from occurring if the table already exists and is
        ///         of the given type.  If a table with the same ID but a
        ///         different type exists, it is still an error.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateTableRequest.Options.TRUE">TRUE</see>, a unique
        ///         temporary table name will be generated in the sys_temp
        ///         schema and used in place of <paramref name="table_name" />.
        ///         If <see
        ///         cref="CreateTableRequest.Options.IS_RESULT_TABLE">IS_RESULT_TABLE</see>
        ///         is <see cref="CreateTableRequest.Options.TRUE">TRUE</see>,
        ///         then this is always allowed even if the caller does not
        ///         have permission to create tables. The generated name is
        ///         returned in <see
        ///         cref="CreateTableResponse.Info.QUALIFIED_TABLE_NAME">QUALIFIED_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema as part of <paramref name="table_name" /> and use
        ///         <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema
        ///         which is to contain the newly created table. If the schema
        ///         is non-existent, it will be automatically created.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.IS_COLLECTION">IS_COLLECTION</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create a schema instead]  Indicates whether to create a
        ///         schema instead of a table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.DISALLOW_HOMOGENEOUS_TABLES">DISALLOW_HOMOGENEOUS_TABLES</see>:
        ///         </term>
        ///         <description>No longer supported; value will be ignored.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:
        ///         </term>
        ///         <description>Affects the <a
        ///         href="../../../concepts/tables/#distribution"
        ///         target="_top">distribution scheme</a> for the table's data.
        ///         If <see cref="CreateTableRequest.Options.TRUE">TRUE</see>
        ///         and the given type has no explicit <a
        ///         href="../../../concepts/tables/#shard-key"
        ///         target="_top">shard key</a> defined, the table will be <a
        ///         href="../../../concepts/tables/#replication"
        ///         target="_top">replicated</a>.  If <see
        ///         cref="CreateTableRequest.Options.FALSE">FALSE</see>, the
        ///         table will be <a href="../../../concepts/tables/#sharding"
        ///         target="_top">sharded</a> according to the shard key
        ///         specified in the given <paramref name="type_id" />, or <a
        ///         href="../../../concepts/tables/#random-sharding"
        ///         target="_top">randomly sharded</a>, if no shard key is
        ///         specified.  Note that a type containing a shard key cannot
        ///         be used to create a replicated table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.FOREIGN_KEYS">FOREIGN_KEYS</see>:
        ///         </term>
        ///         <description>Semicolon-separated list of <a
        ///         href="../../../concepts/tables/#foreign-keys"
        ///         target="_top">foreign keys</a>, of the format
        ///         '(source_column_name [, ...]) references
        ///         target_table_name(primary_key_column_name [, ...]) [as
        ///         foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:
        ///         </term>
        ///         <description>Foreign shard key of the format 'source_column
        ///         references shard_by_column from
        ///         target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.PARTITION_TYPE">PARTITION_TYPE</see>:
        ///         </term>
        ///         <description><a
        ///         href="../../../concepts/tables/#partitioning"
        ///         target="_top">Partitioning</a> scheme to use.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.RANGE">RANGE</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-range"
        ///                 target="_top">range partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.INTERVAL">INTERVAL</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-interval"
        ///                 target="_top">interval partitioning</a>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.LIST">LIST</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-list"
        ///                 target="_top">list partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.HASH">HASH</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-hash"
        ///                 target="_top">hash partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.SERIES">SERIES</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-series"
        ///                 target="_top">series partitioning</a>.
        ///                 </description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.PARTITION_KEYS">PARTITION_KEYS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition keys, which
        ///         are the columns or column expressions by which records will
        ///         be assigned to partitions defined by <see
        ///         cref="CreateTableRequest.Options.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition definitions,
        ///         whose format depends on the choice of <see
        ///         cref="CreateTableRequest.Options.PARTITION_TYPE">PARTITION_TYPE</see>.
        ///         See <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-interval"
        ///         target="_top">interval partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-hash"
        ///         target="_top">hash partitioning</a>, or <a
        ///         href="../../../concepts/tables/#partitioning-by-series"
        ///         target="_top">series partitioning</a> for example formats.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateTableRequest.Options.TRUE">TRUE</see>, a new
        ///         partition will be created for values which don't fall into
        ///         an existing partition.  Currently only supported for <a
        ///         href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitions</a>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="CreateTableRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for this table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:
        ///         </term>
        ///         <description>Indicates whether the table is a <a
        ///         href="../../../concepts/tables_memory_only/"
        ///         target="_top">memory-only table</a>. A result table cannot
        ///         contain columns with store_only or text_search <a
        ///         href="../../../concepts/types/#data-handling"
        ///         target="_top">data-handling</a> or that are <a
        ///         href="../../../concepts/types/#primitive-types"
        ///         target="_top">non-charN strings</a>, and it will not be
        ///         retained if the server is restarted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableRequest.Options.IS_VIRTUAL_UNION">IS_VIRTUAL_UNION</see>:
        ///         </term>
        ///         <description>&lt;DEVELOPER&gt;</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTableResponse createTable( string table_name,
                                                string type_id,
                                                IDictionary<string, string> options = null )
        {
            return createTable( new CreateTableRequest( table_name, type_id, options ) );
        }

        /// <summary>Creates a new <a href="../../../concepts/external_tables/"
        /// target="_top">external table</a>, which is a local database object
        /// whose source data is located externally to the database.</summary>
        /// <remarks><para> The source data can be located either in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>; on the cluster,
        /// accessible to the database; or remotely, accessible via a
        /// pre-defined external <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>.</para>
        /// <para>The external table can have its structure defined explicitly,
        /// via <see
        /// cref="CreateTableExternalRequest.create_table_options">create_table_options</see>,
        /// which contains many of the options from <see
        /// cref="createTable(CreateTableRequest)">createTable</see>; or
        /// defined implicitly, inferred from the source data.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTableExternalResponse createTableExternal( CreateTableExternalRequest request_ )
        {
            CreateTableExternalResponse actualResponse_ = SubmitRequest<CreateTableExternalResponse>("/create/table/external", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new <a href="../../../concepts/external_tables/"
        /// target="_top">external table</a>, which is a local database object
        /// whose source data is located externally to the database.</summary>
        /// <remarks><para> The source data can be located either in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>; on the cluster,
        /// accessible to the database; or remotely, accessible via a
        /// pre-defined external <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>.</para>
        /// <para>The external table can have its structure defined explicitly,
        /// via <paramref name="create_table_options" />, which contains many
        /// of the options from <see
        /// cref="createTable(string,string,IDictionary{string,string})">createTable</see>;
        /// or defined implicitly, inferred from the source data.</para>
        /// </remarks>
        ///
        /// <param name="table_name">Name of the table to be created, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="filepaths">A list of file paths from which data will
        /// be sourced;
        /// For paths in <a href="../../../tools/kifs/" target="_top">KiFS</a>,
        /// use the uri prefix of kifs:// followed by the path to a file or
        /// directory. File matching by prefix is supported, e.g.
        /// kifs://dir/file would match dir/file_1 and dir/file_2. When prefix
        /// matching is used, the path must start with a full, valid KiFS
        /// directory name.
        /// If an external data source is specified in <see
        /// cref="CreateTableExternalRequest.Options.DATASOURCE_NAME">DATASOURCE_NAME</see>,
        /// these file paths must resolve to accessible files at that data
        /// source location. Prefix matching is supported. If the data source
        /// is hdfs, prefixes must be aligned with directories, i.e. partial
        /// file names will not match.
        /// If no data source is specified, the files are assumed to be local
        /// to the database and must all be accessible to the gpudb user,
        /// residing on the path (or relative to the path) specified by the
        /// external files directory in the Kinetica <a
        /// href="../../../config/#config-main-external-files"
        /// target="_top">configuration file</a>. Wildcards (*) can be used to
        /// specify a group of files.  Prefix matching is supported, the
        /// prefixes must be aligned with directories.
        /// If the first path ends in .tsv, the text delimiter will be
        /// defaulted to a tab character. If the first path ends in .psv, the
        /// text delimiter will be defaulted to a pipe character (|).</param>
        /// <param name="modify_columns">Not implemented yet. The default value
        /// is an empty Dictionary.</param>
        /// <param name="create_table_options">Options from <see
        /// cref="createTable(string,string,IDictionary{string,string})">createTable</see>,
        /// allowing the structure of the table to be defined independently of
        /// the data source.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:
        ///         </term>
        ///         <description>ID of a currently registered <a
        ///         href="../../../concepts/types/" target="_top">type</a>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.TRUE">TRUE</see>,
        ///         prevents an error from occurring if the table already
        ///         exists and is of the given type.  If a table with the same
        ///         name but a different type exists, it is still an error.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:
        ///         </term>
        ///         <description>Affects the <a
        ///         href="../../../concepts/tables/#distribution"
        ///         target="_top">distribution scheme</a> for the table's data.
        ///         If <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.TRUE">TRUE</see>
        ///         and the given table has no explicit <a
        ///         href="../../../concepts/tables/#shard-key"
        ///         target="_top">shard key</a> defined, the table will be <a
        ///         href="../../../concepts/tables/#replication"
        ///         target="_top">replicated</a>.  If <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>,
        ///         the table will be <a
        ///         href="../../../concepts/tables/#sharding"
        ///         target="_top">sharded</a> according to the shard key
        ///         specified in the given <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>,
        ///         or <a href="../../../concepts/tables/#random-sharding"
        ///         target="_top">randomly sharded</a>, if no shard key is
        ///         specified. Note that a type containing a shard key cannot
        ///         be used to create a replicated table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:
        ///         </term>
        ///         <description>Semicolon-separated list of <a
        ///         href="../../../concepts/tables/#foreign-keys"
        ///         target="_top">foreign keys</a>, of the format
        ///         '(source_column_name [, ...]) references
        ///         target_table_name(primary_key_column_name [, ...]) [as
        ///         foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:
        ///         </term>
        ///         <description>Foreign shard key of the format 'source_column
        ///         references shard_by_column from
        ///         target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:
        ///         </term>
        ///         <description><a
        ///         href="../../../concepts/tables/#partitioning"
        ///         target="_top">Partitioning</a> scheme to use.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.RANGE">RANGE</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-range"
        ///                 target="_top">range partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-interval"
        ///                 target="_top">interval partitioning</a>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.LIST">LIST</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-list"
        ///                 target="_top">list partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.HASH">HASH</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-hash"
        ///                 target="_top">hash partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.SERIES">SERIES</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-series"
        ///                 target="_top">series partitioning</a>.
        ///                 </description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition keys, which
        ///         are the columns or column expressions by which records will
        ///         be assigned to partitions defined by <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition definitions,
        ///         whose format depends on the choice of <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>.
        ///         See <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-interval"
        ///         target="_top">interval partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-hash"
        ///         target="_top">hash partitioning</a>, or <a
        ///         href="../../../concepts/tables/#partitioning-by-series"
        ///         target="_top">series partitioning</a> for example formats.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.TRUE">TRUE</see>,
        ///         a new partition will be created for values which don't fall
        ///         into an existing partition.  Currently, only supported for
        ///         <a href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitions</a>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for this table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:
        ///         </term>
        ///         <description>Indicates whether the table is a <a
        ///         href="../../../concepts/tables_memory_only/"
        ///         target="_top">memory-only table</a>. A result table cannot
        ///         contain columns with text_search <a
        ///         href="../../../concepts/types/#data-handling"
        ///         target="_top">data-handling</a>, and it will not be
        ///         retained if the server is restarted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.BAD_RECORD_TABLE_NAME">BAD_RECORD_TABLE_NAME</see>:
        ///         </term>
        ///         <description>Name of a table to which records that were
        ///         rejected are written. The bad-record-table has the
        ///         following columns: line_number (long), line_rejected
        ///         (string), error_message (string).  When <see
        ///         cref="CreateTableExternalRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>
        ///         is <see
        ///         cref="CreateTableExternalRequest.Options.ABORT">ABORT</see>,
        ///         bad records table is not populated.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.BAD_RECORD_TABLE_LIMIT">BAD_RECORD_TABLE_LIMIT</see>:
        ///         </term>
        ///         <description>A positive integer indicating the maximum
        ///         number of records that can be written to the
        ///         bad-record-table. The default value is '10000'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.BAD_RECORD_TABLE_LIMIT_PER_INPUT">BAD_RECORD_TABLE_LIMIT_PER_INPUT</see>:
        ///         </term>
        ///         <description>For subscriptions, a positive integer
        ///         indicating the maximum number of records that can be
        ///         written to the bad-record-table per file/payload. Default
        ///         value will be <see
        ///         cref="CreateTableExternalRequest.Options.BAD_RECORD_TABLE_LIMIT">BAD_RECORD_TABLE_LIMIT</see>
        ///         and total size of the table per rank is limited to <see
        ///         cref="CreateTableExternalRequest.Options.BAD_RECORD_TABLE_LIMIT">BAD_RECORD_TABLE_LIMIT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Number of records to insert per batch when
        ///         inserting data. The default value is '50000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:
        ///         </term>
        ///         <description>For each target column specified, applies the
        ///         column-property-bound format to the source data loaded into
        ///         that column.  Each column format will contain a mapping of
        ///         one or more of its column properties to an appropriate
        ///         format for each property.  Currently supported column
        ///         properties include date, time, & datetime. The parameter
        ///         value must be formatted as a JSON string of maps of column
        ///         names to maps of column properties to their corresponding
        ///         column formats, e.g., '{ "order_date" : { "date" :
        ///         "%Y.%m.%d" }, "order_time" : { "time" : "%H:%M:%S" } }'.
        ///         See <see
        ///         cref="CreateTableExternalRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>
        ///         for valid format syntax.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:
        ///         </term>
        ///         <description>Specifies a comma-delimited list of columns
        ///         from the source data to load.  If more than one file is
        ///         being loaded, this list applies to all files.
        ///         Column numbers can be specified discretely or as a range.
        ///         For example, a value of '5,7,1..3' will insert values from
        ///         the fifth column in the source data into the first column
        ///         in the target table, from the seventh column in the source
        ///         data into the second column in the target table, and from
        ///         the first through third columns in the source data into the
        ///         third through fifth columns in the target table.
        ///         If the source data contains a header, column names matching
        ///         the file header names may be provided instead of column
        ///         numbers.  If the target table doesn't exist, the table will
        ///         be created with the columns in this order.  If the target
        ///         table does exist with columns in a different order than the
        ///         source data, this list can be used to match the order of
        ///         the target table.  For example, a value of 'C, B, A' will
        ///         create a three column table with column C, followed by
        ///         column B, followed by column A; or will insert those fields
        ///         in that order into a table created with columns in that
        ///         order.  If the target table exists, the column names must
        ///         match the source data field names for a name-mapping to be
        ///         successful.
        ///         Mutually exclusive with <see
        ///         cref="CreateTableExternalRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>:
        ///         </term>
        ///         <description>Specifies a comma-delimited list of columns
        ///         from the source data to skip.  Mutually exclusive with <see
        ///         cref="CreateTableExternalRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:
        ///         </term>
        ///         <description>Source data compression type.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>No compression.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.AUTO">AUTO</see>:
        ///                 </term>
        ///                 <description>Auto detect compression type
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.GZIP">GZIP</see>:
        ///                 </term>
        ///                 <description>gzip file compression.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.BZIP2">BZIP2</see>:
        ///                 </term>
        ///                 <description>bzip2 file compression.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.AUTO">AUTO</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.DATASOURCE_NAME">DATASOURCE_NAME</see>:
        ///         </term>
        ///         <description>Name of an existing external data source from
        ///         which data file(s) specified in <paramref name="filepaths"
        ///         /> will be loaded</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:
        ///         </term>
        ///         <description>Specifies the default format to be applied to
        ///         source data loaded into columns with the corresponding
        ///         column property.  Currently supported column properties
        ///         include date, time, & datetime.  This default
        ///         column-property-bound format can be overridden by
        ///         specifying a column property & format for a given target
        ///         column in <see
        ///         cref="CreateTableExternalRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>.
        ///         For each specified annotation, the format will apply to all
        ///         columns with that annotation unless a custom <see
        ///         cref="CreateTableExternalRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>
        ///         for that annotation is specified.
        ///         The parameter value must be formatted as a JSON string that
        ///         is a map of column properties to their respective column
        ///         formats, e.g., '{ "date" : "%Y.%m.%d", "time" : "%H:%M:%S"
        ///         }'.  Column formats are specified as a string of control
        ///         characters and plain text. The supported control characters
        ///         are 'Y', 'm', 'd', 'H', 'M', 'S', and 's', which follow the
        ///         Linux 'strptime()' specification, as well as 's', which
        ///         specifies seconds and fractional seconds (though the
        ///         fractional component will be truncated past milliseconds).
        ///         Formats for the 'date' annotation must include the 'Y',
        ///         'm', and 'd' control characters. Formats for the 'time'
        ///         annotation must include the 'H', 'M', and either 'S' or 's'
        ///         (but not both) control characters. Formats for the
        ///         'datetime' annotation meet both the 'date' and 'time'
        ///         control character requirements. For example, '{"datetime" :
        ///         "%m/%d/%Y %H:%M:%S" }' would be used to interpret text as
        ///         "05/04/2000 12:12:11"</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:
        ///         </term>
        ///         <description>Specifies how errors should be handled upon
        ///         insertion.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.PERMISSIVE">PERMISSIVE</see>:
        ///                 </term>
        ///                 <description>Records with missing columns are
        ///                 populated with nulls if possible; otherwise, the
        ///                 malformed records are skipped.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:
        ///                 </term>
        ///                 <description>Malformed records are skipped.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.ABORT">ABORT</see>:
        ///                 </term>
        ///                 <description>Stops current insertion and aborts
        ///                 entire operation when an error is encountered.
        ///                 Primary key collisions are considered abortable
        ///                 errors in this mode.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.ABORT">ABORT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.EXTERNAL_TABLE_TYPE">EXTERNAL_TABLE_TYPE</see>:
        ///         </term>
        ///         <description>Specifies whether the external table holds a
        ///         local copy of the external data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.MATERIALIZED">MATERIALIZED</see>:
        ///                 </term>
        ///                 <description>Loads a copy of the external data into
        ///                 the database, refreshed on demand</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.LOGICAL">LOGICAL</see>:
        ///                 </term>
        ///                 <description>External data will not be loaded into
        ///                 the database; the data will be retrieved from the
        ///                 source upon servicing each query against the
        ///                 external table</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.MATERIALIZED">MATERIALIZED</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.FILE_TYPE">FILE_TYPE</see>:
        ///         </term>
        ///         <description>Specifies the type of the file(s) whose
        ///         records will be inserted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.AVRO">AVRO</see>:
        ///                 </term>
        ///                 <description>Avro file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>:
        ///                 </term>
        ///                 <description>Delimited text file format; e.g., CSV,
        ///                 TSV, PSV, etc.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.GDB">GDB</see>:
        ///                 </term>
        ///                 <description>Esri/GDB file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.JSON">JSON</see>:
        ///                 </term>
        ///                 <description>Json file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.PARQUET">PARQUET</see>:
        ///                 </term>
        ///                 <description>Apache Parquet file format
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.SHAPEFILE">SHAPEFILE</see>:
        ///                 </term>
        ///                 <description>ShapeFile file format</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.FLATTEN_COLUMNS">FLATTEN_COLUMNS</see>:
        ///         </term>
        ///         <description>Specifies how to handle nested columns.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Break up nested columns to multiple
        ///                 columns</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat nested columns as json columns
        ///                 instead of flattening</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.GDAL_CONFIGURATION_OPTIONS">GDAL_CONFIGURATION_OPTIONS</see>:
        ///         </term>
        ///         <description>Comma separated list of gdal conf options, for
        ///         the specific requets: key=value</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision
        ///         error-suppression policy for inserting into a table with a
        ///         <a href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>, only used when not in upsert
        ///         mode (upsert mode is disabled when <see
        ///         cref="CreateTableExternalRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>).
        ///         If set to <see
        ///         cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>,
        ///         any record being inserted that is rejected for having
        ///         primary key values that match those of an existing table
        ///         record will be ignored with no error generated.  If <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>,
        ///         the rejection of any record for having primary key values
        ///         matching an existing record will result in an error being
        ///         reported, as determined by <see
        ///         cref="CreateTableExternalRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///         If the specified table does not have a primary key or if
        ///         upsert mode is in effect (<see
        ///         cref="CreateTableExternalRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>),
        ///         then this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Ignore new records whose primary key
        ///                 values collide with those of existing records
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat as errors any new records whose
        ///                 primary key values collide with those of existing
        ///                 records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.INGESTION_MODE">INGESTION_MODE</see>:
        ///         </term>
        ///         <description>Whether to do a full load, dry run, or perform
        ///         a type inference on the source data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FULL">FULL</see>:
        ///                 </term>
        ///                 <description>Run a type inference on the source
        ///                 data (if needed) and ingest</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///                 </term>
        ///                 <description>Does not load data, but walks through
        ///                 the source data and determines the number of valid
        ///                 records, taking into account the current mode of
        ///                 <see
        ///                 cref="CreateTableExternalRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TYPE_INFERENCE_ONLY">TYPE_INFERENCE_ONLY</see>:
        ///                 </term>
        ///                 <description>Infer the type of the source data and
        ///                 return, without ingesting any data.  The inferred
        ///                 type is returned in the response.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.FULL">FULL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.JDBC_FETCH_SIZE">JDBC_FETCH_SIZE</see>:
        ///         </term>
        ///         <description>The JDBC fetch size, which determines how many
        ///         rows to fetch per round trip. The default value is '50000'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.KAFKA_CONSUMERS_PER_RANK">KAFKA_CONSUMERS_PER_RANK</see>:
        ///         </term>
        ///         <description>Number of Kafka consumer threads per rank
        ///         (valid range 1-6). The default value is '1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.KAFKA_GROUP_ID">KAFKA_GROUP_ID</see>:
        ///         </term>
        ///         <description>The group id to be used when consuming data
        ///         from a Kafka topic (valid only for Kafka datasource
        ///         subscriptions).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.KAFKA_OFFSET_RESET_POLICY">KAFKA_OFFSET_RESET_POLICY</see>:
        ///         </term>
        ///         <description>Policy to determine whether the Kafka data
        ///         consumption starts either at earliest offset or latest
        ///         offset.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.EARLIEST">EARLIEST</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.LATEST">LATEST</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.EARLIEST">EARLIEST</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.KAFKA_OPTIMISTIC_INGEST">KAFKA_OPTIMISTIC_INGEST</see>:
        ///         </term>
        ///         <description>Enable optimistic ingestion where Kafka topic
        ///         offsets and table data are committed independently to
        ///         achieve parallelism.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.KAFKA_SUBSCRIPTION_CANCEL_AFTER">KAFKA_SUBSCRIPTION_CANCEL_AFTER</see>:
        ///         </term>
        ///         <description>Sets the Kafka subscription lifespan (in
        ///         minutes). Expired subscription will be cancelled
        ///         automatically.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.KAFKA_TYPE_INFERENCE_FETCH_TIMEOUT">KAFKA_TYPE_INFERENCE_FETCH_TIMEOUT</see>:
        ///         </term>
        ///         <description>Maximum time to collect Kafka messages before
        ///         type inferencing on the set of them.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.LAYER">LAYER</see>:
        ///         </term>
        ///         <description>Geo files layer(s) name(s): comma separated.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.LOADING_MODE">LOADING_MODE</see>:
        ///         </term>
        ///         <description>Scheme for distributing the extraction and
        ///         loading of data from the source data file(s). This option
        ///         applies only when loading files that are local to the
        ///         database.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.HEAD">HEAD</see>:
        ///                 </term>
        ///                 <description>The head node loads all data. All
        ///                 files must be available to the head node.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:
        ///                 </term>
        ///                 <description>The head node coordinates loading data
        ///                 by worker processes across all nodes from shared
        ///                 files available to all workers.
        ///                 NOTE:
        ///                 Instead of existing on a shared source, the files
        ///                 can be duplicated on a source local to each host to
        ///                 improve performance, though the files must appear
        ///                 as the same data set from the perspective of all
        ///                 hosts performing the load.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:
        ///                 </term>
        ///                 <description>A single worker process on each node
        ///                 loads all files that are available to it. This
        ///                 option works best when each worker loads files from
        ///                 its own file system, to maximize performance. In
        ///                 order to avoid data duplication, either each worker
        ///                 performing the load needs to have visibility to a
        ///                 set of files unique to it (no file is visible to
        ///                 more than one node) or the target table needs to
        ///                 have a primary key (which will allow the worker to
        ///                 automatically deduplicate data).
        ///                 NOTE:
        ///                 If the target table doesn't exist, the table
        ///                 structure will be determined by the head node. If
        ///                 the head node has no files local to it, it will be
        ///                 unable to determine the structure and the request
        ///                 will fail.
        ///                 If the head node is configured to have no worker
        ///                 processes, no data strictly accessible to the head
        ///                 node will be loaded.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.HEAD">HEAD</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.LOCAL_TIME_OFFSET">LOCAL_TIME_OFFSET</see>:
        ///         </term>
        ///         <description>Apply an offset to Avro local timestamp
        ///         columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.MAX_RECORDS_TO_LOAD">MAX_RECORDS_TO_LOAD</see>:
        ///         </term>
        ///         <description>Limit the number of records to load in this
        ///         request: if this number is larger than <see
        ///         cref="CreateTableExternalRequest.Options.BATCH_SIZE">BATCH_SIZE</see>,
        ///         then the number of records loaded will be limited to the
        ///         next whole number of <see
        ///         cref="CreateTableExternalRequest.Options.BATCH_SIZE">BATCH_SIZE</see>
        ///         (per working thread).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.NUM_TASKS_PER_RANK">NUM_TASKS_PER_RANK</see>:
        ///         </term>
        ///         <description>Number of tasks for reading file per rank.
        ///         Default will be system configuration parameter,
        ///         external_file_reader_num_tasks.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.POLL_INTERVAL">POLL_INTERVAL</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>,
        ///         the number of seconds between attempts to load external
        ///         files into the table.  If zero, polling will be continuous
        ///         as long as data is found.  If no data is found, the
        ///         interval will steadily increase to a maximum of 60 seconds.
        ///         The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.PRIMARY_KEYS">PRIMARY_KEYS</see>:
        ///         </term>
        ///         <description>Comma separated list of column names to set as
        ///         primary keys, when not specified in the type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>:
        ///         </term>
        ///         <description>Method by which the table can be refreshed
        ///         from its source data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.MANUAL">MANUAL</see>:
        ///                 </term>
        ///                 <description>Refresh only occurs when manually
        ///                 requested by invoking the refresh action of <see
        ///                 cref="alterTable(string,string,string,IDictionary{string,string})">alterTable</see>
        ///                 on this table.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.ON_START">ON_START</see>:
        ///                 </term>
        ///                 <description>Refresh table on database startup and
        ///                 when manually requested by invoking the refresh
        ///                 action of <see
        ///                 cref="alterTable(string,string,string,IDictionary{string,string})">alterTable</see>
        ///                 on this table.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.MANUAL">MANUAL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.SCHEMA_REGISTRY_SCHEMA_NAME">SCHEMA_REGISTRY_SCHEMA_NAME</see>:
        ///         </term>
        ///         <description>Name of the Avro schema in the schema registry
        ///         to use when reading Avro records.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.SHARD_KEYS">SHARD_KEYS</see>:
        ///         </term>
        ///         <description>Comma separated list of column names to set as
        ///         shard keys, when not specified in the type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.SKIP_LINES">SKIP_LINES</see>:
        ///         </term>
        ///         <description>Skip number of lines from begining of file.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.SUBSCRIBE">SUBSCRIBE</see>:
        ///         </term>
        ///         <description>Continuously poll the data source to check for
        ///         new data and load it into the table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TABLE_INSERT_MODE">TABLE_INSERT_MODE</see>:
        ///         </term>
        ///         <description>Insertion scheme to use when inserting records
        ///         from multiple shapefiles.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.SINGLE">SINGLE</see>:
        ///                 </term>
        ///                 <description>Insert all records into a single
        ///                 table.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TABLE_PER_FILE">TABLE_PER_FILE</see>:
        ///                 </term>
        ///                 <description>Insert records from each file into a
        ///                 new table corresponding to that file.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.SINGLE">SINGLE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:
        ///         </term>
        ///         <description>Specifies the character string that should be
        ///         interpreted as a comment line prefix in the source data.
        ///         All lines in the data starting with the provided string are
        ///         ignored.
        ///         For <see
        ///         cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="CreateTableExternalRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:
        ///         </term>
        ///         <description>Specifies the character delimiting field
        ///         values in the source data and field names in the header (if
        ///         present).
        ///         For <see
        ///         cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="CreateTableExternalRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:
        ///         </term>
        ///         <description>Specifies the character that is used to escape
        ///         other characters in the source data.
        ///         An 'a', 'b', 'f', 'n', 'r', 't', or 'v' preceded by an
        ///         escape character will be interpreted as the ASCII bell,
        ///         backspace, form feed, line feed, carriage return,
        ///         horizontal tab, & vertical tab, respectively.  For example,
        ///         the escape character followed by an 'n' will be interpreted
        ///         as a newline within a field value.
        ///         The escape character can also be used to escape the quoting
        ///         character, and will be treated as an escape character
        ///         whether it is within a quoted field value or not.
        ///         For <see
        ///         cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="CreateTableExternalRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:
        ///         </term>
        ///         <description>Indicates whether the source data contains a
        ///         header row.
        ///         For <see
        ///         cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="CreateTableExternalRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:
        ///         </term>
        ///         <description>Specifies the delimiter for <a
        ///         href="../../../concepts/types/#column-properties"
        ///         target="_top">column properties</a> in the header row (if
        ///         present).  Cannot be set to same value as <see
        ///         cref="CreateTableExternalRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>.
        ///         For <see
        ///         cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="CreateTableExternalRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:
        ///         </term>
        ///         <description>Specifies the character string that should be
        ///         interpreted as a null value in the source data.
        ///         For <see
        ///         cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="CreateTableExternalRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '\\N'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:
        ///         </term>
        ///         <description>Specifies the character that should be
        ///         interpreted as a field value quoting character in the
        ///         source data.  The character must appear at beginning and
        ///         end of field value to take effect.  Delimiters within
        ///         quoted fields are treated as literals and not delimiters.
        ///         Within a quoted field, two consecutive quote characters
        ///         will be interpreted as a single literal quote character,
        ///         effectively escaping it.  To not have a quote character,
        ///         specify an empty string.
        ///         For <see
        ///         cref="CreateTableExternalRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="CreateTableExternalRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_SEARCH_COLUMNS">TEXT_SEARCH_COLUMNS</see>:
        ///         </term>
        ///         <description>Add 'text_search' property to internally
        ///         inferenced string columns. Comma seperated list of column
        ///         names or '*' for all columns. To add 'text_search' property
        ///         only to string columns greater than or equal to a minimum
        ///         size, also set the <see
        ///         cref="CreateTableExternalRequest.Options.TEXT_SEARCH_MIN_COLUMN_LENGTH">TEXT_SEARCH_MIN_COLUMN_LENGTH</see>
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TEXT_SEARCH_MIN_COLUMN_LENGTH">TEXT_SEARCH_MIN_COLUMN_LENGTH</see>:
        ///         </term>
        ///         <description>Set the minimum column size for strings to
        ///         apply the 'text_search' property to. Used only when <see
        ///         cref="CreateTableExternalRequest.Options.TEXT_SEARCH_COLUMNS">TEXT_SEARCH_COLUMNS</see>
        ///         has a value.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>,
        ///         truncate string values that are longer than the column's
        ///         type size.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>,
        ///         truncates the table specified by <paramref
        ///         name="table_name" /> prior to loading the file(s).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.TYPE_INFERENCE_MODE">TYPE_INFERENCE_MODE</see>:
        ///         </term>
        ///         <description>Optimize type inferencing for either speed or
        ///         accuracy.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.ACCURACY">ACCURACY</see>:
        ///                 </term>
        ///                 <description>Scans data to get exactly-typed &
        ///                 sized columns for all data scanned.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.SPEED">SPEED</see>:
        ///                 </term>
        ///                 <description>Scans data and picks the widest
        ///                 possible column types so that 'all' values will fit
        ///                 with minimum data scanned</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.SPEED">SPEED</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.REMOTE_QUERY">REMOTE_QUERY</see>:
        ///         </term>
        ///         <description>Remote SQL query from which data will be
        ///         sourced</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.REMOTE_QUERY_FILTER_COLUMN">REMOTE_QUERY_FILTER_COLUMN</see>:
        ///         </term>
        ///         <description>Name of column to be used for splitting <see
        ///         cref="CreateTableExternalRequest.Options.REMOTE_QUERY">REMOTE_QUERY</see>
        ///         into multiple sub-queries using the data distribution of
        ///         given column</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.REMOTE_QUERY_INCREASING_COLUMN">REMOTE_QUERY_INCREASING_COLUMN</see>:
        ///         </term>
        ///         <description>Column on subscribed remote query result that
        ///         will increase for new records (e.g., TIMESTAMP).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.REMOTE_QUERY_PARTITION_COLUMN">REMOTE_QUERY_PARTITION_COLUMN</see>:
        ///         </term>
        ///         <description>Alias name for <see
        ///         cref="CreateTableExternalRequest.Options.REMOTE_QUERY_FILTER_COLUMN">REMOTE_QUERY_FILTER_COLUMN</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableExternalRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision policy for
        ///         inserting into a table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>. If set to <see
        ///         cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will be replaced by
        ///         that new record (the new data will be 'upserted'). If set
        ///         to <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will remain
        ///         unchanged, while the new record will be rejected and the
        ///         error handled as determined by <see
        ///         cref="CreateTableExternalRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>
        ///         & <see
        ///         cref="CreateTableExternalRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///         If the specified table does not have a primary key, then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Upsert new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Reject new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableExternalRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTableExternalResponse createTableExternal( string table_name,
                                                                IList<string> filepaths,
                                                                IDictionary<string, IDictionary<string, string>> modify_columns = null,
                                                                IDictionary<string, string> create_table_options = null,
                                                                IDictionary<string, string> options = null )
        {
            return createTableExternal( new CreateTableExternalRequest( table_name,
                                                                        filepaths,
                                                                        modify_columns,
                                                                        create_table_options,
                                                                        options ) );
        }

        /// <summary>Creates a monitor that watches for a single table
        /// modification event type (insert, update, or delete) on a particular
        /// table (identified by <see
        /// cref="CreateTableMonitorRequest.table_name">table_name</see>) and
        /// forwards event notifications to subscribers via ZMQ.</summary>
        /// <remarks><para>After this call completes, subscribe to the returned
        /// <see cref="CreateTableMonitorResponse.topic_id">topic_id</see> on
        /// the ZMQ table monitor port (default 9002). Each time an operation
        /// of the given type on the table completes, a multipart message is
        /// published for that topic; the first part contains only the topic
        /// ID, and each subsequent part contains one binary-encoded Avro
        /// object that corresponds to the event and can be decoded using <see
        /// cref="CreateTableMonitorResponse.type_schema">type_schema</see>.
        /// The monitor will continue to run (regardless of whether or not
        /// there are any subscribers) until deactivated with <see
        /// cref="clearTableMonitor(ClearTableMonitorRequest)">clearTableMonitor</see>.</para>
        /// <para>For more information on table monitors, see <a
        /// href="../../../concepts/table_monitors/" target="_top">Table
        /// Monitors</a>.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTableMonitorResponse createTableMonitor( CreateTableMonitorRequest request_ )
        {
            CreateTableMonitorResponse actualResponse_ = SubmitRequest<CreateTableMonitorResponse>("/create/tablemonitor", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a monitor that watches for a single table
        /// modification event type (insert, update, or delete) on a particular
        /// table (identified by <paramref name="table_name" />) and forwards
        /// event notifications to subscribers via ZMQ.</summary>
        /// <remarks><para>After this call completes, subscribe to the returned
        /// <see cref="CreateTableMonitorResponse.topic_id">topic_id</see> on
        /// the ZMQ table monitor port (default 9002). Each time an operation
        /// of the given type on the table completes, a multipart message is
        /// published for that topic; the first part contains only the topic
        /// ID, and each subsequent part contains one binary-encoded Avro
        /// object that corresponds to the event and can be decoded using <see
        /// cref="CreateTableMonitorResponse.type_schema">type_schema</see>.
        /// The monitor will continue to run (regardless of whether or not
        /// there are any subscribers) until deactivated with <see
        /// cref="clearTableMonitor(string,IDictionary{string,string})">clearTableMonitor</see>.</para>
        /// <para>For more information on table monitors, see <a
        /// href="../../../concepts/table_monitors/" target="_top">Table
        /// Monitors</a>.</para></remarks>
        ///
        /// <param name="table_name">Name of the table to monitor, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.EVENT">EVENT</see>:
        ///         </term>
        ///         <description>Type of modification event on the target table
        ///         to be monitored by this table monitor.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>:
        ///                 </term>
        ///                 <description>Get notifications of new record
        ///                 insertions. The new row images are forwarded to the
        ///                 subscribers.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableMonitorRequest.Options.UPDATE">UPDATE</see>:
        ///                 </term>
        ///                 <description>Get notifications of update
        ///                 operations. The modified row count information is
        ///                 forwarded to the subscribers.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableMonitorRequest.Options.DELETE">DELETE</see>:
        ///                 </term>
        ///                 <description>Get notifications of delete
        ///                 operations. The deleted row count information is
        ///                 forwarded to the subscribers.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableMonitorRequest.Options.INSERT">INSERT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.MONITOR_ID">MONITOR_ID</see>:
        ///         </term>
        ///         <description>ID to use for this monitor instead of a
        ///         randomly generated one</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.DATASINK_NAME">DATASINK_NAME</see>:
        ///         </term>
        ///         <description>Name of an existing <a
        ///         href="../../../concepts/data_sinks/" target="_top">data
        ///         sink</a> to send change data notifications to</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.DESTINATION">DESTINATION</see>:
        ///         </term>
        ///         <description>Destination for the output data in format
        ///         'destination_type://path[:port]'. Supported destination
        ///         types are 'http', 'https' and 'kafka'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.KAFKA_TOPIC_NAME">KAFKA_TOPIC_NAME</see>:
        ///         </term>
        ///         <description>Name of the Kafka topic to publish to if <see
        ///         cref="CreateTableMonitorRequest.Options.DESTINATION">DESTINATION</see>
        ///         in <paramref name="options" /> is specified and is a Kafka
        ///         broker</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.INCREASING_COLUMN">INCREASING_COLUMN</see>:
        ///         </term>
        ///         <description>Column on subscribed table that will increase
        ///         for new records (e.g., TIMESTAMP).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Filter expression to limit records for
        ///         notification</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>:
        ///         </term>
        ///         <description>Method controlling when the table monitor
        ///         reports changes to the <paramref name="table_name" />.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableMonitorRequest.Options.ON_CHANGE">ON_CHANGE</see>:
        ///                 </term>
        ///                 <description>Report changes as they occur.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateTableMonitorRequest.Options.PERIODIC">PERIODIC</see>:
        ///                 </term>
        ///                 <description>Report changes periodically at rate
        ///                 specified by <see
        ///                 cref="CreateTableMonitorRequest.Options.REFRESH_PERIOD">REFRESH_PERIOD</see>.
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateTableMonitorRequest.Options.ON_CHANGE">ON_CHANGE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.REFRESH_PERIOD">REFRESH_PERIOD</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="CreateTableMonitorRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>
        ///         is <see
        ///         cref="CreateTableMonitorRequest.Options.PERIODIC">PERIODIC</see>,
        ///         specifies the period in seconds at which changes are
        ///         reported.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTableMonitorRequest.Options.REFRESH_START_TIME">REFRESH_START_TIME</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="CreateTableMonitorRequest.Options.REFRESH_METHOD">REFRESH_METHOD</see>
        ///         is <see
        ///         cref="CreateTableMonitorRequest.Options.PERIODIC">PERIODIC</see>,
        ///         specifies the first time at which changes are reported.
        ///         Value is a datetime string with format 'YYYY-MM-DD
        ///         HH:MM:SS'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTableMonitorResponse createTableMonitor( string table_name,
                                                              IDictionary<string, string> options = null )
        {
            return createTableMonitor( new CreateTableMonitorRequest( table_name, options ) );
        }

        /// <summary>Sets up an area trigger mechanism for two column_names for
        /// one or more tables.</summary>
        /// <remarks><para>(This function is essentially the two-dimensional
        /// version of <see
        /// cref="createTriggerByRange(CreateTriggerByRangeRequest)">createTriggerByRange</see>.)
        /// Once the trigger has been activated, any record added to the listed
        /// tables(s) via <see
        /// cref="insertRecords{T}(InsertRecordsRequest{T})">insertRecords</see>
        /// with the chosen columns' values falling within the specified region
        /// will trip the trigger. All such records will be queued at the
        /// trigger port (by default '9001' but able to be retrieved via <see
        /// cref="showSystemStatus(ShowSystemStatusRequest)">showSystemStatus</see>)
        /// for any listening client to collect. Active triggers can be
        /// cancelled by using the <see
        /// cref="clearTrigger(ClearTriggerRequest)">clearTrigger</see>
        /// endpoint or by clearing all relevant tables.</para>
        /// <para>The output returns the trigger handle as well as indicating
        /// success or failure of the trigger activation.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTriggerByAreaResponse createTriggerByArea( CreateTriggerByAreaRequest request_ )
        {
            CreateTriggerByAreaResponse actualResponse_ = SubmitRequest<CreateTriggerByAreaResponse>("/create/trigger/byarea", request_, false);

            return actualResponse_;
        }

        /// <summary>Sets up an area trigger mechanism for two column_names for
        /// one or more tables.</summary>
        /// <remarks><para>(This function is essentially the two-dimensional
        /// version of <see
        /// cref="createTriggerByRange(string,IList{string},string,double,double,IDictionary{string,string})">createTriggerByRange</see>.)
        /// Once the trigger has been activated, any record added to the listed
        /// tables(s) via <see
        /// cref="insertRecords{T}(string,IList{T},IDictionary{string,string})">insertRecords</see>
        /// with the chosen columns' values falling within the specified region
        /// will trip the trigger. All such records will be queued at the
        /// trigger port (by default '9001' but able to be retrieved via <see
        /// cref="showSystemStatus(IDictionary{string,string})">showSystemStatus</see>)
        /// for any listening client to collect. Active triggers can be
        /// cancelled by using the <see
        /// cref="clearTrigger(string,IDictionary{string,string})">clearTrigger</see>
        /// endpoint or by clearing all relevant tables.</para>
        /// <para>The output returns the trigger handle as well as indicating
        /// success or failure of the trigger activation.</para></remarks>
        ///
        /// <param name="request_id">User-created ID for the trigger. The ID
        /// can be alphanumeric, contain symbols, and must contain at least one
        /// character.</param>
        /// <param name="table_names">Names of the tables on which the trigger
        /// will be activated and maintained, each in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="x_column_name">Name of a numeric column on which the
        /// trigger is activated. Usually 'x' for geospatial data points.
        /// </param>
        /// <param name="x_vector">The respective coordinate values for the
        /// region on which the trigger is activated. This usually translates
        /// to the x-coordinates of a geospatial region.</param>
        /// <param name="y_column_name">Name of a second numeric column on
        /// which the trigger is activated. Usually 'y' for geospatial data
        /// points.</param>
        /// <param name="y_vector">The respective coordinate values for the
        /// region on which the trigger is activated. This usually translates
        /// to the y-coordinates of a geospatial region. Must be the same
        /// length as xvals.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTriggerByAreaResponse createTriggerByArea( string request_id,
                                                                IList<string> table_names,
                                                                string x_column_name,
                                                                IList<double> x_vector,
                                                                string y_column_name,
                                                                IList<double> y_vector,
                                                                IDictionary<string, string> options = null )
        {
            return createTriggerByArea( new CreateTriggerByAreaRequest( request_id,
                                                                        table_names,
                                                                        x_column_name,
                                                                        x_vector,
                                                                        y_column_name,
                                                                        y_vector, options ) );
        }

        /// <summary>Sets up a simple range trigger for a column_name for one
        /// or more tables.</summary>
        /// <remarks><para>Once the trigger has been activated, any record
        /// added to the listed tables(s) via <see
        /// cref="insertRecords{T}(InsertRecordsRequest{T})">insertRecords</see>
        /// with the chosen column_name's value falling within the specified
        /// range will trip the trigger. All such records will be queued at the
        /// trigger port (by default '9001' but able to be retrieved via <see
        /// cref="showSystemStatus(ShowSystemStatusRequest)">showSystemStatus</see>)
        /// for any listening client to collect. Active triggers can be
        /// cancelled by using the <see
        /// cref="clearTrigger(ClearTriggerRequest)">clearTrigger</see>
        /// endpoint or by clearing all relevant tables.</para>
        /// <para>The output returns the trigger handle as well as indicating
        /// success or failure of the trigger activation.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTriggerByRangeResponse createTriggerByRange( CreateTriggerByRangeRequest request_ )
        {
            CreateTriggerByRangeResponse actualResponse_ = SubmitRequest<CreateTriggerByRangeResponse>("/create/trigger/byrange", request_, false);

            return actualResponse_;
        }

        /// <summary>Sets up a simple range trigger for a column_name for one
        /// or more tables.</summary>
        /// <remarks><para>Once the trigger has been activated, any record
        /// added to the listed tables(s) via <see
        /// cref="insertRecords{T}(string,IList{T},IDictionary{string,string})">insertRecords</see>
        /// with the chosen column_name's value falling within the specified
        /// range will trip the trigger. All such records will be queued at the
        /// trigger port (by default '9001' but able to be retrieved via <see
        /// cref="showSystemStatus(IDictionary{string,string})">showSystemStatus</see>)
        /// for any listening client to collect. Active triggers can be
        /// cancelled by using the <see
        /// cref="clearTrigger(string,IDictionary{string,string})">clearTrigger</see>
        /// endpoint or by clearing all relevant tables.</para>
        /// <para>The output returns the trigger handle as well as indicating
        /// success or failure of the trigger activation.</para></remarks>
        ///
        /// <param name="request_id">User-created ID for the trigger. The ID
        /// can be alphanumeric, contain symbols, and must contain at least one
        /// character.</param>
        /// <param name="table_names">Tables on which the trigger will be
        /// active, each in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="column_name">Name of a numeric column_name on which
        /// the trigger is activated.</param>
        /// <param name="min">The lower bound (inclusive) for the trigger
        /// range.</param>
        /// <param name="max">The upper bound (inclusive) for the trigger
        /// range.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTriggerByRangeResponse createTriggerByRange( string request_id,
                                                                  IList<string> table_names,
                                                                  string column_name,
                                                                  double min,
                                                                  double max,
                                                                  IDictionary<string, string> options = null )
        {
            return createTriggerByRange( new CreateTriggerByRangeRequest( request_id,
                                                                          table_names,
                                                                          column_name,
                                                                          min, max,
                                                                          options ) );
        }

        /// <summary>Creates a new type describing the layout of a table.
        /// </summary>
        /// <remarks><para>The type definition is a JSON string describing the
        /// fields (i.e. columns) of the type. Each field consists of a name
        /// and a data type. Supported data types are: double, float, int,
        /// long, string, and bytes. In addition, one or more properties can be
        /// specified for each column which customize the memory usage and
        /// query availability of that column.  Note that some properties are
        /// mutually exclusive--i.e. they cannot be specified for any given
        /// column simultaneously.  One example of mutually exclusive
        /// properties are <see
        /// cref="CreateTypeRequest.Properties.DATA">DATA</see> and <see
        /// cref="CreateTypeRequest.Properties.STORE_ONLY">STORE_ONLY</see>.</para>
        /// <para>A single <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a> and/or single <a
        /// href="../../../concepts/tables/#shard-keys" target="_top">shard
        /// key</a> can be set across one or more columns. If a primary key is
        /// specified, then a uniqueness constraint is enforced, in that only a
        /// single object can exist with a given primary key column value (or
        /// set of values for the key columns, if using a composite primary
        /// key). When <see
        /// cref="insertRecords{T}(InsertRecordsRequest{T})">inserting</see>
        /// data into a table with a primary key, depending on the parameters
        /// in the request, incoming objects with primary key values that match
        /// existing objects will either overwrite (i.e. update) the existing
        /// object or will be skipped and not added into the set.</para>
        /// <para>Example of a type definition with some of the
        /// parameters:</para>
        /// <code>
        ///     {"type":"record",
        ///     "name":"point",
        ///     "fields":[{"name":"msg_id","type":"string"},
        ///             {"name":"x","type":"double"},
        ///             {"name":"y","type":"double"},
        ///             {"name":"TIMESTAMP","type":"double"},
        ///             {"name":"source","type":"string"},
        ///             {"name":"group_id","type":"string"},
        ///             {"name":"OBJECT_ID","type":"string"}]
        ///     }
        /// </code>
        /// <para>Properties:</para>
        /// <code>
        ///     {"group_id":["store_only"],
        ///     "msg_id":["store_only","text_search"]
        ///     }
        /// </code></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTypeResponse createType( CreateTypeRequest request_ )
        {
            CreateTypeResponse actualResponse_ = SubmitRequest<CreateTypeResponse>("/create/type", request_, false);

            SetDecoderIfMissing( actualResponse_.type_id,
                                 actualResponse_.label,
                                 actualResponse_.type_definition,
                                 actualResponse_.properties );
            return actualResponse_;
        }

        /// <summary>Creates a new type describing the layout of a table.
        /// </summary>
        /// <remarks><para>The type definition is a JSON string describing the
        /// fields (i.e. columns) of the type. Each field consists of a name
        /// and a data type. Supported data types are: double, float, int,
        /// long, string, and bytes. In addition, one or more properties can be
        /// specified for each column which customize the memory usage and
        /// query availability of that column.  Note that some properties are
        /// mutually exclusive--i.e. they cannot be specified for any given
        /// column simultaneously.  One example of mutually exclusive
        /// properties are <see
        /// cref="CreateTypeRequest.Properties.DATA">DATA</see> and <see
        /// cref="CreateTypeRequest.Properties.STORE_ONLY">STORE_ONLY</see>.</para>
        /// <para>A single <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a> and/or single <a
        /// href="../../../concepts/tables/#shard-keys" target="_top">shard
        /// key</a> can be set across one or more columns. If a primary key is
        /// specified, then a uniqueness constraint is enforced, in that only a
        /// single object can exist with a given primary key column value (or
        /// set of values for the key columns, if using a composite primary
        /// key). When <see
        /// cref="insertRecords{T}(string,IList{T},IDictionary{string,string})">inserting</see>
        /// data into a table with a primary key, depending on the parameters
        /// in the request, incoming objects with primary key values that match
        /// existing objects will either overwrite (i.e. update) the existing
        /// object or will be skipped and not added into the set.</para>
        /// <para>Example of a type definition with some of the
        /// parameters:</para>
        /// <code>
        ///     {"type":"record",
        ///     "name":"point",
        ///     "fields":[{"name":"msg_id","type":"string"},
        ///             {"name":"x","type":"double"},
        ///             {"name":"y","type":"double"},
        ///             {"name":"TIMESTAMP","type":"double"},
        ///             {"name":"source","type":"string"},
        ///             {"name":"group_id","type":"string"},
        ///             {"name":"OBJECT_ID","type":"string"}]
        ///     }
        /// </code>
        /// <para>Properties:</para>
        /// <code>
        ///     {"group_id":["store_only"],
        ///     "msg_id":["store_only","text_search"]
        ///     }
        /// </code></remarks>
        ///
        /// <param name="type_definition">a JSON string describing the columns
        /// of the type to be registered.</param>
        /// <param name="label">A user-defined description string which can be
        /// used to differentiate between tables and types with otherwise
        /// identical schemas.</param>
        /// <param name="properties">Each key-value pair specifies the
        /// properties to use for a given column where the key is the column
        /// name.  All keys used must be relevant column names for the given
        /// table.  Specifying any property overrides the default properties
        /// for that column (which is based on the column's data type).
        /// Valid values are:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.DATA">DATA</see>:</term>
        ///         <description>Default property for all numeric and string
        ///         type columns; makes the column available for GPU queries.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.TEXT_SEARCH">TEXT_SEARCH</see>:
        ///         </term>
        ///         <description>Valid only for select 'string' columns.
        ///         Enables full text search--see <a
        ///         href="../../../concepts/full_text_search/"
        ///         target="_top">Full Text Search</a> for details and
        ///         applicable string column types. Can be set independently of
        ///         <see cref="CreateTypeRequest.Properties.DATA">DATA</see>
        ///         and <see
        ///         cref="CreateTypeRequest.Properties.STORE_ONLY">STORE_ONLY</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.STORE_ONLY">STORE_ONLY</see>:
        ///         </term>
        ///         <description>Persist the column value but do not make it
        ///         available to queries (e.g. <see
        ///         cref="filter(string,string,string,IDictionary{string,string})">filter</see>)-i.e.
        ///         it is mutually exclusive to the <see
        ///         cref="CreateTypeRequest.Properties.DATA">DATA</see>
        ///         property. Any 'bytes' type column must have a <see
        ///         cref="CreateTypeRequest.Properties.STORE_ONLY">STORE_ONLY</see>
        ///         property. This property reduces system memory usage.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.DISK_OPTIMIZED">DISK_OPTIMIZED</see>:
        ///         </term>
        ///         <description>Works in conjunction with the <see
        ///         cref="CreateTypeRequest.Properties.DATA">DATA</see>
        ///         property for string columns. This property reduces system
        ///         disk usage by disabling reverse string lookups. Queries
        ///         like <see
        ///         cref="filter(string,string,string,IDictionary{string,string})">filter</see>,
        ///         <see
        ///         cref="filterByList(string,string,IDictionary{string,IList{string}},IDictionary{string,string})">filterByList</see>,
        ///         and <see
        ///         cref="filterByValue(string,string,bool,double,string,string,IDictionary{string,string})">filterByValue</see>
        ///         work as usual but <see
        ///         cref="aggregateUnique(string,string,long,long,IDictionary{string,string})">aggregateUnique</see>
        ///         and <see
        ///         cref="aggregateGroupBy(string,IList{string},long,long,IDictionary{string,string})">aggregateGroupBy</see>
        ///         are not allowed on columns with this property.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.TIMESTAMP">TIMESTAMP</see>:
        ///         </term>
        ///         <description>Valid only for 'long' columns. Indicates that
        ///         this field represents a timestamp and will be provided in
        ///         milliseconds since the Unix epoch: 00:00:00 Jan 1 1970.
        ///         Dates represented by a timestamp must fall between the year
        ///         1000 and the year 2900.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.ULONG">ULONG</see>:
        ///         </term>
        ///         <description>Valid only for 'string' columns.  It
        ///         represents an unsigned long integer data type. The string
        ///         can only be interpreted as an unsigned long data type with
        ///         minimum value of zero, and maximum value of
        ///         18446744073709551615.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.UUID">UUID</see>:</term>
        ///         <description>Valid only for 'string' columns.  It
        ///         represents an uuid data type. Internally, it is stored as a
        ///         128-bit integer.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.DECIMAL">DECIMAL</see>:
        ///         </term>
        ///         <description>Valid only for 'string' columns.  It
        ///         represents a SQL type NUMERIC(19, 4) data type.  There can
        ///         be up to 15 digits before the decimal point and up to four
        ///         digits in the fractional part.  The value can be positive
        ///         or negative (indicated by a minus sign at the beginning).
        ///         This property is mutually exclusive with the <see
        ///         cref="CreateTypeRequest.Properties.TEXT_SEARCH">TEXT_SEARCH</see>
        ///         property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.DATE">DATE</see>:</term>
        ///         <description>Valid only for 'string' columns.  Indicates
        ///         that this field represents a date and will be provided in
        ///         the format 'YYYY-MM-DD'.  The allowable range is 1000-01-01
        ///         through 2900-01-01.  This property is mutually exclusive
        ///         with the <see
        ///         cref="CreateTypeRequest.Properties.TEXT_SEARCH">TEXT_SEARCH</see>
        ///         property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.TIME">TIME</see>:</term>
        ///         <description>Valid only for 'string' columns.  Indicates
        ///         that this field represents a time-of-day and will be
        ///         provided in the format 'HH:MM:SS.mmm'.  The allowable range
        ///         is 00:00:00.000 through 23:59:59.999.  This property is
        ///         mutually exclusive with the <see
        ///         cref="CreateTypeRequest.Properties.TEXT_SEARCH">TEXT_SEARCH</see>
        ///         property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.DATETIME">DATETIME</see>:
        ///         </term>
        ///         <description>Valid only for 'string' columns.  Indicates
        ///         that this field represents a datetime and will be provided
        ///         in the format 'YYYY-MM-DD HH:MM:SS.mmm'.  The allowable
        ///         range is 1000-01-01 00:00:00.000 through 2900-01-01
        ///         23:59:59.999.  This property is mutually exclusive with the
        ///         <see
        ///         cref="CreateTypeRequest.Properties.TEXT_SEARCH">TEXT_SEARCH</see>
        ///         property.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR1">CHAR1</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 1 character.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR2">CHAR2</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 2 characters.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR4">CHAR4</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 4 characters.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR8">CHAR8</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 8 characters.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR16">CHAR16</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 16 characters.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR32">CHAR32</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 32 characters.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR64">CHAR64</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 64 characters.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR128">CHAR128</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 128 characters.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.CHAR256">CHAR256</see>:
        ///         </term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns. Strings with this
        ///         property must be no longer than 256 characters.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.BOOLEAN">BOOLEAN</see>:
        ///         </term>
        ///         <description>This property provides optimized memory and
        ///         query performance for int columns. Ints with this property
        ///         must be between 0 and 1(inclusive)</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.INT8">INT8</see>:</term>
        ///         <description>This property provides optimized memory and
        ///         query performance for int columns. Ints with this property
        ///         must be between -128 and +127 (inclusive)</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.INT16">INT16</see>:
        ///         </term>
        ///         <description>This property provides optimized memory and
        ///         query performance for int columns. Ints with this property
        ///         must be between -32768 and +32767 (inclusive)</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.IPV4">IPV4</see>:</term>
        ///         <description>This property provides optimized memory, disk
        ///         and query performance for string columns representing IPv4
        ///         addresses (i.e. 192.168.1.1). Strings with this property
        ///         must be of the form: A.B.C.D where A, B, C and D are in the
        ///         range of 0-255.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.ARRAY">ARRAY</see>:
        ///         </term>
        ///         <description>Valid only for 'string' columns. Indicates
        ///         that this field contains an array.  The value type and
        ///         (optionally) the item count should be specified in
        ///         parenthesis; e.g., 'array(int, 10)' for a 10-integer array.
        ///         Both 'array(int)' and 'array(int, -1)' will designate an
        ///         unlimited-length integer array, though no bounds checking
        ///         is performed on arrays of any length.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.JSON">JSON</see>:</term>
        ///         <description>Valid only for 'string' columns. Indicates
        ///         that this field contains values in JSON format.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.VECTOR">VECTOR</see>:
        ///         </term>
        ///         <description>Valid only for 'bytes' columns. Indicates that
        ///         this field contains a vector of floats.  The length should
        ///         be specified in parenthesis, e.g., 'vector(1000)'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.WKT">WKT</see>:</term>
        ///         <description>Valid only for 'string' and 'bytes' columns.
        ///         Indicates that this field contains geospatial geometry
        ///         objects in Well-Known Text (WKT) or Well-Known Binary (WKB)
        ///         format.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.PRIMARY_KEY">PRIMARY_KEY</see>:
        ///         </term>
        ///         <description>This property indicates that this column will
        ///         be part of (or the entire) <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.SHARD_KEY">SHARD_KEY</see>:
        ///         </term>
        ///         <description>This property indicates that this column will
        ///         be part of (or the entire) <a
        ///         href="../../../concepts/tables/#shard-keys"
        ///         target="_top">shard key</a>.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.NULLABLE">NULLABLE</see>:
        ///         </term>
        ///         <description>This property indicates that this column is
        ///         nullable.  However, setting this property is insufficient
        ///         for making the column nullable.  The user must declare the
        ///         type of the column as a union between its regular type and
        ///         'null' in the avro schema for the record type in <paramref
        ///         name="type_definition" />.  For example, if a column is of
        ///         type integer and is nullable, then the entry for the column
        ///         in the avro schema must be: ['int', 'null'].
        ///         The C++, C#, Java, and Python APIs have built-in
        ///         convenience for bypassing setting the avro schema by hand.
        ///         For those languages, one can use this property as usual and
        ///         not have to worry about the avro schema for the record.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.DICT">DICT</see>:</term>
        ///         <description>This property indicates that this column
        ///         should be <a href="../../../concepts/dictionary_encoding/"
        ///         target="_top">dictionary encoded</a>. It can only be used
        ///         in conjunction with restricted string (charN), int, long or
        ///         date columns. Dictionary encoding is best for columns where
        ///         the cardinality (the number of unique values) is expected
        ///         to be low. This property can save a large amount of memory.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.INIT_WITH_NOW">INIT_WITH_NOW</see>:
        ///         </term>
        ///         <description>For 'date', 'time', 'datetime', or 'timestamp'
        ///         column types, replace empty strings and invalid timestamps
        ///         with 'NOW()' upon insert.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateTypeRequest.Properties.INIT_WITH_UUID">INIT_WITH_UUID</see>:
        ///         </term>
        ///         <description>For 'uuid' type, replace empty strings and
        ///         invalid UUID values with randomly-generated UUIDs upon
        ///         insert.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateTypeResponse createType( string type_definition,
                                              string label,
                                              IDictionary<string, IList<string>> properties = null,
                                              IDictionary<string, string> options = null )
        {
            return createType( new CreateTypeRequest( type_definition, label, properties,
                                                      options ) );
        }

        /// <summary>Merges data from one or more tables with comparable data
        /// types into a new table.</summary>
        /// <remarks><para> The following merges are supported:</para>
        /// <para>UNION (DISTINCT/ALL) - For data set union details and
        /// examples, see <a href="../../../concepts/unions/"
        /// target="_top">Union</a>.  For limitations, see <a
        /// href="../../../concepts/unions/#limitations-and-cautions"
        /// target="_top">Union Limitations and Cautions</a>.</para>
        /// <para>INTERSECT (DISTINCT/ALL) - For data set intersection details
        /// and examples, see <a href="../../../concepts/intersect/"
        /// target="_top">Intersect</a>.  For limitations, see <a
        /// href="../../../concepts/intersect/#limitations"
        /// target="_top">Intersect Limitations</a>.</para>
        /// <para>EXCEPT (DISTINCT/ALL) - For data set subtraction details and
        /// examples, see <a href="../../../concepts/except/"
        /// target="_top">Except</a>.  For limitations, see <a
        /// href="../../../concepts/except/#limitations" target="_top">Except
        /// Limitations</a>.</para>
        /// <para>MERGE VIEWS - For a given set of <a
        /// href="../../../concepts/filtered_views/" target="_top">filtered
        /// views</a> on a single table, creates a single filtered view
        /// containing all of the unique records across all of the given
        /// filtered data sets.</para>
        /// <para>Non-charN 'string' and 'bytes' column types cannot be merged,
        /// nor can columns marked as <a
        /// href="../../../concepts/types/#data-handling"
        /// target="_top">store-only</a>.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateUnionResponse createUnion( CreateUnionRequest request_ )
        {
            CreateUnionResponse actualResponse_ = SubmitRequest<CreateUnionResponse>("/create/union", request_, false);

            return actualResponse_;
        }

        /// <summary>Merges data from one or more tables with comparable data
        /// types into a new table.</summary>
        /// <remarks><para> The following merges are supported:</para>
        /// <para>UNION (DISTINCT/ALL) - For data set union details and
        /// examples, see <a href="../../../concepts/unions/"
        /// target="_top">Union</a>.  For limitations, see <a
        /// href="../../../concepts/unions/#limitations-and-cautions"
        /// target="_top">Union Limitations and Cautions</a>.</para>
        /// <para>INTERSECT (DISTINCT/ALL) - For data set intersection details
        /// and examples, see <a href="../../../concepts/intersect/"
        /// target="_top">Intersect</a>.  For limitations, see <a
        /// href="../../../concepts/intersect/#limitations"
        /// target="_top">Intersect Limitations</a>.</para>
        /// <para>EXCEPT (DISTINCT/ALL) - For data set subtraction details and
        /// examples, see <a href="../../../concepts/except/"
        /// target="_top">Except</a>.  For limitations, see <a
        /// href="../../../concepts/except/#limitations" target="_top">Except
        /// Limitations</a>.</para>
        /// <para>MERGE VIEWS - For a given set of <a
        /// href="../../../concepts/filtered_views/" target="_top">filtered
        /// views</a> on a single table, creates a single filtered view
        /// containing all of the unique records across all of the given
        /// filtered data sets.</para>
        /// <para>Non-charN 'string' and 'bytes' column types cannot be merged,
        /// nor can columns marked as <a
        /// href="../../../concepts/types/#data-handling"
        /// target="_top">store-only</a>.</para></remarks>
        ///
        /// <param name="table_name">Name of the table to be created, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="table_names">The list of table names to merge, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must contain the names of
        /// one or more existing tables.</param>
        /// <param name="input_column_names">The list of columns from each of
        /// the corresponding input tables.</param>
        /// <param name="output_column_names">The list of names of the columns
        /// to be stored in the output table.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateUnionRequest.Options.TRUE">TRUE</see>, a unique
        ///         temporary table name will be generated in the sys_temp
        ///         schema and used in place of <paramref name="table_name" />.
        ///         If <see
        ///         cref="CreateUnionRequest.Options.PERSIST">PERSIST</see> is
        ///         <see cref="CreateUnionRequest.Options.FALSE">FALSE</see>
        ///         (or unspecified), then this is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="CreateUnionResponse.Info.QUALIFIED_TABLE_NAME">QUALIFIED_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateUnionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the projection as part of <paramref
        ///         name="table_name" /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of the schema
        ///         for the output table. If the schema provided is
        ///         non-existent, it will be automatically created. The default
        ///         value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.MODE">MODE</see>:</term>
        ///         <description>If <see
        ///         cref="CreateUnionRequest.Options.MERGE_VIEWS">MERGE_VIEWS</see>,
        ///         then this operation will merge the provided views. All
        ///         <paramref name="table_names" /> must be views from the same
        ///         underlying base table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.UNION_ALL">UNION_ALL</see>:
        ///                 </term>
        ///                 <description>Retains all rows from the specified
        ///                 tables.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.UNION">UNION</see>:
        ///                 </term>
        ///                 <description>Retains all unique rows from the
        ///                 specified tables (synonym for <see
        ///                 cref="CreateUnionRequest.Options.UNION_DISTINCT">UNION_DISTINCT</see>).
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.UNION_DISTINCT">UNION_DISTINCT</see>:
        ///                 </term>
        ///                 <description>Retains all unique rows from the
        ///                 specified tables.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.EXCEPT">EXCEPT</see>:
        ///                 </term>
        ///                 <description>Retains all unique rows from the first
        ///                 table that do not appear in the second table (only
        ///                 works on 2 tables).</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.EXCEPT_ALL">EXCEPT_ALL</see>:
        ///                 </term>
        ///                 <description>Retains all rows(including duplicates)
        ///                 from the first table that do not appear in the
        ///                 second table (only works on 2 tables).
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.INTERSECT">INTERSECT</see>:
        ///                 </term>
        ///                 <description>Retains all unique rows that appear in
        ///                 both of the specified tables (only works on 2
        ///                 tables).</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.INTERSECT_ALL">INTERSECT_ALL</see>:
        ///                 </term>
        ///                 <description>Retains all rows(including duplicates)
        ///                 that appear in both of the specified tables (only
        ///                 works on 2 tables).</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.MERGE_VIEWS">MERGE_VIEWS</see>:
        ///                 </term>
        ///                 <description>Merge two or more views (or views of
        ///                 views) of the same base data set into a new view.
        ///                 If this mode is selected <paramref
        ///                 name="input_column_names" /> AND <paramref
        ///                 name="output_column_names" /> must be empty. The
        ///                 resulting view would match the results of a SQL OR
        ///                 operation, e.g., if filter 1 creates a view using
        ///                 the expression 'x = 20' and filter 2 creates a view
        ///                 using the expression 'x &lt;= 10', then the merge
        ///                 views operation creates a new view using the
        ///                 expression 'x = 20 OR x &lt;= 10'.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateUnionRequest.Options.UNION_ALL">UNION_ALL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for this output table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for this output table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for this output table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.CREATE_INDEXES">CREATE_INDEXES</see>:
        ///         </term>
        ///         <description>Comma-separated list of columns on which to
        ///         create indexes on the output table.  The columns specified
        ///         must be present in <paramref name="output_column_names" />.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="CreateUnionRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the output table specified in
        ///         <paramref name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.PERSIST">PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateUnionRequest.Options.TRUE">TRUE</see>, then the
        ///         output table specified in <paramref name="table_name" />
        ///         will be persisted and will not expire unless a <see
        ///         cref="CreateUnionRequest.Options.TTL">TTL</see> is
        ///         specified.   If <see
        ///         cref="CreateUnionRequest.Options.FALSE">FALSE</see>, then
        ///         the output table will be an in-memory table and will expire
        ///         unless a <see
        ///         cref="CreateUnionRequest.Options.TTL">TTL</see> is
        ///         specified otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateUnionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.VIEW_ID">VIEW_ID</see>:
        ///         </term>
        ///         <description>ID of view of which this output table is a
        ///         member. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.FORCE_REPLICATED">FORCE_REPLICATED</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateUnionRequest.Options.TRUE">TRUE</see>, then the
        ///         output table specified in <paramref name="table_name" />
        ///         will be replicated even if the source tables are not.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUnionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateUnionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUnionRequest.Options.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateUnionResponse createUnion( string table_name,
                                                IList<string> table_names,
                                                IList<IList<string>> input_column_names,
                                                IList<string> output_column_names,
                                                IDictionary<string, string> options = null )
        {
            return createUnion( new CreateUnionRequest( table_name, table_names,
                                                        input_column_names,
                                                        output_column_names, options ) );
        }

        /// <summary>Creates a new external user (a user whose credentials are
        /// managed by an external LDAP).</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateUserExternalResponse createUserExternal( CreateUserExternalRequest request_ )
        {
            CreateUserExternalResponse actualResponse_ = SubmitRequest<CreateUserExternalResponse>("/create/user/external", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new external user (a user whose credentials are
        /// managed by an external LDAP).</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="name">Name of the user to be created. Must exactly
        /// match the user's name in the external LDAP, prefixed with a @. Must
        /// not be the same name as an existing user.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateUserExternalRequest.Options.RESOURCE_GROUP">RESOURCE_GROUP</see>:
        ///         </term>
        ///         <description>Name of an existing resource group to
        ///         associate with this user</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUserExternalRequest.Options.DEFAULT_SCHEMA">DEFAULT_SCHEMA</see>:
        ///         </term>
        ///         <description>Default schema to associate with this user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUserExternalRequest.Options.CREATE_HOME_DIRECTORY">CREATE_HOME_DIRECTORY</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="CreateUserExternalRequest.Options.TRUE">TRUE</see>, a
        ///         home directory in KiFS is created for this user.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUserExternalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUserExternalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateUserExternalRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUserExternalRequest.Options.DIRECTORY_DATA_LIMIT">DIRECTORY_DATA_LIMIT</see>:
        ///         </term>
        ///         <description>The maximum capacity to apply to the created
        ///         directory if <see
        ///         cref="CreateUserExternalRequest.Options.CREATE_HOME_DIRECTORY">CREATE_HOME_DIRECTORY</see>
        ///         is <see
        ///         cref="CreateUserExternalRequest.Options.TRUE">TRUE</see>.
        ///         Set to -1 to indicate no upper limit. If empty, the system
        ///         default limit is applied.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateUserExternalResponse createUserExternal( string name,
                                                              IDictionary<string, string> options = null )
        {
            return createUserExternal( new CreateUserExternalRequest( name, options ) );
        }

        /// <summary>Creates a new internal user (a user whose credentials are
        /// managed by the database system).</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateUserInternalResponse createUserInternal( CreateUserInternalRequest request_ )
        {
            CreateUserInternalResponse actualResponse_ = SubmitRequest<CreateUserInternalResponse>("/create/user/internal", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a new internal user (a user whose credentials are
        /// managed by the database system).</summary>
        ///
        /// <param name="name">Name of the user to be created. Must contain
        /// only lowercase letters, digits, and underscores, and cannot begin
        /// with a digit. Must not be the same name as an existing user or
        /// role.</param>
        /// <param name="password">Initial password of the user to be created.
        /// May be an empty string for no password.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateUserInternalRequest.Options.RESOURCE_GROUP">RESOURCE_GROUP</see>:
        ///         </term>
        ///         <description>Name of an existing resource group to
        ///         associate with this user</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUserInternalRequest.Options.DEFAULT_SCHEMA">DEFAULT_SCHEMA</see>:
        ///         </term>
        ///         <description>Default schema to associate with this user
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUserInternalRequest.Options.CREATE_HOME_DIRECTORY">CREATE_HOME_DIRECTORY</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="CreateUserInternalRequest.Options.TRUE">TRUE</see>, a
        ///         home directory in KiFS is created for this user.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUserInternalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateUserInternalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateUserInternalRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateUserInternalRequest.Options.DIRECTORY_DATA_LIMIT">DIRECTORY_DATA_LIMIT</see>:
        ///         </term>
        ///         <description>The maximum capacity to apply to the created
        ///         directory if <see
        ///         cref="CreateUserInternalRequest.Options.CREATE_HOME_DIRECTORY">CREATE_HOME_DIRECTORY</see>
        ///         is <see
        ///         cref="CreateUserInternalRequest.Options.TRUE">TRUE</see>.
        ///         Set to -1 to indicate no upper limit. If empty, the system
        ///         default limit is applied.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateUserInternalResponse createUserInternal( string name,
                                                              string password,
                                                              IDictionary<string, string> options = null )
        {
            return createUserInternal( new CreateUserInternalRequest( name, password,
                                                                      options ) );
        }

        /// <summary>Creates a job to generate a sequence of raster images that
        /// visualize data over a specified time.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateVideoResponse createVideo( CreateVideoRequest request_ )
        {
            CreateVideoResponse actualResponse_ = SubmitRequest<CreateVideoResponse>("/create/video", request_, false);

            return actualResponse_;
        }

        /// <summary>Creates a job to generate a sequence of raster images that
        /// visualize data over a specified time.</summary>
        ///
        /// <param name="attribute">The animated attribute to map to the
        /// video's frames. Must be present in the LAYERS specified for the
        /// visualization. This is often a time-related field but may be any
        /// numeric type.</param>
        /// <param name="begin">The start point for the video. Accepts an
        /// expression evaluable over the <paramref name="attribute" />.
        /// </param>
        /// <param name="duration_seconds">Seconds of video to produce</param>
        /// <param name="end">The end point for the video. Accepts an
        /// expression evaluable over the <paramref name="attribute" />.
        /// </param>
        /// <param name="frames_per_second">The presentation frame rate of the
        /// encoded video in frames per second.</param>
        /// <param name="style">The name of the visualize mode; should
        /// correspond to the schema used for the <paramref
        /// name="style_parameters" /> field.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Style.CHART">CHART</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Style.RASTER">RASTER</see></term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Style.CLASSBREAK">CLASSBREAK</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Style.CONTOUR">CONTOUR</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Style.HEATMAP">HEATMAP</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Style.LABELS">LABELS</see></term>
        ///     </item>
        /// </list></param>
        /// <param name="path">Fully-qualified <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a> path.  Write access is required. A file must
        /// not exist at that path, unless <see
        /// cref="CreateVideoRequest.Options.REPLACE_IF_EXISTS">REPLACE_IF_EXISTS</see>
        /// is <see cref="CreateVideoRequest.Options.TRUE">TRUE</see>.</param>
        /// <param name="style_parameters">A string containing the JSON-encoded
        /// visualize request.  Must correspond to the visualize mode specified
        /// in the <paramref name="style" /> field.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see cref="CreateVideoRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl"
        ///         target="_top">TTL</a> of the video.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Options.WINDOW">WINDOW</see>:
        ///         </term>
        ///         <description>Specified using the data-type corresponding to
        ///         the <paramref name="attribute" />. For a window of size W,
        ///         a video frame rendered for time t will visualize data in
        ///         the interval [t-W,t]. The minimum window size is the
        ///         interval between successive frames.  The minimum value is
        ///         the default.  If a value less than the minimum value is
        ///         specified, it is replaced with the minimum window size.
        ///         Larger values will make changes throughout the video appear
        ///         more smooth while smaller values will capture fast
        ///         variations in the data.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Options.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateVideoRequest.Options.TRUE">TRUE</see>, does not
        ///         return an error if the video already exists.  Ignored if
        ///         <see
        ///         cref="CreateVideoRequest.Options.REPLACE_IF_EXISTS">REPLACE_IF_EXISTS</see>
        ///         is <see cref="CreateVideoRequest.Options.TRUE">TRUE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateVideoRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateVideoRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateVideoRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="CreateVideoRequest.Options.REPLACE_IF_EXISTS">REPLACE_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="CreateVideoRequest.Options.TRUE">TRUE</see>, deletes
        ///         any existing video with the same path before creating a new
        ///         video.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateVideoRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="CreateVideoRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="CreateVideoRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public CreateVideoResponse createVideo( string attribute,
                                                string begin,
                                                double duration_seconds,
                                                string end,
                                                double frames_per_second,
                                                string style,
                                                string path,
                                                string style_parameters,
                                                IDictionary<string, string> options = null )
        {
            return createVideo( new CreateVideoRequest( attribute, begin,
                                                        duration_seconds, end,
                                                        frames_per_second, style, path,
                                                        style_parameters, options ) );
        }

        /// <summary>Deletes a directory from <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteDirectoryResponse deleteDirectory( DeleteDirectoryRequest request_ )
        {
            DeleteDirectoryResponse actualResponse_ = SubmitRequest<DeleteDirectoryResponse>("/delete/directory", request_, false);

            return actualResponse_;
        }

        /// <summary>Deletes a directory from <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a>.</summary>
        ///
        /// <param name="directory_name">Name of the directory in KiFS to be
        /// deleted. The directory must contain no files, unless <see
        /// cref="DeleteDirectoryRequest.Options.RECURSIVE">RECURSIVE</see> is
        /// <see cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DeleteDirectoryRequest.Options.RECURSIVE">RECURSIVE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see>, will
        ///         delete directory and all files residing in it. If false,
        ///         directory must be empty for deletion.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="DeleteDirectoryRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see>, no
        ///         error is returned if specified directory does not exist.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteDirectoryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DeleteDirectoryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteDirectoryResponse deleteDirectory( string directory_name,
                                                        IDictionary<string, string> options = null )
        {
            return deleteDirectory( new DeleteDirectoryRequest( directory_name, options ) );
        }

        /// <summary>Deletes one or more files from <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteFilesResponse deleteFiles( DeleteFilesRequest request_ )
        {
            DeleteFilesResponse actualResponse_ = SubmitRequest<DeleteFilesResponse>("/delete/files", request_, false);

            return actualResponse_;
        }

        /// <summary>Deletes one or more files from <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        ///
        /// <param name="file_names">An array of names of files to be deleted.
        /// File paths may contain wildcard characters after the KiFS directory
        /// delimeter.
        /// Accepted wildcard characters are asterisk (*) to represent any
        /// string of zero or more characters, and question mark (?) to
        /// indicate a single character.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DeleteFilesRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="DeleteFilesRequest.Options.TRUE">TRUE</see>, no error
        ///         is returned if a specified file does not exist.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DeleteFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteFilesResponse deleteFiles( IList<string> file_names,
                                                IDictionary<string, string> options = null )
        {
            return deleteFiles( new DeleteFilesRequest( file_names, options ) );
        }

        /// <summary>Deletes an existing graph from the graph server and/or
        /// persist.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteGraphResponse deleteGraph( DeleteGraphRequest request_ )
        {
            DeleteGraphResponse actualResponse_ = SubmitRequest<DeleteGraphResponse>("/delete/graph", request_, false);

            return actualResponse_;
        }

        /// <summary>Deletes an existing graph from the graph server and/or
        /// persist.</summary>
        ///
        /// <param name="graph_name">Name of the graph to be deleted.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DeleteGraphRequest.Options.DELETE_PERSIST">DELETE_PERSIST</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="DeleteGraphRequest.Options.TRUE">TRUE</see>, the
        ///         graph is removed from the server and persist. If set to
        ///         <see cref="DeleteGraphRequest.Options.FALSE">FALSE</see>,
        ///         the graph is removed from the server but is left in
        ///         persist. The graph can be reloaded from persist if it is
        ///         recreated with the same 'graph_name'.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DeleteGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="DeleteGraphRequest.Options.SERVER_ID">SERVER_ID</see>:
        ///         </term>
        ///         <description>Indicates which graph server(s) to send the
        ///         request to. Default is to send to get information about all
        ///         the servers.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteGraphResponse deleteGraph( string graph_name,
                                                IDictionary<string, string> options = null )
        {
            return deleteGraph( new DeleteGraphRequest( graph_name, options ) );
        }

        /// <summary>Deletes a proc.</summary>
        /// <remarks><para>Any currently running instances of the proc will be
        /// killed.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteProcResponse deleteProc( DeleteProcRequest request_ )
        {
            DeleteProcResponse actualResponse_ = SubmitRequest<DeleteProcResponse>("/delete/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Deletes a proc.</summary>
        /// <remarks><para>Any currently running instances of the proc will be
        /// killed.</para></remarks>
        ///
        /// <param name="proc_name">Name of the proc to be deleted. Must be the
        /// name of a currently existing proc.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteProcResponse deleteProc( string proc_name,
                                              IDictionary<string, string> options = null )
        {
            return deleteProc( new DeleteProcRequest( proc_name, options ) );
        }

        /// <summary>Deletes record(s) matching the provided criteria from the
        /// given table.</summary>
        /// <remarks><para>The record selection criteria can either be one or
        /// more  <see
        /// cref="DeleteRecordsRequest.expressions">expressions</see> (matching
        /// multiple records), a single record identified by <see
        /// cref="DeleteRecordsRequest.Options.RECORD_ID">RECORD_ID</see>
        /// options, or all records when using <see
        /// cref="DeleteRecordsRequest.Options.DELETE_ALL_RECORDS">DELETE_ALL_RECORDS</see>.
        /// Note that the three selection criteria are mutually exclusive.
        /// This operation cannot be run on a view.  The operation is
        /// synchronous meaning that a response will not be available until the
        /// request is completely processed and all the matching records are
        /// deleted.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteRecordsResponse deleteRecords( DeleteRecordsRequest request_ )
        {
            DeleteRecordsResponse actualResponse_ = SubmitRequest<DeleteRecordsResponse>("/delete/records", request_, false);

            return actualResponse_;
        }

        /// <summary>Deletes record(s) matching the provided criteria from the
        /// given table.</summary>
        /// <remarks><para>The record selection criteria can either be one or
        /// more  <paramref name="expressions" /> (matching multiple records),
        /// a single record identified by <see
        /// cref="DeleteRecordsRequest.Options.RECORD_ID">RECORD_ID</see>
        /// options, or all records when using <see
        /// cref="DeleteRecordsRequest.Options.DELETE_ALL_RECORDS">DELETE_ALL_RECORDS</see>.
        /// Note that the three selection criteria are mutually exclusive.
        /// This operation cannot be run on a view.  The operation is
        /// synchronous meaning that a response will not be available until the
        /// request is completely processed and all the matching records are
        /// deleted.</para></remarks>
        ///
        /// <param name="table_name">Name of the table from which to delete
        /// records, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. Must contain the name of
        /// an existing table; not applicable to views.</param>
        /// <param name="expressions">A list of the actual predicates, one for
        /// each select; format should follow the guidelines provided <a
        /// href="../../../concepts/expressions/" target="_top">here</a>.
        /// Specifying one or more <paramref name="expressions" /> is mutually
        /// exclusive to specifying <see
        /// cref="DeleteRecordsRequest.Options.RECORD_ID">RECORD_ID</see> in
        /// the <paramref name="options" />.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DeleteRecordsRequest.Options.GLOBAL_EXPRESSION">GLOBAL_EXPRESSION</see>:
        ///         </term>
        ///         <description>An optional global expression to reduce the
        ///         search space of the <paramref name="expressions" />. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="DeleteRecordsRequest.Options.RECORD_ID">RECORD_ID</see>:
        ///         </term>
        ///         <description>A record ID identifying a single record,
        ///         obtained at the time of <see
        ///         cref="insertRecords{T}(string,IList{T},IDictionary{string,string})">insertion
        ///         of the record</see> or by calling <see
        ///         cref="getRecordsFromCollection{T}(string,long,long,IDictionary{string,string})">getRecordsFromCollection</see>
        ///         with the *return_record_ids* option. This option cannot be
        ///         used to delete records from <a
        ///         href="../../../concepts/tables/#replication"
        ///         target="_top">replicated</a> tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="DeleteRecordsRequest.Options.DELETE_ALL_RECORDS">DELETE_ALL_RECORDS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="DeleteRecordsRequest.Options.TRUE">TRUE</see>, all
        ///         records in the table will be deleted. If set to <see
        ///         cref="DeleteRecordsRequest.Options.FALSE">FALSE</see>, then
        ///         the option is effectively ignored.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DeleteRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteRecordsResponse deleteRecords( string table_name,
                                                    IList<string> expressions,
                                                    IDictionary<string, string> options = null )
        {
            return deleteRecords( new DeleteRecordsRequest( table_name, expressions,
                                                            options ) );
        }

        /// <summary>Deletes a resource group.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteResourceGroupResponse deleteResourceGroup( DeleteResourceGroupRequest request_ )
        {
            DeleteResourceGroupResponse actualResponse_ = SubmitRequest<DeleteResourceGroupResponse>("/delete/resourcegroup", request_, false);

            return actualResponse_;
        }

        /// <summary>Deletes a resource group.</summary>
        ///
        /// <param name="name">Name of the resource group to be deleted.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DeleteResourceGroupRequest.Options.CASCADE_DELETE">CASCADE_DELETE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="DeleteResourceGroupRequest.Options.TRUE">TRUE</see>,
        ///         delete any existing entities owned by this group. Otherwise
        ///         this request will return an error of any such entities
        ///         exist.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteResourceGroupRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DeleteResourceGroupRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DeleteResourceGroupRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteResourceGroupResponse deleteResourceGroup( string name,
                                                                IDictionary<string, string> options = null )
        {
            return deleteResourceGroup( new DeleteResourceGroupRequest( name, options ) );
        }

        /// <summary>Deletes an existing role.</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteRoleResponse deleteRole( DeleteRoleRequest request_ )
        {
            DeleteRoleResponse actualResponse_ = SubmitRequest<DeleteRoleResponse>("/delete/role", request_, false);

            return actualResponse_;
        }

        /// <summary>Deletes an existing role.</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="name">Name of the role to be deleted. Must be an
        /// existing role.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteRoleResponse deleteRole( string name,
                                              IDictionary<string, string> options = null )
        {
            return deleteRole( new DeleteRoleRequest( name, options ) );
        }

        /// <summary>Deletes an existing user.</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteUserResponse deleteUser( DeleteUserRequest request_ )
        {
            DeleteUserResponse actualResponse_ = SubmitRequest<DeleteUserResponse>("/delete/user", request_, false);

            return actualResponse_;
        }

        /// <summary>Deletes an existing user.</summary>
        /// <remarks><para>This method should be used for on-premise
        /// deployments only.</para></remarks>
        ///
        /// <param name="name">Name of the user to be deleted. Must be an
        /// existing user.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DeleteUserResponse deleteUser( string name,
                                              IDictionary<string, string> options = null )
        {
            return deleteUser( new DeleteUserRequest( name, options ) );
        }

        /// <summary>Downloads one or more files from <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DownloadFilesResponse downloadFiles( DownloadFilesRequest request_ )
        {
            DownloadFilesResponse actualResponse_ = SubmitRequest<DownloadFilesResponse>("/download/files", request_, false);

            return actualResponse_;
        }

        /// <summary>Downloads one or more files from <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        ///
        /// <param name="file_names">An array of the file names to download
        /// from KiFS. File paths may contain wildcard characters after the
        /// KiFS directory delimeter.
        /// Accepted wildcard characters are asterisk (*) to represent any
        /// string of zero or more characters, and question mark (?) to
        /// indicate a single character.</param>
        /// <param name="read_offsets">An array of starting byte offsets from
        /// which to read each respective file in <paramref name="file_names"
        /// />. Must either be empty or the same length as <paramref
        /// name="file_names" />. If empty, files are downloaded in their
        /// entirety. If not empty, <paramref name="read_lengths" /> must also
        /// not be empty.</param>
        /// <param name="read_lengths">Array of number of bytes to read from
        /// each respective file in <paramref name="file_names" />. Must either
        /// be empty or the same length as <paramref name="file_names" />. If
        /// empty, files are downloaded in their entirety. If not empty,
        /// <paramref name="read_offsets" /> must also not be empty.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DownloadFilesRequest.Options.FILE_ENCODING">FILE_ENCODING</see>:
        ///         </term>
        ///         <description>Encoding to be applied to the output file
        ///         data. When using JSON serialization it is recommended to
        ///         specify this as <see
        ///         cref="DownloadFilesRequest.Options.BASE64">BASE64</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DownloadFilesRequest.Options.BASE64">BASE64</see>:
        ///                 </term>
        ///                 <description>Apply base64 encoding to the output
        ///                 file data.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DownloadFilesRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>Do not apply any encoding to the
        ///                 output file data.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DownloadFilesRequest.Options.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DownloadFilesResponse downloadFiles( IList<string> file_names,
                                                    IList<long> read_offsets,
                                                    IList<long> read_lengths,
                                                    IDictionary<string, string> options = null )
        {
            return downloadFiles( new DownloadFilesRequest( file_names, read_offsets,
                                                            read_lengths, options ) );
        }

        /// @cond NO_DOCS
        public DropContainerRegistryResponse dropContainerRegistry( DropContainerRegistryRequest request_ )
        {
            DropContainerRegistryResponse actualResponse_ = SubmitRequest<DropContainerRegistryResponse>("/drop/container/registry", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public DropContainerRegistryResponse dropContainerRegistry( string registry_name,
                                                                    IDictionary<string, string> options = null )
        {
            return dropContainerRegistry( new DropContainerRegistryRequest( registry_name,
                                                                            options ) );
        }
        /// @endcond

        /// <summary>Drop an existing <a href="../../../concepts/credentials/"
        /// target="_top">credential</a>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropCredentialResponse dropCredential( DropCredentialRequest request_ )
        {
            DropCredentialResponse actualResponse_ = SubmitRequest<DropCredentialResponse>("/drop/credential", request_, false);

            return actualResponse_;
        }

        /// <summary>Drop an existing <a href="../../../concepts/credentials/"
        /// target="_top">credential</a>.</summary>
        ///
        /// <param name="credential_name">Name of the credential to be dropped.
        /// Must be an existing credential.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropCredentialResponse dropCredential( string credential_name,
                                                      IDictionary<string, string> options = null )
        {
            return dropCredential( new DropCredentialRequest( credential_name, options ) );
        }

        /// <summary>Drops an existing <a href="../../../concepts/data_sinks/"
        /// target="_top">data sink</a>.</summary>
        /// <remarks><para> By default, if any <a
        /// href="../../../concepts/table_monitors" target="_top">table
        /// monitors</a> use this sink as a destination, the request will be
        /// blocked unless option <see
        /// cref="DropDatasinkRequest.Options.CLEAR_TABLE_MONITORS">CLEAR_TABLE_MONITORS</see>
        /// is <see cref="DropDatasinkRequest.Options.TRUE">TRUE</see>.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropDatasinkResponse dropDatasink( DropDatasinkRequest request_ )
        {
            DropDatasinkResponse actualResponse_ = SubmitRequest<DropDatasinkResponse>("/drop/datasink", request_, false);

            return actualResponse_;
        }

        /// <summary>Drops an existing <a href="../../../concepts/data_sinks/"
        /// target="_top">data sink</a>.</summary>
        /// <remarks><para> By default, if any <a
        /// href="../../../concepts/table_monitors" target="_top">table
        /// monitors</a> use this sink as a destination, the request will be
        /// blocked unless option <see
        /// cref="DropDatasinkRequest.Options.CLEAR_TABLE_MONITORS">CLEAR_TABLE_MONITORS</see>
        /// is <see cref="DropDatasinkRequest.Options.TRUE">TRUE</see>.</para>
        /// </remarks>
        ///
        /// <param name="name">Name of the data sink to be dropped. Must be an
        /// existing data sink.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DropDatasinkRequest.Options.CLEAR_TABLE_MONITORS">CLEAR_TABLE_MONITORS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="DropDatasinkRequest.Options.TRUE">TRUE</see>, any <a
        ///         href="../../../concepts/table_monitors/"
        ///         target="_top">table monitors</a> that use this data sink
        ///         will be cleared.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DropDatasinkRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DropDatasinkRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DropDatasinkRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropDatasinkResponse dropDatasink( string name,
                                                  IDictionary<string, string> options = null )
        {
            return dropDatasink( new DropDatasinkRequest( name, options ) );
        }

        /// <summary>Drops an existing <a
        /// href="../../../concepts/data_sources/" target="_top">data
        /// source</a>.</summary>
        /// <remarks><para> Any external tables that depend on the data source
        /// must be dropped before it can be dropped.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropDatasourceResponse dropDatasource( DropDatasourceRequest request_ )
        {
            DropDatasourceResponse actualResponse_ = SubmitRequest<DropDatasourceResponse>("/drop/datasource", request_, false);

            return actualResponse_;
        }

        /// <summary>Drops an existing <a
        /// href="../../../concepts/data_sources/" target="_top">data
        /// source</a>.</summary>
        /// <remarks><para> Any external tables that depend on the data source
        /// must be dropped before it can be dropped.</para></remarks>
        ///
        /// <param name="name">Name of the data source to be dropped. Must be
        /// an existing data source.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropDatasourceResponse dropDatasource( string name,
                                                      IDictionary<string, string> options = null )
        {
            return dropDatasource( new DropDatasourceRequest( name, options ) );
        }

        /// <summary>Drop an existing <a href="../../../concepts/udf/"
        /// target="_top">user-defined function</a> (UDF) environment.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropEnvironmentResponse dropEnvironment( DropEnvironmentRequest request_ )
        {
            DropEnvironmentResponse actualResponse_ = SubmitRequest<DropEnvironmentResponse>("/drop/environment", request_, false);

            return actualResponse_;
        }

        /// <summary>Drop an existing <a href="../../../concepts/udf/"
        /// target="_top">user-defined function</a> (UDF) environment.
        /// </summary>
        ///
        /// <param name="environment_name">Name of the environment to be
        /// dropped. Must be an existing environment.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DropEnvironmentRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="DropEnvironmentRequest.Options.TRUE">TRUE</see> and
        ///         if the environment specified in <paramref
        ///         name="environment_name" /> does not exist, no error is
        ///         returned. If <see
        ///         cref="DropEnvironmentRequest.Options.FALSE">FALSE</see> and
        ///         if the environment specified in <paramref
        ///         name="environment_name" /> does not exist, then an error is
        ///         returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DropEnvironmentRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DropEnvironmentRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DropEnvironmentRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropEnvironmentResponse dropEnvironment( string environment_name,
                                                        IDictionary<string, string> options = null )
        {
            return dropEnvironment( new DropEnvironmentRequest( environment_name, options ) );
        }

        /// @cond NO_DOCS
        public DropModelResponse dropModel( DropModelRequest request_ )
        {
            DropModelResponse actualResponse_ = SubmitRequest<DropModelResponse>("/drop/model", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public DropModelResponse dropModel( string model_name,
                                            IDictionary<string, string> options = null )
        {
            return dropModel( new DropModelRequest( model_name, options ) );
        }
        /// @endcond

        /// <summary>Drops an existing SQL-style <a
        /// href="../../../concepts/schemas/" target="_top">schema</a>,
        /// specified in <see
        /// cref="DropSchemaRequest.schema_name">schema_name</see>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropSchemaResponse dropSchema( DropSchemaRequest request_ )
        {
            DropSchemaResponse actualResponse_ = SubmitRequest<DropSchemaResponse>("/drop/schema", request_, false);

            return actualResponse_;
        }

        /// <summary>Drops an existing SQL-style <a
        /// href="../../../concepts/schemas/" target="_top">schema</a>,
        /// specified in <paramref name="schema_name" />.</summary>
        ///
        /// <param name="schema_name">Name of the schema to be dropped. Must be
        /// an existing schema.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="DropSchemaRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="DropSchemaRequest.Options.TRUE">TRUE</see> and if the
        ///         schema specified in <paramref name="schema_name" /> does
        ///         not exist, no error is returned. If <see
        ///         cref="DropSchemaRequest.Options.FALSE">FALSE</see> and if
        ///         the schema specified in <paramref name="schema_name" />
        ///         does not exist, then an error is returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DropSchemaRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DropSchemaRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DropSchemaRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="DropSchemaRequest.Options.CASCADE">CASCADE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="DropSchemaRequest.Options.TRUE">TRUE</see>, all
        ///         tables within the schema will be dropped. If <see
        ///         cref="DropSchemaRequest.Options.FALSE">FALSE</see>, the
        ///         schema will be dropped only if empty.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="DropSchemaRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="DropSchemaRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="DropSchemaRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public DropSchemaResponse dropSchema( string schema_name,
                                              IDictionary<string, string> options = null )
        {
            return dropSchema( new DropSchemaRequest( schema_name, options ) );
        }

        /// @cond NO_DOCS
        public EvaluateModelResponse evaluateModel( EvaluateModelRequest request_ )
        {
            EvaluateModelResponse actualResponse_ = SubmitRequest<EvaluateModelResponse>("/evaluate/model", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public EvaluateModelResponse evaluateModel( string model_name,
                                                    int replicas,
                                                    string deployment_mode,
                                                    string source_table,
                                                    string destination_table,
                                                    IDictionary<string, string> options = null )
        {
            return evaluateModel( new EvaluateModelRequest( model_name, replicas,
                                                            deployment_mode, source_table,
                                                            destination_table, options ) );
        }
        /// @endcond

        /// <summary>Executes a proc.</summary>
        /// <remarks><para>This endpoint is asynchronous and does not wait for
        /// the proc to complete before returning.</para>
        /// <para>If the proc being executed is distributed, <see
        /// cref="ExecuteProcRequest.input_table_names">input_table_names</see>
        /// & <see
        /// cref="ExecuteProcRequest.input_column_names">input_column_names</see>
        /// may be passed to the proc to use for reading data, and <see
        /// cref="ExecuteProcRequest.output_table_names">output_table_names</see>
        /// may be passed to the proc to use for writing data.</para>
        /// <para>If the proc being executed is non-distributed, these table
        /// parameters will be ignored.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExecuteProcResponse executeProc( ExecuteProcRequest request_ )
        {
            ExecuteProcResponse actualResponse_ = SubmitRequest<ExecuteProcResponse>("/execute/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Executes a proc.</summary>
        /// <remarks><para>This endpoint is asynchronous and does not wait for
        /// the proc to complete before returning.</para>
        /// <para>If the proc being executed is distributed, <paramref
        /// name="input_table_names" /> & <paramref name="input_column_names"
        /// /> may be passed to the proc to use for reading data, and <paramref
        /// name="output_table_names" /> may be passed to the proc to use for
        /// writing data.</para>
        /// <para>If the proc being executed is non-distributed, these table
        /// parameters will be ignored.</para></remarks>
        ///
        /// <param name="proc_name">Name of the proc to execute. Must be the
        /// name of a currently existing proc.</param>
        /// <param name="_params">A map containing named parameters to pass to
        /// the proc. Each key/value pair specifies the name of a parameter and
        /// its value. The default value is an empty Dictionary.</param>
        /// <param name="bin_params">A map containing named binary parameters
        /// to pass to the proc. Each key/value pair specifies the name of a
        /// parameter and its value. The default value is an empty Dictionary.
        /// </param>
        /// <param name="input_table_names">Names of the tables containing data
        /// to be passed to the proc. Each name specified must be the name of a
        /// currently existing table, in [schema_name.]table_name format, using
        /// standard <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. If no table names are
        /// specified, no data will be passed to the proc.  This parameter is
        /// ignored if the proc has a non-distributed execution mode. The
        /// default value is an empty List.</param>
        /// <param name="input_column_names">Map of table names from <paramref
        /// name="input_table_names" /> to lists of names of columns from those
        /// tables that will be passed to the proc. Each column name specified
        /// must be the name of an existing column in the corresponding table.
        /// If a table name from <paramref name="input_table_names" /> is not
        /// included, all columns from that table will be passed to the proc.
        /// This parameter is ignored if the proc has a non-distributed
        /// execution mode. The default value is an empty Dictionary.</param>
        /// <param name="output_table_names">Names of the tables to which
        /// output data from the proc will be written, each in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>. If a specified table does
        /// not exist, it will automatically be created with the same schema as
        /// the corresponding table (by order) from <paramref
        /// name="input_table_names" />, excluding any primary and shard keys.
        /// If a specified table is a non-persistent result table, it must not
        /// have primary or shard keys. If no table names are specified, no
        /// output data can be returned from the proc. This parameter is
        /// ignored if the proc has a non-distributed execution mode. The
        /// default value is an empty List.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteProcRequest.Options.CACHE_INPUT">CACHE_INPUT</see>:
        ///         </term>
        ///         <description>A comma-delimited list of table names from
        ///         <paramref name="input_table_names" /> from which input data
        ///         will be cached for use in subsequent calls to <see
        ///         cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>
        ///         with the <see
        ///         cref="ExecuteProcRequest.Options.USE_CACHED_INPUT">USE_CACHED_INPUT</see>
        ///         option. Cached input data will be retained until the proc
        ///         status is cleared with the <see
        ///         cref="showProcStatus(string,IDictionary{string,string})">clear_complete</see>
        ///         option of <see
        ///         cref="showProcStatus(string,IDictionary{string,string})">showProcStatus</see>
        ///         and all proc instances using the cached data have
        ///         completed. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteProcRequest.Options.USE_CACHED_INPUT">USE_CACHED_INPUT</see>:
        ///         </term>
        ///         <description>A comma-delimited list of run IDs (as returned
        ///         from prior calls to <see
        ///         cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>)
        ///         of running or completed proc instances from which input
        ///         data cached using the <see
        ///         cref="ExecuteProcRequest.Options.CACHE_INPUT">CACHE_INPUT</see>
        ///         option will be used. Cached input data will not be used for
        ///         any tables specified in <paramref name="input_table_names"
        ///         />, but data from all other tables cached for the specified
        ///         run IDs will be passed to the proc. If the same table was
        ///         cached for multiple specified run IDs, the cached data from
        ///         the first run ID specified in the list that includes that
        ///         table will be used. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteProcRequest.Options.RUN_TAG">RUN_TAG</see>:
        ///         </term>
        ///         <description>A string that, if not empty, can be used in
        ///         subsequent calls to <see
        ///         cref="showProcStatus(string,IDictionary{string,string})">showProcStatus</see>
        ///         or <see
        ///         cref="killProc(string,IDictionary{string,string})">killProc</see>
        ///         to identify the proc instance. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteProcRequest.Options.MAX_OUTPUT_LINES">MAX_OUTPUT_LINES</see>:
        ///         </term>
        ///         <description>The maximum number of lines of output from
        ///         stdout and stderr to return via <see
        ///         cref="showProcStatus(string,IDictionary{string,string})">showProcStatus</see>.
        ///         If the number of lines output exceeds the maximum, earlier
        ///         lines are discarded. The default value is '100'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteProcRequest.Options.EXECUTE_AT_STARTUP">EXECUTE_AT_STARTUP</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteProcRequest.Options.TRUE">TRUE</see>, an
        ///         instance of the proc will run when the database is started
        ///         instead of running immediately. The <see
        ///         cref="ExecuteProcResponse.run_id">run_id</see> can be
        ///         retrieved using <see
        ///         cref="showProc(string,IDictionary{string,string})">showProc</see>
        ///         and used in <see
        ///         cref="showProcStatus(string,IDictionary{string,string})">showProcStatus</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteProcRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteProcRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteProcRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteProcRequest.Options.EXECUTE_AT_STARTUP_AS">EXECUTE_AT_STARTUP_AS</see>:
        ///         </term>
        ///         <description>Sets the alternate user name to execute this
        ///         proc instance as when <see
        ///         cref="ExecuteProcRequest.Options.EXECUTE_AT_STARTUP">EXECUTE_AT_STARTUP</see>
        ///         is <see cref="ExecuteProcRequest.Options.TRUE">TRUE</see>.
        ///         The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExecuteProcResponse executeProc( string proc_name,
                                                IDictionary<string, string> _params = null,
                                                IDictionary<string, byte[]> bin_params = null,
                                                IList<string> input_table_names = null,
                                                IDictionary<string, IList<string>> input_column_names = null,
                                                IList<string> output_table_names = null,
                                                IDictionary<string, string> options = null )
        {
            return executeProc( new ExecuteProcRequest( proc_name, _params, bin_params,
                                                        input_table_names,
                                                        input_column_names,
                                                        output_table_names, options ) );
        }

        /// <summary>Execute a SQL statement (query, DML, or DDL).</summary>
        /// <remarks><para> See <a href="../../../sql/" target="_top">SQL
        /// Support</a> for the complete set of supported SQL commands.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExecuteSqlResponse executeSql( ExecuteSqlRequest request_ )
        {
            RawExecuteSqlResponse actualResponse_ = SubmitRequest<RawExecuteSqlResponse>("/execute/sql", request_, false);

            ExecuteSqlResponse response_ = new ExecuteSqlResponse();
            response_.count_affected = actualResponse_.count_affected;
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            response_.paging_table = actualResponse_.paging_table;
            response_.info = actualResponse_.info;
            return response_;
        }

        /// <summary>Execute a SQL statement (query, DML, or DDL).</summary>
        /// <remarks><para> See <a href="../../../sql/" target="_top">SQL
        /// Support</a> for the complete set of supported SQL commands.</para>
        /// </remarks>
        ///
        /// <param name="statement">SQL statement (query, DML, or DDL) to be
        /// executed</param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results). The default value is 0. The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT.</param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or END_OF_SET (-9999) to indicate
        /// that the maximum number of results allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the <a
        /// href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration. Use <see
        /// cref="ExecuteSqlResponse.has_more_records">has_more_records</see>
        /// to see if more records exist in the result to be fetched, and
        /// <paramref name="offset" /> & <paramref name="limit" /> to request
        /// subsequent pages of results. The default value is -9999.</param>
        /// <param name="request_schema_str">Avro schema of <paramref
        /// name="data" />. The default value is ''.</param>
        /// <param name="data">An array of binary-encoded data for the records
        /// to be binded to the SQL query.  Or use <see
        /// cref="ExecuteSqlRequest.Options.QUERY_PARAMETERS">QUERY_PARAMETERS</see>
        /// to pass the data in JSON format. The default value is an empty
        /// List.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.COST_BASED_OPTIMIZATION">COST_BASED_OPTIMIZATION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>,
        ///         disables the cost-based optimization of the given query.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.DISTRIBUTED_JOINS">DISTRIBUTED_JOINS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>, enables
        ///         the use of distributed joins in servicing the given query.
        ///         Any query requiring a distributed join will succeed, though
        ///         hints can be used in the query to change the distribution
        ///         of the source data to allow the query to succeed.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.DISTRIBUTED_OPERATIONS">DISTRIBUTED_OPERATIONS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>, enables
        ///         the use of distributed operations in servicing the given
        ///         query.  Any query requiring a distributed join will
        ///         succeed, though hints can be used in the query to change
        ///         the distribution of the source data to allow the query to
        ///         succeed.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision
        ///         error-suppression policy for inserting into or updating a
        ///         table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>, only used when primary key
        ///         record collisions are rejected (<see
        ///         cref="ExecuteSqlRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>).  If
        ///         set to <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>, any
        ///         record insert/update that is rejected for resulting in a
        ///         primary key collision with an existing table record will be
        ///         ignored with no error generated.  If <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>, the
        ///         rejection of any insert/update for resulting in a primary
        ///         key collision will cause an error to be reported.  If the
        ///         specified table does not have a primary key or if <see
        ///         cref="ExecuteSqlRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>,
        ///         then this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Ignore inserts/updates that result in
        ///                 primary key collisions with existing records
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat as errors any inserts/updates
        ///                 that result in primary key collisions with existing
        ///                 records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.LATE_MATERIALIZATION">LATE_MATERIALIZATION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>,
        ///         Joins/Filters results  will always be materialized ( saved
        ///         to result tables format).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.PAGING_TABLE">PAGING_TABLE</see>:
        ///         </term>
        ///         <description>When empty or the specified paging table not
        ///         exists, the system will create a paging table and return
        ///         when query output has more records than the user asked. If
        ///         the paging table exists in the system, the records from the
        ///         paging table are returned without evaluating the query.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.PAGING_TABLE_TTL">PAGING_TABLE_TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the paging table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.PARALLEL_EXECUTION">PARALLEL_EXECUTION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>,
        ///         disables the parallel step execution of the given query.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.PLAN_CACHE">PLAN_CACHE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>,
        ///         disables plan caching for the given query.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.PREPARE_MODE">PREPARE_MODE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>, compiles
        ///         a query into an execution plan and saves it in query cache.
        ///         Query execution is not performed and an empty response will
        ///         be returned to user.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.PRESERVE_DICT_ENCODING">PRESERVE_DICT_ENCODING</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>, then
        ///         columns that were dict encoded in the source table will be
        ///         dict encoded in the projection table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.QUERY_PARAMETERS">QUERY_PARAMETERS</see>:
        ///         </term>
        ///         <description>Query parameters in JSON array or arrays (for
        ///         inserting multiple rows).  This can be used instead of
        ///         <paramref name="data" /> and <paramref
        ///         name="request_schema_str" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.RESULTS_CACHING">RESULTS_CACHING</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>,
        ///         disables caching of the results of the given query.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.RULE_BASED_OPTIMIZATION">RULE_BASED_OPTIMIZATION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>,
        ///         disables rule-based rewrite optimizations for the given
        ///         query.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.SSQ_OPTIMIZATION">SSQ_OPTIMIZATION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>, scalar
        ///         subqueries will be translated into joins.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="ExecuteSqlRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the intermediate result tables
        ///         used in query execution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision policy for
        ///         inserting into or updating a table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>. If set to <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>, any
        ///         existing table record with primary key values that match
        ///         those of a record being inserted or updated will be
        ///         replaced by that record. If set to <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>, any
        ///         such primary key collision will result in the insert/update
        ///         being rejected and the error handled as determined by <see
        ///         cref="ExecuteSqlRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>.
        ///         If the specified table does not have a primary key, then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Replace the collided-into record with
        ///                 the record inserted or updated when a new/modified
        ///                 record causes a primary key collision with an
        ///                 existing record</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Reject the insert or update when it
        ///                 results in a primary key collision with an existing
        ///                 record</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.VALIDATE_CHANGE_COLUMN">VALIDATE_CHANGE_COLUMN</see>:
        ///         </term>
        ///         <description>When changing a column using alter table,
        ///         validate the change before applying it. If <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>, then
        ///         validate all values. A value too large (or too long) for
        ///         the new type will prevent any change. If <see
        ///         cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>, then
        ///         when a value is too large or long, it will be truncated.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExecuteSqlRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExecuteSqlRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExecuteSqlRequest.Options.CURRENT_SCHEMA">CURRENT_SCHEMA</see>:
        ///         </term>
        ///         <description>Use the supplied value as the <a
        ///         href="../../../concepts/schemas/#default-schema"
        ///         target="_top">default schema</a> when processing this SQL
        ///         command.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExecuteSqlResponse executeSql( string statement,
                                              long offset = 0,
                                              long limit = -9999,
                                              string request_schema_str = "",
                                              IList<byte[]> data = null,
                                              IDictionary<string, string> options = null )
        {
            return executeSql( new ExecuteSqlRequest( statement, offset, limit,
                                                      request_schema_str, data, options ) );
        }

        /// <summary>Export query metrics to a given destination.Returns query
        /// metrics.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExportQueryMetricsResponse exportQueryMetrics( ExportQueryMetricsRequest request_ )
        {
            ExportQueryMetricsResponse actualResponse_ = SubmitRequest<ExportQueryMetricsResponse>("/export/query/metrics", request_, false);

            return actualResponse_;
        }

        /// <summary>Export query metrics to a given destination.Returns query
        /// metrics.</summary>
        ///
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ExportQueryMetricsRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Filter for multi query export</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportQueryMetricsRequest.Options.FILEPATH">FILEPATH</see>:
        ///         </term>
        ///         <description>Path to export target specified as a filename
        ///         or existing directory.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportQueryMetricsRequest.Options.FORMAT">FORMAT</see>:
        ///         </term>
        ///         <description>Specifies which format to export the metrics.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportQueryMetricsRequest.Options.JSON">JSON</see>:
        ///                 </term>
        ///                 <description>Generic json output</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportQueryMetricsRequest.Options.JSON_TRACE_EVENT">JSON_TRACE_EVENT</see>:
        ///                 </term>
        ///                 <description>Chromium/Perfetto trace event format
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExportQueryMetricsRequest.Options.JSON">JSON</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportQueryMetricsRequest.Options.JOB_ID">JOB_ID</see>:
        ///         </term>
        ///         <description>Export query metrics for the currently running
        ///         job</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportQueryMetricsRequest.Options.LIMIT">LIMIT</see>:
        ///         </term>
        ///         <description>Record limit per file for multi query export
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExportQueryMetricsResponse exportQueryMetrics( IDictionary<string, string> options = null )
        {
            return exportQueryMetrics( new ExportQueryMetricsRequest( options ) );
        }

        /// <summary>Export records from a table to files.</summary>
        /// <remarks><para>All tables can be exported, in full or partial (see
        /// <see
        /// cref="ExportRecordsToFilesRequest.Options.COLUMNS_TO_EXPORT">COLUMNS_TO_EXPORT</see>
        /// and <see
        /// cref="ExportRecordsToFilesRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>).
        /// Additional filtering can be applied when using export table with
        /// expression through SQL. Default destination is KIFS, though other
        /// storage types (Azure, S3, GCS, and HDFS) are supported through <see
        /// cref="ExportRecordsToFilesRequest.Options.DATASINK_NAME">DATASINK_NAME</see>;
        /// see <see
        /// cref="createDatasink(CreateDatasinkRequest)">createDatasink</see>.</para>
        /// <para>Server's local file system is not supported.  Default file
        /// format is delimited text. See options for different file types and
        /// different options for each file type.  Table is saved to a single
        /// file if within max file size limits (may vary depending on datasink
        /// type).  If not, then table is split into multiple files; these may
        /// be smaller than the max size limit.</para>
        /// <para>All filenames created are returned in the response.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExportRecordsToFilesResponse exportRecordsToFiles( ExportRecordsToFilesRequest request_ )
        {
            ExportRecordsToFilesResponse actualResponse_ = SubmitRequest<ExportRecordsToFilesResponse>("/export/records/tofiles", request_, false);

            return actualResponse_;
        }

        /// <summary>Export records from a table to files.</summary>
        /// <remarks><para>All tables can be exported, in full or partial (see
        /// <see
        /// cref="ExportRecordsToFilesRequest.Options.COLUMNS_TO_EXPORT">COLUMNS_TO_EXPORT</see>
        /// and <see
        /// cref="ExportRecordsToFilesRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>).
        /// Additional filtering can be applied when using export table with
        /// expression through SQL. Default destination is KIFS, though other
        /// storage types (Azure, S3, GCS, and HDFS) are supported through <see
        /// cref="ExportRecordsToFilesRequest.Options.DATASINK_NAME">DATASINK_NAME</see>;
        /// see <see
        /// cref="createDatasink(string,string,IDictionary{string,string})">createDatasink</see>.</para>
        /// <para>Server's local file system is not supported.  Default file
        /// format is delimited text. See options for different file types and
        /// different options for each file type.  Table is saved to a single
        /// file if within max file size limits (may vary depending on datasink
        /// type).  If not, then table is split into multiple files; these may
        /// be smaller than the max size limit.</para>
        /// <para>All filenames created are returned in the response.</para>
        /// </remarks>
        ///
        /// <param name="table_name"></param>
        /// <param name="filepath">Path to data export target.  If <paramref
        /// name="filepath" /> has a file extension, it is read as the name of
        /// a file. If <paramref name="filepath" /> is a directory, then the
        /// source table name with a random UUID appended will be used as the
        /// name of each exported file, all written to that directory. If
        /// filepath is a filename, then all exported files will have a random
        /// UUID appended to the given name.  In either case, the target
        /// directory specified or implied must exist.  The names of all
        /// exported files are returned in the response.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Number of records to be exported as a batch.
        ///         The default value is '1000000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:
        ///         </term>
        ///         <description>For each source column specified, applies the
        ///         column-property-bound format.  Currently supported column
        ///         properties include date, time, & datetime. The parameter
        ///         value must be formatted as a JSON string of maps of column
        ///         names to maps of column properties to their corresponding
        ///         column formats, e.g., '{ "order_date" : { "date" :
        ///         "%Y.%m.%d" }, "order_time" : { "time" : "%H:%M:%S" } }'.
        ///         See <see
        ///         cref="ExportRecordsToFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>
        ///         for valid format syntax.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.COLUMNS_TO_EXPORT">COLUMNS_TO_EXPORT</see>:
        ///         </term>
        ///         <description>Specifies a comma-delimited list of columns
        ///         from the source table to export, written to the output file
        ///         in the order they are given.
        ///         Column names can be provided, in which case the target file
        ///         will use those names as the column headers as well.
        ///         Alternatively, column numbers can be specified--discretely
        ///         or as a range.  For example, a value of '5,7,1..3' will
        ///         write values from the fifth column in the source table into
        ///         the first column in the target file, from the seventh
        ///         column in the source table into the second column in the
        ///         target file, and from the first through third columns in
        ///         the source table into the third through fifth columns in
        ///         the target file.
        ///         Mutually exclusive with <see
        ///         cref="ExportRecordsToFilesRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>:
        ///         </term>
        ///         <description>Comma-separated list of column names or column
        ///         numbers to not export.  All columns in the source table not
        ///         specified will be written to the target file in the order
        ///         they appear in the table definition.  Mutually exclusive
        ///         with <see
        ///         cref="ExportRecordsToFilesRequest.Options.COLUMNS_TO_EXPORT">COLUMNS_TO_EXPORT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.DATASINK_NAME">DATASINK_NAME</see>:
        ///         </term>
        ///         <description>Datasink name, created using <see
        ///         cref="createDatasink(string,string,IDictionary{string,string})">createDatasink</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:
        ///         </term>
        ///         <description>Specifies the default format to use to write
        ///         data.  Currently supported column properties include date,
        ///         time, & datetime.  This default column-property-bound
        ///         format can be overridden by specifying a column property &
        ///         format for a given source column in <see
        ///         cref="ExportRecordsToFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>.
        ///         For each specified annotation, the format will apply to all
        ///         columns with that annotation unless custom <see
        ///         cref="ExportRecordsToFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>
        ///         for that annotation are specified.
        ///         The parameter value must be formatted as a JSON string that
        ///         is a map of column properties to their respective column
        ///         formats, e.g., '{ "date" : "%Y.%m.%d", "time" : "%H:%M:%S"
        ///         }'.  Column formats are specified as a string of control
        ///         characters and plain text. The supported control characters
        ///         are 'Y', 'm', 'd', 'H', 'M', 'S', and 's', which follow the
        ///         Linux 'strptime()' specification, as well as 's', which
        ///         specifies seconds and fractional seconds (though the
        ///         fractional component will be truncated past milliseconds).
        ///         Formats for the 'date' annotation must include the 'Y',
        ///         'm', and 'd' control characters. Formats for the 'time'
        ///         annotation must include the 'H', 'M', and either 'S' or 's'
        ///         (but not both) control characters. Formats for the
        ///         'datetime' annotation meet both the 'date' and 'time'
        ///         control character requirements. For example, '{"datetime" :
        ///         "%m/%d/%Y %H:%M:%S" }' would be used to write text as
        ///         "05/04/2000 12:12:11"</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.EXPORT_DDL">EXPORT_DDL</see>:
        ///         </term>
        ///         <description>Save DDL to a separate file. The default value
        ///         is 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.FILE_EXTENSION">FILE_EXTENSION</see>:
        ///         </term>
        ///         <description>Extension to give the export file. The default
        ///         value is '.csv'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>:
        ///         </term>
        ///         <description>Specifies the file format to use when
        ///         exporting data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>:
        ///                 </term>
        ///                 <description>Delimited text file format; e.g., CSV,
        ///                 TSV, PSV, etc.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.PARQUET">PARQUET</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExportRecordsToFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.KINETICA_HEADER">KINETICA_HEADER</see>:
        ///         </term>
        ///         <description>Whether to include a Kinetica proprietary
        ///         header. Will not be written if <see
        ///         cref="ExportRecordsToFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>
        ///         is <see
        ///         cref="ExportRecordsToFilesRequest.Options.FALSE">FALSE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExportRecordsToFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.KINETICA_HEADER_DELIMITER">KINETICA_HEADER_DELIMITER</see>:
        ///         </term>
        ///         <description>If a Kinetica proprietary header is included,
        ///         then specify a property separator. Different from column
        ///         delimiter. The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:
        ///         </term>
        ///         <description>File compression type. GZip can be applied to
        ///         text and Parquet files.  Snappy can only be applied to
        ///         Parquet files, and is the default compression for them.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.UNCOMPRESSED">UNCOMPRESSED</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.SNAPPY">SNAPPY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.GZIP">GZIP</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.SINGLE_FILE">SINGLE_FILE</see>:
        ///         </term>
        ///         <description>Save records to a single file. This option may
        ///         be ignored if file size exceeds internal file size limits
        ///         (this limit will differ on different targets).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.OVERWRITE">OVERWRITE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExportRecordsToFilesRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.SINGLE_FILE_MAX_SIZE">SINGLE_FILE_MAX_SIZE</see>:
        ///         </term>
        ///         <description>Max file size (in MB) to allow saving to a
        ///         single file. May be overridden by target limitations. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:
        ///         </term>
        ///         <description>Specifies the character to write out to
        ///         delimit field values and field names in the header (if
        ///         present).
        ///         For <see
        ///         cref="ExportRecordsToFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="ExportRecordsToFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:
        ///         </term>
        ///         <description>Indicates whether to write out a header row.
        ///         For <see
        ///         cref="ExportRecordsToFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="ExportRecordsToFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExportRecordsToFilesRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToFilesRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:
        ///         </term>
        ///         <description>Specifies the character string that should be
        ///         written out for the null value in the data.
        ///         For <see
        ///         cref="ExportRecordsToFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="ExportRecordsToFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '\\N'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExportRecordsToFilesResponse exportRecordsToFiles( string table_name,
                                                                  string filepath,
                                                                  IDictionary<string, string> options = null )
        {
            return exportRecordsToFiles( new ExportRecordsToFilesRequest( table_name,
                                                                          filepath,
                                                                          options ) );
        }

        /// <summary>Exports records from source table to the specified target
        /// table in an external database</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExportRecordsToTableResponse exportRecordsToTable( ExportRecordsToTableRequest request_ )
        {
            ExportRecordsToTableResponse actualResponse_ = SubmitRequest<ExportRecordsToTableResponse>("/export/records/totable", request_, false);

            return actualResponse_;
        }

        /// <summary>Exports records from source table to the specified target
        /// table in an external database</summary>
        ///
        /// <param name="table_name">Name of the table from which the data will
        /// be exported to remote database, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="remote_query">Parameterized insert query to export
        /// gpudb table data into remote database. The default value is ''.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToTableRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Batch size, which determines how many rows to
        ///         export per round trip. The default value is '200000'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToTableRequest.Options.DATASINK_NAME">DATASINK_NAME</see>:
        ///         </term>
        ///         <description>Name of an existing external data sink to
        ///         which table name specified in <paramref name="table_name"
        ///         /> will be exported</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToTableRequest.Options.JDBC_SESSION_INIT_STATEMENT">JDBC_SESSION_INIT_STATEMENT</see>:
        ///         </term>
        ///         <description>Executes the statement per each jdbc session
        ///         before doing actual load. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToTableRequest.Options.JDBC_CONNECTION_INIT_STATEMENT">JDBC_CONNECTION_INIT_STATEMENT</see>:
        ///         </term>
        ///         <description>Executes the statement once before doing
        ///         actual load. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToTableRequest.Options.REMOTE_TABLE">REMOTE_TABLE</see>:
        ///         </term>
        ///         <description>Name of the target table to which source table
        ///         is exported. When this option is specified remote_query
        ///         cannot be specified. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToTableRequest.Options.USE_ST_GEOMFROM_CASTS">USE_ST_GEOMFROM_CASTS</see>:
        ///         </term>
        ///         <description>Wraps parametrized variables with
        ///         st_geomfromtext or st_geomfromwkb based on source column
        ///         type.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExportRecordsToTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ExportRecordsToTableRequest.Options.USE_INDEXED_PARAMETERS">USE_INDEXED_PARAMETERS</see>:
        ///         </term>
        ///         <description>Uses $n style syntax when generating insert
        ///         query for remote_table option.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ExportRecordsToTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ExportRecordsToTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ExportRecordsToTableResponse exportRecordsToTable( string table_name,
                                                                  string remote_query = "",
                                                                  IDictionary<string, string> options = null )
        {
            return exportRecordsToTable( new ExportRecordsToTableRequest( table_name,
                                                                          remote_query,
                                                                          options ) );
        }

        /// <summary>Filters data based on the specified expression.</summary>
        /// <remarks><para> The results are stored in a <a
        /// href="../../../concepts/filtered_views/" target="_top">result
        /// set</a> with the given <see
        /// cref="FilterRequest.view_name">view_name</see>.</para>
        /// <para>For details see <a href="../../../concepts/expressions/"
        /// target="_top">Expressions</a>.</para>
        /// <para>The response message contains the number of points for which
        /// the expression evaluated to be true, which is equivalent to the
        /// size of the result view.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterResponse filter( FilterRequest request_ )
        {
            FilterResponse actualResponse_ = SubmitRequest<FilterResponse>("/filter", request_, false);

            return actualResponse_;
        }

        /// <summary>Filters data based on the specified expression.</summary>
        /// <remarks><para> The results are stored in a <a
        /// href="../../../concepts/filtered_views/" target="_top">result
        /// set</a> with the given <paramref name="view_name" />.</para>
        /// <para>For details see <a href="../../../concepts/expressions/"
        /// target="_top">Expressions</a>.</para>
        /// <para>The response message contains the number of points for which
        /// the expression evaluated to be true, which is equivalent to the
        /// size of the result view.</para></remarks>
        ///
        /// <param name="table_name">Name of the table to filter, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  This may be the name of a
        /// table or a view (when chaining queries).</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="expression">The select expression to filter the
        /// specified table.  For details see <a
        /// href="../../../concepts/expressions/"
        /// target="_top">Expressions</a>.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterRequest.Options.TRUE">TRUE</see>, a unique
        ///         temporary table name will be generated in the sys_temp
        ///         schema and used in place of <paramref name="view_name" />.
        ///         This is always allowed even if the caller does not have
        ///         permission to create tables. The generated name is returned
        ///         in <see
        ///         cref="FilterResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterRequest.Options.TRUE">TRUE</see></term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterRequest.Options.VIEW_ID">VIEW_ID</see>:</term>
        ///         <description>view this filtered-view is part of. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see cref="FilterRequest.Options.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the view specified in <paramref
        ///         name="view_name" />.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterResponse filter( string table_name,
                                      string view_name,
                                      string expression,
                                      IDictionary<string, string> options = null )
        {
            return filter( new FilterRequest( table_name, view_name, expression, options ) );
        }

        /// <summary>Calculates which objects from a table are within a named
        /// area of interest (NAI/polygon).</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the matching objects are
        /// fully available. The response payload provides the count of the
        /// resulting set. A new resultant set (view) which satisfies the input
        /// NAI restriction specification is created with the name <see
        /// cref="FilterByAreaRequest.view_name">view_name</see> passed in as
        /// part of the input.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByAreaResponse filterByArea( FilterByAreaRequest request_ )
        {
            FilterByAreaResponse actualResponse_ = SubmitRequest<FilterByAreaResponse>("/filter/byarea", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which objects from a table are within a named
        /// area of interest (NAI/polygon).</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the matching objects are
        /// fully available. The response payload provides the count of the
        /// resulting set. A new resultant set (view) which satisfies the input
        /// NAI restriction specification is created with the name <paramref
        /// name="view_name" /> passed in as part of the input.</para>
        /// </remarks>
        ///
        /// <param name="table_name">Name of the table to filter, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  This may be the name of a
        /// table or a view (when chaining queries).</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="x_column_name">Name of the column containing the x
        /// values to be filtered.</param>
        /// <param name="x_vector">List of x coordinates of the vertices of the
        /// polygon representing the area to be filtered.</param>
        /// <param name="y_column_name">Name of the column containing the y
        /// values to be filtered.</param>
        /// <param name="y_vector">List of y coordinates of the vertices of the
        /// polygon representing the area to be filtered.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByAreaRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByAreaRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByAreaResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByAreaRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByAreaRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByAreaRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByAreaRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema provided is
        ///         non-existent, it will be automatically created.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByAreaResponse filterByArea( string table_name,
                                                  string view_name,
                                                  string x_column_name,
                                                  IList<double> x_vector,
                                                  string y_column_name,
                                                  IList<double> y_vector,
                                                  IDictionary<string, string> options = null )
        {
            return filterByArea( new FilterByAreaRequest( table_name, view_name,
                                                          x_column_name, x_vector,
                                                          y_column_name, y_vector, options ) );
        }

        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a named area of interest (NAI/polygon).</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the matching objects are
        /// fully available. The response payload provides the count of the
        /// resulting set. A new resultant set (view) which satisfies the input
        /// NAI restriction specification is created with the name <see
        /// cref="FilterByAreaGeometryRequest.view_name">view_name</see> passed
        /// in as part of the input.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByAreaGeometryResponse filterByAreaGeometry( FilterByAreaGeometryRequest request_ )
        {
            FilterByAreaGeometryResponse actualResponse_ = SubmitRequest<FilterByAreaGeometryResponse>("/filter/byarea/geometry", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a named area of interest (NAI/polygon).</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the matching objects are
        /// fully available. The response payload provides the count of the
        /// resulting set. A new resultant set (view) which satisfies the input
        /// NAI restriction specification is created with the name <paramref
        /// name="view_name" /> passed in as part of the input.</para>
        /// </remarks>
        ///
        /// <param name="table_name">Name of the table to filter, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  This may be the name of a
        /// table or a view (when chaining queries).</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="column_name">Name of the geospatial geometry column to
        /// be filtered.</param>
        /// <param name="x_vector">List of x coordinates of the vertices of the
        /// polygon representing the area to be filtered.</param>
        /// <param name="y_vector">List of y coordinates of the vertices of the
        /// polygon representing the area to be filtered.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByAreaGeometryRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByAreaGeometryRequest.Options.TRUE">TRUE</see>,
        ///         a unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByAreaGeometryResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByAreaGeometryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByAreaGeometryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByAreaGeometryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByAreaGeometryRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  The schema for the
        ///         newly created view. If the schema is non-existent, it will
        ///         be automatically created.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByAreaGeometryResponse filterByAreaGeometry( string table_name,
                                                                  string view_name,
                                                                  string column_name,
                                                                  IList<double> x_vector,
                                                                  IList<double> y_vector,
                                                                  IDictionary<string, string> options = null )
        {
            return filterByAreaGeometry( new FilterByAreaGeometryRequest( table_name,
                                                                          view_name,
                                                                          column_name,
                                                                          x_vector,
                                                                          y_vector,
                                                                          options ) );
        }

        /// <summary>Calculates how many objects within the given table lie in
        /// a rectangular box.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set which satisfies the input NAI restriction
        /// specification is also created when a <see
        /// cref="FilterByBoxRequest.view_name">view_name</see> is passed in as
        /// part of the input payload.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByBoxResponse filterByBox( FilterByBoxRequest request_ )
        {
            FilterByBoxResponse actualResponse_ = SubmitRequest<FilterByBoxResponse>("/filter/bybox", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates how many objects within the given table lie in
        /// a rectangular box.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set which satisfies the input NAI restriction
        /// specification is also created when a <paramref name="view_name" />
        /// is passed in as part of the input payload.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the bounding
        /// box operation will be performed, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="x_column_name">Name of the column on which to perform
        /// the bounding box query. Must be a valid numeric column.</param>
        /// <param name="min_x">Lower bound for the column chosen by <paramref
        /// name="x_column_name" />.  Must be less than or equal to <paramref
        /// name="max_x" />.</param>
        /// <param name="max_x">Upper bound for <paramref name="x_column_name"
        /// />.  Must be greater than or equal to <paramref name="min_x" />.
        /// </param>
        /// <param name="y_column_name">Name of a column on which to perform
        /// the bounding box query. Must be a valid numeric column.</param>
        /// <param name="min_y">Lower bound for <paramref name="y_column_name"
        /// />. Must be less than or equal to <paramref name="max_y" />.
        /// </param>
        /// <param name="max_y">Upper bound for <paramref name="y_column_name"
        /// />. Must be greater than or equal to <paramref name="min_y" />.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByBoxRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByBoxRequest.Options.TRUE">TRUE</see>, a unique
        ///         temporary table name will be generated in the sys_temp
        ///         schema and used in place of <paramref name="view_name" />.
        ///         This is always allowed even if the caller does not have
        ///         permission to create tables. The generated name is returned
        ///         in <see
        ///         cref="FilterByBoxResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByBoxRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByBoxRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByBoxRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByBoxRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByBoxResponse filterByBox( string table_name,
                                                string view_name,
                                                string x_column_name,
                                                double min_x,
                                                double max_x,
                                                string y_column_name,
                                                double min_y,
                                                double max_y,
                                                IDictionary<string, string> options = null )
        {
            return filterByBox( new FilterByBoxRequest( table_name, view_name,
                                                        x_column_name, min_x, max_x,
                                                        y_column_name, min_y, max_y,
                                                        options ) );
        }

        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a rectangular box.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set which satisfies the input NAI restriction
        /// specification is also created when a <see
        /// cref="FilterByBoxGeometryRequest.view_name">view_name</see> is
        /// passed in as part of the input payload.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByBoxGeometryResponse filterByBoxGeometry( FilterByBoxGeometryRequest request_ )
        {
            FilterByBoxGeometryResponse actualResponse_ = SubmitRequest<FilterByBoxGeometryResponse>("/filter/bybox/geometry", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a rectangular box.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set which satisfies the input NAI restriction
        /// specification is also created when a <paramref name="view_name" />
        /// is passed in as part of the input payload.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the bounding
        /// box operation will be performed, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. Must be an existing table.
        /// </param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="column_name">Name of the geospatial geometry column to
        /// be filtered.</param>
        /// <param name="min_x">Lower bound for the x-coordinate of the
        /// rectangular box.  Must be less than or equal to <paramref
        /// name="max_x" />.</param>
        /// <param name="max_x">Upper bound for the x-coordinate of the
        /// rectangular box.  Must be greater than or equal to <paramref
        /// name="min_x" />.</param>
        /// <param name="min_y">Lower bound for the y-coordinate of the
        /// rectangular box. Must be less than or equal to <paramref
        /// name="max_y" />.</param>
        /// <param name="max_y">Upper bound for the y-coordinate of the
        /// rectangular box. Must be greater than or equal to <paramref
        /// name="min_y" />.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByBoxGeometryRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByBoxGeometryRequest.Options.TRUE">TRUE</see>,
        ///         a unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByBoxGeometryResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByBoxGeometryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByBoxGeometryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByBoxGeometryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByBoxGeometryRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema provided is
        ///         non-existent, it will be automatically created.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByBoxGeometryResponse filterByBoxGeometry( string table_name,
                                                                string view_name,
                                                                string column_name,
                                                                double min_x,
                                                                double max_x,
                                                                double min_y,
                                                                double max_y,
                                                                IDictionary<string, string> options = null )
        {
            return filterByBoxGeometry( new FilterByBoxGeometryRequest( table_name,
                                                                        view_name,
                                                                        column_name,
                                                                        min_x, max_x,
                                                                        min_y, max_y,
                                                                        options ) );
        }

        /// <summary>Applies a geometry filter against a geospatial geometry
        /// column in a given table or view.</summary>
        /// <remarks><para>The filtering geometry is provided by <see
        /// cref="FilterByGeometryRequest.input_wkt">input_wkt</see>.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByGeometryResponse filterByGeometry( FilterByGeometryRequest request_ )
        {
            FilterByGeometryResponse actualResponse_ = SubmitRequest<FilterByGeometryResponse>("/filter/bygeometry", request_, false);

            return actualResponse_;
        }

        /// <summary>Applies a geometry filter against a geospatial geometry
        /// column in a given table or view.</summary>
        /// <remarks><para>The filtering geometry is provided by <paramref
        /// name="input_wkt" />.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the filter by
        /// geometry will be performed, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing table
        /// or view containing a geospatial geometry column.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="column_name">Name of the column to be used in the
        /// filter. Must be a geospatial geometry column.</param>
        /// <param name="input_wkt">A geometry in WKT format that will be used
        /// to filter the objects in <paramref name="table_name" />. The
        /// default value is ''.</param>
        /// <param name="operation">The geometric filtering operation to
        /// perform.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Operation.CONTAINS">CONTAINS</see>:
        ///         </term>
        ///         <description>Matches records that contain the given WKT in
        ///         <paramref name="input_wkt" />, i.e. the given WKT is within
        ///         the bounds of a record's geometry.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Operation.CROSSES">CROSSES</see>:
        ///         </term>
        ///         <description>Matches records that cross the given WKT.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Operation.DISJOINT">DISJOINT</see>:
        ///         </term>
        ///         <description>Matches records that are disjoint from the
        ///         given WKT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Operation.EQUALS">EQUALS</see>:
        ///         </term>
        ///         <description>Matches records that are the same as the given
        ///         WKT.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Operation.INTERSECTS">INTERSECTS</see>:
        ///         </term>
        ///         <description>Matches records that intersect the given WKT.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Operation.OVERLAPS">OVERLAPS</see>:
        ///         </term>
        ///         <description>Matches records that overlap the given WKT.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Operation.TOUCHES">TOUCHES</see>:
        ///         </term>
        ///         <description>Matches records that touch the given WKT.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Operation.WITHIN">WITHIN</see>:
        ///         </term>
        ///         <description>Matches records that are within the given WKT.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByGeometryRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByGeometryResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByGeometryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByGeometryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByGeometryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByGeometryRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema provided is
        ///         non-existent, it will be automatically created.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByGeometryResponse filterByGeometry( string table_name,
                                                          string view_name,
                                                          string column_name,
                                                          string input_wkt,
                                                          string operation,
                                                          IDictionary<string, string> options = null )
        {
            return filterByGeometry( new FilterByGeometryRequest( table_name, view_name,
                                                                  column_name, input_wkt,
                                                                  operation, options ) );
        }

        /// <summary>Calculates which records from a table have values in the
        /// given list for the corresponding column.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set (view) which satisfies the input filter
        /// specification is also created if a <see
        /// cref="FilterByListRequest.view_name">view_name</see> is passed in
        /// as part of the request.</para>
        /// <para>For example, if a type definition has the columns 'x' and
        /// 'y', then a filter by list query with the column map {"x":["10.1",
        /// "2.3"], "y":["0.0", "-31.5", "42.0"]} will return the count of all
        /// data points whose x and y values match both in the respective x-
        /// and y-lists, e.g., "x = 10.1 and y = 0.0", "x = 2.3 and y = -31.5",
        /// etc. However, a record with "x = 10.1 and y = -31.5" or "x = 2.3
        /// and y = 0.0" would not be returned because the values in the given
        /// lists do not correspond.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByListResponse filterByList( FilterByListRequest request_ )
        {
            FilterByListResponse actualResponse_ = SubmitRequest<FilterByListResponse>("/filter/bylist", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which records from a table have values in the
        /// given list for the corresponding column.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set (view) which satisfies the input filter
        /// specification is also created if a <paramref name="view_name" /> is
        /// passed in as part of the request.</para>
        /// <para>For example, if a type definition has the columns 'x' and
        /// 'y', then a filter by list query with the column map {"x":["10.1",
        /// "2.3"], "y":["0.0", "-31.5", "42.0"]} will return the count of all
        /// data points whose x and y values match both in the respective x-
        /// and y-lists, e.g., "x = 10.1 and y = 0.0", "x = 2.3 and y = -31.5",
        /// etc. However, a record with "x = 10.1 and y = -31.5" or "x = 2.3
        /// and y = 0.0" would not be returned because the values in the given
        /// lists do not correspond.</para></remarks>
        ///
        /// <param name="table_name">Name of the table to filter, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  This may be the name of a
        /// table or a view (when chaining queries).</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="column_values_map">List of values for the
        /// corresponding column in the table</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByListRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByListRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByListResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByListRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByListRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByListRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByListRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema provided is
        ///         non-existent, it will be automatically created.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByListRequest.Options.FILTER_MODE">FILTER_MODE</see>:
        ///         </term>
        ///         <description>String indicating the filter mode, either
        ///         'in_list' or 'not_in_list'.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByListRequest.Options.IN_LIST">IN_LIST</see>:
        ///                 </term>
        ///                 <description>The filter will match all items that
        ///                 are in the provided list(s).</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByListRequest.Options.NOT_IN_LIST">NOT_IN_LIST</see>:
        ///                 </term>
        ///                 <description>The filter will match all items that
        ///                 are not in the provided list(s).</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByListRequest.Options.IN_LIST">IN_LIST</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByListResponse filterByList( string table_name,
                                                  string view_name,
                                                  IDictionary<string, IList<string>> column_values_map,
                                                  IDictionary<string, string> options = null )
        {
            return filterByList( new FilterByListRequest( table_name, view_name,
                                                          column_values_map, options ) );
        }

        /// <summary>Calculates which objects from a table lie within a circle
        /// with the given radius and center point (i.e. circular NAI).
        /// </summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set (view) which satisfies the input circular
        /// NAI restriction specification is also created if a <see
        /// cref="FilterByRadiusRequest.view_name">view_name</see> is passed in
        /// as part of the request.</para>
        /// <para>For track data, all track points that lie within the circle
        /// plus one point on either side of the circle (if the track goes
        /// beyond the circle) will be included in the result.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByRadiusResponse filterByRadius( FilterByRadiusRequest request_ )
        {
            FilterByRadiusResponse actualResponse_ = SubmitRequest<FilterByRadiusResponse>("/filter/byradius", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which objects from a table lie within a circle
        /// with the given radius and center point (i.e. circular NAI).
        /// </summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set (view) which satisfies the input circular
        /// NAI restriction specification is also created if a <paramref
        /// name="view_name" /> is passed in as part of the request.</para>
        /// <para>For track data, all track points that lie within the circle
        /// plus one point on either side of the circle (if the track goes
        /// beyond the circle) will be included in the result.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the filter by
        /// radius operation will be performed, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="x_column_name">Name of the column to be used for the
        /// x-coordinate (the longitude) of the center.</param>
        /// <param name="x_center">Value of the longitude of the center. Must
        /// be within [-180.0, 180.0]. The minimum allowed value is -180. The
        /// maximum allowed value is 180.</param>
        /// <param name="y_column_name">Name of the column to be used for the
        /// y-coordinate-the latitude-of the center.</param>
        /// <param name="y_center">Value of the latitude of the center. Must be
        /// within [-90.0, 90.0]. The minimum allowed value is -90. The maximum
        /// allowed value is 90.</param>
        /// <param name="radius">The radius of the circle within which the
        /// search will be performed. Must be a non-zero positive value. It is
        /// in meters; so, for example, a value of '42000' means 42 km. The
        /// minimum allowed value is 0. The maximum allowed value is MAX_INT.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByRadiusRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByRadiusRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByRadiusResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByRadiusRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByRadiusRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByRadiusRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByRadiusRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema
        ///         which is to contain the newly created view. If the schema
        ///         is non-existent, it will be automatically created.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByRadiusResponse filterByRadius( string table_name,
                                                      string view_name,
                                                      string x_column_name,
                                                      double x_center,
                                                      string y_column_name,
                                                      double y_center,
                                                      double radius,
                                                      IDictionary<string, string> options = null )
        {
            return filterByRadius( new FilterByRadiusRequest( table_name, view_name,
                                                              x_column_name, x_center,
                                                              y_column_name, y_center,
                                                              radius, options ) );
        }

        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a circle with the given radius and center point (i.e.
        /// circular NAI).</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set (view) which satisfies the input circular
        /// NAI restriction specification is also created if a <see
        /// cref="FilterByRadiusGeometryRequest.view_name">view_name</see> is
        /// passed in as part of the request.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByRadiusGeometryResponse filterByRadiusGeometry( FilterByRadiusGeometryRequest request_ )
        {
            FilterByRadiusGeometryResponse actualResponse_ = SubmitRequest<FilterByRadiusGeometryResponse>("/filter/byradius/geometry", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which geospatial geometry objects from a table
        /// intersect a circle with the given radius and center point (i.e.
        /// circular NAI).</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the objects are fully
        /// available. The response payload provides the count of the resulting
        /// set. A new resultant set (view) which satisfies the input circular
        /// NAI restriction specification is also created if a <paramref
        /// name="view_name" /> is passed in as part of the request.</para>
        /// </remarks>
        ///
        /// <param name="table_name">Name of the table on which the filter by
        /// radius operation will be performed, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="column_name">Name of the geospatial geometry column to
        /// be filtered.</param>
        /// <param name="x_center">Value of the longitude of the center. Must
        /// be within [-180.0, 180.0]. The minimum allowed value is -180. The
        /// maximum allowed value is 180.</param>
        /// <param name="y_center">Value of the latitude of the center. Must be
        /// within [-90.0, 90.0]. The minimum allowed value is -90. The maximum
        /// allowed value is 90.</param>
        /// <param name="radius">The radius of the circle within which the
        /// search will be performed. Must be a non-zero positive value. It is
        /// in meters; so, for example, a value of '42000' means 42 km. The
        /// minimum allowed value is 0. The maximum allowed value is MAX_INT.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByRadiusGeometryRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByRadiusGeometryRequest.Options.TRUE">TRUE</see>,
        ///         a unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByRadiusGeometryResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByRadiusGeometryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByRadiusGeometryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByRadiusGeometryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByRadiusGeometryRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema provided is
        ///         non-existent, it will be automatically created.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByRadiusGeometryResponse filterByRadiusGeometry( string table_name,
                                                                      string view_name,
                                                                      string column_name,
                                                                      double x_center,
                                                                      double y_center,
                                                                      double radius,
                                                                      IDictionary<string, string> options = null )
        {
            return filterByRadiusGeometry( new FilterByRadiusGeometryRequest( table_name,
                                                                              view_name,
                                                                              column_name,
                                                                              x_center,
                                                                              y_center,
                                                                              radius,
                                                                              options ) );
        }

        /// <summary>Calculates which objects from a table have a column that
        /// is within the given bounds.</summary>
        /// <remarks><para>An object from the table identified by <see
        /// cref="FilterByRangeRequest.table_name">table_name</see> is added to
        /// the view <see cref="FilterByRangeRequest.view_name">view_name</see>
        /// if its column is within [<see
        /// cref="FilterByRangeRequest.lower_bound">lower_bound</see>, <see
        /// cref="FilterByRangeRequest.upper_bound">upper_bound</see>]
        /// (inclusive). The operation is synchronous. The response provides a
        /// count of the number of objects which passed the bound filter.
        /// Although this functionality can also be accomplished with the
        /// standard filter function, it is more efficient.</para>
        /// <para>For track objects, the count reflects how many points fall
        /// within the given bounds (which may not include all the track points
        /// of any given track).</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByRangeResponse filterByRange( FilterByRangeRequest request_ )
        {
            FilterByRangeResponse actualResponse_ = SubmitRequest<FilterByRangeResponse>("/filter/byrange", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which objects from a table have a column that
        /// is within the given bounds.</summary>
        /// <remarks><para>An object from the table identified by <paramref
        /// name="table_name" /> is added to the view <paramref
        /// name="view_name" /> if its column is within [<paramref
        /// name="lower_bound" />, <paramref name="upper_bound" />]
        /// (inclusive). The operation is synchronous. The response provides a
        /// count of the number of objects which passed the bound filter.
        /// Although this functionality can also be accomplished with the
        /// standard filter function, it is more efficient.</para>
        /// <para>For track objects, the count reflects how many points fall
        /// within the given bounds (which may not include all the track points
        /// of any given track).</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the filter by
        /// range operation will be performed, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="column_name">Name of a column on which the operation
        /// would be applied.</param>
        /// <param name="lower_bound">Value of the lower bound (inclusive).
        /// </param>
        /// <param name="upper_bound">Value of the upper bound (inclusive).
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByRangeRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByRangeRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByRangeResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByRangeRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByRangeRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByRangeRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByRangeRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByRangeResponse filterByRange( string table_name,
                                                    string view_name,
                                                    string column_name,
                                                    double lower_bound,
                                                    double upper_bound,
                                                    IDictionary<string, string> options = null )
        {
            return filterByRange( new FilterByRangeRequest( table_name, view_name,
                                                            column_name, lower_bound,
                                                            upper_bound, options ) );
        }

        /// <summary>Filters objects matching all points of the given track
        /// (works only on track type data).</summary>
        /// <remarks><para> It allows users to specify a particular track to
        /// find all other points in the table that fall within specified
        /// ranges (spatial and temporal) of all points of the given track.
        /// Additionally, the user can specify another track to see if the two
        /// intersect (or go close to each other within the specified ranges).
        /// The user also has the flexibility of using different metrics for
        /// the spatial distance calculation: Euclidean (flat geometry) or
        /// Great Circle (spherical geometry to approximate the Earth's surface
        /// distances). The filtered points are stored in a newly created
        /// result set. The return value of the function is the number of
        /// points in the resultant set (view).</para>
        /// <para>This operation is synchronous, meaning that a response will
        /// not be returned until all the objects are fully available.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterBySeriesResponse filterBySeries( FilterBySeriesRequest request_ )
        {
            FilterBySeriesResponse actualResponse_ = SubmitRequest<FilterBySeriesResponse>("/filter/byseries", request_, false);

            return actualResponse_;
        }

        /// <summary>Filters objects matching all points of the given track
        /// (works only on track type data).</summary>
        /// <remarks><para> It allows users to specify a particular track to
        /// find all other points in the table that fall within specified
        /// ranges (spatial and temporal) of all points of the given track.
        /// Additionally, the user can specify another track to see if the two
        /// intersect (or go close to each other within the specified ranges).
        /// The user also has the flexibility of using different metrics for
        /// the spatial distance calculation: Euclidean (flat geometry) or
        /// Great Circle (spherical geometry to approximate the Earth's surface
        /// distances). The filtered points are stored in a newly created
        /// result set. The return value of the function is the number of
        /// points in the resultant set (view).</para>
        /// <para>This operation is synchronous, meaning that a response will
        /// not be returned until all the objects are fully available.</para>
        /// </remarks>
        ///
        /// <param name="table_name">Name of the table on which the filter by
        /// track operation will be performed, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. Must be a currently
        /// existing table with a <a href="../../../geospatial/geo_objects/"
        /// target="_top">track</a> present.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="track_id">The ID of the track which will act as the
        /// filtering points. Must be an existing track within the given table.
        /// </param>
        /// <param name="target_track_ids">Up to one track ID to intersect with
        /// the "filter" track. If any provided, it must be an valid track ID
        /// within the given set.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterBySeriesRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterBySeriesRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterBySeriesResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterBySeriesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterBySeriesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterBySeriesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterBySeriesRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterBySeriesRequest.Options.SPATIAL_RADIUS">SPATIAL_RADIUS</see>:
        ///         </term>
        ///         <description>A positive number passed as a string
        ///         representing the radius of the search area centered around
        ///         each track point's geospatial coordinates. The value is
        ///         interpreted in meters. Required parameter. The minimum
        ///         allowed value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterBySeriesRequest.Options.TIME_RADIUS">TIME_RADIUS</see>:
        ///         </term>
        ///         <description>A positive number passed as a string
        ///         representing the maximum allowable time difference between
        ///         the timestamps of a filtered object and the given track's
        ///         points. The value is interpreted in seconds. Required
        ///         parameter. The minimum allowed value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterBySeriesRequest.Options.SPATIAL_DISTANCE_METRIC">SPATIAL_DISTANCE_METRIC</see>:
        ///         </term>
        ///         <description>A string representing the coordinate system to
        ///         use for the spatial search criteria. Acceptable values are
        ///         'euclidean' and 'great_circle'. Optional parameter; default
        ///         is 'euclidean'.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterBySeriesRequest.Options.EUCLIDEAN">EUCLIDEAN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterBySeriesRequest.Options.GREAT_CIRCLE">GREAT_CIRCLE</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterBySeriesResponse filterBySeries( string table_name,
                                                      string view_name,
                                                      string track_id,
                                                      IList<string> target_track_ids,
                                                      IDictionary<string, string> options = null )
        {
            return filterBySeries( new FilterBySeriesRequest( table_name, view_name,
                                                              track_id, target_track_ids,
                                                              options ) );
        }

        /// <summary>Calculates which objects from a table or view match a
        /// string expression for the given string columns.</summary>
        /// <remarks><para>Setting <see
        /// cref="FilterByStringRequest.Options.CASE_SENSITIVE">CASE_SENSITIVE</see>
        /// can modify case sensitivity in matching for all modes except <see
        /// cref="FilterByStringRequest.Mode.SEARCH">SEARCH</see>. For <see
        /// cref="FilterByStringRequest.Mode.SEARCH">SEARCH</see> mode details
        /// and limitations, see <a href="../../../concepts/full_text_search/"
        /// target="_top">Full Text Search</a>.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByStringResponse filterByString( FilterByStringRequest request_ )
        {
            FilterByStringResponse actualResponse_ = SubmitRequest<FilterByStringResponse>("/filter/bystring", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which objects from a table or view match a
        /// string expression for the given string columns.</summary>
        /// <remarks><para>Setting <see
        /// cref="FilterByStringRequest.Options.CASE_SENSITIVE">CASE_SENSITIVE</see>
        /// can modify case sensitivity in matching for all modes except <see
        /// cref="FilterByStringRequest.Mode.SEARCH">SEARCH</see>. For <see
        /// cref="FilterByStringRequest.Mode.SEARCH">SEARCH</see> mode details
        /// and limitations, see <a href="../../../concepts/full_text_search/"
        /// target="_top">Full Text Search</a>.</para></remarks>
        ///
        /// <param name="table_name">Name of the table on which the filter
        /// operation will be performed, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing table
        /// or view.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="expression">The expression with which to filter the
        /// table.</param>
        /// <param name="mode">The string filtering mode to apply. See below
        /// for details.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByStringRequest.Mode.SEARCH">SEARCH</see>:
        ///         </term>
        ///         <description>Full text search query with wildcards and
        ///         boolean operators. Note that for this mode, no column can
        ///         be specified in <paramref name="column_names" />; all
        ///         string columns of the table that have text search enabled
        ///         will be searched.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByStringRequest.Mode.EQUALS">EQUALS</see>:
        ///         </term>
        ///         <description>Exact whole-string match (accelerated).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByStringRequest.Mode.CONTAINS">CONTAINS</see>:
        ///         </term>
        ///         <description>Partial substring match (not accelerated).  If
        ///         the column is a string type (non-charN) and the number of
        ///         records is too large, it will return 0.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByStringRequest.Mode.STARTS_WITH">STARTS_WITH</see>:
        ///         </term>
        ///         <description>Strings that start with the given expression
        ///         (not accelerated). If the column is a string type
        ///         (non-charN) and the number of records is too large, it will
        ///         return 0.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByStringRequest.Mode.REGEX">REGEX</see>:</term>
        ///         <description>Full regular expression search (not
        ///         accelerated). If the column is a string type (non-charN)
        ///         and the number of records is too large, it will return 0.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="column_names">List of columns on which to apply the
        /// filter. Ignored for <see
        /// cref="FilterByStringRequest.Mode.SEARCH">SEARCH</see> mode.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByStringRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByStringRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByStringResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByStringRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByStringRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByStringRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByStringRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByStringRequest.Options.CASE_SENSITIVE">CASE_SENSITIVE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByStringRequest.Options.FALSE">FALSE</see> then
        ///         string filtering will ignore case. Does not apply to <see
        ///         cref="FilterByStringRequest.Mode.SEARCH">SEARCH</see> mode.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByStringRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByStringRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByStringRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByStringResponse filterByString( string table_name,
                                                      string view_name,
                                                      string expression,
                                                      string mode,
                                                      IList<string> column_names,
                                                      IDictionary<string, string> options = null )
        {
            return filterByString( new FilterByStringRequest( table_name, view_name,
                                                              expression, mode,
                                                              column_names, options ) );
        }

        /// <summary>Filters objects in one table based on objects in another
        /// table.</summary>
        /// <remarks><para>The user must specify matching column types from the
        /// two tables (i.e. the target table from which objects will be
        /// filtered and the source table based on which the filter will be
        /// created); the column names need not be the same. If a <see
        /// cref="FilterByTableRequest.view_name">view_name</see> is specified,
        /// then the filtered objects will then be put in a newly created view.
        /// The operation is synchronous, meaning that a response will not be
        /// returned until all objects are fully available in the result view.
        /// The return value contains the count (i.e. the size) of the
        /// resulting view.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByTableResponse filterByTable( FilterByTableRequest request_ )
        {
            FilterByTableResponse actualResponse_ = SubmitRequest<FilterByTableResponse>("/filter/bytable", request_, false);

            return actualResponse_;
        }

        /// <summary>Filters objects in one table based on objects in another
        /// table.</summary>
        /// <remarks><para>The user must specify matching column types from the
        /// two tables (i.e. the target table from which objects will be
        /// filtered and the source table based on which the filter will be
        /// created); the column names need not be the same. If a <paramref
        /// name="view_name" /> is specified, then the filtered objects will
        /// then be put in a newly created view. The operation is synchronous,
        /// meaning that a response will not be returned until all objects are
        /// fully available in the result view. The return value contains the
        /// count (i.e. the size) of the resulting view.</para></remarks>
        ///
        /// <param name="table_name">Name of the table whose data will be
        /// filtered, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="column_name">Name of the column by whose value the
        /// data will be filtered from the table designated by <paramref
        /// name="table_name" />.</param>
        /// <param name="source_table_name">Name of the table whose data will
        /// be compared against in the table called <paramref name="table_name"
        /// />, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="source_table_column_name">Name of the column in the
        /// <paramref name="source_table_name" /> whose values will be used as
        /// the filter for table <paramref name="table_name" />. Must be a
        /// geospatial geometry column if in 'spatial' mode; otherwise, Must
        /// match the type of the <paramref name="column_name" />.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByTableRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByTableResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.FILTER_MODE">FILTER_MODE</see>:
        ///         </term>
        ///         <description>String indicating the filter mode, either <see
        ///         cref="FilterByTableRequest.Options.IN_TABLE">IN_TABLE</see>
        ///         or <see
        ///         cref="FilterByTableRequest.Options.NOT_IN_TABLE">NOT_IN_TABLE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByTableRequest.Options.IN_TABLE">IN_TABLE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByTableRequest.Options.NOT_IN_TABLE">NOT_IN_TABLE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByTableRequest.Options.IN_TABLE">IN_TABLE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.MODE">MODE</see>:</term>
        ///         <description>Mode - should be either <see
        ///         cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see>
        ///         or <see
        ///         cref="FilterByTableRequest.Options.NORMAL">NORMAL</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByTableRequest.Options.NORMAL">NORMAL</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByTableRequest.Options.NORMAL">NORMAL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.BUFFER">BUFFER</see>:
        ///         </term>
        ///         <description>Buffer size, in meters. Only relevant for <see
        ///         cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see>
        ///         mode. The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.BUFFER_METHOD">BUFFER_METHOD</see>:
        ///         </term>
        ///         <description>Method used to buffer polygons.  Only relevant
        ///         for <see
        ///         cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see>
        ///         mode.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByTableRequest.Options.NORMAL">NORMAL</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByTableRequest.Options.GEOS">GEOS</see>:
        ///                 </term>
        ///                 <description>Use geos 1 edge per corner algorithm
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByTableRequest.Options.NORMAL">NORMAL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.MAX_PARTITION_SIZE">MAX_PARTITION_SIZE</see>:
        ///         </term>
        ///         <description>Maximum number of points in a partition. Only
        ///         relevant for <see
        ///         cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see>
        ///         mode. The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.MAX_PARTITION_SCORE">MAX_PARTITION_SCORE</see>:
        ///         </term>
        ///         <description>Maximum number of points * edges in a
        ///         partition. Only relevant for <see
        ///         cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see>
        ///         mode. The default value is '8000000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.X_COLUMN_NAME">X_COLUMN_NAME</see>:
        ///         </term>
        ///         <description>Name of column containing x value of point
        ///         being filtered in <see
        ///         cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see>
        ///         mode. The default value is 'x'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByTableRequest.Options.Y_COLUMN_NAME">Y_COLUMN_NAME</see>:
        ///         </term>
        ///         <description>Name of column containing y value of point
        ///         being filtered in <see
        ///         cref="FilterByTableRequest.Options.SPATIAL">SPATIAL</see>
        ///         mode. The default value is 'y'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByTableResponse filterByTable( string table_name,
                                                    string view_name,
                                                    string column_name,
                                                    string source_table_name,
                                                    string source_table_column_name,
                                                    IDictionary<string, string> options = null )
        {
            return filterByTable( new FilterByTableRequest( table_name, view_name,
                                                            column_name,
                                                            source_table_name,
                                                            source_table_column_name,
                                                            options ) );
        }

        /// <summary>Calculates which objects from a table has a particular
        /// value for a particular column.</summary>
        /// <remarks><para>The input parameters provide a way to specify either
        /// a String or a Double valued column and a desired value for the
        /// column on which the filter is performed. The operation is
        /// synchronous, meaning that a response will not be returned until all
        /// the objects are fully available. The response payload provides the
        /// count of the resulting set. A new result view which satisfies the
        /// input filter restriction specification is also created with a view
        /// name passed in as part of the input payload.  Although this
        /// functionality can also be accomplished with the standard filter
        /// function, it is more efficient.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByValueResponse filterByValue( FilterByValueRequest request_ )
        {
            FilterByValueResponse actualResponse_ = SubmitRequest<FilterByValueResponse>("/filter/byvalue", request_, false);

            return actualResponse_;
        }

        /// <summary>Calculates which objects from a table has a particular
        /// value for a particular column.</summary>
        /// <remarks><para>The input parameters provide a way to specify either
        /// a String or a Double valued column and a desired value for the
        /// column on which the filter is performed. The operation is
        /// synchronous, meaning that a response will not be returned until all
        /// the objects are fully available. The response payload provides the
        /// count of the resulting set. A new result view which satisfies the
        /// input filter restriction specification is also created with a view
        /// name passed in as part of the input payload.  Although this
        /// functionality can also be accomplished with the standard filter
        /// function, it is more efficient.</para></remarks>
        ///
        /// <param name="table_name">Name of an existing table on which to
        /// perform the calculation, in [schema_name.]table_name format, using
        /// standard <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="view_name">If provided, then this will be the name of
        /// the view containing the results, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must not be an already
        /// existing table or view. The default value is ''.</param>
        /// <param name="is_string">Indicates whether the value being searched
        /// for is string or numeric.</param>
        /// <param name="_value">The value to search for. The default value is
        /// 0.</param>
        /// <param name="value_str">The string value to search for. The default
        /// value is ''.</param>
        /// <param name="column_name">Name of a column on which the filter by
        /// value would be applied.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="FilterByValueRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="FilterByValueRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="view_name" />. This is always allowed even if the
        ///         caller does not have permission to create tables. The
        ///         generated name is returned in <see
        ///         cref="FilterByValueResponse.Info.QUALIFIED_VIEW_NAME">QUALIFIED_VIEW_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByValueRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="FilterByValueRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="FilterByValueRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="FilterByValueRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the view as part of <paramref name="view_name"
        ///         /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created view. If the schema is non-existent, it
        ///         will be automatically created.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public FilterByValueResponse filterByValue( string table_name,
                                                    string view_name,
                                                    bool is_string,
                                                    double _value,
                                                    string value_str,
                                                    string column_name,
                                                    IDictionary<string, string> options = null )
        {
            return filterByValue( new FilterByValueRequest( table_name, view_name,
                                                            is_string, _value, value_str,
                                                            column_name, options ) );
        }

        /// <summary>Get the status and result of asynchronously running job.
        /// </summary>
        /// <remarks><para> See the <see
        /// cref="createJob(CreateJobRequest)">createJob</see> for starting an
        /// asynchronous job.  Some fields of the response are filled only
        /// after the submitted job has finished execution.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetJobResponse getJob( GetJobRequest request_ )
        {
            GetJobResponse actualResponse_ = SubmitRequest<GetJobResponse>("/get/job", request_, false);

            return actualResponse_;
        }

        /// <summary>Get the status and result of asynchronously running job.
        /// </summary>
        /// <remarks><para> See the <see
        /// cref="createJob(string,string,byte[],string,IDictionary{string,string})">createJob</see>
        /// for starting an asynchronous job.  Some fields of the response are
        /// filled only after the submitted job has finished execution.</para>
        /// </remarks>
        ///
        /// <param name="job_id">A unique identifier for the job whose status
        /// and result is to be fetched.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GetJobRequest.Options.JOB_TAG">JOB_TAG</see>:</term>
        ///         <description>Job tag returned in call to create the job
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetJobResponse getJob( long job_id,
                                      IDictionary<string, string> options = null )
        {
            return getJob( new GetJobRequest( job_id, options ) );
        }

        /// <summary>Retrieves records from a given table, optionally filtered
        /// by an expression and/or sorted by a column.</summary>
        /// <remarks><para>This operation can be performed on tables and views.
        /// Records can be returned encoded as binary, json, or geojson.</para>
        /// <para>This operation supports paging through the data via the <see
        /// cref="GetRecordsRequest.offset">offset</see> and <see
        /// cref="GetRecordsRequest.limit">limit</see> parameters.  Note that
        /// when paging through a table, if the table (or the underlying table
        /// in case of a view) is updated (records are inserted, deleted or
        /// modified) the records retrieved may differ between calls based on
        /// the updates applied.</para></remarks>
        ///
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetRecordsResponse<T> getRecords<T>( GetRecordsRequest request_ ) where T : new()
        {
            RawGetRecordsResponse actualResponse_ = SubmitRequest<RawGetRecordsResponse>("/get/records", request_, false);

            GetRecordsResponse<T> response_ = new GetRecordsResponse<T>();
            response_.table_name = actualResponse_.table_name;
            response_.type_name = actualResponse_.type_name;
            response_.type_schema = actualResponse_.type_schema;
            response_.data = new List<T>();
            this.DecodeRawBinaryDataUsingSchemaString<T>( response_.type_schema, actualResponse_.records_binary, response_.data );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            response_.info = actualResponse_.info;
            return response_;
        }

        /// <summary>Retrieves records from a given table, optionally filtered
        /// by an expression and/or sorted by a column.</summary>
        /// <remarks><para>This operation can be performed on tables and views.
        /// Records can be returned encoded as binary, json, or geojson.</para>
        /// <para>This operation supports paging through the data via the
        /// <paramref name="offset" /> and <paramref name="limit" />
        /// parameters.  Note that when paging through a table, if the table
        /// (or the underlying table in case of a view) is updated (records are
        /// inserted, deleted or modified) the records retrieved may differ
        /// between calls based on the updates applied.</para></remarks>
        ///
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        ///
        /// <param name="table_name">Name of the table or view from which the
        /// records will be fetched, in [schema_name.]table_name format, using
        /// standard <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results). The default value is 0. The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT.</param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or END_OF_SET (-9999) to indicate
        /// that the maximum number of results allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the <a
        /// href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration. Use <see
        /// cref="GetRecordsResponse{T}.has_more_records">has_more_records</see>
        /// to see if more records exist in the result to be fetched, and
        /// <paramref name="offset" /> & <paramref name="limit" /> to request
        /// subsequent pages of results. The default value is -9999.</param>
        /// <param name="options"><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Optional filter expression to apply to the
        ///         table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsRequest.Options.FAST_INDEX_LOOKUP">FAST_INDEX_LOOKUP</see>:
        ///         </term>
        ///         <description>Indicates if indexes should be used to perform
        ///         the lookup for a given expression if possible. Only
        ///         applicable if there is no sorting, the expression contains
        ///         only equivalence comparisons based on existing tables
        ///         indexes and the range of requested values is from [0 to
        ///         END_OF_SET].
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="GetRecordsRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsRequest.Options.SORT_BY">SORT_BY</see>:
        ///         </term>
        ///         <description>Optional column that the data should be sorted
        ///         by. Empty by default (i.e. no sorting is applied).
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsRequest.Options.SORT_ORDER">SORT_ORDER</see>:
        ///         </term>
        ///         <description>String indicating how the returned values
        ///         should be sorted - ascending or descending. If sort_order
        ///         is provided, sort_by has to be provided.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsRequest.Options.ASCENDING">ASCENDING</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsRequest.Options.DESCENDING">DESCENDING</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="GetRecordsRequest.Options.ASCENDING">ASCENDING</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetRecordsResponse<T> getRecords<T>( string table_name,
                                                    long offset = 0,
                                                    long limit = -9999,
                                                    IDictionary<string, string> options = null ) where T : new()
        {
            return getRecords<T>( new GetRecordsRequest( table_name, offset, limit,
                                                         options ) );
        }

        /// <summary>For a given table, retrieves the values from the requested
        /// column(s).</summary>
        /// <remarks><para>Maps of column name to the array of values as well
        /// as the column data type are returned. This endpoint supports
        /// pagination with the <see
        /// cref="GetRecordsByColumnRequest.offset">offset</see> and <see
        /// cref="GetRecordsByColumnRequest.limit">limit</see>
        /// parameters.</para>
        /// <para><a href="../../../concepts/window/" target="_top">Window
        /// functions</a>, which can perform operations like moving averages,
        /// are available through this endpoint as well as <see
        /// cref="createProjection(CreateProjectionRequest)">createProjection</see>.</para>
        /// <para>When using pagination, if the table (or the underlying table
        /// in the case of a view) is modified (records are inserted, updated,
        /// or deleted) during a call to the endpoint, the records or values
        /// retrieved may differ between calls based on the type of the update,
        /// e.g., the contiguity across pages cannot be relied upon.</para>
        /// <para>If <see
        /// cref="GetRecordsByColumnRequest.table_name">table_name</see> is
        /// empty, selection is performed against a single-row virtual table.
        /// This can be useful in executing temporal (<a
        /// href="../../../concepts/expressions/#date-time-functions"
        /// target="_top">NOW()</a>), identity (<a
        /// href="../../../concepts/expressions/#user-security-functions"
        /// target="_top">USER()</a>), or constant-based functions (<a
        /// href="../../../concepts/expressions/#scalar-functions"
        /// target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).</para>
        /// <para>The response is returned as a dynamic schema. For details
        /// see: <a href="../../../api/concepts/#dynamic-schemas"
        /// target="_top">dynamic schemas documentation</a>.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetRecordsByColumnResponse getRecordsByColumn( GetRecordsByColumnRequest request_ )
        {
            RawGetRecordsByColumnResponse actualResponse_ = SubmitRequest<RawGetRecordsByColumnResponse>("/get/records/bycolumn", request_, false);

            GetRecordsByColumnResponse response_ = new GetRecordsByColumnResponse();
            response_.table_name = actualResponse_.table_name;
            response_.data = KineticaRecord.DecodeDynamicTableRecords( actualResponse_.response_schema_str, actualResponse_.binary_encoded_response );
            response_.total_number_of_records = actualResponse_.total_number_of_records;
            response_.has_more_records = actualResponse_.has_more_records;
            response_.info = actualResponse_.info;
            return response_;
        }

        /// <summary>For a given table, retrieves the values from the requested
        /// column(s).</summary>
        /// <remarks><para>Maps of column name to the array of values as well
        /// as the column data type are returned. This endpoint supports
        /// pagination with the <paramref name="offset" /> and <paramref
        /// name="limit" /> parameters.</para>
        /// <para><a href="../../../concepts/window/" target="_top">Window
        /// functions</a>, which can perform operations like moving averages,
        /// are available through this endpoint as well as <see
        /// cref="createProjection(string,string,IList{string},IDictionary{string,string})">createProjection</see>.</para>
        /// <para>When using pagination, if the table (or the underlying table
        /// in the case of a view) is modified (records are inserted, updated,
        /// or deleted) during a call to the endpoint, the records or values
        /// retrieved may differ between calls based on the type of the update,
        /// e.g., the contiguity across pages cannot be relied upon.</para>
        /// <para>If <paramref name="table_name" /> is empty, selection is
        /// performed against a single-row virtual table.  This can be useful
        /// in executing temporal (<a
        /// href="../../../concepts/expressions/#date-time-functions"
        /// target="_top">NOW()</a>), identity (<a
        /// href="../../../concepts/expressions/#user-security-functions"
        /// target="_top">USER()</a>), or constant-based functions (<a
        /// href="../../../concepts/expressions/#scalar-functions"
        /// target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).</para>
        /// <para>The response is returned as a dynamic schema. For details
        /// see: <a href="../../../api/concepts/#dynamic-schemas"
        /// target="_top">dynamic schemas documentation</a>.</para></remarks>
        ///
        /// <param name="table_name">Name of the table or view on which this
        /// operation will be performed, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  An empty table name
        /// retrieves one record from a single-row virtual table, where columns
        /// specified should be constants or constant expressions.</param>
        /// <param name="column_names">The list of column values to retrieve.
        /// </param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results). The default value is 0. The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT.</param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or END_OF_SET (-9999) to indicate
        /// that the maximum number of results allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the <a
        /// href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration. Use <see
        /// cref="GetRecordsByColumnResponse.has_more_records">has_more_records</see>
        /// to see if more records exist in the result to be fetched, and
        /// <paramref name="offset" /> & <paramref name="limit" /> to request
        /// subsequent pages of results. The default value is -9999.</param>
        /// <param name="options"><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsByColumnRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Optional filter expression to apply to the
        ///         table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsByColumnRequest.Options.SORT_BY">SORT_BY</see>:
        ///         </term>
        ///         <description>Optional column that the data should be sorted
        ///         by. Used in conjunction with <see
        ///         cref="GetRecordsByColumnRequest.Options.SORT_ORDER">SORT_ORDER</see>.
        ///         The <see
        ///         cref="GetRecordsByColumnRequest.Options.ORDER_BY">ORDER_BY</see>
        ///         option can be used in lieu of <see
        ///         cref="GetRecordsByColumnRequest.Options.SORT_BY">SORT_BY</see>
        ///         / <see
        ///         cref="GetRecordsByColumnRequest.Options.SORT_ORDER">SORT_ORDER</see>.
        ///         The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsByColumnRequest.Options.SORT_ORDER">SORT_ORDER</see>:
        ///         </term>
        ///         <description>String indicating how the returned values
        ///         should be sorted - <see
        ///         cref="GetRecordsByColumnRequest.Options.ASCENDING">ASCENDING</see>
        ///         or <see
        ///         cref="GetRecordsByColumnRequest.Options.DESCENDING">DESCENDING</see>.
        ///         If <see
        ///         cref="GetRecordsByColumnRequest.Options.SORT_ORDER">SORT_ORDER</see>
        ///         is provided, <see
        ///         cref="GetRecordsByColumnRequest.Options.SORT_BY">SORT_BY</see>
        ///         has to be provided.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsByColumnRequest.Options.ASCENDING">ASCENDING</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsByColumnRequest.Options.DESCENDING">DESCENDING</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="GetRecordsByColumnRequest.Options.ASCENDING">ASCENDING</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsByColumnRequest.Options.ORDER_BY">ORDER_BY</see>:
        ///         </term>
        ///         <description>Comma-separated list of the columns to be
        ///         sorted by as well as the sort direction, e.g., 'timestamp
        ///         asc, x desc'. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsByColumnRequest.Options.CONVERT_WKTS_TO_WKBS">CONVERT_WKTS_TO_WKBS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="GetRecordsByColumnRequest.Options.TRUE">TRUE</see>,
        ///         then WKT string columns will be returned as WKB bytes.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsByColumnRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsByColumnRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="GetRecordsByColumnRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetRecordsByColumnResponse getRecordsByColumn( string table_name,
                                                              IList<string> column_names,
                                                              long offset = 0,
                                                              long limit = -9999,
                                                              IDictionary<string, string> options = null )
        {
            return getRecordsByColumn( new GetRecordsByColumnRequest( table_name,
                                                                      column_names,
                                                                      offset, limit,
                                                                      options ) );
        }

        /// <summary>Retrieves the complete series/track records from the given
        /// <see
        /// cref="GetRecordsBySeriesRequest.world_table_name">world_table_name</see>
        /// based on the partial track information contained in the <see
        /// cref="GetRecordsBySeriesRequest.table_name">table_name</see>.
        /// </summary>
        /// <remarks><para> This operation supports paging through the data via
        /// the <see cref="GetRecordsBySeriesRequest.offset">offset</see> and
        /// <see cref="GetRecordsBySeriesRequest.limit">limit</see>
        /// parameters.</para>
        /// <para>In contrast to <see
        /// cref="getRecords{T}(GetRecordsRequest)">getRecords</see> this
        /// returns records grouped by series/track. So if <see
        /// cref="GetRecordsBySeriesRequest.offset">offset</see> is 0 and <see
        /// cref="GetRecordsBySeriesRequest.limit">limit</see> is 5 this
        /// operation would return the first 5 series/tracks in <see
        /// cref="GetRecordsBySeriesRequest.table_name">table_name</see>. Each
        /// series/track will be returned sorted by their TIMESTAMP column.
        /// </para></remarks>
        ///
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetRecordsBySeriesResponse<T> getRecordsBySeries<T>( GetRecordsBySeriesRequest request_ ) where T : new()
        {
            RawGetRecordsBySeriesResponse actualResponse_ = SubmitRequest<RawGetRecordsBySeriesResponse>("/get/records/byseries", request_, false);

            GetRecordsBySeriesResponse<T> response_ = new GetRecordsBySeriesResponse<T>();
            response_.table_names = actualResponse_.table_names;
            response_.type_names = actualResponse_.type_names;
            response_.type_schemas = actualResponse_.type_schemas;
            response_.data = new List<IList<T>>();
            this.DecodeRawBinaryDataUsingTypeIDs<T>( response_.type_names, actualResponse_.list_records_binary, response_.data );
            response_.info = actualResponse_.info;
            return response_;
        }

        /// <summary>Retrieves the complete series/track records from the given
        /// <paramref name="world_table_name" /> based on the partial track
        /// information contained in the <paramref name="table_name" />.
        /// </summary>
        /// <remarks><para> This operation supports paging through the data via
        /// the <paramref name="offset" /> and <paramref name="limit" />
        /// parameters.</para>
        /// <para>In contrast to <see
        /// cref="getRecords{T}(string,long,long,IDictionary{string,string})">getRecords</see>
        /// this returns records grouped by series/track. So if <paramref
        /// name="offset" /> is 0 and <paramref name="limit" /> is 5 this
        /// operation would return the first 5 series/tracks in <paramref
        /// name="table_name" />. Each series/track will be returned sorted by
        /// their TIMESTAMP column.</para></remarks>
        ///
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        ///
        /// <param name="table_name">Name of the table or view for which
        /// series/tracks will be fetched, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="world_table_name">Name of the table containing the
        /// complete series/track information to be returned for the tracks
        /// present in the <paramref name="table_name" />, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Typically this is used
        /// when retrieving series/tracks from a view (which contains partial
        /// series/tracks) but the user wants to retrieve the entire original
        /// series/tracks. Can be blank.</param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial series/tracks to skip (useful for paging through the
        /// results). The default value is 0. The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT.</param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of series/tracks to be returned. Or END_OF_SET (-9999) to
        /// indicate that the max number of results should be returned. The
        /// default value is 250.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetRecordsBySeriesResponse<T> getRecordsBySeries<T>( string table_name,
                                                                    string world_table_name,
                                                                    int offset = 0,
                                                                    int limit = 250,
                                                                    IDictionary<string, string> options = null ) where T : new()
        {
            return getRecordsBySeries<T>( new GetRecordsBySeriesRequest( table_name,
                                                                         world_table_name,
                                                                         offset, limit,
                                                                         options ) );
        }

        /// <summary>Retrieves records from a collection.</summary>
        /// <remarks><para>The operation can optionally return the record IDs
        /// which can be used in certain queries such as <see
        /// cref="deleteRecords(DeleteRecordsRequest)">deleteRecords</see>.</para>
        /// <para>This operation supports paging through the data via the <see
        /// cref="GetRecordsFromCollectionRequest.offset">offset</see> and <see
        /// cref="GetRecordsFromCollectionRequest.limit">limit</see>
        /// parameters.</para>
        /// <para>Note that when using the Java API, it is not possible to
        /// retrieve records from join views using this operation.(DEPRECATED)
        /// </para></remarks>
        ///
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetRecordsFromCollectionResponse<T> getRecordsFromCollection<T>( GetRecordsFromCollectionRequest request_ ) where T : new()
        {
            RawGetRecordsFromCollectionResponse actualResponse_ = SubmitRequest<RawGetRecordsFromCollectionResponse>("/get/records/fromcollection", request_, false);

            GetRecordsFromCollectionResponse<T> response_ = new GetRecordsFromCollectionResponse<T>();
            response_.table_name = actualResponse_.table_name;
            response_.type_names = actualResponse_.type_names;
            response_.data = new List<T>();
            this.DecodeRawBinaryDataUsingTypeIDs<T>( response_.type_names, actualResponse_.records_binary, response_.data );
            response_.record_ids = actualResponse_.record_ids;
            response_.info = actualResponse_.info;
            return response_;
        }

        /// <summary>Retrieves records from a collection.</summary>
        /// <remarks><para>The operation can optionally return the record IDs
        /// which can be used in certain queries such as <see
        /// cref="deleteRecords(string,IList{string},IDictionary{string,string})">deleteRecords</see>.</para>
        /// <para>This operation supports paging through the data via the
        /// <paramref name="offset" /> and <paramref name="limit" />
        /// parameters.</para>
        /// <para>Note that when using the Java API, it is not possible to
        /// retrieve records from join views using this operation.(DEPRECATED)
        /// </para></remarks>
        ///
        /// <typeparam name="T">The type of object being retrieved.</typeparam>
        ///
        /// <param name="table_name">Name of the collection or table from which
        /// records are to be retrieved, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// collection or table.</param>
        /// <param name="offset">A positive integer indicating the number of
        /// initial results to skip (this can be useful for paging through the
        /// results). The default value is 0. The minimum allowed value is 0.
        /// The maximum allowed value is MAX_INT.</param>
        /// <param name="limit">A positive integer indicating the maximum
        /// number of results to be returned, or END_OF_SET (-9999) to indicate
        /// that the maximum number of results allowed by the server should be
        /// returned.  The number of records returned will never exceed the
        /// server's own limit, defined by the <a
        /// href="../../../config/#config-main-general"
        /// target="_top">max_get_records_size</a> parameter in the server
        /// configuration. Use <paramref name="offset" /> & <paramref
        /// name="limit" /> to request subsequent pages of results. The default
        /// value is -9999.</param>
        /// <param name="options"><list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsFromCollectionRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="GetRecordsFromCollectionRequest.Options.TRUE">TRUE</see>
        ///         then return the internal record ID along with each returned
        ///         record.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsFromCollectionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="GetRecordsFromCollectionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="GetRecordsFromCollectionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GetRecordsFromCollectionRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>Optional filter expression to apply to the
        ///         table. The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GetRecordsFromCollectionResponse<T> getRecordsFromCollection<T>( string table_name,
                                                                                long offset = 0,
                                                                                long limit = -9999,
                                                                                IDictionary<string, string> options = null ) where T : new()
        {
            return getRecordsFromCollection<T>( new GetRecordsFromCollectionRequest( table_name,
                                                                                     offset,
                                                                                     limit,
                                                                                     options ) );
        }

        /// @cond NO_DOCS
        public GetVectortileResponse getVectortile( GetVectortileRequest request_ )
        {
            GetVectortileResponse actualResponse_ = SubmitRequest<GetVectortileResponse>("/get/vectortile", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public GetVectortileResponse getVectortile( IList<string> table_names,
                                                    IList<string> column_names,
                                                    IDictionary<string, IList<string>> layers,
                                                    int tile_x,
                                                    int tile_y,
                                                    int zoom,
                                                    IDictionary<string, string> options = null )
        {
            return getVectortile( new GetVectortileRequest( table_names, column_names,
                                                            layers, tile_x, tile_y, zoom,
                                                            options ) );
        }
        /// @endcond

        /// <summary>Grant user or role the specified permission on the
        /// specified object.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionResponse grantPermission( GrantPermissionRequest request_ )
        {
            GrantPermissionResponse actualResponse_ = SubmitRequest<GrantPermissionResponse>("/grant/permission", request_, false);

            return actualResponse_;
        }

        /// <summary>Grant user or role the specified permission on the
        /// specified object.</summary>
        ///
        /// <param name="principal">Name of the user or role for which the
        /// permission is being granted.  Must be an existing user or role. The
        /// default value is ''.</param>
        /// <param name="_object">Name of object permission is being granted
        /// to.  It is recommended to use a fully-qualified name when possible.
        /// </param>
        /// <param name="object_type">The type of object being granted to.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.CONTEXT">CONTEXT</see>:
        ///         </term>
        ///         <description>Context</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.DATASINK">DATASINK</see>:
        ///         </term>
        ///         <description>Data Sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.DATASOURCE">DATASOURCE</see>:
        ///         </term>
        ///         <description>Data Source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.DIRECTORY">DIRECTORY</see>:
        ///         </term>
        ///         <description>KIFS File Directory</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.GRAPH">GRAPH</see>:
        ///         </term>
        ///         <description>A Graph object</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.PROC">PROC</see>:
        ///         </term>
        ///         <description>UDF Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.SCHEMA">SCHEMA</see>:
        ///         </term>
        ///         <description>Schema</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.SQL_PROC">SQL_PROC</see>:
        ///         </term>
        ///         <description>SQL Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.SYSTEM">SYSTEM</see>:
        ///         </term>
        ///         <description>System-level access</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.TABLE">TABLE</see>:
        ///         </term>
        ///         <description>Database Table</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.ObjectType.TABLE_MONITOR">TABLE_MONITOR</see>:
        ///         </term>
        ///         <description>Table monitor</description>
        ///     </item>
        /// </list></param>
        /// <param name="permission">Permission being granted.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.ADMIN">ADMIN</see>:
        ///         </term>
        ///         <description>Full read/write and administrative access on
        ///         the object.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.CONNECT">CONNECT</see>:
        ///         </term>
        ///         <description>Connect access on the given data source or
        ///         data sink.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.CREATE">CREATE</see>:
        ///         </term>
        ///         <description>Ability to create new objects of this type.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.DELETE">DELETE</see>:
        ///         </term>
        ///         <description>Delete rows from tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.EXECUTE">EXECUTE</see>:
        ///         </term>
        ///         <description>Ability to Execute the Procedure object.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.INSERT">INSERT</see>:
        ///         </term>
        ///         <description>Insert access to tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.READ">READ</see>:
        ///         </term>
        ///         <description>Ability to read, list and use the object.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.UPDATE">UPDATE</see>:
        ///         </term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.USER_ADMIN">USER_ADMIN</see>:
        ///         </term>
        ///         <description>Access to administer users and roles that do
        ///         not have system_admin permission.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Permission.WRITE">WRITE</see>:
        ///         </term>
        ///         <description>Access to write, change and delete objects.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Options.COLUMNS">COLUMNS</see>:
        ///         </term>
        ///         <description>Apply table security to these columns,
        ///         comma-separated. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionRequest.Options.FILTER_EXPRESSION">FILTER_EXPRESSION</see>:
        ///         </term>
        ///         <description>Optional filter expression to apply to this
        ///         grant.  Only rows that match the filter will be affected.
        ///         The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionResponse grantPermission( string principal,
                                                        string _object,
                                                        string object_type,
                                                        string permission,
                                                        IDictionary<string, string> options = null )
        {
            return grantPermission( new GrantPermissionRequest( principal, _object,
                                                                object_type, permission,
                                                                options ) );
        }

        /// <summary>Grants a <a
        /// href="../../../security/sec_concepts/#security-concepts-permissions-credential"
        /// target="_top">credential-level permission</a> to a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionCredentialResponse grantPermissionCredential( GrantPermissionCredentialRequest request_ )
        {
            GrantPermissionCredentialResponse actualResponse_ = SubmitRequest<GrantPermissionCredentialResponse>("/grant/permission/credential", request_, false);

            return actualResponse_;
        }

        /// <summary>Grants a <a
        /// href="../../../security/sec_concepts/#security-concepts-permissions-credential"
        /// target="_top">credential-level permission</a> to a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.</param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionCredentialRequest.Permission.CREDENTIAL_ADMIN">CREDENTIAL_ADMIN</see>:
        ///         </term>
        ///         <description>Full read/write and administrative access on
        ///         the credential.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionCredentialRequest.Permission.CREDENTIAL_READ">CREDENTIAL_READ</see>:
        ///         </term>
        ///         <description>Ability to read and use the credential.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="credential_name">Name of the credential on which the
        /// permission will be granted. Must be an existing credential, or an
        /// empty string to grant access on all credentials.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionCredentialResponse grantPermissionCredential( string name,
                                                                            string permission,
                                                                            string credential_name,
                                                                            IDictionary<string, string> options = null )
        {
            return grantPermissionCredential( new GrantPermissionCredentialRequest( name,
                                                                                    permission,
                                                                                    credential_name,
                                                                                    options ) );
        }

        /// <summary>Grants a <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a> permission to a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionDatasourceResponse grantPermissionDatasource( GrantPermissionDatasourceRequest request_ )
        {
            GrantPermissionDatasourceResponse actualResponse_ = SubmitRequest<GrantPermissionDatasourceResponse>("/grant/permission/datasource", request_, false);

            return actualResponse_;
        }

        /// <summary>Grants a <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a> permission to a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.</param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionDatasourceRequest.Permission.ADMIN">ADMIN</see>:
        ///         </term>
        ///         <description>Admin access on the given data source
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionDatasourceRequest.Permission.CONNECT">CONNECT</see>:
        ///         </term>
        ///         <description>Connect access on the given data source
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="datasource_name">Name of the data source on which the
        /// permission will be granted. Must be an existing data source, or an
        /// empty string to grant permission on all data sources.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionDatasourceResponse grantPermissionDatasource( string name,
                                                                            string permission,
                                                                            string datasource_name,
                                                                            IDictionary<string, string> options = null )
        {
            return grantPermissionDatasource( new GrantPermissionDatasourceRequest( name,
                                                                                    permission,
                                                                                    datasource_name,
                                                                                    options ) );
        }

        /// <summary>Grants a <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a> directory-level permission to a user or
        /// role.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionDirectoryResponse grantPermissionDirectory( GrantPermissionDirectoryRequest request_ )
        {
            GrantPermissionDirectoryResponse actualResponse_ = SubmitRequest<GrantPermissionDirectoryResponse>("/grant/permission/directory", request_, false);

            return actualResponse_;
        }

        /// <summary>Grants a <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a> directory-level permission to a user or
        /// role.</summary>
        ///
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.</param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionDirectoryRequest.Permission.DIRECTORY_READ">DIRECTORY_READ</see>:
        ///         </term>
        ///         <description>For files in the directory, access to list
        ///         files, download files, or use files in server side
        ///         functions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionDirectoryRequest.Permission.DIRECTORY_WRITE">DIRECTORY_WRITE</see>:
        ///         </term>
        ///         <description>Access to upload files to, or delete files
        ///         from, the directory. A user or role with write access
        ///         automatically has read access</description>
        ///     </item>
        /// </list></param>
        /// <param name="directory_name">Name of the KiFS directory to which
        /// the permission grants access. An empty directory name grants access
        /// to all KiFS directories</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionDirectoryResponse grantPermissionDirectory( string name,
                                                                          string permission,
                                                                          string directory_name,
                                                                          IDictionary<string, string> options = null )
        {
            return grantPermissionDirectory( new GrantPermissionDirectoryRequest( name,
                                                                                  permission,
                                                                                  directory_name,
                                                                                  options ) );
        }

        /// <summary>Grants a proc-level permission to a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionProcResponse grantPermissionProc( GrantPermissionProcRequest request_ )
        {
            GrantPermissionProcResponse actualResponse_ = SubmitRequest<GrantPermissionProcResponse>("/grant/permission/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Grants a proc-level permission to a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.</param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionProcRequest.Permission.PROC_ADMIN">PROC_ADMIN</see>:
        ///         </term>
        ///         <description>Admin access to the proc.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionProcRequest.Permission.PROC_EXECUTE">PROC_EXECUTE</see>:
        ///         </term>
        ///         <description>Execute access to the proc.</description>
        ///     </item>
        /// </list></param>
        /// <param name="proc_name">Name of the proc to which the permission
        /// grants access. Must be an existing proc, or an empty string to
        /// grant access to all procs.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionProcResponse grantPermissionProc( string name,
                                                                string permission,
                                                                string proc_name,
                                                                IDictionary<string, string> options = null )
        {
            return grantPermissionProc( new GrantPermissionProcRequest( name, permission,
                                                                        proc_name, options ) );
        }

        /// <summary>Grants a system-level permission to a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionSystemResponse grantPermissionSystem( GrantPermissionSystemRequest request_ )
        {
            GrantPermissionSystemResponse actualResponse_ = SubmitRequest<GrantPermissionSystemResponse>("/grant/permission/system", request_, false);

            return actualResponse_;
        }

        /// <summary>Grants a system-level permission to a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.</param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionSystemRequest.Permission.SYSTEM_ADMIN">SYSTEM_ADMIN</see>:
        ///         </term>
        ///         <description>Full access to all data and system functions.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionSystemRequest.Permission.SYSTEM_USER_ADMIN">SYSTEM_USER_ADMIN</see>:
        ///         </term>
        ///         <description>Access to administer users and roles that do
        ///         not have system_admin permission.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionSystemRequest.Permission.SYSTEM_WRITE">SYSTEM_WRITE</see>:
        ///         </term>
        ///         <description>Read and write access to all tables.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionSystemRequest.Permission.SYSTEM_READ">SYSTEM_READ</see>:
        ///         </term>
        ///         <description>Read-only access to all tables.</description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionSystemResponse grantPermissionSystem( string name,
                                                                    string permission,
                                                                    IDictionary<string, string> options = null )
        {
            return grantPermissionSystem( new GrantPermissionSystemRequest( name,
                                                                            permission,
                                                                            options ) );
        }

        /// <summary>Grants a table-level permission to a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionTableResponse grantPermissionTable( GrantPermissionTableRequest request_ )
        {
            GrantPermissionTableResponse actualResponse_ = SubmitRequest<GrantPermissionTableResponse>("/grant/permission/table", request_, false);

            return actualResponse_;
        }

        /// <summary>Grants a table-level permission to a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role to which the permission
        /// will be granted. Must be an existing user or role.</param>
        /// <param name="permission">Permission to grant to the user or role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionTableRequest.Permission.TABLE_ADMIN">TABLE_ADMIN</see>:
        ///         </term>
        ///         <description>Full read/write and administrative access to
        ///         the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionTableRequest.Permission.TABLE_INSERT">TABLE_INSERT</see>:
        ///         </term>
        ///         <description>Insert access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionTableRequest.Permission.TABLE_UPDATE">TABLE_UPDATE</see>:
        ///         </term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionTableRequest.Permission.TABLE_DELETE">TABLE_DELETE</see>:
        ///         </term>
        ///         <description>Delete access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionTableRequest.Permission.TABLE_READ">TABLE_READ</see>:
        ///         </term>
        ///         <description>Read access to the table.</description>
        ///     </item>
        /// </list></param>
        /// <param name="table_name">Name of the table to which the permission
        /// grants access, in [schema_name.]table_name format, using standard
        /// <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table, view, or schema. If a schema, the permission also applies to
        /// tables and views in the schema.</param>
        /// <param name="filter_expression">Optional filter expression to apply
        /// to this grant.  Only rows that match the filter will be affected.
        /// The default value is ''.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="GrantPermissionTableRequest.Options.COLUMNS">COLUMNS</see>:
        ///         </term>
        ///         <description>Apply security to these columns,
        ///         comma-separated. The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantPermissionTableResponse grantPermissionTable( string name,
                                                                  string permission,
                                                                  string table_name,
                                                                  string filter_expression = "",
                                                                  IDictionary<string, string> options = null )
        {
            return grantPermissionTable( new GrantPermissionTableRequest( name,
                                                                          permission,
                                                                          table_name,
                                                                          filter_expression,
                                                                          options ) );
        }

        /// <summary>Grants membership in a role to a user or role.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantRoleResponse grantRole( GrantRoleRequest request_ )
        {
            GrantRoleResponse actualResponse_ = SubmitRequest<GrantRoleResponse>("/grant/role", request_, false);

            return actualResponse_;
        }

        /// <summary>Grants membership in a role to a user or role.</summary>
        ///
        /// <param name="role">Name of the role in which membership will be
        /// granted. Must be an existing role.</param>
        /// <param name="member">Name of the user or role that will be granted
        /// membership in <paramref name="role" />. Must be an existing user or
        /// role.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public GrantRoleResponse grantRole( string role,
                                            string member,
                                            IDictionary<string, string> options = null )
        {
            return grantRole( new GrantRoleRequest( role, member, options ) );
        }

        /// <summary>Checks if the specified user has the specified permission
        /// on the specified object.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasPermissionResponse hasPermission( HasPermissionRequest request_ )
        {
            HasPermissionResponse actualResponse_ = SubmitRequest<HasPermissionResponse>("/has/permission", request_, false);

            return actualResponse_;
        }

        /// <summary>Checks if the specified user has the specified permission
        /// on the specified object.</summary>
        ///
        /// <param name="principal">Name of the user for which the permission
        /// is being checked. Must be an existing user. If blank, will use the
        /// current user. The default value is ''.</param>
        /// <param name="_object">Name of object to check for the requested
        /// permission.  It is recommended to use a fully-qualified name when
        /// possible.</param>
        /// <param name="object_type">The type of object being checked.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.CONTEXT">CONTEXT</see>:
        ///         </term>
        ///         <description>Context</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.DATASINK">DATASINK</see>:
        ///         </term>
        ///         <description>Data Sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.DATASOURCE">DATASOURCE</see>:
        ///         </term>
        ///         <description>Data Source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.DIRECTORY">DIRECTORY</see>:
        ///         </term>
        ///         <description>KiFS File Directory</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.GRAPH">GRAPH</see>:
        ///         </term>
        ///         <description>A Graph object</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.PROC">PROC</see>:
        ///         </term>
        ///         <description>UDF Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.SCHEMA">SCHEMA</see>:
        ///         </term>
        ///         <description>Schema</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.SQL_PROC">SQL_PROC</see>:
        ///         </term>
        ///         <description>SQL Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.SYSTEM">SYSTEM</see>:
        ///         </term>
        ///         <description>System-level access</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.TABLE">TABLE</see>:
        ///         </term>
        ///         <description>Database Table</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.ObjectType.TABLE_MONITOR">TABLE_MONITOR</see>:
        ///         </term>
        ///         <description>Table monitor</description>
        ///     </item>
        /// </list></param>
        /// <param name="permission">Permission to check for.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.ADMIN">ADMIN</see>:
        ///         </term>
        ///         <description>Full read/write and administrative access on
        ///         the object.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.CONNECT">CONNECT</see>:
        ///         </term>
        ///         <description>Connect access on the given data source or
        ///         data sink.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.CREATE">CREATE</see>:
        ///         </term>
        ///         <description>Ability to create new objects of this type.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.DELETE">DELETE</see>:
        ///         </term>
        ///         <description>Delete rows from tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.EXECUTE">EXECUTE</see>:
        ///         </term>
        ///         <description>Ability to Execute the Procedure object.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.INSERT">INSERT</see>:
        ///         </term>
        ///         <description>Insert access to tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.READ">READ</see>:
        ///         </term>
        ///         <description>Ability to read, list and use the object.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.UPDATE">UPDATE</see>:
        ///         </term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.USER_ADMIN">USER_ADMIN</see>:
        ///         </term>
        ///         <description>Access to administer users and roles that do
        ///         not have system_admin permission.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Permission.WRITE">WRITE</see>:
        ///         </term>
        ///         <description>Access to write, change and delete objects.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="HasPermissionRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="HasPermissionRequest.Options.FALSE">FALSE</see> will
        ///         return an error if the provided <paramref name="_object" />
        ///         does not exist or is blank. If <see
        ///         cref="HasPermissionRequest.Options.TRUE">TRUE</see> then it
        ///         will return <see
        ///         cref="HasPermissionResponse.HasPermission.FALSE">FALSE</see>
        ///         for <see
        ///         cref="HasPermissionResponse.has_permission">has_permission</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="HasPermissionRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="HasPermissionRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="HasPermissionRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasPermissionResponse hasPermission( string principal,
                                                    string _object,
                                                    string object_type,
                                                    string permission,
                                                    IDictionary<string, string> options = null )
        {
            return hasPermission( new HasPermissionRequest( principal, _object,
                                                            object_type, permission,
                                                            options ) );
        }

        /// <summary>Checks the existence of a proc with the given name.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasProcResponse hasProc( HasProcRequest request_ )
        {
            HasProcResponse actualResponse_ = SubmitRequest<HasProcResponse>("/has/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Checks the existence of a proc with the given name.
        /// </summary>
        ///
        /// <param name="proc_name">Name of the proc to check for existence.
        /// </param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasProcResponse hasProc( string proc_name,
                                        IDictionary<string, string> options = null )
        {
            return hasProc( new HasProcRequest( proc_name, options ) );
        }

        /// <summary>Checks if the specified user has the specified role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasRoleResponse hasRole( HasRoleRequest request_ )
        {
            HasRoleResponse actualResponse_ = SubmitRequest<HasRoleResponse>("/has/role", request_, false);

            return actualResponse_;
        }

        /// <summary>Checks if the specified user has the specified role.
        /// </summary>
        ///
        /// <param name="principal">Name of the user for which role membersih
        /// is being checked. Must be an existing user. If blank, will use the
        /// current user. The default value is ''.</param>
        /// <param name="role">Name of role to check for membership.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="HasRoleRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="HasRoleRequest.Options.FALSE">FALSE</see> will return
        ///         an error if the provided <paramref name="role" /> does not
        ///         exist or is blank. If <see
        ///         cref="HasRoleRequest.Options.TRUE">TRUE</see> then it will
        ///         return <see
        ///         cref="HasRoleResponse.HasRole.FALSE">FALSE</see> for <see
        ///         cref="HasRoleResponse.has_role">has_role</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="HasRoleRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="HasRoleRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="HasRoleRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="HasRoleRequest.Options.ONLY_DIRECT">ONLY_DIRECT</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="HasRoleRequest.Options.FALSE">FALSE</see> will search
        ///         recursively if the <paramref name="principal" /> is a
        ///         member of <paramref name="role" />.  If <see
        ///         cref="HasRoleRequest.Options.TRUE">TRUE</see> then
        ///         <paramref name="principal" /> must directly be a member of
        ///         <paramref name="role" />.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="HasRoleRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="HasRoleRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="HasRoleRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasRoleResponse hasRole( string principal,
                                        string role,
                                        IDictionary<string, string> options = null )
        {
            return hasRole( new HasRoleRequest( principal, role, options ) );
        }

        /// <summary>Checks for the existence of a schema with the given name.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasSchemaResponse hasSchema( HasSchemaRequest request_ )
        {
            HasSchemaResponse actualResponse_ = SubmitRequest<HasSchemaResponse>("/has/schema", request_, false);

            return actualResponse_;
        }

        /// <summary>Checks for the existence of a schema with the given name.
        /// </summary>
        ///
        /// <param name="schema_name">Name of the schema to check for
        /// existence, in root, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasSchemaResponse hasSchema( string schema_name,
                                            IDictionary<string, string> options = null )
        {
            return hasSchema( new HasSchemaRequest( schema_name, options ) );
        }

        /// <summary>Checks for the existence of a table with the given name.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasTableResponse hasTable( HasTableRequest request_ )
        {
            HasTableResponse actualResponse_ = SubmitRequest<HasTableResponse>("/has/table", request_, false);

            return actualResponse_;
        }

        /// <summary>Checks for the existence of a table with the given name.
        /// </summary>
        ///
        /// <param name="table_name">Name of the table to check for existence,
        /// in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasTableResponse hasTable( string table_name,
                                          IDictionary<string, string> options = null )
        {
            return hasTable( new HasTableRequest( table_name, options ) );
        }

        /// <summary>Check for the existence of a type.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasTypeResponse hasType( HasTypeRequest request_ )
        {
            HasTypeResponse actualResponse_ = SubmitRequest<HasTypeResponse>("/has/type", request_, false);

            return actualResponse_;
        }

        /// <summary>Check for the existence of a type.</summary>
        ///
        /// <param name="type_id">Id of the type returned in response to <see
        /// cref="createType(string,string,IDictionary{string,IList{string}},IDictionary{string,string})">createType</see>
        /// request.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public HasTypeResponse hasType( string type_id,
                                        IDictionary<string, string> options = null )
        {
            return hasType( new HasTypeRequest( type_id, options ) );
        }

        /// @cond NO_DOCS
        public ImportModelResponse importModel( ImportModelRequest request_ )
        {
            ImportModelResponse actualResponse_ = SubmitRequest<ImportModelResponse>("/import/model", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public ImportModelResponse importModel( string model_name,
                                                string registry_name,
                                                string container,
                                                string run_function,
                                                string model_type,
                                                IDictionary<string, string> options = null )
        {
            return importModel( new ImportModelRequest( model_name, registry_name,
                                                        container, run_function,
                                                        model_type, options ) );
        }
        /// @endcond

        /// <summary>Adds multiple records to the specified table.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the records are fully
        /// inserted and available. The response payload provides the counts of
        /// the number of records actually inserted and/or updated, and can
        /// provide the unique identifier of each added record.</para>
        /// <para>The <see cref="RawInsertRecordsRequest.options">options</see>
        /// parameter can be used to customize this function's behavior.</para>
        /// <para>The <see
        /// cref="RawInsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        /// option specifies the record collision policy for inserting into a
        /// table with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>, but is ignored if no primary key
        /// exists.</para>
        /// <para>The <see
        /// cref="RawInsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>
        /// option indicates that the database should return the unique
        /// identifiers of inserted records.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsResponse insertRecordsRaw( RawInsertRecordsRequest request_ )
        {
            InsertRecordsResponse actualResponse_ = SubmitRequest<InsertRecordsResponse>("/insert/records", request_, true);

            return actualResponse_;
        }

        /// <summary>Adds multiple records to the specified table.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the records are fully
        /// inserted and available. The response payload provides the counts of
        /// the number of records actually inserted and/or updated, and can
        /// provide the unique identifier of each added record.</para>
        /// <para>The <see cref="InsertRecordsRequest{T}.options">options</see>
        /// parameter can be used to customize this function's behavior.</para>
        /// <para>The <see
        /// cref="InsertRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        /// option specifies the record collision policy for inserting into a
        /// table with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>, but is ignored if no primary key
        /// exists.</para>
        /// <para>The <see
        /// cref="InsertRecordsRequest{T}.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>
        /// option indicates that the database should return the unique
        /// identifiers of inserted records.</para></remarks>
        ///
        /// <typeparam name="T">The type of object being added.</typeparam>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsResponse insertRecords<T>( InsertRecordsRequest<T> request_ )
        {
            RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest();
            actualRequest_.table_name = request_.table_name;
            foreach (var thisObj in request_.data) actualRequest_.list.Add( AvroEncode( thisObj ) );
            actualRequest_.options = request_.options;
            InsertRecordsResponse actualResponse_ = SubmitRequest<InsertRecordsResponse>("/insert/records", actualRequest_, true);

            return actualResponse_;
        }

        /// <summary>Adds multiple records to the specified table.</summary>
        /// <remarks><para>The operation is synchronous, meaning that a
        /// response will not be returned until all the records are fully
        /// inserted and available. The response payload provides the counts of
        /// the number of records actually inserted and/or updated, and can
        /// provide the unique identifier of each added record.</para>
        /// <para>The <paramref name="options" /> parameter can be used to
        /// customize this function's behavior.</para>
        /// <para>The <see
        /// cref="InsertRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        /// option specifies the record collision policy for inserting into a
        /// table with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>, but is ignored if no primary key
        /// exists.</para>
        /// <para>The <see
        /// cref="InsertRecordsRequest{T}.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>
        /// option indicates that the database should return the unique
        /// identifiers of inserted records.</para></remarks>
        ///
        /// <typeparam name="T">The type of object being added.</typeparam>
        ///
        /// <param name="table_name">Name of table to which the records are to
        /// be added, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table.</param>
        /// <param name="data">An array of binary-encoded data for the records
        /// to be added. All records must be of the same type as that of the
        /// table. Empty array if <c>list_encoding</c> is <c>JSON</c>.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision policy for
        ///         inserting into a table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>. If set to <see
        ///         cref="InsertRecordsRequest{T}.Options.TRUE">TRUE</see>, any
        ///         existing table record with primary key values that match
        ///         those of a record being inserted will be replaced by that
        ///         new record (the new data will be "upserted"). If set to
        ///         <see
        ///         cref="InsertRecordsRequest{T}.Options.FALSE">FALSE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will remain
        ///         unchanged, while the new record will be rejected and the
        ///         error handled as determined by <see
        ///         cref="InsertRecordsRequest{T}.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>,
        ///         <see
        ///         cref="InsertRecordsRequest{T}.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>,
        ///         & <see
        ///         cref="InsertRecordsRequest{T}.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>.
        ///         If the specified table does not have a primary key, then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Upsert new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Reject new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision
        ///         error-suppression policy for inserting into a table with a
        ///         <a href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>, only used when not in upsert
        ///         mode (upsert mode is disabled when <see
        ///         cref="InsertRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="InsertRecordsRequest{T}.Options.FALSE">FALSE</see>).
        ///         If set to <see
        ///         cref="InsertRecordsRequest{T}.Options.TRUE">TRUE</see>, any
        ///         record being inserted that is rejected for having primary
        ///         key values that match those of an existing table record
        ///         will be ignored with no error generated.  If <see
        ///         cref="InsertRecordsRequest{T}.Options.FALSE">FALSE</see>,
        ///         the rejection of any record for having primary key values
        ///         matching an existing record will result in an error being
        ///         reported, as determined by <see
        ///         cref="InsertRecordsRequest{T}.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>
        ///         & <see
        ///         cref="InsertRecordsRequest{T}.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>.
        ///         If the specified table does not have a primary key or if
        ///         upsert mode is in effect (<see
        ///         cref="InsertRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="InsertRecordsRequest{T}.Options.TRUE">TRUE</see>),
        ///         then this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Ignore new records whose primary key
        ///                 values collide with those of existing records
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat as errors any new records whose
        ///                 primary key values collide with those of existing
        ///                 records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRequest.Options.RETURN_RECORD_IDS">RETURN_RECORD_IDS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsRequest{T}.Options.TRUE">TRUE</see> then
        ///         return the internal record id along for each inserted
        ///         record.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsRequest{T}.Options.TRUE">TRUE</see>, any
        ///         strings which are too long for their target charN string
        ///         columns will be truncated to fit.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRequest.Options.RETURN_INDIVIDUAL_ERRORS">RETURN_INDIVIDUAL_ERRORS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsRequest{T}.Options.TRUE">TRUE</see>,
        ///         success will always be returned, and any errors found will
        ///         be included in the info map.  The "bad_record_indices"
        ///         entry is a comma-separated list of bad records (0-based).
        ///         And if so, there will also be an "error_N" entry for each
        ///         record with an error, where N is the index (0-based).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRequest.Options.ALLOW_PARTIAL_BATCH">ALLOW_PARTIAL_BATCH</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsRequest{T}.Options.TRUE">TRUE</see>, all
        ///         correct records will be inserted and incorrect records will
        ///         be rejected and reported.  Otherwise, the entire batch will
        ///         be rejected if any records are incorrect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsRequest{T}.Options.TRUE">TRUE</see>, no
        ///         data will be saved and any errors will be returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsResponse insertRecords<T>( string table_name,
                                                       IList<T> data,
                                                       IDictionary<string, string> options = null )
        {
            return insertRecords<T>( new InsertRecordsRequest<T>( table_name, data,
                                                                  options ) );
        }

        /// <summary>Reads from one or more files and inserts the data into a
        /// new or existing table.</summary>
        /// <remarks><para>The source data can be located either in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>; on the cluster,
        /// accessible to the database; or remotely, accessible via a
        /// pre-defined external <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>.</para>
        /// <para>For delimited text files, there are two loading schemes:
        /// positional and name-based. The name-based loading scheme is enabled
        /// when the file has a header present and <see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>
        /// is set to <see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>. In
        /// this scheme, the source file(s) field names must match the target
        /// table's column names exactly; however, the source file can have
        /// more fields than the target table has columns. If <see
        /// cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>
        /// is set to <see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>,
        /// the source file can have fewer fields than the target table has
        /// columns. If the name-based loading scheme is being used, names
        /// matching the file header's names may be provided to <see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>
        /// instead of numbers, but ranges are not supported.</para>
        /// <para>Note: Due to data being loaded in parallel, there is no
        /// insertion order guaranteed.  For tables with primary keys, in the
        /// case of a primary key collision, this means it is indeterminate
        /// which record will be inserted first and remain, while the rest of
        /// the colliding key records are discarded.</para>
        /// <para>Returns once all files are processed.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsFromFilesResponse insertRecordsFromFiles( InsertRecordsFromFilesRequest request_ )
        {
            InsertRecordsFromFilesResponse actualResponse_ = SubmitRequest<InsertRecordsFromFilesResponse>("/insert/records/fromfiles", request_, false);

            return actualResponse_;
        }

        /// <summary>Reads from one or more files and inserts the data into a
        /// new or existing table.</summary>
        /// <remarks><para>The source data can be located either in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>; on the cluster,
        /// accessible to the database; or remotely, accessible via a
        /// pre-defined external <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a>.</para>
        /// <para>For delimited text files, there are two loading schemes:
        /// positional and name-based. The name-based loading scheme is enabled
        /// when the file has a header present and <see
        /// cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>
        /// is set to <see
        /// cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>. In
        /// this scheme, the source file(s) field names must match the target
        /// table's column names exactly; however, the source file can have
        /// more fields than the target table has columns. If <see
        /// cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>
        /// is set to <see
        /// cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>,
        /// the source file can have fewer fields than the target table has
        /// columns. If the name-based loading scheme is being used, names
        /// matching the file header's names may be provided to <see
        /// cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>
        /// instead of numbers, but ranges are not supported.</para>
        /// <para>Note: Due to data being loaded in parallel, there is no
        /// insertion order guaranteed.  For tables with primary keys, in the
        /// case of a primary key collision, this means it is indeterminate
        /// which record will be inserted first and remain, while the rest of
        /// the colliding key records are discarded.</para>
        /// <para>Returns once all files are processed.</para></remarks>
        ///
        /// <param name="table_name">Name of the table into which the data will
        /// be inserted, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. If the table does not
        /// exist, the table will be created using either an existing <see
        /// cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>
        /// or the type inferred from the file, and the new table name will
        /// have to meet standard <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="filepaths">A list of file paths from which data will
        /// be sourced;
        /// For paths in <a href="../../../tools/kifs/" target="_top">KiFS</a>,
        /// use the uri prefix of kifs:// followed by the path to a file or
        /// directory. File matching by prefix is supported, e.g.
        /// kifs://dir/file would match dir/file_1 and dir/file_2. When prefix
        /// matching is used, the path must start with a full, valid KiFS
        /// directory name.
        /// If an external data source is specified in <see
        /// cref="InsertRecordsFromFilesRequest.Options.DATASOURCE_NAME">DATASOURCE_NAME</see>,
        /// these file paths must resolve to accessible files at that data
        /// source location. Prefix matching is supported. If the data source
        /// is hdfs, prefixes must be aligned with directories, i.e. partial
        /// file names will not match.
        /// If no data source is specified, the files are assumed to be local
        /// to the database and must all be accessible to the gpudb user,
        /// residing on the path (or relative to the path) specified by the
        /// external files directory in the Kinetica <a
        /// href="../../../config/#config-main-external-files"
        /// target="_top">configuration file</a>. Wildcards (*) can be used to
        /// specify a group of files.  Prefix matching is supported, the
        /// prefixes must be aligned with directories.
        /// If the first path ends in .tsv, the text delimiter will be
        /// defaulted to a tab character. If the first path ends in .psv, the
        /// text delimiter will be defaulted to a pipe character (|).</param>
        /// <param name="modify_columns">Not implemented yet. The default value
        /// is an empty Dictionary.</param>
        /// <param name="create_table_options">Options from <see
        /// cref="createTable(string,string,IDictionary{string,string})">createTable</see>,
        /// allowing the structure of the table to be defined independently of
        /// the data source, when creating the target table.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:
        ///         </term>
        ///         <description>ID of a currently registered <a
        ///         href="../../../concepts/types/" target="_top">type</a>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see>,
        ///         prevents an error from occurring if the table already
        ///         exists and is of the given type.  If a table with the same
        ///         name but a different type exists, it is still an error.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:
        ///         </term>
        ///         <description>Affects the <a
        ///         href="../../../concepts/tables/#distribution"
        ///         target="_top">distribution scheme</a> for the table's data.
        ///         If <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see>
        ///         and the given table has no explicit <a
        ///         href="../../../concepts/tables/#shard-key"
        ///         target="_top">shard key</a> defined, the table will be <a
        ///         href="../../../concepts/tables/#replication"
        ///         target="_top">replicated</a>.  If <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>,
        ///         the table will be <a
        ///         href="../../../concepts/tables/#sharding"
        ///         target="_top">sharded</a> according to the shard key
        ///         specified in the given <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>,
        ///         or <a href="../../../concepts/tables/#random-sharding"
        ///         target="_top">randomly sharded</a>, if no shard key is
        ///         specified. Note that a type containing a shard key cannot
        ///         be used to create a replicated table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:
        ///         </term>
        ///         <description>Semicolon-separated list of <a
        ///         href="../../../concepts/tables/#foreign-keys"
        ///         target="_top">foreign keys</a>, of the format
        ///         '(source_column_name [, ...]) references
        ///         target_table_name(primary_key_column_name [, ...]) [as
        ///         foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:
        ///         </term>
        ///         <description>Foreign shard key of the format 'source_column
        ///         references shard_by_column from
        ///         target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:
        ///         </term>
        ///         <description><a
        ///         href="../../../concepts/tables/#partitioning"
        ///         target="_top">Partitioning</a> scheme to use.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.RANGE">RANGE</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-range"
        ///                 target="_top">range partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-interval"
        ///                 target="_top">interval partitioning</a>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.LIST">LIST</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-list"
        ///                 target="_top">list partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.HASH">HASH</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-hash"
        ///                 target="_top">hash partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.SERIES">SERIES</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-series"
        ///                 target="_top">series partitioning</a>.
        ///                 </description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition keys, which
        ///         are the columns or column expressions by which records will
        ///         be assigned to partitions defined by <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition definitions,
        ///         whose format depends on the choice of <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>.
        ///         See <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-interval"
        ///         target="_top">interval partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-hash"
        ///         target="_top">hash partitioning</a>, or <a
        ///         href="../../../concepts/tables/#partitioning-by-series"
        ///         target="_top">series partitioning</a> for example formats.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see>,
        ///         a new partition will be created for values which don't fall
        ///         into an existing partition.  Currently, only supported for
        ///         <a href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitions</a>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for this table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:
        ///         </term>
        ///         <description>Indicates whether the table is a <a
        ///         href="../../../concepts/tables_memory_only/"
        ///         target="_top">memory-only table</a>. A result table cannot
        ///         contain columns with text_search <a
        ///         href="../../../concepts/types/#data-handling"
        ///         target="_top">data-handling</a>, and it will not be
        ///         retained if the server is restarted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.BAD_RECORD_TABLE_NAME">BAD_RECORD_TABLE_NAME</see>:
        ///         </term>
        ///         <description>Name of a table to which records that were
        ///         rejected are written. The bad-record-table has the
        ///         following columns: line_number (long), line_rejected
        ///         (string), error_message (string).  When <see
        ///         cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>
        ///         is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>,
        ///         bad records table is not populated.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.BAD_RECORD_TABLE_LIMIT">BAD_RECORD_TABLE_LIMIT</see>:
        ///         </term>
        ///         <description>A positive integer indicating the maximum
        ///         number of records that can be written to the
        ///         bad-record-table. The default value is '10000'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.BAD_RECORD_TABLE_LIMIT_PER_INPUT">BAD_RECORD_TABLE_LIMIT_PER_INPUT</see>:
        ///         </term>
        ///         <description>For subscriptions, a positive integer
        ///         indicating the maximum number of records that can be
        ///         written to the bad-record-table per file/payload. Default
        ///         value will be <see
        ///         cref="InsertRecordsFromFilesRequest.Options.BAD_RECORD_TABLE_LIMIT">BAD_RECORD_TABLE_LIMIT</see>
        ///         and total size of the table per rank is limited to <see
        ///         cref="InsertRecordsFromFilesRequest.Options.BAD_RECORD_TABLE_LIMIT">BAD_RECORD_TABLE_LIMIT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Number of records to insert per batch when
        ///         inserting data. The default value is '50000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:
        ///         </term>
        ///         <description>For each target column specified, applies the
        ///         column-property-bound format to the source data loaded into
        ///         that column.  Each column format will contain a mapping of
        ///         one or more of its column properties to an appropriate
        ///         format for each property.  Currently supported column
        ///         properties include date, time, & datetime. The parameter
        ///         value must be formatted as a JSON string of maps of column
        ///         names to maps of column properties to their corresponding
        ///         column formats, e.g., '{ "order_date" : { "date" :
        ///         "%Y.%m.%d" }, "order_time" : { "time" : "%H:%M:%S" } }'.
        ///         See <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>
        ///         for valid format syntax.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:
        ///         </term>
        ///         <description>Specifies a comma-delimited list of columns
        ///         from the source data to load.  If more than one file is
        ///         being loaded, this list applies to all files.
        ///         Column numbers can be specified discretely or as a range.
        ///         For example, a value of '5,7,1..3' will insert values from
        ///         the fifth column in the source data into the first column
        ///         in the target table, from the seventh column in the source
        ///         data into the second column in the target table, and from
        ///         the first through third columns in the source data into the
        ///         third through fifth columns in the target table.
        ///         If the source data contains a header, column names matching
        ///         the file header names may be provided instead of column
        ///         numbers.  If the target table doesn't exist, the table will
        ///         be created with the columns in this order.  If the target
        ///         table does exist with columns in a different order than the
        ///         source data, this list can be used to match the order of
        ///         the target table.  For example, a value of 'C, B, A' will
        ///         create a three column table with column C, followed by
        ///         column B, followed by column A; or will insert those fields
        ///         in that order into a table created with columns in that
        ///         order.  If the target table exists, the column names must
        ///         match the source data field names for a name-mapping to be
        ///         successful.
        ///         Mutually exclusive with <see
        ///         cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>:
        ///         </term>
        ///         <description>Specifies a comma-delimited list of columns
        ///         from the source data to skip.  Mutually exclusive with <see
        ///         cref="InsertRecordsFromFilesRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:
        ///         </term>
        ///         <description>Source data compression type.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>No compression.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.AUTO">AUTO</see>:
        ///                 </term>
        ///                 <description>Auto detect compression type
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.GZIP">GZIP</see>:
        ///                 </term>
        ///                 <description>gzip file compression.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.BZIP2">BZIP2</see>:
        ///                 </term>
        ///                 <description>bzip2 file compression.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.AUTO">AUTO</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.DATASOURCE_NAME">DATASOURCE_NAME</see>:
        ///         </term>
        ///         <description>Name of an existing external data source from
        ///         which data file(s) specified in <paramref name="filepaths"
        ///         /> will be loaded</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:
        ///         </term>
        ///         <description>Specifies the default format to be applied to
        ///         source data loaded into columns with the corresponding
        ///         column property.  Currently supported column properties
        ///         include date, time, & datetime.  This default
        ///         column-property-bound format can be overridden by
        ///         specifying a column property & format for a given target
        ///         column in <see
        ///         cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>.
        ///         For each specified annotation, the format will apply to all
        ///         columns with that annotation unless a custom <see
        ///         cref="InsertRecordsFromFilesRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>
        ///         for that annotation is specified.
        ///         The parameter value must be formatted as a JSON string that
        ///         is a map of column properties to their respective column
        ///         formats, e.g., '{ "date" : "%Y.%m.%d", "time" : "%H:%M:%S"
        ///         }'.  Column formats are specified as a string of control
        ///         characters and plain text. The supported control characters
        ///         are 'Y', 'm', 'd', 'H', 'M', 'S', and 's', which follow the
        ///         Linux 'strptime()' specification, as well as 's', which
        ///         specifies seconds and fractional seconds (though the
        ///         fractional component will be truncated past milliseconds).
        ///         Formats for the 'date' annotation must include the 'Y',
        ///         'm', and 'd' control characters. Formats for the 'time'
        ///         annotation must include the 'H', 'M', and either 'S' or 's'
        ///         (but not both) control characters. Formats for the
        ///         'datetime' annotation meet both the 'date' and 'time'
        ///         control character requirements. For example, '{"datetime" :
        ///         "%m/%d/%Y %H:%M:%S" }' would be used to interpret text as
        ///         "05/04/2000 12:12:11"</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:
        ///         </term>
        ///         <description>Specifies how errors should be handled upon
        ///         insertion.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.PERMISSIVE">PERMISSIVE</see>:
        ///                 </term>
        ///                 <description>Records with missing columns are
        ///                 populated with nulls if possible; otherwise, the
        ///                 malformed records are skipped.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:
        ///                 </term>
        ///                 <description>Malformed records are skipped.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>:
        ///                 </term>
        ///                 <description>Stops current insertion and aborts
        ///                 entire operation when an error is encountered.
        ///                 Primary key collisions are considered abortable
        ///                 errors in this mode.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.ABORT">ABORT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>:
        ///         </term>
        ///         <description>Specifies the type of the file(s) whose
        ///         records will be inserted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.AVRO">AVRO</see>:
        ///                 </term>
        ///                 <description>Avro file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>:
        ///                 </term>
        ///                 <description>Delimited text file format; e.g., CSV,
        ///                 TSV, PSV, etc.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.GDB">GDB</see>:
        ///                 </term>
        ///                 <description>Esri/GDB file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.JSON">JSON</see>:
        ///                 </term>
        ///                 <description>Json file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.PARQUET">PARQUET</see>:
        ///                 </term>
        ///                 <description>Apache Parquet file format
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.SHAPEFILE">SHAPEFILE</see>:
        ///                 </term>
        ///                 <description>ShapeFile file format</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.FLATTEN_COLUMNS">FLATTEN_COLUMNS</see>:
        ///         </term>
        ///         <description>Specifies how to handle nested columns.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Break up nested columns to multiple
        ///                 columns</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat nested columns as json columns
        ///                 instead of flattening</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.GDAL_CONFIGURATION_OPTIONS">GDAL_CONFIGURATION_OPTIONS</see>:
        ///         </term>
        ///         <description>Comma separated list of gdal conf options, for
        ///         the specific requets: key=value</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision
        ///         error-suppression policy for inserting into a table with a
        ///         <a href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>, only used when not in upsert
        ///         mode (upsert mode is disabled when <see
        ///         cref="InsertRecordsFromFilesRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>).
        ///         If set to <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>,
        ///         any record being inserted that is rejected for having
        ///         primary key values that match those of an existing table
        ///         record will be ignored with no error generated.  If <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>,
        ///         the rejection of any record for having primary key values
        ///         matching an existing record will result in an error being
        ///         reported, as determined by <see
        ///         cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///         If the specified table does not have a primary key or if
        ///         upsert mode is in effect (<see
        ///         cref="InsertRecordsFromFilesRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>),
        ///         then this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Ignore new records whose primary key
        ///                 values collide with those of existing records
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat as errors any new records whose
        ///                 primary key values collide with those of existing
        ///                 records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.INGESTION_MODE">INGESTION_MODE</see>:
        ///         </term>
        ///         <description>Whether to do a full load, dry run, or perform
        ///         a type inference on the source data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FULL">FULL</see>:
        ///                 </term>
        ///                 <description>Run a type inference on the source
        ///                 data (if needed) and ingest</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///                 </term>
        ///                 <description>Does not load data, but walks through
        ///                 the source data and determines the number of valid
        ///                 records, taking into account the current mode of
        ///                 <see
        ///                 cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TYPE_INFERENCE_ONLY">TYPE_INFERENCE_ONLY</see>:
        ///                 </term>
        ///                 <description>Infer the type of the source data and
        ///                 return, without ingesting any data.  The inferred
        ///                 type is returned in the response.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FULL">FULL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.KAFKA_CONSUMERS_PER_RANK">KAFKA_CONSUMERS_PER_RANK</see>:
        ///         </term>
        ///         <description>Number of Kafka consumer threads per rank
        ///         (valid range 1-6). The default value is '1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.KAFKA_GROUP_ID">KAFKA_GROUP_ID</see>:
        ///         </term>
        ///         <description>The group id to be used when consuming data
        ///         from a Kafka topic (valid only for Kafka datasource
        ///         subscriptions).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.KAFKA_OFFSET_RESET_POLICY">KAFKA_OFFSET_RESET_POLICY</see>:
        ///         </term>
        ///         <description>Policy to determine whether the Kafka data
        ///         consumption starts either at earliest offset or latest
        ///         offset.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.EARLIEST">EARLIEST</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.LATEST">LATEST</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.EARLIEST">EARLIEST</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.KAFKA_OPTIMISTIC_INGEST">KAFKA_OPTIMISTIC_INGEST</see>:
        ///         </term>
        ///         <description>Enable optimistic ingestion where Kafka topic
        ///         offsets and table data are committed independently to
        ///         achieve parallelism.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.KAFKA_SUBSCRIPTION_CANCEL_AFTER">KAFKA_SUBSCRIPTION_CANCEL_AFTER</see>:
        ///         </term>
        ///         <description>Sets the Kafka subscription lifespan (in
        ///         minutes). Expired subscription will be cancelled
        ///         automatically.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.KAFKA_TYPE_INFERENCE_FETCH_TIMEOUT">KAFKA_TYPE_INFERENCE_FETCH_TIMEOUT</see>:
        ///         </term>
        ///         <description>Maximum time to collect Kafka messages before
        ///         type inferencing on the set of them.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.LAYER">LAYER</see>:
        ///         </term>
        ///         <description>Geo files layer(s) name(s): comma separated.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.LOADING_MODE">LOADING_MODE</see>:
        ///         </term>
        ///         <description>Scheme for distributing the extraction and
        ///         loading of data from the source data file(s). This option
        ///         applies only when loading files that are local to the
        ///         database.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>:
        ///                 </term>
        ///                 <description>The head node loads all data. All
        ///                 files must be available to the head node.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:
        ///                 </term>
        ///                 <description>The head node coordinates loading data
        ///                 by worker processes across all nodes from shared
        ///                 files available to all workers.
        ///                 NOTE:
        ///                 Instead of existing on a shared source, the files
        ///                 can be duplicated on a source local to each host to
        ///                 improve performance, though the files must appear
        ///                 as the same data set from the perspective of all
        ///                 hosts performing the load.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:
        ///                 </term>
        ///                 <description>A single worker process on each node
        ///                 loads all files that are available to it. This
        ///                 option works best when each worker loads files from
        ///                 its own file system, to maximize performance. In
        ///                 order to avoid data duplication, either each worker
        ///                 performing the load needs to have visibility to a
        ///                 set of files unique to it (no file is visible to
        ///                 more than one node) or the target table needs to
        ///                 have a primary key (which will allow the worker to
        ///                 automatically deduplicate data).
        ///                 NOTE:
        ///                 If the target table doesn't exist, the table
        ///                 structure will be determined by the head node. If
        ///                 the head node has no files local to it, it will be
        ///                 unable to determine the structure and the request
        ///                 will fail.
        ///                 If the head node is configured to have no worker
        ///                 processes, no data strictly accessible to the head
        ///                 node will be loaded.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.HEAD">HEAD</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.LOCAL_TIME_OFFSET">LOCAL_TIME_OFFSET</see>:
        ///         </term>
        ///         <description>Apply an offset to Avro local timestamp
        ///         columns.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.MAX_RECORDS_TO_LOAD">MAX_RECORDS_TO_LOAD</see>:
        ///         </term>
        ///         <description>Limit the number of records to load in this
        ///         request: if this number is larger than <see
        ///         cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>,
        ///         then the number of records loaded will be limited to the
        ///         next whole number of <see
        ///         cref="InsertRecordsFromFilesRequest.Options.BATCH_SIZE">BATCH_SIZE</see>
        ///         (per working thread).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.NUM_TASKS_PER_RANK">NUM_TASKS_PER_RANK</see>:
        ///         </term>
        ///         <description>Number of tasks for reading file per rank.
        ///         Default will be system configuration parameter,
        ///         external_file_reader_num_tasks.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.POLL_INTERVAL">POLL_INTERVAL</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>,
        ///         the number of seconds between attempts to load external
        ///         files into the table.  If zero, polling will be continuous
        ///         as long as data is found.  If no data is found, the
        ///         interval will steadily increase to a maximum of 60 seconds.
        ///         The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.PRIMARY_KEYS">PRIMARY_KEYS</see>:
        ///         </term>
        ///         <description>Comma separated list of column names to set as
        ///         primary keys, when not specified in the type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.SCHEMA_REGISTRY_SCHEMA_NAME">SCHEMA_REGISTRY_SCHEMA_NAME</see>:
        ///         </term>
        ///         <description>Name of the Avro schema in the schema registry
        ///         to use when reading Avro records.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.SHARD_KEYS">SHARD_KEYS</see>:
        ///         </term>
        ///         <description>Comma separated list of column names to set as
        ///         shard keys, when not specified in the type.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.SKIP_LINES">SKIP_LINES</see>:
        ///         </term>
        ///         <description>Skip number of lines from begining of file.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.SUBSCRIBE">SUBSCRIBE</see>:
        ///         </term>
        ///         <description>Continuously poll the data source to check for
        ///         new data and load it into the table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TABLE_INSERT_MODE">TABLE_INSERT_MODE</see>:
        ///         </term>
        ///         <description>Insertion scheme to use when inserting records
        ///         from multiple shapefiles.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.SINGLE">SINGLE</see>:
        ///                 </term>
        ///                 <description>Insert all records into a single
        ///                 table.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TABLE_PER_FILE">TABLE_PER_FILE</see>:
        ///                 </term>
        ///                 <description>Insert records from each file into a
        ///                 new table corresponding to that file.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.SINGLE">SINGLE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:
        ///         </term>
        ///         <description>Specifies the character string that should be
        ///         interpreted as a comment line prefix in the source data.
        ///         All lines in the data starting with the provided string are
        ///         ignored.
        ///         For <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:
        ///         </term>
        ///         <description>Specifies the character delimiting field
        ///         values in the source data and field names in the header (if
        ///         present).
        ///         For <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:
        ///         </term>
        ///         <description>Specifies the character that is used to escape
        ///         other characters in the source data.
        ///         An 'a', 'b', 'f', 'n', 'r', 't', or 'v' preceded by an
        ///         escape character will be interpreted as the ASCII bell,
        ///         backspace, form feed, line feed, carriage return,
        ///         horizontal tab, & vertical tab, respectively.  For example,
        ///         the escape character followed by an 'n' will be interpreted
        ///         as a newline within a field value.
        ///         The escape character can also be used to escape the quoting
        ///         character, and will be treated as an escape character
        ///         whether it is within a quoted field value or not.
        ///         For <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:
        ///         </term>
        ///         <description>Indicates whether the source data contains a
        ///         header row.
        ///         For <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:
        ///         </term>
        ///         <description>Specifies the delimiter for <a
        ///         href="../../../concepts/types/#column-properties"
        ///         target="_top">column properties</a> in the header row (if
        ///         present).  Cannot be set to same value as <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>.
        ///         For <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:
        ///         </term>
        ///         <description>Specifies the character string that should be
        ///         interpreted as a null value in the source data.
        ///         For <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '\\N'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:
        ///         </term>
        ///         <description>Specifies the character that should be
        ///         interpreted as a field value quoting character in the
        ///         source data.  The character must appear at beginning and
        ///         end of field value to take effect.  Delimiters within
        ///         quoted fields are treated as literals and not delimiters.
        ///         Within a quoted field, two consecutive quote characters
        ///         will be interpreted as a single literal quote character,
        ///         effectively escaping it.  To not have a quote character,
        ///         specify an empty string.
        ///         For <see
        ///         cref="InsertRecordsFromFilesRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_SEARCH_COLUMNS">TEXT_SEARCH_COLUMNS</see>:
        ///         </term>
        ///         <description>Add 'text_search' property to internally
        ///         inferenced string columns. Comma seperated list of column
        ///         names or '*' for all columns. To add 'text_search' property
        ///         only to string columns greater than or equal to a minimum
        ///         size, also set the <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_SEARCH_MIN_COLUMN_LENGTH">TEXT_SEARCH_MIN_COLUMN_LENGTH</see>
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_SEARCH_MIN_COLUMN_LENGTH">TEXT_SEARCH_MIN_COLUMN_LENGTH</see>:
        ///         </term>
        ///         <description>Set the minimum column size for strings to
        ///         apply the 'text_search' property to. Used only when <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TEXT_SEARCH_COLUMNS">TEXT_SEARCH_COLUMNS</see>
        ///         has a value.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>,
        ///         truncate string values that are longer than the column's
        ///         type size.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>,
        ///         truncates the table specified by <paramref
        ///         name="table_name" /> prior to loading the file(s).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.TYPE_INFERENCE_MODE">TYPE_INFERENCE_MODE</see>:
        ///         </term>
        ///         <description>Optimize type inferencing for either speed or
        ///         accuracy.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.ACCURACY">ACCURACY</see>:
        ///                 </term>
        ///                 <description>Scans data to get exactly-typed &
        ///                 sized columns for all data scanned.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.SPEED">SPEED</see>:
        ///                 </term>
        ///                 <description>Scans data and picks the widest
        ///                 possible column types so that 'all' values will fit
        ///                 with minimum data scanned</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.ACCURACY">ACCURACY</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromFilesRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision policy for
        ///         inserting into a table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>. If set to <see
        ///         cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will be replaced by
        ///         that new record (the new data will be 'upserted'). If set
        ///         to <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will remain
        ///         unchanged, while the new record will be rejected and the
        ///         error handled as determined by <see
        ///         cref="InsertRecordsFromFilesRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>
        ///         & <see
        ///         cref="InsertRecordsFromFilesRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///         If the specified table does not have a primary key, then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Upsert new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Reject new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsFromFilesResponse insertRecordsFromFiles( string table_name,
                                                                      IList<string> filepaths,
                                                                      IDictionary<string, IDictionary<string, string>> modify_columns = null,
                                                                      IDictionary<string, string> create_table_options = null,
                                                                      IDictionary<string, string> options = null )
        {
            return insertRecordsFromFiles( new InsertRecordsFromFilesRequest( table_name,
                                                                              filepaths,
                                                                              modify_columns,
                                                                              create_table_options,
                                                                              options ) );
        }

        /// <summary>Reads from the given text-based or binary payload and
        /// inserts the data into a new or existing table.</summary>
        /// <remarks><para> The table will be created if it doesn't already
        /// exist.</para>
        /// <para>Returns once all records are processed.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsFromPayloadResponse insertRecordsFromPayload( InsertRecordsFromPayloadRequest request_ )
        {
            InsertRecordsFromPayloadResponse actualResponse_ = SubmitRequest<InsertRecordsFromPayloadResponse>("/insert/records/frompayload", request_, false);

            return actualResponse_;
        }

        /// <summary>Reads from the given text-based or binary payload and
        /// inserts the data into a new or existing table.</summary>
        /// <remarks><para> The table will be created if it doesn't already
        /// exist.</para>
        /// <para>Returns once all records are processed.</para></remarks>
        ///
        /// <param name="table_name">Name of the table into which the data will
        /// be inserted, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. If the table does not
        /// exist, the table will be created using either an existing <see
        /// cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>
        /// or the type inferred from the payload, and the new table name will
        /// have to meet standard <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="data_text">Records formatted as delimited text</param>
        /// <param name="data_bytes">Records formatted as binary data</param>
        /// <param name="modify_columns">Not implemented yet. The default value
        /// is an empty Dictionary.</param>
        /// <param name="create_table_options">Options used when creating the
        /// target table. Includes type to use. The other options match those
        /// in <see
        /// cref="createTable(string,string,IDictionary{string,string})">createTable</see>.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:
        ///         </term>
        ///         <description>ID of a currently registered <a
        ///         href="../../../concepts/types/" target="_top">type</a>. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TRUE">TRUE</see>,
        ///         prevents an error from occurring if the table already
        ///         exists and is of the given type.  If a table with the same
        ///         ID but a different type exists, it is still an error.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:
        ///         </term>
        ///         <description>Affects the <a
        ///         href="../../../concepts/tables/#distribution"
        ///         target="_top">distribution scheme</a> for the table's data.
        ///         If <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TRUE">TRUE</see>
        ///         and the given type has no explicit <a
        ///         href="../../../concepts/tables/#shard-key"
        ///         target="_top">shard key</a> defined, the table will be <a
        ///         href="../../../concepts/tables/#replication"
        ///         target="_top">replicated</a>.  If <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>,
        ///         the table will be <a
        ///         href="../../../concepts/tables/#sharding"
        ///         target="_top">sharded</a> according to the shard key
        ///         specified in the given <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>,
        ///         or <a href="../../../concepts/tables/#random-sharding"
        ///         target="_top">randomly sharded</a>, if no shard key is
        ///         specified.  Note that a type containing a shard key cannot
        ///         be used to create a replicated table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:
        ///         </term>
        ///         <description>Semicolon-separated list of <a
        ///         href="../../../concepts/tables/#foreign-keys"
        ///         target="_top">foreign keys</a>, of the format
        ///         '(source_column_name [, ...]) references
        ///         target_table_name(primary_key_column_name [, ...]) [as
        ///         foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:
        ///         </term>
        ///         <description>Foreign shard key of the format 'source_column
        ///         references shard_by_column from
        ///         target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:
        ///         </term>
        ///         <description><a
        ///         href="../../../concepts/tables/#partitioning"
        ///         target="_top">Partitioning</a> scheme to use.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.RANGE">RANGE</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-range"
        ///                 target="_top">range partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-interval"
        ///                 target="_top">interval partitioning</a>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.LIST">LIST</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-list"
        ///                 target="_top">list partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.HASH">HASH</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-hash"
        ///                 target="_top">hash partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.SERIES">SERIES</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-series"
        ///                 target="_top">series partitioning</a>.
        ///                 </description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition keys, which
        ///         are the columns or column expressions by which records will
        ///         be assigned to partitions defined by <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition definitions,
        ///         whose format depends on the choice of <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>.
        ///         See <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-interval"
        ///         target="_top">interval partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-hash"
        ///         target="_top">hash partitioning</a>, or <a
        ///         href="../../../concepts/tables/#partitioning-by-series"
        ///         target="_top">series partitioning</a> for example formats.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TRUE">TRUE</see>,
        ///         a new partition will be created for values which don't fall
        ///         into an existing partition.  Currently only supported for
        ///         <a href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitions</a>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for this table.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:
        ///         </term>
        ///         <description>Indicates whether the table is a <a
        ///         href="../../../concepts/tables_memory_only/"
        ///         target="_top">memory-only table</a>. A result table cannot
        ///         contain columns with text_search <a
        ///         href="../../../concepts/types/#data-handling"
        ///         target="_top">data-handling</a>, and it will not be
        ///         retained if the server is restarted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.AVRO_HEADER_BYTES">AVRO_HEADER_BYTES</see>:
        ///         </term>
        ///         <description>Optional number of bytes to skip when reading
        ///         an avro record.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.AVRO_NUM_RECORDS">AVRO_NUM_RECORDS</see>:
        ///         </term>
        ///         <description>Optional number of avro records, if data
        ///         includes only records.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.AVRO_SCHEMA">AVRO_SCHEMA</see>:
        ///         </term>
        ///         <description>Optional string representing avro schema, for
        ///         insert records in avro format, that does not include is
        ///         schema.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.AVRO_SCHEMALESS">AVRO_SCHEMALESS</see>:
        ///         </term>
        ///         <description>When user provides 'avro_schema', avro data is
        ///         assumed to be schemaless, unless specified. Default is
        ///         'true' when given avro_schema. Igonred when avro_schema is
        ///         not given.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.BAD_RECORD_TABLE_NAME">BAD_RECORD_TABLE_NAME</see>:
        ///         </term>
        ///         <description>Optional name of a table to which records that
        ///         were rejected are written.  The bad-record-table has the
        ///         following columns: line_number (long), line_rejected
        ///         (string), error_message (string).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.BAD_RECORD_TABLE_LIMIT">BAD_RECORD_TABLE_LIMIT</see>:
        ///         </term>
        ///         <description>A positive integer indicating the maximum
        ///         number of records that can be  written to the
        ///         bad-record-table.   Default value is 10000</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.BAD_RECORD_TABLE_LIMIT_PER_INPUT">BAD_RECORD_TABLE_LIMIT_PER_INPUT</see>:
        ///         </term>
        ///         <description>For subscriptions: A positive integer
        ///         indicating the maximum number of records that can be
        ///         written to the bad-record-table per file/payload. Default
        ///         value will be 'bad_record_table_limit' and total size of
        ///         the table per rank is limited to 'bad_record_table_limit'
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Internal tuning parameter--number of records
        ///         per batch when inserting data.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>:
        ///         </term>
        ///         <description>For each target column specified, applies the
        ///         column-property-bound format to the source data loaded into
        ///         that column.  Each column format will contain a mapping of
        ///         one or more of its column properties to an appropriate
        ///         format for each property.  Currently supported column
        ///         properties include date, time, & datetime. The parameter
        ///         value must be formatted as a JSON string of maps of column
        ///         names to maps of column properties to their corresponding
        ///         column formats, e.g., '{ "order_date" : { "date" :
        ///         "%Y.%m.%d" }, "order_time" : { "time" : "%H:%M:%S" } }'.
        ///         See <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>
        ///         for valid format syntax.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>:
        ///         </term>
        ///         <description>Specifies a comma-delimited list of columns
        ///         from the source data to load.  If more than one file is
        ///         being loaded, this list applies to all files.
        ///         Column numbers can be specified discretely or as a range.
        ///         For example, a value of '5,7,1..3' will insert values from
        ///         the fifth column in the source data into the first column
        ///         in the target table, from the seventh column in the source
        ///         data into the second column in the target table, and from
        ///         the first through third columns in the source data into the
        ///         third through fifth columns in the target table.
        ///         If the source data contains a header, column names matching
        ///         the file header names may be provided instead of column
        ///         numbers.  If the target table doesn't exist, the table will
        ///         be created with the columns in this order.  If the target
        ///         table does exist with columns in a different order than the
        ///         source data, this list can be used to match the order of
        ///         the target table.  For example, a value of 'C, B, A' will
        ///         create a three column table with column C, followed by
        ///         column B, followed by column A; or will insert those fields
        ///         in that order into a table created with columns in that
        ///         order.  If the target table exists, the column names must
        ///         match the source data field names for a name-mapping to be
        ///         successful.
        ///         Mutually exclusive with <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.COLUMNS_TO_SKIP">COLUMNS_TO_SKIP</see>:
        ///         </term>
        ///         <description>Specifies a comma-delimited list of columns
        ///         from the source data to skip.  Mutually exclusive with <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.COLUMNS_TO_LOAD">COLUMNS_TO_LOAD</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.COMPRESSION_TYPE">COMPRESSION_TYPE</see>:
        ///         </term>
        ///         <description>Optional: payload compression type.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>Uncompressed</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.AUTO">AUTO</see>:
        ///                 </term>
        ///                 <description>Default. Auto detect compression type
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.GZIP">GZIP</see>:
        ///                 </term>
        ///                 <description>gzip file compression.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.BZIP2">BZIP2</see>:
        ///                 </term>
        ///                 <description>bzip2 file compression.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.AUTO">AUTO</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DEFAULT_COLUMN_FORMATS">DEFAULT_COLUMN_FORMATS</see>:
        ///         </term>
        ///         <description>Specifies the default format to be applied to
        ///         source data loaded into columns with the corresponding
        ///         column property.  Currently supported column properties
        ///         include date, time, & datetime.  This default
        ///         column-property-bound format can be overridden by
        ///         specifying a column property & format for a given target
        ///         column in <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>.
        ///         For each specified annotation, the format will apply to all
        ///         columns with that annotation unless a custom <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.COLUMN_FORMATS">COLUMN_FORMATS</see>
        ///         for that annotation is specified.
        ///         The parameter value must be formatted as a JSON string that
        ///         is a map of column properties to their respective column
        ///         formats, e.g., '{ "date" : "%Y.%m.%d", "time" : "%H:%M:%S"
        ///         }'.  Column formats are specified as a string of control
        ///         characters and plain text. The supported control characters
        ///         are 'Y', 'm', 'd', 'H', 'M', 'S', and 's', which follow the
        ///         Linux 'strptime()' specification, as well as 's', which
        ///         specifies seconds and fractional seconds (though the
        ///         fractional component will be truncated past milliseconds).
        ///         Formats for the 'date' annotation must include the 'Y',
        ///         'm', and 'd' control characters. Formats for the 'time'
        ///         annotation must include the 'H', 'M', and either 'S' or 's'
        ///         (but not both) control characters. Formats for the
        ///         'datetime' annotation meet both the 'date' and 'time'
        ///         control character requirements. For example, '{"datetime" :
        ///         "%m/%d/%Y %H:%M:%S" }' would be used to interpret text as
        ///         "05/04/2000 12:12:11"</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:
        ///         </term>
        ///         <description>Specifies how errors should be handled upon
        ///         insertion.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.PERMISSIVE">PERMISSIVE</see>:
        ///                 </term>
        ///                 <description>Records with missing columns are
        ///                 populated with nulls if possible; otherwise, the
        ///                 malformed records are skipped.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:
        ///                 </term>
        ///                 <description>Malformed records are skipped.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.ABORT">ABORT</see>:
        ///                 </term>
        ///                 <description>Stops current insertion and aborts
        ///                 entire operation when an error is encountered.
        ///                 Primary key collisions are considered abortable
        ///                 errors in this mode.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.ABORT">ABORT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FILE_TYPE">FILE_TYPE</see>:
        ///         </term>
        ///         <description>Specifies the type of the file(s) whose
        ///         records will be inserted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.AVRO">AVRO</see>:
        ///                 </term>
        ///                 <description>Avro file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>:
        ///                 </term>
        ///                 <description>Delimited text file format; e.g., CSV,
        ///                 TSV, PSV, etc.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.GDB">GDB</see>:
        ///                 </term>
        ///                 <description>Esri/GDB file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.JSON">JSON</see>:
        ///                 </term>
        ///                 <description>Json file format</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.PARQUET">PARQUET</see>:
        ///                 </term>
        ///                 <description>Apache Parquet file format
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.SHAPEFILE">SHAPEFILE</see>:
        ///                 </term>
        ///                 <description>ShapeFile file format</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FLATTEN_COLUMNS">FLATTEN_COLUMNS</see>:
        ///         </term>
        ///         <description>Specifies how to handle nested columns.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Break up nested columns to multiple
        ///                 columns</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat nested columns as json columns
        ///                 instead of flattening</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.GDAL_CONFIGURATION_OPTIONS">GDAL_CONFIGURATION_OPTIONS</see>:
        ///         </term>
        ///         <description>Comma separated list of gdal conf options, for
        ///         the specific requets: key=value. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision
        ///         error-suppression policy for inserting into a table with a
        ///         <a href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>, only used when not in upsert
        ///         mode (upsert mode is disabled when <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>).
        ///         If set to <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>,
        ///         any record being inserted that is rejected for having
        ///         primary key values that match those of an existing table
        ///         record will be ignored with no error generated.  If <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>,
        ///         the rejection of any record for having primary key values
        ///         matching an existing record will result in an error being
        ///         reported, as determined by <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///         If the specified table does not have a primary key or if
        ///         upsert mode is in effect (<see
        ///         cref="InsertRecordsFromPayloadRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>),
        ///         then this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Ignore new records whose primary key
        ///                 values collide with those of existing records
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat as errors any new records whose
        ///                 primary key values collide with those of existing
        ///                 records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.INGESTION_MODE">INGESTION_MODE</see>:
        ///         </term>
        ///         <description>Whether to do a full load, dry run, or perform
        ///         a type inference on the source data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FULL">FULL</see>:
        ///                 </term>
        ///                 <description>Run a type inference on the source
        ///                 data (if needed) and ingest</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///                 </term>
        ///                 <description>Does not load data, but walks through
        ///                 the source data and determines the number of valid
        ///                 records, taking into account the current mode of
        ///                 <see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TYPE_INFERENCE_ONLY">TYPE_INFERENCE_ONLY</see>:
        ///                 </term>
        ///                 <description>Infer the type of the source data and
        ///                 return, without ingesting any data.  The inferred
        ///                 type is returned in the response.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FULL">FULL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.LAYER">LAYER</see>:
        ///         </term>
        ///         <description>Optional: geo files layer(s) name(s): comma
        ///         separated. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.LOADING_MODE">LOADING_MODE</see>:
        ///         </term>
        ///         <description>Scheme for distributing the extraction and
        ///         loading of data from the source data file(s). This option
        ///         applies only when loading files that are local to the
        ///         database.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.HEAD">HEAD</see>:
        ///                 </term>
        ///                 <description>The head node loads all data. All
        ///                 files must be available to the head node.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.DISTRIBUTED_SHARED">DISTRIBUTED_SHARED</see>:
        ///                 </term>
        ///                 <description>The head node coordinates loading data
        ///                 by worker processes across all nodes from shared
        ///                 files available to all workers.
        ///                 NOTE:
        ///                 Instead of existing on a shared source, the files
        ///                 can be duplicated on a source local to each host to
        ///                 improve performance, though the files must appear
        ///                 as the same data set from the perspective of all
        ///                 hosts performing the load.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.DISTRIBUTED_LOCAL">DISTRIBUTED_LOCAL</see>:
        ///                 </term>
        ///                 <description>A single worker process on each node
        ///                 loads all files that are available to it. This
        ///                 option works best when each worker loads files from
        ///                 its own file system, to maximize performance. In
        ///                 order to avoid data duplication, either each worker
        ///                 performing the load needs to have visibility to a
        ///                 set of files unique to it (no file is visible to
        ///                 more than one node) or the target table needs to
        ///                 have a primary key (which will allow the worker to
        ///                 automatically deduplicate data).
        ///                 NOTE:
        ///                 If the target table doesn't exist, the table
        ///                 structure will be determined by the head node. If
        ///                 the head node has no files local to it, it will be
        ///                 unable to determine the structure and the request
        ///                 will fail.
        ///                 If the head node is configured to have no worker
        ///                 processes, no data strictly accessible to the head
        ///                 node will be loaded.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.HEAD">HEAD</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.LOCAL_TIME_OFFSET">LOCAL_TIME_OFFSET</see>:
        ///         </term>
        ///         <description>For Avro local timestamp columns</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.MAX_RECORDS_TO_LOAD">MAX_RECORDS_TO_LOAD</see>:
        ///         </term>
        ///         <description>Limit the number of records to load in this
        ///         request: If this number is larger than a batch_size, then
        ///         the number of records loaded will be limited to the next
        ///         whole number of batch_size (per working thread). The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.NUM_TASKS_PER_RANK">NUM_TASKS_PER_RANK</see>:
        ///         </term>
        ///         <description>Optional: number of tasks for reading file per
        ///         rank. Default will be external_file_reader_num_tasks
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.POLL_INTERVAL">POLL_INTERVAL</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>,
        ///         the number of seconds between attempts to load external
        ///         files into the table.  If zero, polling will be continuous
        ///         as long as data is found.  If no data is found, the
        ///         interval will steadily increase to a maximum of 60 seconds.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.PRIMARY_KEYS">PRIMARY_KEYS</see>:
        ///         </term>
        ///         <description>Optional: comma separated list of column
        ///         names, to set as primary keys, when not specified in the
        ///         type. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.SCHEMA_REGISTRY_SCHEMA_ID">SCHEMA_REGISTRY_SCHEMA_ID</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.SCHEMA_REGISTRY_SCHEMA_NAME">SCHEMA_REGISTRY_SCHEMA_NAME</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.SCHEMA_REGISTRY_SCHEMA_VERSION">SCHEMA_REGISTRY_SCHEMA_VERSION</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.SHARD_KEYS">SHARD_KEYS</see>:
        ///         </term>
        ///         <description>Optional: comma separated list of column
        ///         names, to set as primary keys, when not specified in the
        ///         type. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.SKIP_LINES">SKIP_LINES</see>:
        ///         </term>
        ///         <description>Skip number of lines from begining of file.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.SUBSCRIBE">SUBSCRIBE</see>:
        ///         </term>
        ///         <description>Continuously poll the data source to check for
        ///         new data and load it into the table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TABLE_INSERT_MODE">TABLE_INSERT_MODE</see>:
        ///         </term>
        ///         <description>Optional: table_insert_mode. When inserting
        ///         records from multiple files: if table_per_file then insert
        ///         from each file into a new table. Currently supported only
        ///         for shapefiles.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.SINGLE">SINGLE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TABLE_PER_FILE">TABLE_PER_FILE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.SINGLE">SINGLE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_COMMENT_STRING">TEXT_COMMENT_STRING</see>:
        ///         </term>
        ///         <description>Specifies the character string that should be
        ///         interpreted as a comment line prefix in the source data.
        ///         All lines in the data starting with the provided string are
        ///         ignored.
        ///         For <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '#'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>:
        ///         </term>
        ///         <description>Specifies the character delimiting field
        ///         values in the source data and field names in the header (if
        ///         present).
        ///         For <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is ','.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_ESCAPE_CHARACTER">TEXT_ESCAPE_CHARACTER</see>:
        ///         </term>
        ///         <description>Specifies the character that is used to escape
        ///         other characters in the source data.
        ///         An 'a', 'b', 'f', 'n', 'r', 't', or 'v' preceded by an
        ///         escape character will be interpreted as the ASCII bell,
        ///         backspace, form feed, line feed, carriage return,
        ///         horizontal tab, & vertical tab, respectively.  For example,
        ///         the escape character followed by an 'n' will be interpreted
        ///         as a newline within a field value.
        ///         The escape character can also be used to escape the quoting
        ///         character, and will be treated as an escape character
        ///         whether it is within a quoted field value or not.
        ///         For <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_HAS_HEADER">TEXT_HAS_HEADER</see>:
        ///         </term>
        ///         <description>Indicates whether the source data contains a
        ///         header row.
        ///         For <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_HEADER_PROPERTY_DELIMITER">TEXT_HEADER_PROPERTY_DELIMITER</see>:
        ///         </term>
        ///         <description>Specifies the delimiter for <a
        ///         href="../../../concepts/types/#column-properties"
        ///         target="_top">column properties</a> in the header row (if
        ///         present).  Cannot be set to same value as <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_DELIMITER">TEXT_DELIMITER</see>.
        ///         For <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '|'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_NULL_STRING">TEXT_NULL_STRING</see>:
        ///         </term>
        ///         <description>Specifies the character string that should be
        ///         interpreted as a null value in the source data.
        ///         For <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '\\N'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_QUOTE_CHARACTER">TEXT_QUOTE_CHARACTER</see>:
        ///         </term>
        ///         <description>Specifies the character that should be
        ///         interpreted as a field value quoting character in the
        ///         source data.  The character must appear at beginning and
        ///         end of field value to take effect.  Delimiters within
        ///         quoted fields are treated as literals and not delimiters.
        ///         Within a quoted field, two consecutive quote characters
        ///         will be interpreted as a single literal quote character,
        ///         effectively escaping it.  To not have a quote character,
        ///         specify an empty string.
        ///         For <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.DELIMITED_TEXT">DELIMITED_TEXT</see>
        ///         <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FILE_TYPE">FILE_TYPE</see>
        ///         only. The default value is '"'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_SEARCH_COLUMNS">TEXT_SEARCH_COLUMNS</see>:
        ///         </term>
        ///         <description>Add 'text_search' property to internally
        ///         inferenced string columns. Comma seperated list of column
        ///         names or '*' for all columns. To add text_search property
        ///         only to string columns of minimum size, set also the option
        ///         'text_search_min_column_length'</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TEXT_SEARCH_MIN_COLUMN_LENGTH">TEXT_SEARCH_MIN_COLUMN_LENGTH</see>:
        ///         </term>
        ///         <description>Set minimum column size. Used only when
        ///         'text_search_columns' has a value.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>,
        ///         truncate string values that are longer than the column's
        ///         type size.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>,
        ///         truncates the table specified by <paramref
        ///         name="table_name" /> prior to loading the file(s).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TYPE_INFERENCE_MODE">TYPE_INFERENCE_MODE</see>:
        ///         </term>
        ///         <description>optimize type inference for:
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.ACCURACY">ACCURACY</see>:
        ///                 </term>
        ///                 <description>Scans data to get exactly-typed &
        ///                 sized columns for all data scanned.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.SPEED">SPEED</see>:
        ///                 </term>
        ///                 <description>Scans data and picks the widest
        ///                 possible column types so that 'all' values will fit
        ///                 with minimum data scanned</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.ACCURACY">ACCURACY</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromPayloadRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision policy for
        ///         inserting into a table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>. If set to <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will be replaced by
        ///         that new record (the new data will be "upserted"). If set
        ///         to <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will remain
        ///         unchanged, while the new record will be rejected and the
        ///         error handled as determined by <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>
        ///         & <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///         If the specified table does not have a primary key, then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Upsert new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Reject new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromPayloadRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsFromPayloadResponse insertRecordsFromPayload( string table_name,
                                                                          string data_text,
                                                                          byte[] data_bytes,
                                                                          IDictionary<string, IDictionary<string, string>> modify_columns = null,
                                                                          IDictionary<string, string> create_table_options = null,
                                                                          IDictionary<string, string> options = null )
        {
            return insertRecordsFromPayload( new InsertRecordsFromPayloadRequest( table_name,
                                                                                  data_text,
                                                                                  data_bytes,
                                                                                  modify_columns,
                                                                                  create_table_options,
                                                                                  options ) );
        }

        /// <summary>Computes remote query result and inserts the result data
        /// into a new or existing table</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsFromQueryResponse insertRecordsFromQuery( InsertRecordsFromQueryRequest request_ )
        {
            InsertRecordsFromQueryResponse actualResponse_ = SubmitRequest<InsertRecordsFromQueryResponse>("/insert/records/fromquery", request_, false);

            return actualResponse_;
        }

        /// <summary>Computes remote query result and inserts the result data
        /// into a new or existing table</summary>
        ///
        /// <param name="table_name">Name of the table into which the data will
        /// be inserted, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. If the table does not
        /// exist, the table will be created using either an existing <see
        /// cref="InsertRecordsFromQueryRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>
        /// or the type inferred from the remote query, and the new table name
        /// will have to meet standard <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.</param>
        /// <param name="remote_query">Query for which result data needs to be
        /// imported</param>
        /// <param name="modify_columns">Not implemented yet. The default value
        /// is an empty Dictionary.</param>
        /// <param name="create_table_options">Options used when creating the
        /// target table.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>:
        ///         </term>
        ///         <description>ID of a currently registered <a
        ///         href="../../../concepts/types/" target="_top">type</a>. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.NO_ERROR_IF_EXISTS">NO_ERROR_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.TRUE">TRUE</see>,
        ///         prevents an error from occurring if the table already
        ///         exists and is of the given type.  If a table with the same
        ///         ID but a different type exists, it is still an error.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.IS_REPLICATED">IS_REPLICATED</see>:
        ///         </term>
        ///         <description>Affects the <a
        ///         href="../../../concepts/tables/#distribution"
        ///         target="_top">distribution scheme</a> for the table's data.
        ///         If <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.TRUE">TRUE</see>
        ///         and the given type has no explicit <a
        ///         href="../../../concepts/tables/#shard-key"
        ///         target="_top">shard key</a> defined, the table will be <a
        ///         href="../../../concepts/tables/#replication"
        ///         target="_top">replicated</a>.  If <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>,
        ///         the table will be <a
        ///         href="../../../concepts/tables/#sharding"
        ///         target="_top">sharded</a> according to the shard key
        ///         specified in the given <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.TYPE_ID">TYPE_ID</see>,
        ///         or <a href="../../../concepts/tables/#random-sharding"
        ///         target="_top">randomly sharded</a>, if no shard key is
        ///         specified.  Note that a type containing a shard key cannot
        ///         be used to create a replicated table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.FOREIGN_KEYS">FOREIGN_KEYS</see>:
        ///         </term>
        ///         <description>Semicolon-separated list of <a
        ///         href="../../../concepts/tables/#foreign-keys"
        ///         target="_top">foreign keys</a>, of the format
        ///         '(source_column_name [, ...]) references
        ///         target_table_name(primary_key_column_name [, ...]) [as
        ///         foreign_key_name]'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.FOREIGN_SHARD_KEY">FOREIGN_SHARD_KEY</see>:
        ///         </term>
        ///         <description>Foreign shard key of the format 'source_column
        ///         references shard_by_column from
        ///         target_table(primary_key_column)'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>:
        ///         </term>
        ///         <description><a
        ///         href="../../../concepts/tables/#partitioning"
        ///         target="_top">Partitioning</a> scheme to use.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.RANGE">RANGE</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-range"
        ///                 target="_top">range partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.INTERVAL">INTERVAL</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-interval"
        ///                 target="_top">interval partitioning</a>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.LIST">LIST</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-list"
        ///                 target="_top">list partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.HASH">HASH</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-hash"
        ///                 target="_top">hash partitioning</a>.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.SERIES">SERIES</see>:
        ///                 </term>
        ///                 <description>Use <a
        ///                 href="../../../concepts/tables/#partitioning-by-series"
        ///                 target="_top">series partitioning</a>.
        ///                 </description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.PARTITION_KEYS">PARTITION_KEYS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition keys, which
        ///         are the columns or column expressions by which records will
        ///         be assigned to partitions defined by <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.PARTITION_DEFINITIONS">PARTITION_DEFINITIONS</see>:
        ///         </term>
        ///         <description>Comma-separated list of partition definitions,
        ///         whose format depends on the choice of <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.PARTITION_TYPE">PARTITION_TYPE</see>.
        ///         See <a
        ///         href="../../../concepts/tables/#partitioning-by-range"
        ///         target="_top">range partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-interval"
        ///         target="_top">interval partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitioning</a>, <a
        ///         href="../../../concepts/tables/#partitioning-by-hash"
        ///         target="_top">hash partitioning</a>, or <a
        ///         href="../../../concepts/tables/#partitioning-by-series"
        ///         target="_top">series partitioning</a> for example formats.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.IS_AUTOMATIC_PARTITION">IS_AUTOMATIC_PARTITION</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.TRUE">TRUE</see>,
        ///         a new partition will be created for values which don't fall
        ///         into an existing partition.  Currently only supported for
        ///         <a href="../../../concepts/tables/#partitioning-by-list"
        ///         target="_top">list partitions</a>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.TTL">TTL</see>:
        ///         </term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the table specified in <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for this table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.IS_RESULT_TABLE">IS_RESULT_TABLE</see>:
        ///         </term>
        ///         <description>Indicates whether the table is a <a
        ///         href="../../../concepts/tables_memory_only/"
        ///         target="_top">memory-only table</a>. A result table cannot
        ///         contain columns with text_search <a
        ///         href="../../../concepts/types/#data-handling"
        ///         target="_top">data-handling</a>, and it will not be
        ///         retained if the server is restarted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.CreateTableOptions.STRATEGY_DEFINITION">STRATEGY_DEFINITION</see>:
        ///         </term>
        ///         <description>The <a
        ///         href="../../../rm/concepts/#tier-strategies"
        ///         target="_top">tier strategy</a> for the table and its
        ///         columns.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.BAD_RECORD_TABLE_NAME">BAD_RECORD_TABLE_NAME</see>:
        ///         </term>
        ///         <description>Optional name of a table to which records that
        ///         were rejected are written.  The bad-record-table has the
        ///         following columns: line_number (long), line_rejected
        ///         (string), error_message (string). When error handling is
        ///         Abort, bad records table is not populated.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.BAD_RECORD_TABLE_LIMIT">BAD_RECORD_TABLE_LIMIT</see>:
        ///         </term>
        ///         <description>A positive integer indicating the maximum
        ///         number of records that can be  written to the
        ///         bad-record-table.   Default value is 10000</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.BATCH_SIZE">BATCH_SIZE</see>:
        ///         </term>
        ///         <description>Number of records per batch when inserting
        ///         data.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.DATASOURCE_NAME">DATASOURCE_NAME</see>:
        ///         </term>
        ///         <description>Name of an existing external data source from
        ///         which table will be loaded</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>:
        ///         </term>
        ///         <description>Specifies how errors should be handled upon
        ///         insertion.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.PERMISSIVE">PERMISSIVE</see>:
        ///                 </term>
        ///                 <description>Records with missing columns are
        ///                 populated with nulls if possible; otherwise, the
        ///                 malformed records are skipped.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.IGNORE_BAD_RECORDS">IGNORE_BAD_RECORDS</see>:
        ///                 </term>
        ///                 <description>Malformed records are skipped.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.ABORT">ABORT</see>:
        ///                 </term>
        ///                 <description>Stops current insertion and aborts
        ///                 entire operation when an error is encountered.
        ///                 Primary key collisions are considered abortable
        ///                 errors in this mode.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.ABORT">ABORT</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision
        ///         error-suppression policy for inserting into a table with a
        ///         <a href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>, only used when not in upsert
        ///         mode (upsert mode is disabled when <see
        ///         cref="InsertRecordsFromQueryRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>).
        ///         If set to <see
        ///         cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>,
        ///         any record being inserted that is rejected for having
        ///         primary key values that match those of an existing table
        ///         record will be ignored with no error generated.  If <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>,
        ///         the rejection of any record for having primary key values
        ///         matching an existing record will result in an error being
        ///         reported, as determined by <see
        ///         cref="InsertRecordsFromQueryRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///         If the specified table does not have a primary key or if
        ///         upsert mode is in effect (<see
        ///         cref="InsertRecordsFromQueryRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>),
        ///         then this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Ignore new records whose primary key
        ///                 values collide with those of existing records
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat as errors any new records whose
        ///                 primary key values collide with those of existing
        ///                 records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.INGESTION_MODE">INGESTION_MODE</see>:
        ///         </term>
        ///         <description>Whether to do a full load, dry run, or perform
        ///         a type inference on the source data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.FULL">FULL</see>:
        ///                 </term>
        ///                 <description>Run a type inference on the source
        ///                 data (if needed) and ingest</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.DRY_RUN">DRY_RUN</see>:
        ///                 </term>
        ///                 <description>Does not load data, but walks through
        ///                 the source data and determines the number of valid
        ///                 records, taking into account the current mode of
        ///                 <see
        ///                 cref="InsertRecordsFromQueryRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.TYPE_INFERENCE_ONLY">TYPE_INFERENCE_ONLY</see>:
        ///                 </term>
        ///                 <description>Infer the type of the source data and
        ///                 return, without ingesting any data.  The inferred
        ///                 type is returned in the response.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FULL">FULL</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.JDBC_FETCH_SIZE">JDBC_FETCH_SIZE</see>:
        ///         </term>
        ///         <description>The JDBC fetch size, which determines how many
        ///         rows to fetch per round trip.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.JDBC_SESSION_INIT_STATEMENT">JDBC_SESSION_INIT_STATEMENT</see>:
        ///         </term>
        ///         <description>Executes the statement per each jdbc session
        ///         before doing actual load. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.NUM_SPLITS_PER_RANK">NUM_SPLITS_PER_RANK</see>:
        ///         </term>
        ///         <description>Optional: number of splits for reading data
        ///         per rank. Default will be external_file_reader_num_tasks.
        ///         The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.NUM_TASKS_PER_RANK">NUM_TASKS_PER_RANK</see>:
        ///         </term>
        ///         <description>Optional: number of tasks for reading data per
        ///         rank. Default will be external_file_reader_num_tasks
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.PRIMARY_KEYS">PRIMARY_KEYS</see>:
        ///         </term>
        ///         <description>Optional: comma separated list of column
        ///         names, to set as primary keys, when not specified in the
        ///         type. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.SHARD_KEYS">SHARD_KEYS</see>:
        ///         </term>
        ///         <description>Optional: comma separated list of column
        ///         names, to set as primary keys, when not specified in the
        ///         type. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.SUBSCRIBE">SUBSCRIBE</see>:
        ///         </term>
        ///         <description>Continuously poll the data source to check for
        ///         new data and load it into the table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.TRUNCATE_TABLE">TRUNCATE_TABLE</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>,
        ///         truncates the table specified by <paramref
        ///         name="table_name" /> prior to loading the data.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.REMOTE_QUERY">REMOTE_QUERY</see>:
        ///         </term>
        ///         <description>Remote SQL query from which data will be
        ///         sourced</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.REMOTE_QUERY_ORDER_BY">REMOTE_QUERY_ORDER_BY</see>:
        ///         </term>
        ///         <description>Name of column to be used for splitting the
        ///         query into multiple sub-queries using ordering of given
        ///         column. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.REMOTE_QUERY_FILTER_COLUMN">REMOTE_QUERY_FILTER_COLUMN</see>:
        ///         </term>
        ///         <description>Name of column to be used for splitting the
        ///         query into multiple sub-queries using the data distribution
        ///         of given column. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.REMOTE_QUERY_INCREASING_COLUMN">REMOTE_QUERY_INCREASING_COLUMN</see>:
        ///         </term>
        ///         <description>Column on subscribed remote query result that
        ///         will increase for new records (e.g., TIMESTAMP). The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.REMOTE_QUERY_PARTITION_COLUMN">REMOTE_QUERY_PARTITION_COLUMN</see>:
        ///         </term>
        ///         <description>Alias name for remote_query_filter_column. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>,
        ///         truncate string values that are longer than the column's
        ///         type size.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsFromQueryRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision policy for
        ///         inserting into a table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>. If set to <see
        ///         cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will be replaced by
        ///         that new record (the new data will be "upserted"). If set
        ///         to <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>,
        ///         any existing table record with primary key values that
        ///         match those of a record being inserted will remain
        ///         unchanged, while the new record will be rejected and the
        ///         error handled as determined by <see
        ///         cref="InsertRecordsFromQueryRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>
        ///         & <see
        ///         cref="InsertRecordsFromQueryRequest.Options.ERROR_HANDLING">ERROR_HANDLING</see>.
        ///         If the specified table does not have a primary key, then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Upsert new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Reject new records when primary keys
        ///                 match existing records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="InsertRecordsFromQueryRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsFromQueryResponse insertRecordsFromQuery( string table_name,
                                                                      string remote_query,
                                                                      IDictionary<string, IDictionary<string, string>> modify_columns = null,
                                                                      IDictionary<string, string> create_table_options = null,
                                                                      IDictionary<string, string> options = null )
        {
            return insertRecordsFromQuery( new InsertRecordsFromQueryRequest( table_name,
                                                                              remote_query,
                                                                              modify_columns,
                                                                              create_table_options,
                                                                              options ) );
        }

        /// <summary>Generates a specified number of random records and adds
        /// them to the given table.</summary>
        /// <remarks><para>There is an optional parameter that allows the user
        /// to customize the ranges of the column values. It also allows the
        /// user to specify linear profiles for some or all columns in which
        /// case linear values are generated rather than random ones. Only
        /// individual tables are supported for this operation.</para>
        /// <para>This operation is synchronous, meaning that a response will
        /// not be returned until all random records are fully available.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsRandomResponse insertRecordsRandom( InsertRecordsRandomRequest request_ )
        {
            InsertRecordsRandomResponse actualResponse_ = SubmitRequest<InsertRecordsRandomResponse>("/insert/records/random", request_, false);

            return actualResponse_;
        }

        /// <summary>Generates a specified number of random records and adds
        /// them to the given table.</summary>
        /// <remarks><para>There is an optional parameter that allows the user
        /// to customize the ranges of the column values. It also allows the
        /// user to specify linear profiles for some or all columns in which
        /// case linear values are generated rather than random ones. Only
        /// individual tables are supported for this operation.</para>
        /// <para>This operation is synchronous, meaning that a response will
        /// not be returned until all random records are fully available.
        /// </para></remarks>
        ///
        /// <param name="table_name">Table to which random records will be
        /// added, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table, not a view.</param>
        /// <param name="count">Number of records to generate.</param>
        /// <param name="options">Optional parameter to pass in specifications
        /// for the randomness of the values.  This map is different from the
        /// *options* parameter of most other endpoints in that it is a map of
        /// string to map of string to doubles, while most others are maps of
        /// string to string.  In this map, the top level keys represent which
        /// column's parameters are being specified, while the internal keys
        /// represents which parameter is being specified.  These parameters
        /// take on different meanings depending on the type of the column.
        /// Below follows a more detailed description of the map:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRandomRequest.Options.SEED">SEED</see>:
        ///         </term>
        ///         <description>If provided, the internal random number
        ///         generator will be initialized with the given value.  The
        ///         minimum is 0.  This allows for the same set of random
        ///         numbers to be generated across invocation of this endpoint
        ///         in case the user wants to repeat the test.  Since <paramref
        ///         name="options" />, is a map of maps, we need an internal
        ///         map to provide the seed value.  For example, to pass 100 as
        ///         the seed value through this parameter, you need something
        ///         equivalent to: 'options' = {'seed': { 'value': 100 } }.
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.VALUE">VALUE</see>:
        ///                 </term>
        ///                 <description>The seed value to use</description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRandomRequest.Options.ALL">ALL</see>:
        ///         </term>
        ///         <description>This key indicates that the specifications
        ///         relayed in the internal map are to be applied to all
        ///         columns of the records.
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.MIN">MIN</see>:
        ///                 </term>
        ///                 <description>For numerical columns, the minimum of
        ///                 the generated values is set to this value.  Default
        ///                 is -99999.  For point, shape, and track columns,
        ///                 min for numeric 'x' and 'y' columns needs to be
        ///                 within [-180, 180] and [-90, 90], respectively. The
        ///                 default minimum possible values for these columns
        ///                 in such cases are -180.0 and -90.0. For the
        ///                 'TIMESTAMP' column, the default minimum corresponds
        ///                 to Jan 1, 2010.
        ///                 For string columns, the minimum length of the
        ///                 randomly generated strings is set to this value
        ///                 (default is 0). If both minimum and maximum are
        ///                 provided, minimum must be less than or equal to
        ///                 max.
        ///                 If the min is outside the accepted ranges for
        ///                 strings columns and 'x' and 'y' columns for
        ///                 point/shape/track, then those parameters will not
        ///                 be set; however, an error will not be thrown in
        ///                 such a case. It is the responsibility of the user
        ///                 to use the <see
        ///                 cref="InsertRecordsRandomRequest.Options.ALL">ALL</see>
        ///                 parameter judiciously.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.MAX">MAX</see>:
        ///                 </term>
        ///                 <description>For numerical columns, the maximum of
        ///                 the generated values is set to this value. Default
        ///                 is 99999. For point, shape, and track columns, max
        ///                 for numeric 'x' and 'y' columns needs to be within
        ///                 [-180, 180] and [-90, 90], respectively. The
        ///                 default minimum possible values for these columns
        ///                 in such cases are 180.0 and 90.0.
        ///                 For string columns, the maximum length of the
        ///                 randomly generated strings. If both minimum and
        ///                 maximum are provided, *max* must be greater than or
        ///                 equal to *min*.
        ///                 If the *max* is outside the accepted ranges for
        ///                 strings columns and 'x' and 'y' columns for
        ///                 point/shape/track, then those parameters will not
        ///                 be set; however, an error will not be thrown in
        ///                 such a case. It is the responsibility of the user
        ///                 to use the <see
        ///                 cref="InsertRecordsRandomRequest.Options.ALL">ALL</see>
        ///                 parameter judiciously.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.INTERVAL">INTERVAL</see>:
        ///                 </term>
        ///                 <description>If specified, generate values for all
        ///                 columns evenly spaced with the given interval
        ///                 value. If a max value is specified for a given
        ///                 column the data is randomly generated between min
        ///                 and max and decimated down to the interval. If no
        ///                 max is provided the data is linerally generated
        ///                 starting at the minimum value (instead of
        ///                 generating random data). For non-decimated
        ///                 string-type columns the interval value is ignored.
        ///                 Instead the values are generated following the
        ///                 pattern: 'attrname_creationIndex#', i.e. the column
        ///                 name suffixed with an underscore and a running
        ///                 counter (starting at 0). For string types with
        ///                 limited size (eg char4) the prefix is dropped. No
        ///                 nulls will be generated for nullable columns.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.NULL_PERCENTAGE">NULL_PERCENTAGE</see>:
        ///                 </term>
        ///                 <description>If specified, then generate the given
        ///                 percentage of the count as nulls for all nullable
        ///                 columns.  This option will be ignored for
        ///                 non-nullable columns.  The value must be within the
        ///                 range [0, 1.0].  The default value is 5% (0.05).
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.CARDINALITY">CARDINALITY</see>:
        ///                 </term>
        ///                 <description>If specified, limit the randomly
        ///                 generated values to a fixed set. Not allowed on a
        ///                 column with interval specified, and is not
        ///                 applicable to WKT or Track-specific columns. The
        ///                 value must be greater than 0. This option is
        ///                 disabled by default.</description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRandomRequest.Options.ATTR_NAME">ATTR_NAME</see>:
        ///         </term>
        ///         <description>Use the desired column name in place of <see
        ///         cref="InsertRecordsRandomRequest.Options.ATTR_NAME">ATTR_NAME</see>,
        ///         and set the following parameters for the column specified.
        ///         This overrides any parameter set by <see
        ///         cref="InsertRecordsRandomRequest.Options.ALL">ALL</see>.
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.MIN">MIN</see>:
        ///                 </term>
        ///                 <description>For numerical columns, the minimum of
        ///                 the generated values is set to this value.  Default
        ///                 is -99999.  For point, shape, and track columns,
        ///                 min for numeric 'x' and 'y' columns needs to be
        ///                 within [-180, 180] and [-90, 90], respectively. The
        ///                 default minimum possible values for these columns
        ///                 in such cases are -180.0 and -90.0. For the
        ///                 'TIMESTAMP' column, the default minimum corresponds
        ///                 to Jan 1, 2010.
        ///                 For string columns, the minimum length of the
        ///                 randomly generated strings is set to this value
        ///                 (default is 0). If both minimum and maximum are
        ///                 provided, minimum must be less than or equal to
        ///                 max.
        ///                 If the min is outside the accepted ranges for
        ///                 strings columns and 'x' and 'y' columns for
        ///                 point/shape/track, then those parameters will not
        ///                 be set; however, an error will not be thrown in
        ///                 such a case. It is the responsibility of the user
        ///                 to use the <see
        ///                 cref="InsertRecordsRandomRequest.Options.ALL">ALL</see>
        ///                 parameter judiciously.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.MAX">MAX</see>:
        ///                 </term>
        ///                 <description>For numerical columns, the maximum of
        ///                 the generated values is set to this value. Default
        ///                 is 99999. For point, shape, and track columns, max
        ///                 for numeric 'x' and 'y' columns needs to be within
        ///                 [-180, 180] and [-90, 90], respectively. The
        ///                 default minimum possible values for these columns
        ///                 in such cases are 180.0 and 90.0.
        ///                 For string columns, the maximum length of the
        ///                 randomly generated strings. If both minimum and
        ///                 maximum are provided, *max* must be greater than or
        ///                 equal to *min*.
        ///                 If the *max* is outside the accepted ranges for
        ///                 strings columns and 'x' and 'y' columns for
        ///                 point/shape/track, then those parameters will not
        ///                 be set; however, an error will not be thrown in
        ///                 such a case. It is the responsibility of the user
        ///                 to use the <see
        ///                 cref="InsertRecordsRandomRequest.Options.ALL">ALL</see>
        ///                 parameter judiciously.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.INTERVAL">INTERVAL</see>:
        ///                 </term>
        ///                 <description>If specified, generate values for all
        ///                 columns evenly spaced with the given interval
        ///                 value. If a max value is specified for a given
        ///                 column the data is randomly generated between min
        ///                 and max and decimated down to the interval. If no
        ///                 max is provided the data is linerally generated
        ///                 starting at the minimum value (instead of
        ///                 generating random data). For non-decimated
        ///                 string-type columns the interval value is ignored.
        ///                 Instead the values are generated following the
        ///                 pattern: 'attrname_creationIndex#', i.e. the column
        ///                 name suffixed with an underscore and a running
        ///                 counter (starting at 0). For string types with
        ///                 limited size (eg char4) the prefix is dropped. No
        ///                 nulls will be generated for nullable columns.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.NULL_PERCENTAGE">NULL_PERCENTAGE</see>:
        ///                 </term>
        ///                 <description>If specified and if this column is
        ///                 nullable, then generate the given percentage of the
        ///                 count as nulls.  This option will result in an
        ///                 error if the column is not nullable.  The value
        ///                 must be within the range [0, 1.0].  The default
        ///                 value is 5% (0.05).</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.CARDINALITY">CARDINALITY</see>:
        ///                 </term>
        ///                 <description>If specified, limit the randomly
        ///                 generated values to a fixed set. Not allowed on a
        ///                 column with interval specified, and is not
        ///                 applicable to WKT or Track-specific columns. The
        ///                 value must be greater than 0. This option is
        ///                 disabled by default.</description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertRecordsRandomRequest.Options.TRACK_LENGTH">TRACK_LENGTH</see>:
        ///         </term>
        ///         <description>This key-map pair is only valid for track data
        ///         sets (an error is thrown otherwise).  No nulls would be
        ///         generated for nullable columns.
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.MIN">MIN</see>:
        ///                 </term>
        ///                 <description>Minimum possible length for generated
        ///                 series; default is 100 records per series. Must be
        ///                 an integral value within the range [1, 500]. If
        ///                 both min and max are specified, min must be less
        ///                 than or equal to max. The minimum allowed value is
        ///                 '1'. The maximum allowed value is '500'.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="InsertRecordsRandomRequest.Options.MAX">MAX</see>:
        ///                 </term>
        ///                 <description>Maximum possible length for generated
        ///                 series; default is 500 records per series. Must be
        ///                 an integral value within the range [1, 500]. If
        ///                 both min and max are specified, max must be greater
        ///                 than or equal to min. The minimum allowed value is
        ///                 '1'. The maximum allowed value is '500'.
        ///                 </description>
        ///             </item>
        ///         </list></description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertRecordsRandomResponse insertRecordsRandom( string table_name,
                                                                long count,
                                                                IDictionary<string, IDictionary<string, double>> options = null )
        {
            return insertRecordsRandom( new InsertRecordsRandomRequest( table_name, count,
                                                                        options ) );
        }

        /// <summary>Adds a symbol or icon (i.e. an image) to represent data
        /// points when data is rendered visually.</summary>
        /// <remarks><para>Users must provide the symbol identifier (string), a
        /// format (currently supported: 'svg' and 'svg_path'), the data for
        /// the symbol, and any additional optional parameter (e.g. color). To
        /// have a symbol used for rendering create a table with a string
        /// column named 'SYMBOLCODE' (along with 'x' or 'y' for example). Then
        /// when the table is rendered (via <a
        /// href="../../../api/rest/wms_rest/" target="_top">WMS</a>) if the
        /// 'dosymbology' parameter is 'true' then the value of the
        /// 'SYMBOLCODE' column is used to pick the symbol displayed for each
        /// point.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertSymbolResponse insertSymbol( InsertSymbolRequest request_ )
        {
            InsertSymbolResponse actualResponse_ = SubmitRequest<InsertSymbolResponse>("/insert/symbol", request_, false);

            return actualResponse_;
        }

        /// <summary>Adds a symbol or icon (i.e. an image) to represent data
        /// points when data is rendered visually.</summary>
        /// <remarks><para>Users must provide the symbol identifier (string), a
        /// format (currently supported: 'svg' and 'svg_path'), the data for
        /// the symbol, and any additional optional parameter (e.g. color). To
        /// have a symbol used for rendering create a table with a string
        /// column named 'SYMBOLCODE' (along with 'x' or 'y' for example). Then
        /// when the table is rendered (via <a
        /// href="../../../api/rest/wms_rest/" target="_top">WMS</a>) if the
        /// 'dosymbology' parameter is 'true' then the value of the
        /// 'SYMBOLCODE' column is used to pick the symbol displayed for each
        /// point.</para></remarks>
        ///
        /// <param name="symbol_id">The id of the symbol being added. This is
        /// the same id that should be in the 'SYMBOLCODE' column for objects
        /// using this symbol</param>
        /// <param name="symbol_format">Specifies the symbol format. Must be
        /// either 'svg' or 'svg_path'.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertSymbolRequest.SymbolFormat.SVG">SVG</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="InsertSymbolRequest.SymbolFormat.SVG_PATH">SVG_PATH</see>
        ///         </term>
        ///     </item>
        /// </list></param>
        /// <param name="symbol_data">The actual symbol data. If <paramref
        /// name="symbol_format" /> is 'svg' then this should be the raw bytes
        /// representing an svg file. If <paramref name="symbol_format" /> is
        /// svg path then this should be an svg path string, for example:
        /// 'M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z'</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="InsertSymbolRequest.Options.COLOR">COLOR</see>:
        ///         </term>
        ///         <description>If <paramref name="symbol_format" /> is 'svg'
        ///         this is ignored. If <paramref name="symbol_format" /> is
        ///         'svg_path' then this option specifies the color (in RRGGBB
        ///         hex format) of the path. For example, to have the path
        ///         rendered in red, used 'FF0000'. If 'color' is not provided
        ///         then '00FF00' (i.e. green) is used by default.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public InsertSymbolResponse insertSymbol( string symbol_id,
                                                  string symbol_format,
                                                  byte[] symbol_data,
                                                  IDictionary<string, string> options = null )
        {
            return insertSymbol( new InsertSymbolRequest( symbol_id, symbol_format,
                                                          symbol_data, options ) );
        }

        /// <summary>Kills a running proc instance.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public KillProcResponse killProc( KillProcRequest request_ )
        {
            KillProcResponse actualResponse_ = SubmitRequest<KillProcResponse>("/kill/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Kills a running proc instance.</summary>
        ///
        /// <param name="run_id">The run ID of a running proc instance. If a
        /// proc with a matching run ID is not found or the proc instance has
        /// already completed, no procs will be killed. If not specified, all
        /// running proc instances will be killed. The default value is ''.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="KillProcRequest.Options.RUN_TAG">RUN_TAG</see>:
        ///         </term>
        ///         <description>If <paramref name="run_id" /> is specified,
        ///         kill the proc instance that has a matching run ID and a
        ///         matching run tag that was provided to <see
        ///         cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>.
        ///         If <paramref name="run_id" /> is not specified, kill the
        ///         proc instance(s) where a matching run tag was provided to
        ///         <see
        ///         cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>.
        ///         The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="KillProcRequest.Options.CLEAR_EXECUTE_AT_STARTUP">CLEAR_EXECUTE_AT_STARTUP</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="KillProcRequest.Options.TRUE">TRUE</see>, kill and
        ///         remove the instance of the proc matching the auto-start run
        ///         ID that was created to run when the database is started.
        ///         The auto-start run ID was returned from <see
        ///         cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>
        ///         and can be retrieved using <see
        ///         cref="showProc(string,IDictionary{string,string})">showProc</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="KillProcRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="KillProcRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="KillProcRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public KillProcResponse killProc( string run_id = "",
                                          IDictionary<string, string> options = null )
        {
            return killProc( new KillProcRequest( run_id, options ) );
        }

        /// @cond NO_DOCS
        public ListGraphResponse listGraph( ListGraphRequest request_ )
        {
            ListGraphResponse actualResponse_ = SubmitRequest<ListGraphResponse>("/list/graph", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public ListGraphResponse listGraph( string graph_name = "",
                                            IDictionary<string, string> options = null )
        {
            return listGraph( new ListGraphRequest( graph_name, options ) );
        }
        /// @endcond

        /// <summary>Manages global access to a table's data.</summary>
        /// <remarks><para> By default a table has a <see
        /// cref="LockTableRequest.lock_type">lock_type</see> of <see
        /// cref="LockTableRequest.LockType.READ_WRITE">READ_WRITE</see>,
        /// indicating all operations are permitted.  A user may request a <see
        /// cref="LockTableRequest.LockType.READ_ONLY">READ_ONLY</see> or a
        /// <see cref="LockTableRequest.LockType.WRITE_ONLY">WRITE_ONLY</see>
        /// lock, after which only read or write operations, respectively, are
        /// permitted on the table until the lock is removed.  When <see
        /// cref="LockTableRequest.lock_type">lock_type</see> is <see
        /// cref="LockTableRequest.LockType.NO_ACCESS">NO_ACCESS</see> then no
        /// operations are permitted on the table.  The lock status can be
        /// queried by setting <see
        /// cref="LockTableRequest.lock_type">lock_type</see> to <see
        /// cref="LockTableRequest.LockType.STATUS">STATUS</see>.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public LockTableResponse lockTable( LockTableRequest request_ )
        {
            LockTableResponse actualResponse_ = SubmitRequest<LockTableResponse>("/lock/table", request_, false);

            return actualResponse_;
        }

        /// <summary>Manages global access to a table's data.</summary>
        /// <remarks><para> By default a table has a <paramref name="lock_type"
        /// /> of <see
        /// cref="LockTableRequest.LockType.READ_WRITE">READ_WRITE</see>,
        /// indicating all operations are permitted.  A user may request a <see
        /// cref="LockTableRequest.LockType.READ_ONLY">READ_ONLY</see> or a
        /// <see cref="LockTableRequest.LockType.WRITE_ONLY">WRITE_ONLY</see>
        /// lock, after which only read or write operations, respectively, are
        /// permitted on the table until the lock is removed.  When <paramref
        /// name="lock_type" /> is <see
        /// cref="LockTableRequest.LockType.NO_ACCESS">NO_ACCESS</see> then no
        /// operations are permitted on the table.  The lock status can be
        /// queried by setting <paramref name="lock_type" /> to <see
        /// cref="LockTableRequest.LockType.STATUS">STATUS</see>.</para>
        /// </remarks>
        ///
        /// <param name="table_name">Name of the table to be locked, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  It must be a currently
        /// existing table or view.</param>
        /// <param name="lock_type">The type of lock being applied to the
        /// table. Setting it to <see
        /// cref="LockTableRequest.LockType.STATUS">STATUS</see> will return
        /// the current lock status of the table without changing it.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="LockTableRequest.LockType.STATUS">STATUS</see>:
        ///         </term>
        ///         <description>Show locked status</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="LockTableRequest.LockType.NO_ACCESS">NO_ACCESS</see>:
        ///         </term>
        ///         <description>Allow no read/write operations</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="LockTableRequest.LockType.READ_ONLY">READ_ONLY</see>:
        ///         </term>
        ///         <description>Allow only read operations</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="LockTableRequest.LockType.WRITE_ONLY">WRITE_ONLY</see>:
        ///         </term>
        ///         <description>Allow only write operations</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="LockTableRequest.LockType.READ_WRITE">READ_WRITE</see>:
        ///         </term>
        ///         <description>Allow all read/write operations</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="LockTableRequest.LockType.STATUS">STATUS</see>.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public LockTableResponse lockTable( string table_name,
                                            string lock_type = LockTableRequest.LockType.STATUS,
                                            IDictionary<string, string> options = null )
        {
            return lockTable( new LockTableRequest( table_name, lock_type, options ) );
        }

        /// <summary>Matches a directed route implied by a given set of
        /// latitude/longitude points to an existing underlying road network
        /// graph using a given solution type.</summary>
        /// <remarks><para> IMPORTANT: It's highly recommended that you review
        /// the <a href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a
        /// href="../../../guide-tags/graph---match/"
        /// target="_top">/match/graph examples</a> before using this endpoint.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public MatchGraphResponse matchGraph( MatchGraphRequest request_ )
        {
            MatchGraphResponse actualResponse_ = SubmitRequest<MatchGraphResponse>("/match/graph", request_, false);

            return actualResponse_;
        }

        /// <summary>Matches a directed route implied by a given set of
        /// latitude/longitude points to an existing underlying road network
        /// graph using a given solution type.</summary>
        /// <remarks><para> IMPORTANT: It's highly recommended that you review
        /// the <a href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a
        /// href="../../../guide-tags/graph---match/"
        /// target="_top">/match/graph examples</a> before using this endpoint.
        /// </para></remarks>
        ///
        /// <param name="graph_name">Name of the underlying geospatial graph
        /// resource to match to using <paramref name="sample_points" />.
        /// </param>
        /// <param name="sample_points">Sample points used to match to an
        /// underlying geospatial graph. Sample points must be specified using
        /// <a
        /// href="../../../graph_solver/network_graph_solver/#match-identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#match-combinations"
        /// target="_top">combinations</a>. Identifiers can be used with:
        /// existing column names, e.g., 'table.column AS SAMPLE_X';
        /// expressions, e.g., 'ST_MAKEPOINT(table.x, table.y) AS
        /// SAMPLE_WKTPOINT'; or constant values, e.g., '{1, 2, 10} AS
        /// SAMPLE_TRIPID'.</param>
        /// <param name="solve_method">The type of solver to use for graph
        /// matching.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MARKOV_CHAIN">MARKOV_CHAIN</see>:
        ///         </term>
        ///         <description>Matches <paramref name="sample_points" /> to
        ///         the graph using the Hidden Markov Model (HMM)-based method,
        ///         which conducts a range-tree closest-edge search to find the
        ///         best combinations of possible road segments (<see
        ///         cref="MatchGraphRequest.Options.NUM_SEGMENTS">NUM_SEGMENTS</see>)
        ///         for each sample point to create the best route. The route
        ///         is secured one point at a time while looking ahead <see
        ///         cref="MatchGraphRequest.Options.CHAIN_WIDTH">CHAIN_WIDTH</see>
        ///         number of points, so the prediction is corrected after each
        ///         point. This solution type is the most accurate but also the
        ///         most computationally intensive. Related options: <see
        ///         cref="MatchGraphRequest.Options.NUM_SEGMENTS">NUM_SEGMENTS</see>
        ///         and <see
        ///         cref="MatchGraphRequest.Options.CHAIN_WIDTH">CHAIN_WIDTH</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_OD_PAIRS">MATCH_OD_PAIRS</see>:
        ///         </term>
        ///         <description>Matches <paramref name="sample_points" /> to
        ///         find the most probable path between origin and destination
        ///         pairs with cost constraints.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>:
        ///         </term>
        ///         <description>Matches <paramref name="sample_points" /> to
        ///         optimize scheduling multiple supplies (trucks) with varying
        ///         sizes to varying demand sites with varying capacities per
        ///         depot. Related options: <see
        ///         cref="MatchGraphRequest.Options.PARTIAL_LOADING">PARTIAL_LOADING</see>
        ///         and <see
        ///         cref="MatchGraphRequest.Options.MAX_COMBINATIONS">MAX_COMBINATIONS</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_BATCH_SOLVES">MATCH_BATCH_SOLVES</see>:
        ///         </term>
        ///         <description>Matches <paramref name="sample_points" />
        ///         source and destination pairs for the shortest path solves
        ///         in batch mode.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_LOOPS">MATCH_LOOPS</see>:
        ///         </term>
        ///         <description>Matches closed loops (Eulerian paths)
        ///         originating and ending at each graph node within min and
        ///         max hops (levels).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CHARGING_STATIONS">MATCH_CHARGING_STATIONS</see>:
        ///         </term>
        ///         <description>Matches an optimal path across a number of
        ///         ev-charging stations between source and target locations.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SIMILARITY">MATCH_SIMILARITY</see>:
        ///         </term>
        ///         <description>Matches the intersection set(s) by computing
        ///         the Jaccard similarity score between node pairs.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_PICKUP_DROPOFF">MATCH_PICKUP_DROPOFF</see>:
        ///         </term>
        ///         <description>Matches the pickups and dropoffs by optimizing
        ///         the total trip costs</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CLUSTERS">MATCH_CLUSTERS</see>:
        ///         </term>
        ///         <description>Matches the graph nodes with a cluster index
        ///         using Louvain clustering algorithm</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_PATTERN">MATCH_PATTERN</see>:
        ///         </term>
        ///         <description>Matches a pattern in the graph</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>:
        ///         </term>
        ///         <description>Creates vector node embeddings</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="MatchGraphRequest.SolveMethod.MARKOV_CHAIN">MARKOV_CHAIN</see>.
        /// </param>
        /// <param name="solution_table">The name of the table used to store
        /// the results, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  This table contains a <a
        /// href="../../../location_intelligence/geo_objects/#geospatial-tracks"
        /// target="_top">track</a> of geospatial points for the matched
        /// portion of the graph, a track ID, and a score value. Also outputs a
        /// details table containing a trip ID (that matches the track ID), the
        /// latitude/longitude pair, the timestamp the point was recorded at,
        /// and an edge ID corresponding to the matched road segment. Must not
        /// be an existing table of the same name. The default value is ''.
        /// </param>
        /// <param name="options">Additional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.GPS_NOISE">GPS_NOISE</see>:
        ///         </term>
        ///         <description>GPS noise value (in meters) to remove
        ///         redundant sample points. Use -1 to disable noise reduction.
        ///         The default value accounts for 95% of point variation (+ or
        ///         -5 meters). The default value is '5.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.NUM_SEGMENTS">NUM_SEGMENTS</see>:
        ///         </term>
        ///         <description>Maximum number of potentially matching road
        ///         segments for each sample point. For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MARKOV_CHAIN">MARKOV_CHAIN</see>
        ///         solver, the default is 3. The default value is '3'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.SEARCH_RADIUS">SEARCH_RADIUS</see>:
        ///         </term>
        ///         <description>Maximum search radius used when snapping
        ///         sample points onto potentially matching surrounding
        ///         segments. The default value corresponds to approximately
        ///         100 meters. The default value is '0.001'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.CHAIN_WIDTH">CHAIN_WIDTH</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MARKOV_CHAIN">MARKOV_CHAIN</see>
        ///         solver only. Length of the sample points lookahead window
        ///         within the Markov kernel; the larger the number, the more
        ///         accurate the solution. The default value is '9'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.SOURCE">SOURCE</see>:
        ///         </term>
        ///         <description>Optional WKT starting point from <paramref
        ///         name="sample_points" /> for the solver. The default
        ///         behavior for the endpoint is to use time to determine the
        ///         starting point. The default value is 'POINT NULL'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.DESTINATION">DESTINATION</see>:
        ///         </term>
        ///         <description>Optional WKT ending point from <paramref
        ///         name="sample_points" /> for the solver. The default
        ///         behavior for the endpoint is to use time to determine the
        ///         destination point. The default value is 'POINT NULL'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.PARTIAL_LOADING">PARTIAL_LOADING</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. When false (non-default), trucks do not
        ///         off-load at the demand (store) side if the remainder is
        ///         less than the store's need.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Partial off-loading at multiple store
        ///                 (demand) locations</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>No partial off-loading allowed if
        ///                 supply is less than the store's demand.
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_COMBINATIONS">MAX_COMBINATIONS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. This is the cutoff for the number of generated
        ///         combinations for sequencing the demand locations - can
        ///         increase this up to 2M. The default value is '10000'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_SUPPLY_COMBINATIONS">MAX_SUPPLY_COMBINATIONS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. This is the cutoff for the number of generated
        ///         combinations for sequencing the supply locations if/when
        ///         'permute_supplies' is true. The default value is '10000'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.LEFT_TURN_PENALTY">LEFT_TURN_PENALTY</see>:
        ///         </term>
        ///         <description>This will add an additonal weight over the
        ///         edges labelled as 'left turn' if the 'add_turn' option
        ///         parameter of the <see
        ///         cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        ///         was invoked at graph creation. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.RIGHT_TURN_PENALTY">RIGHT_TURN_PENALTY</see>:
        ///         </term>
        ///         <description>This will add an additonal weight over the
        ///         edges labelled as' right turn' if the 'add_turn' option
        ///         parameter of the <see
        ///         cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        ///         was invoked at graph creation. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.INTERSECTION_PENALTY">INTERSECTION_PENALTY</see>:
        ///         </term>
        ///         <description>This will add an additonal weight over the
        ///         edges labelled as 'intersection' if the 'add_turn' option
        ///         parameter of the <see
        ///         cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        ///         was invoked at graph creation. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.SHARP_TURN_PENALTY">SHARP_TURN_PENALTY</see>:
        ///         </term>
        ///         <description>This will add an additonal weight over the
        ///         edges labelled as 'sharp turn' or 'u-turn' if the
        ///         'add_turn' option parameter of the <see
        ///         cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        ///         was invoked at graph creation. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.AGGREGATED_OUTPUT">AGGREGATED_OUTPUT</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. When it is true (default), each record in the
        ///         output table shows a particular truck's scheduled
        ///         cumulative round trip path (MULTILINESTRING) and the
        ///         corresponding aggregated cost. Otherwise, each record shows
        ///         a single scheduled truck route (LINESTRING) towards a
        ///         particular demand location (store id) with its
        ///         corresponding cost. The default value is 'true'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.OUTPUT_TRACKS">OUTPUT_TRACKS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. When it is true (non-default), the output will
        ///         be in tracks format for all the round trips of each truck
        ///         in which the timestamps are populated directly from the
        ///         edge weights starting from their originating depots. The
        ///         default value is 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_TRIP_COST">MAX_TRIP_COST</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         and <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_PICKUP_DROPOFF">MATCH_PICKUP_DROPOFF</see>
        ///         solvers only. If this constraint is greater than zero
        ///         (default) then the trucks/rides will skip travelling from
        ///         one demand/pick location to another if the cost between
        ///         them is greater than this number (distance or time). Zero
        ///         (default) value means no check is performed. The default
        ///         value is '0.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.FILTER_FOLDING_PATHS">FILTER_FOLDING_PATHS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MARKOV_CHAIN">MARKOV_CHAIN</see>
        ///         solver only. When true (non-default), the paths per
        ///         sequence combination is checked for folding over patterns
        ///         and can significantly increase the execution time depending
        ///         on the chain width and the number of gps samples.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Filter out the folded paths.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Do not filter out the folded paths
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.UNIT_UNLOADING_COST">UNIT_UNLOADING_COST</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. The unit cost per load amount to be delivered.
        ///         If this value is greater than zero (default) then the
        ///         additional cost of this unit load multiplied by the total
        ///         dropped load will be added over to the trip cost to the
        ///         demand location. The default value is '0.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_NUM_THREADS">MAX_NUM_THREADS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MARKOV_CHAIN">MARKOV_CHAIN</see>
        ///         solver only. If specified (greater than zero), the maximum
        ///         number of threads will not be greater than the specified
        ///         value. It can be lower due to the memory and the number
        ///         cores available. Default value of zero allows the algorithm
        ///         to set the maximal number of threads within these
        ///         constraints. The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.SERVICE_LIMIT">SERVICE_LIMIT</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. If specified (greater than zero), any supply
        ///         actor's total service cost (distance or time) will be
        ///         limited by the specified value including multiple rounds
        ///         (if set). The default value is '0.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.ENABLE_REUSE">ENABLE_REUSE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. If specified (true), all supply actors can be
        ///         scheduled for second rounds from their originating depots.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Allows reusing supply actors (trucks,
        ///                 e.g.) for scheduling again.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Supply actors are scheduled only once
        ///                 from their depots.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_STOPS">MAX_STOPS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. If specified (greater than zero), a supply
        ///         actor (truck) can at most have this many stops (demand
        ///         locations) in one round trip. Otherwise, it is unlimited.
        ///         If 'enable_truck_reuse' is on, this condition will be
        ///         applied separately at each round trip use of the same
        ///         truck. The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.SERVICE_RADIUS">SERVICE_RADIUS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         and <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_PICKUP_DROPOFF">MATCH_PICKUP_DROPOFF</see>
        ///         solvers only. If specified (greater than zero), it filters
        ///         the demands/picks outside this radius centered around the
        ///         supply actor/ride's originating location (distance or
        ///         time). The default value is '0.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.PERMUTE_SUPPLIES">PERMUTE_SUPPLIES</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. If specified (true), supply side actors are
        ///         permuted for the demand combinations during msdo
        ///         optimization - note that this option increases optimization
        ///         time significantly - use of 'max_combinations' option is
        ///         recommended to prevent prohibitively long runs.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Generates sequences over supply side
        ///                 permutations if total supply is less than twice the
        ///                 total demand</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Permutations are not performed, rather
        ///                 a specific order of supplies based on capacity is
        ///                 computed</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.BATCH_TSM_MODE">BATCH_TSM_MODE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. When enabled, it sets the number of visits on
        ///         each demand location by a single salesman at each trip is
        ///         considered to be (one) 1, otherwise there is no bound.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Sets only one visit per demand
        ///                 location by a salesman (tsm mode)</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>No preset limit (usual msdo mode)
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.ROUND_TRIP">ROUND_TRIP</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. When enabled, the supply will have to return
        ///         back to the origination location.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>The optimization is done for trips in
        ///                 round trip manner always returning to originating
        ///                 locations</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Supplies do not have to come back to
        ///                 their originating locations in their routes. The
        ///                 routes are considered finished at the final
        ///                 dropoff.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.NUM_CYCLES">NUM_CYCLES</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CLUSTERS">MATCH_CLUSTERS</see>
        ///         solver only. Terminates the cluster exchange iterations
        ///         across 2-step-cycles (outer loop) when quality does not
        ///         improve during iterations. The default value is '10'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.NUM_LOOPS_PER_CYCLE">NUM_LOOPS_PER_CYCLE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CLUSTERS">MATCH_CLUSTERS</see>
        ///         and <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solvers only. Terminates the cluster exchanges within the
        ///         first step iterations of a cycle (inner loop) unless
        ///         convergence is reached. The default value is '10'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.NUM_OUTPUT_CLUSTERS">NUM_OUTPUT_CLUSTERS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CLUSTERS">MATCH_CLUSTERS</see>
        ///         solver only.  Limits the output to the top
        ///         'num_output_clusters' clusters based on density. Default
        ///         value of zero outputs all clusters. The default value is
        ///         '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_NUM_CLUSTERS">MAX_NUM_CLUSTERS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CLUSTERS">MATCH_CLUSTERS</see>
        ///         and <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solvers only. If set (value greater than zero), it
        ///         terminates when the number of clusters goes below than this
        ///         number. For embedding solver the default is 8. The default
        ///         value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.CLUSTER_QUALITY_METRIC">CLUSTER_QUALITY_METRIC</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CLUSTERS">MATCH_CLUSTERS</see>
        ///         solver only. The quality metric for Louvain modularity
        ///         optimization solver.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.GIRVAN">GIRVAN</see>:
        ///                 </term>
        ///                 <description>Uses the Newman Girvan quality metric
        ///                 for cluster solver</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.SPECTRAL">SPECTRAL</see>:
        ///                 </term>
        ///                 <description>Applies recursive spectral bisection
        ///                 (RSB) partitioning solver</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.GIRVAN">GIRVAN</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.RESTRICTED_TYPE">RESTRICTED_TYPE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SUPPLY_DEMAND">MATCH_SUPPLY_DEMAND</see>
        ///         solver only. Optimization is performed by restricting
        ///         routes labeled by 'MSDO_ODDEVEN_RESTRICTED' only for this
        ///         supply actor (truck) type.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.ODD">ODD</see>:
        ///                 </term>
        ///                 <description>Applies odd/even rule restrictions to
        ///                 odd tagged vehicles.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.EVEN">EVEN</see>:
        ///                 </term>
        ///                 <description>Applies odd/even rule restrictions to
        ///                 even tagged vehicles.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>Does not apply odd/even rule
        ///                 restrictions to any vehicles.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.SERVER_ID">SERVER_ID</see>:
        ///         </term>
        ///         <description>Indicates which graph server(s) to send the
        ///         request to. Default is to send to the server, amongst those
        ///         containing the corresponding graph, that has the most
        ///         computational bandwidth. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.INVERSE_SOLVE">INVERSE_SOLVE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_BATCH_SOLVES">MATCH_BATCH_SOLVES</see>
        ///         solver only. Solves source-destination pairs using inverse
        ///         shortest path solver.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Solves using inverse shortest path
        ///                 solver.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Solves using direct shortest path
        ///                 solver.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MIN_LOOP_LEVEL">MIN_LOOP_LEVEL</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_LOOPS">MATCH_LOOPS</see>
        ///         solver only. Finds closed loops around each node deducible
        ///         not less than this minimal hop (level) deep. The default
        ///         value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_LOOP_LEVEL">MAX_LOOP_LEVEL</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_LOOPS">MATCH_LOOPS</see>
        ///         solver only. Finds closed loops around each node deducible
        ///         not more than this maximal hop (level) deep. The default
        ///         value is '5'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.SEARCH_LIMIT">SEARCH_LIMIT</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_LOOPS">MATCH_LOOPS</see>
        ///         solver only. Searches within this limit of nodes per vertex
        ///         to detect loops. The value zero means there is no limit.
        ///         The default value is '10000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.OUTPUT_BATCH_SIZE">OUTPUT_BATCH_SIZE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_LOOPS">MATCH_LOOPS</see>
        ///         solver only. Uses this value as the batch size of the
        ///         number of loops in flushing(inserting) to the output table.
        ///         The default value is '1000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.CHARGING_CAPACITY">CHARGING_CAPACITY</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CHARGING_STATIONS">MATCH_CHARGING_STATIONS</see>
        ///         solver only. This is the maximum ev-charging capacity of a
        ///         vehicle (distance in meters or time in seconds depending on
        ///         the unit of the graph weights). The default value is
        ///         '300000.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.CHARGING_CANDIDATES">CHARGING_CANDIDATES</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CHARGING_STATIONS">MATCH_CHARGING_STATIONS</see>
        ///         solver only. Solver searches for this many number of
        ///         stations closest around each base charging location found
        ///         by capacity. The default value is '10'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.CHARGING_PENALTY">CHARGING_PENALTY</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_CHARGING_STATIONS">MATCH_CHARGING_STATIONS</see>
        ///         solver only. This is the penalty for full charging. The
        ///         default value is '30000.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_HOPS">MAX_HOPS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SIMILARITY">MATCH_SIMILARITY</see>
        ///         and <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solvers only. Searches within this maximum hops for source
        ///         and target node pairs to compute the Jaccard scores. The
        ///         default value is '3'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.TRAVERSAL_NODE_LIMIT">TRAVERSAL_NODE_LIMIT</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SIMILARITY">MATCH_SIMILARITY</see>
        ///         solver only. Limits the traversal depth if it reaches this
        ///         many number of nodes. The default value is '1000'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.PAIRED_SIMILARITY">PAIRED_SIMILARITY</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_SIMILARITY">MATCH_SIMILARITY</see>
        ///         solver only. If true, it computes Jaccard score between
        ///         each pair, otherwise it will compute Jaccard from the
        ///         intersection set between the source and target nodes.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.FORCE_UNDIRECTED">FORCE_UNDIRECTED</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_PATTERN">MATCH_PATTERN</see>
        ///         and <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solvers only. Pattern matching will be using both pattern
        ///         and graph as undirected if set to true.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.MAX_VECTOR_DIMENSION">MAX_VECTOR_DIMENSION</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solver only. Limits the number of dimensions in node vector
        ///         embeddings. The default value is '1000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.OPTIMIZE_EMBEDDING_WEIGHTS">OPTIMIZE_EMBEDDING_WEIGHTS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solvers only. Solves to find the optimal weights per sub
        ///         feature in vector emdeddings.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MatchGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MatchGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.EMBEDDING_WEIGHTS">EMBEDDING_WEIGHTS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solver only. User specified weights per sub feature in
        ///         vector embeddings. The string contains the comma separated
        ///         float values for each sub-feature in the vector space.
        ///         These values will ONLY be used if
        ///         'optimize_embedding_weights' is false. The default value is
        ///         '1.0,1.0,1.0,1.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.OPTIMIZATION_SAMPLING_SIZE">OPTIMIZATION_SAMPLING_SIZE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solver only. Sets the number of random nodes from the graph
        ///         for solving the weights using stochastic gradient descent.
        ///         The default value is '1000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.OPTIMIZATION_MAX_ITERATIONS">OPTIMIZATION_MAX_ITERATIONS</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solver only. When the iterations (epochs) for the
        ///         convergence of the stochastic gradient descent algorithm
        ///         reaches this number it bails out unless relative error
        ///         between consecutive iterations is below the
        ///         'optimization_error_tolerance' option. The default value is
        ///         '1000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.OPTIMIZATION_ERROR_TOLERANCE">OPTIMIZATION_ERROR_TOLERANCE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solver only. When the relative error between all of the
        ///         weights' consecutive iterations falls below this threshold
        ///         the optimization cycle is interrupted unless the number of
        ///         iterations reaches the limit set by the option
        ///         'max_optimization_iterations'. The default value is
        ///         '0.001'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MatchGraphRequest.Options.OPTIMIZATION_ITERATION_RATE">OPTIMIZATION_ITERATION_RATE</see>:
        ///         </term>
        ///         <description>For the <see
        ///         cref="MatchGraphRequest.SolveMethod.MATCH_EMBEDDING">MATCH_EMBEDDING</see>
        ///         solver only. It is otherwise known as the learning rate,
        ///         which is the proportionality constant in fornt of the
        ///         gradient term in successive iterations. The default value
        ///         is '0.3'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public MatchGraphResponse matchGraph( string graph_name,
                                              IList<string> sample_points,
                                              string solve_method = MatchGraphRequest.SolveMethod.MARKOV_CHAIN,
                                              string solution_table = "",
                                              IDictionary<string, string> options = null )
        {
            return matchGraph( new MatchGraphRequest( graph_name, sample_points,
                                                      solve_method, solution_table,
                                                      options ) );
        }

        /// <summary>Create a new empty result table (specified by <see
        /// cref="MergeRecordsRequest.table_name">table_name</see>), and insert
        /// all records from source tables (specified by <see
        /// cref="MergeRecordsRequest.source_table_names">source_table_names</see>)
        /// based on the field mapping information (specified by <see
        /// cref="MergeRecordsRequest.field_maps">field_maps</see>).</summary>
        /// <remarks><para> For merge records details and examples, see <a
        /// href="../../../concepts/merge_records/" target="_top">Merge
        /// Records</a>.  For limitations, see <a
        /// href="../../../concepts/merge_records/#limitations-and-cautions"
        /// target="_top">Merge Records Limitations and Cautions</a>.</para>
        /// <para>The field map (specified by <see
        /// cref="MergeRecordsRequest.field_maps">field_maps</see>) holds the
        /// user-specified maps of target table column names to source table
        /// columns. The array of <see
        /// cref="MergeRecordsRequest.field_maps">field_maps</see> must match
        /// one-to-one with the <see
        /// cref="MergeRecordsRequest.source_table_names">source_table_names</see>,
        /// e.g., there's a map present in <see
        /// cref="MergeRecordsRequest.field_maps">field_maps</see> for each
        /// table listed in <see
        /// cref="MergeRecordsRequest.source_table_names">source_table_names</see>.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public MergeRecordsResponse mergeRecords( MergeRecordsRequest request_ )
        {
            MergeRecordsResponse actualResponse_ = SubmitRequest<MergeRecordsResponse>("/merge/records", request_, false);

            return actualResponse_;
        }

        /// <summary>Create a new empty result table (specified by <paramref
        /// name="table_name" />), and insert all records from source tables
        /// (specified by <paramref name="source_table_names" />) based on the
        /// field mapping information (specified by <paramref name="field_maps"
        /// />).</summary>
        /// <remarks><para> For merge records details and examples, see <a
        /// href="../../../concepts/merge_records/" target="_top">Merge
        /// Records</a>.  For limitations, see <a
        /// href="../../../concepts/merge_records/#limitations-and-cautions"
        /// target="_top">Merge Records Limitations and Cautions</a>.</para>
        /// <para>The field map (specified by <paramref name="field_maps" />)
        /// holds the user-specified maps of target table column names to
        /// source table columns. The array of <paramref name="field_maps" />
        /// must match one-to-one with the <paramref name="source_table_names"
        /// />, e.g., there's a map present in <paramref name="field_maps" />
        /// for each table listed in <paramref name="source_table_names" />.
        /// </para></remarks>
        ///
        /// <param name="table_name">The name of the new result table for the
        /// records to be merged into, in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  Must NOT be an existing
        /// table.</param>
        /// <param name="source_table_names">The list of names of source tables
        /// to get the records from, each in [schema_name.]table_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be existing table
        /// names.</param>
        /// <param name="field_maps">Contains a list of source/target column
        /// mappings, one mapping for each source table listed in <paramref
        /// name="source_table_names" /> being merged into the target table
        /// specified by <paramref name="table_name" />.  Each mapping contains
        /// the target column names (as keys) that the data in the mapped
        /// source columns or column <a href="../../../concepts/expressions/"
        /// target="_top">expressions</a> (as values) will be merged into.  All
        /// of the source columns being merged into a given target column must
        /// match in type, as that type will determine the type of the new
        /// target column.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.CREATE_TEMP_TABLE">CREATE_TEMP_TABLE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="MergeRecordsRequest.Options.TRUE">TRUE</see>, a
        ///         unique temporary table name will be generated in the
        ///         sys_temp schema and used in place of <paramref
        ///         name="table_name" />. If <see
        ///         cref="MergeRecordsRequest.Options.PERSIST">PERSIST</see> is
        ///         <see cref="MergeRecordsRequest.Options.FALSE">FALSE</see>,
        ///         then this is always allowed even if the caller does not
        ///         have permission to create tables. The generated name is
        ///         returned in <see
        ///         cref="MergeRecordsResponse.Info.QUALIFIED_TABLE_NAME">QUALIFIED_TABLE_NAME</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MergeRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MergeRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.COLLECTION_NAME">COLLECTION_NAME</see>:
        ///         </term>
        ///         <description>[DEPRECATED--please specify the containing
        ///         schema for the merged table as part of <paramref
        ///         name="table_name" /> and use <see
        ///         cref="createSchema(string,IDictionary{string,string})">createSchema</see>
        ///         to create the schema if non-existent]  Name of a schema for
        ///         the newly created merged table specified by <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:
        ///         </term>
        ///         <description>Indicates the <a
        ///         href="../../../concepts/tables/#distribution"
        ///         target="_top">distribution scheme</a> for the data of the
        ///         merged table specified in <paramref name="table_name" />.
        ///         If true, the table will be <a
        ///         href="../../../concepts/tables/#replication"
        ///         target="_top">replicated</a>.  If false, the table will be
        ///         <a href="../../../concepts/tables/#random-sharding"
        ///         target="_top">randomly sharded</a>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MergeRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MergeRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MergeRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.TTL">TTL</see>:</term>
        ///         <description>Sets the <a href="../../../concepts/ttl/"
        ///         target="_top">TTL</a> of the merged table specified in
        ///         <paramref name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.PERSIST">PERSIST</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="MergeRecordsRequest.Options.TRUE">TRUE</see>, then
        ///         the table specified in <paramref name="table_name" /> will
        ///         be persisted and will not expire unless a <see
        ///         cref="MergeRecordsRequest.Options.TTL">TTL</see> is
        ///         specified.   If <see
        ///         cref="MergeRecordsRequest.Options.FALSE">FALSE</see>, then
        ///         the table will be an in-memory table and will expire unless
        ///         a <see cref="MergeRecordsRequest.Options.TTL">TTL</see> is
        ///         specified otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="MergeRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="MergeRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="MergeRecordsRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.CHUNK_SIZE">CHUNK_SIZE</see>:
        ///         </term>
        ///         <description>Indicates the number of records per chunk to
        ///         be used for the merged table specified in <paramref
        ///         name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.CHUNK_COLUMN_MAX_MEMORY">CHUNK_COLUMN_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for
        ///         each column in a chunk to be used for the merged table
        ///         specified in <paramref name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.CHUNK_MAX_MEMORY">CHUNK_MAX_MEMORY</see>:
        ///         </term>
        ///         <description>Indicates the target maximum data size for all
        ///         columns in a chunk to be used for the merged table
        ///         specified in <paramref name="table_name" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="MergeRecordsRequest.Options.VIEW_ID">VIEW_ID</see>:
        ///         </term>
        ///         <description>view this result table is part of. The default
        ///         value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public MergeRecordsResponse mergeRecords( string table_name,
                                                  IList<string> source_table_names,
                                                  IList<IDictionary<string, string>> field_maps,
                                                  IDictionary<string, string> options = null )
        {
            return mergeRecords( new MergeRecordsRequest( table_name, source_table_names,
                                                          field_maps, options ) );
        }

        /// <summary>Update an existing graph network using given nodes, edges,
        /// weights, restrictions, and options.</summary>
        /// <remarks><para> IMPORTANT: It's highly recommended that you review
        /// the <a href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, and <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a> before using this endpoint.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ModifyGraphResponse modifyGraph( ModifyGraphRequest request_ )
        {
            ModifyGraphResponse actualResponse_ = SubmitRequest<ModifyGraphResponse>("/modify/graph", request_, false);

            return actualResponse_;
        }

        /// <summary>Update an existing graph network using given nodes, edges,
        /// weights, restrictions, and options.</summary>
        /// <remarks><para> IMPORTANT: It's highly recommended that you review
        /// the <a href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, and <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a> before using this endpoint.</para></remarks>
        ///
        /// <param name="graph_name">Name of the graph resource to modify.
        /// </param>
        /// <param name="nodes">Nodes with which to update existing <paramref
        /// name="nodes" /> in graph specified by <paramref name="graph_name"
        /// />. Review <a
        /// href="../../../graph_solver/network_graph_solver/#nodes"
        /// target="_top">Nodes</a> for more information. Nodes must be
        /// specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS NODE_ID',
        /// expressions, e.g., 'ST_MAKEPOINT(column1, column2) AS
        /// NODE_WKTPOINT', or raw values, e.g., '{9, 10, 11} AS NODE_ID'. If
        /// using raw values in an identifier combination, the number of values
        /// specified must match across the combination. Identifier
        /// combination(s) do not have to match the method used to create the
        /// graph, e.g., if column names were specified to create the graph,
        /// expressions or raw values could also be used to modify the graph.
        /// </param>
        /// <param name="edges">Edges with which to update existing <paramref
        /// name="edges" /> in graph specified by <paramref name="graph_name"
        /// />. Review <a
        /// href="../../../graph_solver/network_graph_solver/#edges"
        /// target="_top">Edges</a> for more information. Edges must be
        /// specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS EDGE_ID',
        /// expressions, e.g., 'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or
        /// raw values, e.g., "{'family', 'coworker'} AS EDGE_LABEL". If using
        /// raw values in an identifier combination, the number of values
        /// specified must match across the combination. Identifier
        /// combination(s) do not have to match the method used to create the
        /// graph, e.g., if column names were specified to create the graph,
        /// expressions or raw values could also be used to modify the graph.
        /// </param>
        /// <param name="weights">Weights with which to update existing
        /// <paramref name="weights" /> in graph specified by <paramref
        /// name="graph_name" />. Review <a
        /// href="../../../graph_solver/network_graph_solver/#graph-weights"
        /// target="_top">Weights</a> for more information. Weights must be
        /// specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS WEIGHTS_EDGE_ID',
        /// expressions, e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or
        /// raw values, e.g., '{4, 15} AS WEIGHTS_VALUESPECIFIED'. If using raw
        /// values in an identifier combination, the number of values specified
        /// must match across the combination. Identifier combination(s) do not
        /// have to match the method used to create the graph, e.g., if column
        /// names were specified to create the graph, expressions or raw values
        /// could also be used to modify the graph.</param>
        /// <param name="restrictions">Restrictions with which to update
        /// existing <paramref name="restrictions" /> in graph specified by
        /// <paramref name="graph_name" />. Review <a
        /// href="../../../graph_solver/network_graph_solver/#graph-restrictions"
        /// target="_top">Restrictions</a> for more information. Restrictions
        /// must be specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED', or raw values, e.g., '{0, 0, 0, 1} AS
        /// RESTRICTIONS_ONOFFCOMPARED'. If using raw values in an identifier
        /// combination, the number of values specified must match across the
        /// combination. Identifier combination(s) do not have to match the
        /// method used to create the graph, e.g., if column names were
        /// specified to create the graph, expressions or raw values could also
        /// be used to modify the graph.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:
        ///         </term>
        ///         <description>Value-based restriction comparison. Any node
        ///         or edge with a RESTRICTIONS_VALUECOMPARED value greater
        ///         than the <see
        ///         cref="ModifyGraphRequest.Options.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>
        ///         will not be included in the graph.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.EXPORT_CREATE_RESULTS">EXPORT_CREATE_RESULTS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="ModifyGraphRequest.Options.TRUE">TRUE</see>, returns
        ///         the graph topology in the response as arrays.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.ENABLE_GRAPH_DRAW">ENABLE_GRAPH_DRAW</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="ModifyGraphRequest.Options.TRUE">TRUE</see>, adds a
        ///         'EDGE_WKTLINE' column identifier to the specified <see
        ///         cref="ModifyGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>
        ///         so the graph can be viewed via WMS; for social and
        ///         non-geospatial graphs, the 'EDGE_WKTLINE' column identifier
        ///         will be populated with spatial coordinates derived from a
        ///         flattening layout algorithm so the graph can still be
        ///         viewed.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="ModifyGraphRequest.Options.TRUE">TRUE</see>, the
        ///         graph will be saved in the persist directory (see the <a
        ///         href="../../../config/" target="_top">config reference</a>
        ///         for more information). If set to <see
        ///         cref="ModifyGraphRequest.Options.FALSE">FALSE</see>, the
        ///         graph will be removed when the graph server is shutdown.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.ADD_TABLE_MONITOR">ADD_TABLE_MONITOR</see>:
        ///         </term>
        ///         <description>Adds a table monitor to every table used in
        ///         the creation of the graph; this table monitor will trigger
        ///         the graph to update dynamically upon inserts to the source
        ///         table(s). Note that upon database restart, if <see
        ///         cref="ModifyGraphRequest.Options.SAVE_PERSIST">SAVE_PERSIST</see>
        ///         is also set to <see
        ///         cref="ModifyGraphRequest.Options.TRUE">TRUE</see>, the
        ///         graph will be fully reconstructed and the table monitors
        ///         will be reattached. For more details on table monitors, see
        ///         <see
        ///         cref="createTableMonitor(string,IDictionary{string,string})">createTableMonitor</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.GRAPH_TABLE">GRAPH_TABLE</see>:
        ///         </term>
        ///         <description>If specified, the created graph is also
        ///         created as a table with the given name, in
        ///         [schema_name.]table_name format, using standard <a
        ///         href="../../../concepts/tables/#table-name-resolution"
        ///         target="_top">name resolution rules</a> and meeting <a
        ///         href="../../../concepts/tables/#table-naming-criteria"
        ///         target="_top">table naming criteria</a>.  This table will
        ///         have the following identifier columns: 'EDGE_ID',
        ///         'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left blank, no table
        ///         is created. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.REMOVE_LABEL_ONLY">REMOVE_LABEL_ONLY</see>:
        ///         </term>
        ///         <description>When RESTRICTIONS on labeled entities
        ///         requested, if set to true this will NOT delete the entity
        ///         but only the label associated with the entity. Otherwise
        ///         (default), it'll delete the label AND the entity.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.ADD_TURNS">ADD_TURNS</see>:
        ///         </term>
        ///         <description>Adds dummy 'pillowed' edges around
        ///         intersection nodes where there are more than three edges so
        ///         that additional weight penalties can be imposed by the
        ///         solve endpoints. (increases the total number of edges).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ModifyGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.TURN_ANGLE">TURN_ANGLE</see>:
        ///         </term>
        ///         <description>Value in degrees modifies the thresholds for
        ///         attributing right, left, sharp turns, and intersections. It
        ///         is the vertical deviation angle from the incoming edge to
        ///         the intersection node. The larger the value, the larger the
        ///         threshold for sharp turns and intersections; the smaller
        ///         the value, the larger the threshold for right and left
        ///         turns; 0 &lt; turn_angle &lt; 90. The default value is
        ///         '60'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.USE_RTREE">USE_RTREE</see>:
        ///         </term>
        ///         <description>Use an range tree structure to accelerate and
        ///         improve the accuracy of snapping, especially to edges.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ModifyGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.LABEL_DELIMITER">LABEL_DELIMITER</see>:
        ///         </term>
        ///         <description>If provided the label string will be split
        ///         according to this delimiter and each sub-string will be
        ///         applied as a separate label onto the specified edge. The
        ///         default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.ALLOW_MULTIPLE_EDGES">ALLOW_MULTIPLE_EDGES</see>:
        ///         </term>
        ///         <description>Multigraph choice; allowing multiple edges
        ///         with the same node pairs if set to true, otherwise, new
        ///         edges with existing same node pairs will not be inserted.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ModifyGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ModifyGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ModifyGraphRequest.Options.EMBEDDING_TABLE">EMBEDDING_TABLE</see>:
        ///         </term>
        ///         <description>If table exists (should be generated by the
        ///         match/graph match_embedding solver), the vector embeddings
        ///         for the newly inserted nodes will be appended into this
        ///         table. The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ModifyGraphResponse modifyGraph( string graph_name,
                                                IList<string> nodes,
                                                IList<string> edges,
                                                IList<string> weights,
                                                IList<string> restrictions,
                                                IDictionary<string, string> options = null )
        {
            return modifyGraph( new ModifyGraphRequest( graph_name, nodes, edges, weights,
                                                        restrictions, options ) );
        }

        /// <summary>Employs a topological query on a graph generated a-priori
        /// by <see cref="createGraph(CreateGraphRequest)">createGraph</see>
        /// and returns a list of adjacent edge(s) or node(s), also known as an
        /// adjacency list, depending on what's been provided to the endpoint;
        /// providing edges will return nodes and providing nodes will return
        /// edges.</summary>
        /// <remarks><para> To determine the node(s) or edge(s) adjacent to a
        /// value from a given column, provide a list of values to <see
        /// cref="QueryGraphRequest.queries">queries</see>. This field can be
        /// populated with column values from any table as long as the type is
        /// supported by the given identifier. See <a
        /// href="../../../graph_solver/network_graph_solver/#query-identifiers"
        /// target="_top">Query Identifiers</a> for more information.</para>
        /// <para>To return the adjacency list in the response, leave <see
        /// cref="QueryGraphRequest.adjacency_table">adjacency_table</see>
        /// empty.</para>
        /// <para>IMPORTANT: It's highly recommended that you review the <a
        /// href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a
        /// href="../../../guide-tags/graph---query" target="_top">/match/graph
        /// examples</a> before using this endpoint.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public QueryGraphResponse queryGraph( QueryGraphRequest request_ )
        {
            QueryGraphResponse actualResponse_ = SubmitRequest<QueryGraphResponse>("/query/graph", request_, false);

            return actualResponse_;
        }

        /// <summary>Employs a topological query on a graph generated a-priori
        /// by <see
        /// cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        /// and returns a list of adjacent edge(s) or node(s), also known as an
        /// adjacency list, depending on what's been provided to the endpoint;
        /// providing edges will return nodes and providing nodes will return
        /// edges.</summary>
        /// <remarks><para> To determine the node(s) or edge(s) adjacent to a
        /// value from a given column, provide a list of values to <paramref
        /// name="queries" />. This field can be populated with column values
        /// from any table as long as the type is supported by the given
        /// identifier. See <a
        /// href="../../../graph_solver/network_graph_solver/#query-identifiers"
        /// target="_top">Query Identifiers</a> for more information.</para>
        /// <para>To return the adjacency list in the response, leave <paramref
        /// name="adjacency_table" /> empty.</para>
        /// <para>IMPORTANT: It's highly recommended that you review the <a
        /// href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a
        /// href="../../../guide-tags/graph---query" target="_top">/match/graph
        /// examples</a> before using this endpoint.</para></remarks>
        ///
        /// <param name="graph_name">Name of the graph resource to query.
        /// </param>
        /// <param name="queries">Nodes or edges to be queried specified using
        /// <a
        /// href="../../../graph_solver/network_graph_solver/#query-identifiers"
        /// target="_top">query identifiers</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS QUERY_NODE_ID', raw
        /// values, e.g., '{0, 2} AS QUERY_NODE_ID', or expressions, e.g.,
        /// 'ST_MAKEPOINT(table.x, table.y) AS QUERY_NODE_WKTPOINT'. Multiple
        /// values can be provided as long as the same identifier is used for
        /// all values. If using raw values in an identifier combination, the
        /// number of values specified must match across the combination.
        /// </param>
        /// <param name="restrictions">Additional restrictions to apply to the
        /// nodes/edges of an existing graph. Restrictions must be specified
        /// using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED', or raw values, e.g., '{0, 0, 0, 1} AS
        /// RESTRICTIONS_ONOFFCOMPARED'. If using raw values in an identifier
        /// combination, the number of values specified must match across the
        /// combination. The default value is an empty List.</param>
        /// <param name="adjacency_table">Name of the table to store the
        /// resulting adjacencies, in [schema_name.]table_name format, using
        /// standard <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  If left blank, the query
        /// results are instead returned in the response. If the
        /// 'QUERY_TARGET_NODE_LABEL' <a
        /// href="../../../graph_solver/network_graph_solver/#query-identifiers"
        /// target="_top">query identifier</a> is used in <paramref
        /// name="queries" />, then two additional columns will be available:
        /// 'PATH_ID' and 'RING_ID'. See <a
        /// href="../../../graph_solver/network_graph_solver/#using-labels"
        /// target="_top">Using Labels</a> for more information. The default
        /// value is ''.</param>
        /// <param name="rings">Sets the number of rings around the node to
        /// query for adjacency, with '1' being the edges directly attached to
        /// the queried node. Also known as number of hops. For example, if it
        /// is set to '2', the edge(s) directly attached to the queried node(s)
        /// will be returned; in addition, the edge(s) attached to the node(s)
        /// attached to the initial ring of edge(s) surrounding the queried
        /// node(s) will be returned. If the value is set to '0', any nodes
        /// that meet the criteria in <paramref name="queries" /> and <paramref
        /// name="restrictions" /> will be returned. This parameter is only
        /// applicable when querying nodes. The default value is 1.</param>
        /// <param name="options">Additional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="QueryGraphRequest.Options.FORCE_UNDIRECTED">FORCE_UNDIRECTED</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="QueryGraphRequest.Options.TRUE">TRUE</see>, all
        ///         inbound edges and outbound edges relative to the node will
        ///         be returned. If set to <see
        ///         cref="QueryGraphRequest.Options.FALSE">FALSE</see>, only
        ///         outbound edges relative to the node will be returned. This
        ///         parameter is only applicable if the queried graph <paramref
        ///         name="graph_name" /> is directed and when querying nodes.
        ///         Consult <a
        ///         href="../../../graph_solver/network_graph_solver/#directed-graphs"
        ///         target="_top">Directed Graphs</a> for more details.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="QueryGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="QueryGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="QueryGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="QueryGraphRequest.Options.LIMIT">LIMIT</see>:</term>
        ///         <description>When specified (&gt;0), limits the number of
        ///         query results. The size of the nodes table will be limited
        ///         by the <see
        ///         cref="QueryGraphRequest.Options.LIMIT">LIMIT</see> value.
        ///         The default value is '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="QueryGraphRequest.Options.OUTPUT_WKT_PATH">OUTPUT_WKT_PATH</see>:
        ///         </term>
        ///         <description>If true then concatenated wkt line segments
        ///         will be added as the WKT column of the adjacency table.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="QueryGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="QueryGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="QueryGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="QueryGraphRequest.Options.AND_LABELS">AND_LABELS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="QueryGraphRequest.Options.TRUE">TRUE</see>, the
        ///         result of the query has entities that satisfy all of the
        ///         target labels, instead of any.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="QueryGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="QueryGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="QueryGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="QueryGraphRequest.Options.SERVER_ID">SERVER_ID</see>:
        ///         </term>
        ///         <description>Indicates which graph server(s) to send the
        ///         request to. Default is to send to the server, amongst those
        ///         containing the corresponding graph, that has the most
        ///         computational bandwidth.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="QueryGraphRequest.Options.OUTPUT_CHARN_LENGTH">OUTPUT_CHARN_LENGTH</see>:
        ///         </term>
        ///         <description>When specified (&gt;0 and &lt;=256), limits
        ///         the number of char length on the output tables for string
        ///         based nodes. The default length is 64. The default value is
        ///         '64'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="QueryGraphRequest.Options.FIND_COMMON_LABELS">FIND_COMMON_LABELS</see>:
        ///         </term>
        ///         <description>If set to true, for many-to-many queries or
        ///         multi-level traversals, it lists the common labels between
        ///         the source and target nodes and edge labels in each path.
        ///         Otherwise (zero rings), it'll list all labels of the
        ///         node(s) queried.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="QueryGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="QueryGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="QueryGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public QueryGraphResponse queryGraph( string graph_name,
                                              IList<string> queries,
                                              IList<string> restrictions = null,
                                              string adjacency_table = "",
                                              int rings = 1,
                                              IDictionary<string, string> options = null )
        {
            return queryGraph( new QueryGraphRequest( graph_name, queries, restrictions,
                                                      adjacency_table, rings, options ) );
        }

        /// <summary>Rebalances an existing partitioned graph.</summary>
        /// <remarks><para> IMPORTANT: It's highly recommended that you review
        /// the <a href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
        /// target="_top">graph examples</a> before using this endpoint.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RepartitionGraphResponse repartitionGraph( RepartitionGraphRequest request_ )
        {
            RepartitionGraphResponse actualResponse_ = SubmitRequest<RepartitionGraphResponse>("/repartition/graph", request_, false);

            return actualResponse_;
        }

        /// <summary>Rebalances an existing partitioned graph.</summary>
        /// <remarks><para> IMPORTANT: It's highly recommended that you review
        /// the <a href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a href="../../../guide-tags/graph/"
        /// target="_top">graph examples</a> before using this endpoint.</para>
        /// </remarks>
        ///
        /// <param name="graph_name">Name of the graph resource to rebalance.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RepartitionGraphRequest.Options.NEW_GRAPH_NAME">NEW_GRAPH_NAME</see>:
        ///         </term>
        ///         <description>If a non-empty value is specified, the
        ///         original graph will be kept (non-default behaviour) and a
        ///         new balanced graph will be created under this given name.
        ///         When the value is empty (default), the generated 'balanced'
        ///         graph will replace the original 'unbalanced' graph under
        ///         the same graph name. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RepartitionGraphRequest.Options.SOURCE_NODE">SOURCE_NODE</see>:
        ///         </term>
        ///         <description>The distributed shortest path solve is run
        ///         from this source node to all the nodes in the graph to
        ///         create balaced partitions using the iso-distance levels of
        ///         the solution.  The source node is selected by the rebalance
        ///         algorithm automatically (default case when the value is an
        ///         empty string). Otherwise, the user specified node is used
        ///         as the source. The default value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RepartitionGraphRequest.Options.SQL_REQUEST_AVRO_JSON">SQL_REQUEST_AVRO_JSON</see>:
        ///         </term>
        ///         <description>The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RepartitionGraphResponse repartitionGraph( string graph_name,
                                                          IDictionary<string, string> options = null )
        {
            return repartitionGraph( new RepartitionGraphRequest( graph_name, options ) );
        }

        /// @cond NO_DOCS
        public ReserveResourceResponse reserveResource( ReserveResourceRequest request_ )
        {
            ReserveResourceResponse actualResponse_ = SubmitRequest<ReserveResourceResponse>("/reserve/resource", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public ReserveResourceResponse reserveResource( string component,
                                                        string name,
                                                        string action,
                                                        long bytes_requested = 0,
                                                        long owner_id = 0,
                                                        IDictionary<string, string> options = null )
        {
            return reserveResource( new ReserveResourceRequest( component, name, action,
                                                                bytes_requested, owner_id,
                                                                options ) );
        }
        /// @endcond

        /// <summary>Revoke user or role the specified permission on the
        /// specified object.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionResponse revokePermission( RevokePermissionRequest request_ )
        {
            RevokePermissionResponse actualResponse_ = SubmitRequest<RevokePermissionResponse>("/revoke/permission", request_, false);

            return actualResponse_;
        }

        /// <summary>Revoke user or role the specified permission on the
        /// specified object.</summary>
        ///
        /// <param name="principal">Name of the user or role for which the
        /// permission is being revoked.  Must be an existing user or role. The
        /// default value is ''.</param>
        /// <param name="_object">Name of object permission is being revoked
        /// from.  It is recommended to use a fully-qualified name when
        /// possible.</param>
        /// <param name="object_type">The type of object being revoked.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.CONTEXT">CONTEXT</see>:
        ///         </term>
        ///         <description>Context</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.CREDENTIAL">CREDENTIAL</see>:
        ///         </term>
        ///         <description>Credential</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.DATASINK">DATASINK</see>:
        ///         </term>
        ///         <description>Data Sink</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.DATASOURCE">DATASOURCE</see>:
        ///         </term>
        ///         <description>Data Source</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.DIRECTORY">DIRECTORY</see>:
        ///         </term>
        ///         <description>KIFS File Directory</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.GRAPH">GRAPH</see>:
        ///         </term>
        ///         <description>A Graph object</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.PROC">PROC</see>:
        ///         </term>
        ///         <description>UDF Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.SCHEMA">SCHEMA</see>:
        ///         </term>
        ///         <description>Schema</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.SQL_PROC">SQL_PROC</see>:
        ///         </term>
        ///         <description>SQL Procedure</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.SYSTEM">SYSTEM</see>:
        ///         </term>
        ///         <description>System-level access</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.TABLE">TABLE</see>:
        ///         </term>
        ///         <description>Database Table</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.ObjectType.TABLE_MONITOR">TABLE_MONITOR</see>:
        ///         </term>
        ///         <description>Table monitor</description>
        ///     </item>
        /// </list></param>
        /// <param name="permission">Permission being revoked.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.ADMIN">ADMIN</see>:
        ///         </term>
        ///         <description>Full read/write and administrative access on
        ///         the object.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.CONNECT">CONNECT</see>:
        ///         </term>
        ///         <description>Connect access on the given data source or
        ///         data sink.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.CREATE">CREATE</see>:
        ///         </term>
        ///         <description>Ability to create new objects of this type.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.DELETE">DELETE</see>:
        ///         </term>
        ///         <description>Delete rows from tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.EXECUTE">EXECUTE</see>:
        ///         </term>
        ///         <description>Ability to Execute the Procedure object.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.INSERT">INSERT</see>:
        ///         </term>
        ///         <description>Insert access to tables.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.READ">READ</see>:
        ///         </term>
        ///         <description>Ability to read, list and use the object.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.UPDATE">UPDATE</see>:
        ///         </term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.USER_ADMIN">USER_ADMIN</see>:
        ///         </term>
        ///         <description>Access to administer users and roles that do
        ///         not have system_admin permission.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Permission.WRITE">WRITE</see>:
        ///         </term>
        ///         <description>Access to write, change and delete objects.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionRequest.Options.COLUMNS">COLUMNS</see>:
        ///         </term>
        ///         <description>Revoke table security from these columns,
        ///         comma-separated. The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionResponse revokePermission( string principal,
                                                          string _object,
                                                          string object_type,
                                                          string permission,
                                                          IDictionary<string, string> options = null )
        {
            return revokePermission( new RevokePermissionRequest( principal, _object,
                                                                  object_type, permission,
                                                                  options ) );
        }

        /// <summary>Revokes a <a
        /// href="../../../security/sec_concepts/#security-concepts-permissions-credential"
        /// target="_top">credential-level permission</a> from a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionCredentialResponse revokePermissionCredential( RevokePermissionCredentialRequest request_ )
        {
            RevokePermissionCredentialResponse actualResponse_ = SubmitRequest<RevokePermissionCredentialResponse>("/revoke/permission/credential", request_, false);

            return actualResponse_;
        }

        /// <summary>Revokes a <a
        /// href="../../../security/sec_concepts/#security-concepts-permissions-credential"
        /// target="_top">credential-level permission</a> from a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role from which the
        /// permission will be revoked. Must be an existing user or role.
        /// </param>
        /// <param name="permission">Permission to revoke from the user or
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionCredentialRequest.Permission.CREDENTIAL_ADMIN">CREDENTIAL_ADMIN</see>:
        ///         </term>
        ///         <description>Full read/write and administrative access on
        ///         the credential.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionCredentialRequest.Permission.CREDENTIAL_READ">CREDENTIAL_READ</see>:
        ///         </term>
        ///         <description>Ability to read and use the credential.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="credential_name">Name of the credential on which the
        /// permission will be revoked. Must be an existing credential, or an
        /// empty string to revoke access on all credentials.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionCredentialResponse revokePermissionCredential( string name,
                                                                              string permission,
                                                                              string credential_name,
                                                                              IDictionary<string, string> options = null )
        {
            return revokePermissionCredential( new RevokePermissionCredentialRequest( name,
                                                                                      permission,
                                                                                      credential_name,
                                                                                      options ) );
        }

        /// <summary>Revokes a <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a> permission from a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionDatasourceResponse revokePermissionDatasource( RevokePermissionDatasourceRequest request_ )
        {
            RevokePermissionDatasourceResponse actualResponse_ = SubmitRequest<RevokePermissionDatasourceResponse>("/revoke/permission/datasource", request_, false);

            return actualResponse_;
        }

        /// <summary>Revokes a <a href="../../../concepts/data_sources/"
        /// target="_top">data source</a> permission from a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role from which the
        /// permission will be revoked. Must be an existing user or role.
        /// </param>
        /// <param name="permission">Permission to revoke from the user or
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionDatasourceRequest.Permission.ADMIN">ADMIN</see>:
        ///         </term>
        ///         <description>Admin access on the given data source
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionDatasourceRequest.Permission.CONNECT">CONNECT</see>:
        ///         </term>
        ///         <description>Connect access on the given data source
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="datasource_name">Name of the data source on which the
        /// permission will be revoked. Must be an existing data source, or an
        /// empty string to revoke permission from all data sources.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionDatasourceResponse revokePermissionDatasource( string name,
                                                                              string permission,
                                                                              string datasource_name,
                                                                              IDictionary<string, string> options = null )
        {
            return revokePermissionDatasource( new RevokePermissionDatasourceRequest( name,
                                                                                      permission,
                                                                                      datasource_name,
                                                                                      options ) );
        }

        /// <summary>Revokes a <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a> directory-level permission from a user or
        /// role.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionDirectoryResponse revokePermissionDirectory( RevokePermissionDirectoryRequest request_ )
        {
            RevokePermissionDirectoryResponse actualResponse_ = SubmitRequest<RevokePermissionDirectoryResponse>("/revoke/permission/directory", request_, false);

            return actualResponse_;
        }

        /// <summary>Revokes a <a href="../../../tools/kifs/"
        /// target="_top">KiFS</a> directory-level permission from a user or
        /// role.</summary>
        ///
        /// <param name="name">Name of the user or role from which the
        /// permission will be revoked. Must be an existing user or role.
        /// </param>
        /// <param name="permission">Permission to revoke from the user or
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionDirectoryRequest.Permission.DIRECTORY_READ">DIRECTORY_READ</see>:
        ///         </term>
        ///         <description>For files in the directory, access to list
        ///         files, download files, or use files in server side
        ///         functions</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionDirectoryRequest.Permission.DIRECTORY_WRITE">DIRECTORY_WRITE</see>:
        ///         </term>
        ///         <description>Access to upload files to, or delete files
        ///         from, the directory. A user or role with write access
        ///         automatically has read acceess</description>
        ///     </item>
        /// </list></param>
        /// <param name="directory_name">Name of the KiFS directory to which
        /// the permission revokes access</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionDirectoryResponse revokePermissionDirectory( string name,
                                                                            string permission,
                                                                            string directory_name,
                                                                            IDictionary<string, string> options = null )
        {
            return revokePermissionDirectory( new RevokePermissionDirectoryRequest( name,
                                                                                    permission,
                                                                                    directory_name,
                                                                                    options ) );
        }

        /// <summary>Revokes a proc-level permission from a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionProcResponse revokePermissionProc( RevokePermissionProcRequest request_ )
        {
            RevokePermissionProcResponse actualResponse_ = SubmitRequest<RevokePermissionProcResponse>("/revoke/permission/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Revokes a proc-level permission from a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role from which the
        /// permission will be revoked. Must be an existing user or role.
        /// </param>
        /// <param name="permission">Permission to revoke from the user or
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionProcRequest.Permission.PROC_ADMIN">PROC_ADMIN</see>:
        ///         </term>
        ///         <description>Admin access to the proc.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionProcRequest.Permission.PROC_EXECUTE">PROC_EXECUTE</see>:
        ///         </term>
        ///         <description>Execute access to the proc.</description>
        ///     </item>
        /// </list></param>
        /// <param name="proc_name">Name of the proc to which the permission
        /// grants access. Must be an existing proc, or an empty string if the
        /// permission grants access to all procs.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionProcResponse revokePermissionProc( string name,
                                                                  string permission,
                                                                  string proc_name,
                                                                  IDictionary<string, string> options = null )
        {
            return revokePermissionProc( new RevokePermissionProcRequest( name,
                                                                          permission,
                                                                          proc_name,
                                                                          options ) );
        }

        /// <summary>Revokes a system-level permission from a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionSystemResponse revokePermissionSystem( RevokePermissionSystemRequest request_ )
        {
            RevokePermissionSystemResponse actualResponse_ = SubmitRequest<RevokePermissionSystemResponse>("/revoke/permission/system", request_, false);

            return actualResponse_;
        }

        /// <summary>Revokes a system-level permission from a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role from which the
        /// permission will be revoked. Must be an existing user or role.
        /// </param>
        /// <param name="permission">Permission to revoke from the user or
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionSystemRequest.Permission.SYSTEM_ADMIN">SYSTEM_ADMIN</see>:
        ///         </term>
        ///         <description>Full access to all data and system functions.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionSystemRequest.Permission.SYSTEM_USER_ADMIN">SYSTEM_USER_ADMIN</see>:
        ///         </term>
        ///         <description>Access to administer users and roles that do
        ///         not have system_admin permission.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionSystemRequest.Permission.SYSTEM_WRITE">SYSTEM_WRITE</see>:
        ///         </term>
        ///         <description>Read and write access to all tables.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionSystemRequest.Permission.SYSTEM_READ">SYSTEM_READ</see>:
        ///         </term>
        ///         <description>Read-only access to all tables.</description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionSystemResponse revokePermissionSystem( string name,
                                                                      string permission,
                                                                      IDictionary<string, string> options = null )
        {
            return revokePermissionSystem( new RevokePermissionSystemRequest( name,
                                                                              permission,
                                                                              options ) );
        }

        /// <summary>Revokes a table-level permission from a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionTableResponse revokePermissionTable( RevokePermissionTableRequest request_ )
        {
            RevokePermissionTableResponse actualResponse_ = SubmitRequest<RevokePermissionTableResponse>("/revoke/permission/table", request_, false);

            return actualResponse_;
        }

        /// <summary>Revokes a table-level permission from a user or role.
        /// </summary>
        ///
        /// <param name="name">Name of the user or role from which the
        /// permission will be revoked. Must be an existing user or role.
        /// </param>
        /// <param name="permission">Permission to revoke from the user or
        /// role.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionTableRequest.Permission.TABLE_ADMIN">TABLE_ADMIN</see>:
        ///         </term>
        ///         <description>Full read/write and administrative access to
        ///         the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionTableRequest.Permission.TABLE_INSERT">TABLE_INSERT</see>:
        ///         </term>
        ///         <description>Insert access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionTableRequest.Permission.TABLE_UPDATE">TABLE_UPDATE</see>:
        ///         </term>
        ///         <description>Update access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionTableRequest.Permission.TABLE_DELETE">TABLE_DELETE</see>:
        ///         </term>
        ///         <description>Delete access to the table.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionTableRequest.Permission.TABLE_READ">TABLE_READ</see>:
        ///         </term>
        ///         <description>Read access to the table.</description>
        ///     </item>
        /// </list></param>
        /// <param name="table_name">Name of the table to which the permission
        /// grants access, in [schema_name.]table_name format, using standard
        /// <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing
        /// table, view or schema.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="RevokePermissionTableRequest.Options.COLUMNS">COLUMNS</see>:
        ///         </term>
        ///         <description>Apply security to these columns,
        ///         comma-separated. The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokePermissionTableResponse revokePermissionTable( string name,
                                                                    string permission,
                                                                    string table_name,
                                                                    IDictionary<string, string> options = null )
        {
            return revokePermissionTable( new RevokePermissionTableRequest( name,
                                                                            permission,
                                                                            table_name,
                                                                            options ) );
        }

        /// <summary>Revokes membership in a role from a user or role.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokeRoleResponse revokeRole( RevokeRoleRequest request_ )
        {
            RevokeRoleResponse actualResponse_ = SubmitRequest<RevokeRoleResponse>("/revoke/role", request_, false);

            return actualResponse_;
        }

        /// <summary>Revokes membership in a role from a user or role.
        /// </summary>
        ///
        /// <param name="role">Name of the role in which membership will be
        /// revoked. Must be an existing role.</param>
        /// <param name="member">Name of the user or role that will be revoked
        /// membership in <paramref name="role" />. Must be an existing user or
        /// role.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public RevokeRoleResponse revokeRole( string role,
                                              string member,
                                              IDictionary<string, string> options = null )
        {
            return revokeRole( new RevokeRoleRequest( role, member, options ) );
        }

        /// @cond NO_DOCS
        public ShowContainerRegistryResponse showContainerRegistry( ShowContainerRegistryRequest request_ )
        {
            ShowContainerRegistryResponse actualResponse_ = SubmitRequest<ShowContainerRegistryResponse>("/show/container/registry", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public ShowContainerRegistryResponse showContainerRegistry( string registry_name,
                                                                    IDictionary<string, string> options = null )
        {
            return showContainerRegistry( new ShowContainerRegistryRequest( registry_name,
                                                                            options ) );
        }
        /// @endcond

        /// <summary>Shows information about a specified <a
        /// href="../../../concepts/credentials/" target="_top">credential</a>
        /// or all credentials.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowCredentialResponse showCredential( ShowCredentialRequest request_ )
        {
            ShowCredentialResponse actualResponse_ = SubmitRequest<ShowCredentialResponse>("/show/credential", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information about a specified <a
        /// href="../../../concepts/credentials/" target="_top">credential</a>
        /// or all credentials.</summary>
        ///
        /// <param name="credential_name">Name of the credential on which to
        /// retrieve information. The name must refer to a currently existing
        /// credential. If '*' is specified, information about all credentials
        /// will be returned.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowCredentialResponse showCredential( string credential_name,
                                                      IDictionary<string, string> options = null )
        {
            return showCredential( new ShowCredentialRequest( credential_name, options ) );
        }

        /// <summary>Shows information about a specified <a
        /// href="../../../concepts/data_sinks/" target="_top">data sink</a> or
        /// all data sinks.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowDatasinkResponse showDatasink( ShowDatasinkRequest request_ )
        {
            ShowDatasinkResponse actualResponse_ = SubmitRequest<ShowDatasinkResponse>("/show/datasink", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information about a specified <a
        /// href="../../../concepts/data_sinks/" target="_top">data sink</a> or
        /// all data sinks.</summary>
        ///
        /// <param name="name">Name of the data sink for which to retrieve
        /// information. The name must refer to a currently existing data sink.
        /// If '*' is specified, information about all data sinks will be
        /// returned.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowDatasinkResponse showDatasink( string name,
                                                  IDictionary<string, string> options = null )
        {
            return showDatasink( new ShowDatasinkRequest( name, options ) );
        }

        /// <summary>Shows information about a specified <a
        /// href="../../../concepts/data_sources/" target="_top">data
        /// source</a> or all data sources.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowDatasourceResponse showDatasource( ShowDatasourceRequest request_ )
        {
            ShowDatasourceResponse actualResponse_ = SubmitRequest<ShowDatasourceResponse>("/show/datasource", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information about a specified <a
        /// href="../../../concepts/data_sources/" target="_top">data
        /// source</a> or all data sources.</summary>
        ///
        /// <param name="name">Name of the data source for which to retrieve
        /// information. The name must refer to a currently existing data
        /// source. If '*' is specified, information about all data sources
        /// will be returned.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowDatasourceResponse showDatasource( string name,
                                                      IDictionary<string, string> options = null )
        {
            return showDatasource( new ShowDatasourceRequest( name, options ) );
        }

        /// <summary>Shows information about directories in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        /// <remarks><para>Can be used to show a single directory, or all
        /// directories.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowDirectoriesResponse showDirectories( ShowDirectoriesRequest request_ )
        {
            ShowDirectoriesResponse actualResponse_ = SubmitRequest<ShowDirectoriesResponse>("/show/directories", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information about directories in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        /// <remarks><para>Can be used to show a single directory, or all
        /// directories.</para></remarks>
        ///
        /// <param name="directory_name">The KiFS directory name to show. If
        /// empty, shows all directories. The default value is ''.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowDirectoriesResponse showDirectories( string directory_name = "",
                                                        IDictionary<string, string> options = null )
        {
            return showDirectories( new ShowDirectoriesRequest( directory_name, options ) );
        }

        /// <summary>Shows information about a specified <a
        /// href="../../../concepts/udf/" target="_top">user-defined
        /// function</a> (UDF) environment or all environments.Returns detailed
        /// information about existing environments.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowEnvironmentResponse showEnvironment( ShowEnvironmentRequest request_ )
        {
            ShowEnvironmentResponse actualResponse_ = SubmitRequest<ShowEnvironmentResponse>("/show/environment", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information about a specified <a
        /// href="../../../concepts/udf/" target="_top">user-defined
        /// function</a> (UDF) environment or all environments.Returns detailed
        /// information about existing environments.</summary>
        ///
        /// <param name="environment_name">Name of the environment on which to
        /// retrieve information. The name must refer to a currently existing
        /// environment. If '*' or an empty value is specified, information
        /// about all environments will be returned. The default value is ''.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowEnvironmentRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowEnvironmentRequest.Options.TRUE">TRUE</see> and
        ///         if the environment specified in <paramref
        ///         name="environment_name" /> does not exist, no error is
        ///         returned. If <see
        ///         cref="ShowEnvironmentRequest.Options.FALSE">FALSE</see> and
        ///         if the environment specified in <paramref
        ///         name="environment_name" /> does not exist, then an error is
        ///         returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowEnvironmentRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowEnvironmentRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowEnvironmentRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowEnvironmentResponse showEnvironment( string environment_name = "",
                                                        IDictionary<string, string> options = null )
        {
            return showEnvironment( new ShowEnvironmentRequest( environment_name, options ) );
        }

        /// <summary>Shows information about files in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        /// <remarks><para>Can be used for individual files, or to show all
        /// files in a given directory.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowFilesResponse showFiles( ShowFilesRequest request_ )
        {
            ShowFilesResponse actualResponse_ = SubmitRequest<ShowFilesResponse>("/show/files", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information about files in <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        /// <remarks><para>Can be used for individual files, or to show all
        /// files in a given directory.</para></remarks>
        ///
        /// <param name="paths">File paths to show. Each path can be a KiFS
        /// directory name, or a full path to a KiFS file. File paths may
        /// contain wildcard characters after the KiFS directory delimeter.
        /// Accepted wildcard characters are asterisk (*) to represent any
        /// string of zero or more characters, and question mark (?) to
        /// indicate a single character.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowFilesResponse showFiles( IList<string> paths,
                                            IDictionary<string, string> options = null )
        {
            return showFiles( new ShowFilesRequest( paths, options ) );
        }

        /// @cond NO_DOCS
        public ShowFunctionsResponse showFunctions( ShowFunctionsRequest request_ )
        {
            ShowFunctionsResponse actualResponse_ = SubmitRequest<ShowFunctionsResponse>("/show/functions", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public ShowFunctionsResponse showFunctions( IList<string> names,
                                                    IDictionary<string, string> options = null )
        {
            return showFunctions( new ShowFunctionsRequest( names, options ) );
        }
        /// @endcond

        /// <summary>Shows information and characteristics of graphs that exist
        /// on the graph server.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowGraphResponse showGraph( ShowGraphRequest request_ )
        {
            ShowGraphResponse actualResponse_ = SubmitRequest<ShowGraphResponse>("/show/graph", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information and characteristics of graphs that exist
        /// on the graph server.</summary>
        ///
        /// <param name="graph_name">Name of the graph on which to retrieve
        /// information. If left as the default value, information about all
        /// graphs is returned. The default value is ''.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowGraphRequest.Options.SHOW_ORIGINAL_REQUEST">SHOW_ORIGINAL_REQUEST</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="ShowGraphRequest.Options.TRUE">TRUE</see>, the
        ///         request that was originally used to create the graph is
        ///         also returned as JSON.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowGraphRequest.Options.SERVER_ID">SERVER_ID</see>:
        ///         </term>
        ///         <description>Indicates which graph server(s) to send the
        ///         request to. Default is to send to get information about all
        ///         the servers.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowGraphResponse showGraph( string graph_name = "",
                                            IDictionary<string, string> options = null )
        {
            return showGraph( new ShowGraphRequest( graph_name, options ) );
        }

        /// @cond NO_DOCS
        public ShowGraphGrammarResponse showGraphGrammar( ShowGraphGrammarRequest request_ )
        {
            ShowGraphGrammarResponse actualResponse_ = SubmitRequest<ShowGraphGrammarResponse>("/show/graph/grammar", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public ShowGraphGrammarResponse showGraphGrammar( IDictionary<string, string> options = null )
        {
            return showGraphGrammar( new ShowGraphGrammarRequest( options ) );
        }
        /// @endcond

        /// @cond NO_DOCS
        public ShowModelResponse showModel( ShowModelRequest request_ )
        {
            ShowModelResponse actualResponse_ = SubmitRequest<ShowModelResponse>("/show/model", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public ShowModelResponse showModel( IList<string> model_names = null,
                                            IDictionary<string, string> options = null )
        {
            return showModel( new ShowModelRequest( model_names, options ) );
        }
        /// @endcond

        /// <summary>Shows information about a proc.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowProcResponse showProc( ShowProcRequest request_ )
        {
            ShowProcResponse actualResponse_ = SubmitRequest<ShowProcResponse>("/show/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information about a proc.</summary>
        ///
        /// <param name="proc_name">Name of the proc to show information about.
        /// If specified, must be the name of a currently existing proc. If not
        /// specified, information about all procs will be returned. The
        /// default value is ''.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowProcRequest.Options.INCLUDE_FILES">INCLUDE_FILES</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="ShowProcRequest.Options.TRUE">TRUE</see>, the files
        ///         that make up the proc will be returned. If set to <see
        ///         cref="ShowProcRequest.Options.FALSE">FALSE</see>, the files
        ///         will not be returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowProcRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowProcRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowProcRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowProcResponse showProc( string proc_name = "",
                                          IDictionary<string, string> options = null )
        {
            return showProc( new ShowProcRequest( proc_name, options ) );
        }

        /// <summary>Shows the statuses of running or completed proc instances.
        /// </summary>
        /// <remarks><para>Results are grouped by run ID (as returned from <see
        /// cref="executeProc(ExecuteProcRequest)">executeProc</see>) and data
        /// segment ID (each invocation of the proc command on a data segment
        /// is assigned a data segment ID).</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowProcStatusResponse showProcStatus( ShowProcStatusRequest request_ )
        {
            ShowProcStatusResponse actualResponse_ = SubmitRequest<ShowProcStatusResponse>("/show/proc/status", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows the statuses of running or completed proc instances.
        /// </summary>
        /// <remarks><para>Results are grouped by run ID (as returned from <see
        /// cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>)
        /// and data segment ID (each invocation of the proc command on a data
        /// segment is assigned a data segment ID).</para></remarks>
        ///
        /// <param name="run_id">The run ID of a specific proc instance for
        /// which the status will be returned. If a proc with a matching run ID
        /// is not found, the response will be empty. If not specified, the
        /// statuses of all executed proc instances will be returned. The
        /// default value is ''.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowProcStatusRequest.Options.CLEAR_COMPLETE">CLEAR_COMPLETE</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="ShowProcStatusRequest.Options.TRUE">TRUE</see>, if a
        ///         proc instance has completed (either successfully or
        ///         unsuccessfully) then its status will be cleared and no
        ///         longer returned in subsequent calls.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowProcStatusRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowProcStatusRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowProcStatusRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowProcStatusRequest.Options.RUN_TAG">RUN_TAG</see>:
        ///         </term>
        ///         <description>If <paramref name="run_id" /> is specified,
        ///         return the status for a proc instance that has a matching
        ///         run ID and a matching run tag that was provided to <see
        ///         cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>.
        ///         If <paramref name="run_id" /> is not specified, return
        ///         statuses for all proc instances where a matching run tag
        ///         was provided to <see
        ///         cref="executeProc(string,IDictionary{string,string},IDictionary{string,byte[]},IList{string},IDictionary{string,IList{string}},IList{string},IDictionary{string,string})">executeProc</see>.
        ///         The default value is ''.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowProcStatusResponse showProcStatus( string run_id = "",
                                                      IDictionary<string, string> options = null )
        {
            return showProcStatus( new ShowProcStatusRequest( run_id, options ) );
        }

        /// <summary>Returns information about the internal sub-components
        /// (tiered objects) which use resources of the system.</summary>
        /// <remarks><para>The request can either return results from actively
        /// used objects (default) or it can be used to query the status of the
        /// objects of a given list of tables.Returns detailed information
        /// about the requested resource objects.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowResourceObjectsResponse showResourceObjects( ShowResourceObjectsRequest request_ )
        {
            ShowResourceObjectsResponse actualResponse_ = SubmitRequest<ShowResourceObjectsResponse>("/show/resource/objects", request_, false);

            return actualResponse_;
        }

        /// <summary>Returns information about the internal sub-components
        /// (tiered objects) which use resources of the system.</summary>
        /// <remarks><para>The request can either return results from actively
        /// used objects (default) or it can be used to query the status of the
        /// objects of a given list of tables.Returns detailed information
        /// about the requested resource objects.</para></remarks>
        ///
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowResourceObjectsRequest.Options.TIERS">TIERS</see>:
        ///         </term>
        ///         <description>Comma-separated list of tiers to query, leave
        ///         blank for all tiers.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowResourceObjectsRequest.Options.EXPRESSION">EXPRESSION</see>:
        ///         </term>
        ///         <description>An expression to filter the returned objects.
        ///         Expression is limited to the following operators:
        ///         =,!=,&lt;,&lt;=,&gt;,&gt;=,+,-,*,AND,OR,LIKE. For details
        ///         see <a href="../../../concepts/expressions/"
        ///         target="_top">Expressions</a>. To use a more complex
        ///         expression, query the ki_catalog.ki_tiered_objects table
        ///         directly.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowResourceObjectsRequest.Options.ORDER_BY">ORDER_BY</see>:
        ///         </term>
        ///         <description>Single column to be sorted by as well as the
        ///         sort direction, e.g., 'size asc'.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceObjectsRequest.Options.SIZE">SIZE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceObjectsRequest.Options.ID">ID</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceObjectsRequest.Options.PRIORITY">PRIORITY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceObjectsRequest.Options.TIER">TIER</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceObjectsRequest.Options.EVICTABLE">EVICTABLE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceObjectsRequest.Options.OWNER_RESOURCE_GROUP">OWNER_RESOURCE_GROUP</see>
        ///                 </term>
        ///             </item>
        ///         </list></description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowResourceObjectsRequest.Options.LIMIT">LIMIT</see>:
        ///         </term>
        ///         <description>An integer indicating the maximum number of
        ///         results to be returned, per rank, or (-1) to indicate that
        ///         the maximum number of results allowed by the server should
        ///         be returned.  The number of records returned will never
        ///         exceed the server's own limit, defined by the <a
        ///         href="../../../config/#config-main-general"
        ///         target="_top">max_get_records_size</a> parameter in the
        ///         server configuration. The default value is '100'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowResourceObjectsRequest.Options.TABLE_NAMES">TABLE_NAMES</see>:
        ///         </term>
        ///         <description>Comma-separated list of tables to restrict the
        ///         results to. Use '*' to show all tables.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowResourceObjectsResponse showResourceObjects( IDictionary<string, string> options = null )
        {
            return showResourceObjects( new ShowResourceObjectsRequest( options ) );
        }

        /// <summary>Requests various statistics for storage/memory tiers and
        /// resource groups.Returns statistics on a per-rank basis.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowResourceStatisticsResponse showResourceStatistics( ShowResourceStatisticsRequest request_ )
        {
            ShowResourceStatisticsResponse actualResponse_ = SubmitRequest<ShowResourceStatisticsResponse>("/show/resource/statistics", request_, false);

            return actualResponse_;
        }

        /// <summary>Requests various statistics for storage/memory tiers and
        /// resource groups.Returns statistics on a per-rank basis.</summary>
        ///
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowResourceStatisticsResponse showResourceStatistics( IDictionary<string, string> options = null )
        {
            return showResourceStatistics( new ShowResourceStatisticsRequest( options ) );
        }

        /// <summary>Requests resource group properties.Returns detailed
        /// information about the requested resource groups.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowResourceGroupsResponse showResourceGroups( ShowResourceGroupsRequest request_ )
        {
            ShowResourceGroupsResponse actualResponse_ = SubmitRequest<ShowResourceGroupsResponse>("/show/resourcegroups", request_, false);

            return actualResponse_;
        }

        /// <summary>Requests resource group properties.Returns detailed
        /// information about the requested resource groups.</summary>
        ///
        /// <param name="names">List of names of groups to be shown. A single
        /// entry with an empty string returns all groups.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowResourceGroupsRequest.Options.SHOW_DEFAULT_VALUES">SHOW_DEFAULT_VALUES</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowResourceGroupsRequest.Options.TRUE">TRUE</see>
        ///         include values of fields that are based on the default
        ///         resource group.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceGroupsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceGroupsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowResourceGroupsRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowResourceGroupsRequest.Options.SHOW_DEFAULT_GROUP">SHOW_DEFAULT_GROUP</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowResourceGroupsRequest.Options.TRUE">TRUE</see>
        ///         include the default and system resource groups in the
        ///         response. This value defaults to false if an explicit list
        ///         of group names is provided, and true otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceGroupsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceGroupsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowResourceGroupsRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowResourceGroupsRequest.Options.SHOW_TIER_USAGE">SHOW_TIER_USAGE</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowResourceGroupsRequest.Options.TRUE">TRUE</see>
        ///         include the resource group usage on the worker ranks in the
        ///         response.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceGroupsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowResourceGroupsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowResourceGroupsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowResourceGroupsResponse showResourceGroups( IList<string> names,
                                                              IDictionary<string, string> options = null )
        {
            return showResourceGroups( new ShowResourceGroupsRequest( names, options ) );
        }

        /// <summary>Retrieves information about a <a
        /// href="../../../concepts/schemas/" target="_top">schema</a> (or all
        /// schemas), as specified in <see
        /// cref="ShowSchemaRequest.schema_name">schema_name</see>.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSchemaResponse showSchema( ShowSchemaRequest request_ )
        {
            ShowSchemaResponse actualResponse_ = SubmitRequest<ShowSchemaResponse>("/show/schema", request_, false);

            return actualResponse_;
        }

        /// <summary>Retrieves information about a <a
        /// href="../../../concepts/schemas/" target="_top">schema</a> (or all
        /// schemas), as specified in <paramref name="schema_name" />.
        /// </summary>
        ///
        /// <param name="schema_name">Name of the schema for which to retrieve
        /// the information. If blank, then info for all schemas is returned.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowSchemaRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowSchemaRequest.Options.FALSE">FALSE</see> will
        ///         return an error if the provided <paramref
        ///         name="schema_name" /> does not exist. If <see
        ///         cref="ShowSchemaRequest.Options.TRUE">TRUE</see> then it
        ///         will return an empty result if the provided <paramref
        ///         name="schema_name" /> does not exist.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowSchemaRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowSchemaRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowSchemaRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSchemaResponse showSchema( string schema_name,
                                              IDictionary<string, string> options = null )
        {
            return showSchema( new ShowSchemaRequest( schema_name, options ) );
        }

        /// <summary>Shows security information relating to users and/or roles.
        /// </summary>
        /// <remarks><para>If the caller is not a system administrator, only
        /// information relating to the caller and their roles is returned.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSecurityResponse showSecurity( ShowSecurityRequest request_ )
        {
            ShowSecurityResponse actualResponse_ = SubmitRequest<ShowSecurityResponse>("/show/security", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows security information relating to users and/or roles.
        /// </summary>
        /// <remarks><para>If the caller is not a system administrator, only
        /// information relating to the caller and their roles is returned.
        /// </para></remarks>
        ///
        /// <param name="names">A list of names of users and/or roles about
        /// which security information is requested. If none are provided,
        /// information about all users and roles will be returned.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowSecurityRequest.Options.SHOW_CURRENT_USER">SHOW_CURRENT_USER</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowSecurityRequest.Options.TRUE">TRUE</see>, returns
        ///         only security information for the current user.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowSecurityRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowSecurityRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowSecurityRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSecurityResponse showSecurity( IList<string> names,
                                                  IDictionary<string, string> options = null )
        {
            return showSecurity( new ShowSecurityRequest( names, options ) );
        }

        /// <summary>Shows information about SQL procedures, including the full
        /// definition of each requested procedure.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSqlProcResponse showSqlProc( ShowSqlProcRequest request_ )
        {
            ShowSqlProcResponse actualResponse_ = SubmitRequest<ShowSqlProcResponse>("/show/sql/proc", request_, false);

            return actualResponse_;
        }

        /// <summary>Shows information about SQL procedures, including the full
        /// definition of each requested procedure.</summary>
        ///
        /// <param name="procedure_name">Name of the procedure for which to
        /// retrieve the information. If blank, then information about all
        /// procedures is returned. The default value is ''.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowSqlProcRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowSqlProcRequest.Options.TRUE">TRUE</see>, no error
        ///         will be returned if the requested procedure does not exist.
        ///         If <see
        ///         cref="ShowSqlProcRequest.Options.FALSE">FALSE</see>, an
        ///         error will be returned if the requested procedure does not
        ///         exist.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowSqlProcRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowSqlProcRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowSqlProcRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSqlProcResponse showSqlProc( string procedure_name = "",
                                                IDictionary<string, string> options = null )
        {
            return showSqlProc( new ShowSqlProcRequest( procedure_name, options ) );
        }

        /// <summary>Retrieves the collected column statistics for the
        /// specified table(s).</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowStatisticsResponse showStatistics( ShowStatisticsRequest request_ )
        {
            ShowStatisticsResponse actualResponse_ = SubmitRequest<ShowStatisticsResponse>("/show/statistics", request_, false);

            return actualResponse_;
        }

        /// <summary>Retrieves the collected column statistics for the
        /// specified table(s).</summary>
        ///
        /// <param name="table_names">Names of tables whose metadata will be
        /// fetched, each in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  All provided tables must
        /// exist, or an error is returned.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowStatisticsRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowStatisticsRequest.Options.TRUE">TRUE</see> and if
        ///         the table names specified in <paramref name="table_names"
        ///         /> does not exist, no error is returned. If <see
        ///         cref="ShowStatisticsRequest.Options.FALSE">FALSE</see> and
        ///         if the table names specified in <paramref
        ///         name="table_names" /> does not exist, then an error is
        ///         returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowStatisticsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowStatisticsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowStatisticsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowStatisticsResponse showStatistics( IList<string> table_names,
                                                      IDictionary<string, string> options = null )
        {
            return showStatistics( new ShowStatisticsRequest( table_names, options ) );
        }

        /// <summary>Returns server configuration and version related
        /// information to the caller.</summary>
        /// <remarks><para>The admin tool uses it to present server related
        /// information to the user.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSystemPropertiesResponse showSystemProperties( ShowSystemPropertiesRequest request_ )
        {
            ShowSystemPropertiesResponse actualResponse_ = SubmitRequest<ShowSystemPropertiesResponse>("/show/system/properties", request_, false);

            return actualResponse_;
        }

        /// <summary>Returns server configuration and version related
        /// information to the caller.</summary>
        /// <remarks><para>The admin tool uses it to present server related
        /// information to the user.</para></remarks>
        ///
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowSystemPropertiesRequest.Options.PROPERTIES">PROPERTIES</see>:
        ///         </term>
        ///         <description>A list of comma separated names of properties
        ///         requested. If not specified, all properties will be
        ///         returned.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSystemPropertiesResponse showSystemProperties( IDictionary<string, string> options = null )
        {
            return showSystemProperties( new ShowSystemPropertiesRequest( options ) );
        }

        /// <summary>Provides server configuration and health related status to
        /// the caller.</summary>
        /// <remarks><para>The admin tool uses it to present server related
        /// information to the user.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSystemStatusResponse showSystemStatus( ShowSystemStatusRequest request_ )
        {
            ShowSystemStatusResponse actualResponse_ = SubmitRequest<ShowSystemStatusResponse>("/show/system/status", request_, false);

            return actualResponse_;
        }

        /// <summary>Provides server configuration and health related status to
        /// the caller.</summary>
        /// <remarks><para>The admin tool uses it to present server related
        /// information to the user.</para></remarks>
        ///
        /// <param name="options">Optional parameters, currently unused. The
        /// default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSystemStatusResponse showSystemStatus( IDictionary<string, string> options = null )
        {
            return showSystemStatus( new ShowSystemStatusRequest( options ) );
        }

        /// <summary>Returns the last 100 database requests along with the
        /// request timing and internal job id.</summary>
        /// <remarks><para>The admin tool uses it to present request timing
        /// information to the user.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSystemTimingResponse showSystemTiming( ShowSystemTimingRequest request_ )
        {
            ShowSystemTimingResponse actualResponse_ = SubmitRequest<ShowSystemTimingResponse>("/show/system/timing", request_, false);

            return actualResponse_;
        }

        /// <summary>Returns the last 100 database requests along with the
        /// request timing and internal job id.</summary>
        /// <remarks><para>The admin tool uses it to present request timing
        /// information to the user.</para></remarks>
        ///
        /// <param name="options">Optional parameters, currently unused. The
        /// default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowSystemTimingResponse showSystemTiming( IDictionary<string, string> options = null )
        {
            return showSystemTiming( new ShowSystemTimingRequest( options ) );
        }

        /// <summary>Retrieves detailed information about a table, view, or
        /// schema, specified in <see
        /// cref="ShowTableRequest.table_name">table_name</see>.</summary>
        /// <remarks><para>If the supplied <see
        /// cref="ShowTableRequest.table_name">table_name</see> is a schema the
        /// call can return information about either the schema itself or the
        /// tables and views it contains. If <see
        /// cref="ShowTableRequest.table_name">table_name</see> is empty,
        /// information about all schemas will be returned.</para>
        /// <para>If the option <see
        /// cref="ShowTableRequest.Options.GET_SIZES">GET_SIZES</see> is set to
        /// <see cref="ShowTableRequest.Options.TRUE">TRUE</see>, then the
        /// number of records in each table is returned (in <see
        /// cref="ShowTableResponse.sizes">sizes</see> and <see
        /// cref="ShowTableResponse.full_sizes">full_sizes</see>), along with
        /// the total number of objects across all requested tables (in <see
        /// cref="ShowTableResponse.total_size">total_size</see> and <see
        /// cref="ShowTableResponse.total_full_size">total_full_size</see>).</para>
        /// <para>For a schema, setting the <see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>
        /// option to <see cref="ShowTableRequest.Options.FALSE">FALSE</see>
        /// returns only information about the schema itself; setting <see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>
        /// to <see cref="ShowTableRequest.Options.TRUE">TRUE</see> returns a
        /// list of tables and views contained in the schema, along with their
        /// corresponding detail.</para>
        /// <para>To retrieve a list of every table, view, and schema in the
        /// database, set <see
        /// cref="ShowTableRequest.table_name">table_name</see> to '*' and <see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>
        /// to <see cref="ShowTableRequest.Options.TRUE">TRUE</see>.  When
        /// doing this, the returned <see
        /// cref="ShowTableResponse.total_size">total_size</see> and <see
        /// cref="ShowTableResponse.total_full_size">total_full_size</see> will
        /// not include the sizes of non-base tables (e.g., filters, views,
        /// joins, etc.).</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTableResponse showTable( ShowTableRequest request_ )
        {
            ShowTableResponse actualResponse_ = SubmitRequest<ShowTableResponse>("/show/table", request_, false);


            for ( int i_ = 0; i_ < actualResponse_.type_ids.Count; ++i_ )
            {
                SetDecoderIfMissing( actualResponse_.type_ids[i_],
                                     actualResponse_.type_labels[i_],
                                     actualResponse_.type_schemas[i_],
                                     actualResponse_.properties[i_] );
            }

            return actualResponse_;
        }

        /// <summary>Retrieves detailed information about a table, view, or
        /// schema, specified in <paramref name="table_name" />.</summary>
        /// <remarks><para>If the supplied <paramref name="table_name" /> is a
        /// schema the call can return information about either the schema
        /// itself or the tables and views it contains. If <paramref
        /// name="table_name" /> is empty, information about all schemas will
        /// be returned.</para>
        /// <para>If the option <see
        /// cref="ShowTableRequest.Options.GET_SIZES">GET_SIZES</see> is set to
        /// <see cref="ShowTableRequest.Options.TRUE">TRUE</see>, then the
        /// number of records in each table is returned (in <see
        /// cref="ShowTableResponse.sizes">sizes</see> and <see
        /// cref="ShowTableResponse.full_sizes">full_sizes</see>), along with
        /// the total number of objects across all requested tables (in <see
        /// cref="ShowTableResponse.total_size">total_size</see> and <see
        /// cref="ShowTableResponse.total_full_size">total_full_size</see>).</para>
        /// <para>For a schema, setting the <see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>
        /// option to <see cref="ShowTableRequest.Options.FALSE">FALSE</see>
        /// returns only information about the schema itself; setting <see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>
        /// to <see cref="ShowTableRequest.Options.TRUE">TRUE</see> returns a
        /// list of tables and views contained in the schema, along with their
        /// corresponding detail.</para>
        /// <para>To retrieve a list of every table, view, and schema in the
        /// database, set <paramref name="table_name" /> to '*' and <see
        /// cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>
        /// to <see cref="ShowTableRequest.Options.TRUE">TRUE</see>.  When
        /// doing this, the returned <see
        /// cref="ShowTableResponse.total_size">total_size</see> and <see
        /// cref="ShowTableResponse.total_full_size">total_full_size</see> will
        /// not include the sizes of non-base tables (e.g., filters, views,
        /// joins, etc.).</para></remarks>
        ///
        /// <param name="table_name">Name of the table for which to retrieve
        /// the information, in [schema_name.]table_name format, using standard
        /// <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  If blank, then returns
        /// information about all tables and views.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowTableRequest.Options.FORCE_SYNCHRONOUS">FORCE_SYNCHRONOUS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowTableRequest.Options.TRUE">TRUE</see> then the
        ///         table sizes will wait for read lock before returning.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowTableRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowTableRequest.Options.GET_SIZES">GET_SIZES</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowTableRequest.Options.TRUE">TRUE</see> then the
        ///         number of records in each table, along with a cumulative
        ///         count, will be returned; blank, otherwise.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowTableRequest.Options.GET_CACHED_SIZES">GET_CACHED_SIZES</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowTableRequest.Options.TRUE">TRUE</see> then the
        ///         number of records in each table, along with a cumulative
        ///         count, will be returned; blank, otherwise. This version
        ///         will return the sizes cached at rank 0, which may be stale
        ///         if there is a multihead insert occuring.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>:
        ///         </term>
        ///         <description>If <paramref name="table_name" /> is a schema,
        ///         then <see cref="ShowTableRequest.Options.TRUE">TRUE</see>
        ///         will return information about the tables and views in the
        ///         schema, and <see
        ///         cref="ShowTableRequest.Options.FALSE">FALSE</see> will
        ///         return information about the schema itself. If <paramref
        ///         name="table_name" /> is a table or view, <see
        ///         cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>
        ///         must be <see
        ///         cref="ShowTableRequest.Options.FALSE">FALSE</see>. If
        ///         <paramref name="table_name" /> is empty, then <see
        ///         cref="ShowTableRequest.Options.SHOW_CHILDREN">SHOW_CHILDREN</see>
        ///         must be <see
        ///         cref="ShowTableRequest.Options.TRUE">TRUE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowTableRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowTableRequest.Options.NO_ERROR_IF_NOT_EXISTS">NO_ERROR_IF_NOT_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowTableRequest.Options.FALSE">FALSE</see> will
        ///         return an error if the provided <paramref name="table_name"
        ///         /> does not exist. If <see
        ///         cref="ShowTableRequest.Options.TRUE">TRUE</see> then it
        ///         will return an empty result.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="ShowTableRequest.Options.GET_COLUMN_INFO">GET_COLUMN_INFO</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowTableRequest.Options.TRUE">TRUE</see> then column
        ///         info (memory usage, etc) will be returned.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTableRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowTableRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTableResponse showTable( string table_name,
                                            IDictionary<string, string> options = null )
        {
            return showTable( new ShowTableRequest( table_name, options ) );
        }

        /// <summary>Retrieves the user provided metadata for the specified
        /// tables.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTableMetadataResponse showTableMetadata( ShowTableMetadataRequest request_ )
        {
            ShowTableMetadataResponse actualResponse_ = SubmitRequest<ShowTableMetadataResponse>("/show/table/metadata", request_, false);

            return actualResponse_;
        }

        /// <summary>Retrieves the user provided metadata for the specified
        /// tables.</summary>
        ///
        /// <param name="table_names">Names of tables whose metadata will be
        /// fetched, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  All provided tables must
        /// exist, or an error is returned.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTableMetadataResponse showTableMetadata( IList<string> table_names,
                                                            IDictionary<string, string> options = null )
        {
            return showTableMetadata( new ShowTableMetadataRequest( table_names, options ) );
        }

        /// <summary>Show table monitors and their properties.</summary>
        /// <remarks><para>Table monitors are created using <see
        /// cref="createTableMonitor(CreateTableMonitorRequest)">createTableMonitor</see>.Returns
        /// detailed information about existing table monitors.</para>
        /// </remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTableMonitorsResponse showTableMonitors( ShowTableMonitorsRequest request_ )
        {
            ShowTableMonitorsResponse actualResponse_ = SubmitRequest<ShowTableMonitorsResponse>("/show/tablemonitors", request_, false);

            return actualResponse_;
        }

        /// <summary>Show table monitors and their properties.</summary>
        /// <remarks><para>Table monitors are created using <see
        /// cref="createTableMonitor(string,IDictionary{string,string})">createTableMonitor</see>.Returns
        /// detailed information about existing table monitors.</para>
        /// </remarks>
        ///
        /// <param name="monitor_ids">List of monitors to be shown. An empty
        /// list or a single entry with an empty string returns all table
        /// monitors.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTableMonitorsResponse showTableMonitors( IList<string> monitor_ids,
                                                            IDictionary<string, string> options = null )
        {
            return showTableMonitors( new ShowTableMonitorsRequest( monitor_ids, options ) );
        }

        /// <summary>Gets names of the tables whose type matches the given
        /// criteria.</summary>
        /// <remarks><para>Each table has a particular type. This type
        /// comprises the schema and properties of the table and sometimes a
        /// type label. This function allows a look up of the existing tables
        /// based on full or partial type information. The operation is
        /// synchronous.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTablesByTypeResponse showTablesByType( ShowTablesByTypeRequest request_ )
        {
            ShowTablesByTypeResponse actualResponse_ = SubmitRequest<ShowTablesByTypeResponse>("/show/tables/bytype", request_, false);

            return actualResponse_;
        }

        /// <summary>Gets names of the tables whose type matches the given
        /// criteria.</summary>
        /// <remarks><para>Each table has a particular type. This type
        /// comprises the schema and properties of the table and sometimes a
        /// type label. This function allows a look up of the existing tables
        /// based on full or partial type information. The operation is
        /// synchronous.</para></remarks>
        ///
        /// <param name="type_id">Type id returned by a call to <see
        /// cref="createType(string,string,IDictionary{string,IList{string}},IDictionary{string,string})">createType</see>.
        /// </param>
        /// <param name="label">Optional user supplied label which can be used
        /// instead of the type_id to retrieve all tables with the given label.
        /// </param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTablesByTypeResponse showTablesByType( string type_id,
                                                          string label,
                                                          IDictionary<string, string> options = null )
        {
            return showTablesByType( new ShowTablesByTypeRequest( type_id, label, options ) );
        }

        /// <summary>Retrieves information regarding the specified triggers or
        /// all existing triggers currently active.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTriggersResponse showTriggers( ShowTriggersRequest request_ )
        {
            ShowTriggersResponse actualResponse_ = SubmitRequest<ShowTriggersResponse>("/show/triggers", request_, false);

            return actualResponse_;
        }

        /// <summary>Retrieves information regarding the specified triggers or
        /// all existing triggers currently active.</summary>
        ///
        /// <param name="trigger_ids">List of IDs of the triggers whose
        /// information is to be retrieved. An empty list means information
        /// will be retrieved on all active triggers.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTriggersResponse showTriggers( IList<string> trigger_ids,
                                                  IDictionary<string, string> options = null )
        {
            return showTriggers( new ShowTriggersRequest( trigger_ids, options ) );
        }

        /// <summary>Retrieves information for the specified data type ID or
        /// type label.</summary>
        /// <remarks><para>For all data types that match the input criteria,
        /// the database returns the type ID, the type schema, the label (if
        /// available), and the type's column properties.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTypesResponse showTypes( ShowTypesRequest request_ )
        {
            ShowTypesResponse actualResponse_ = SubmitRequest<ShowTypesResponse>("/show/types", request_, false);


            for ( int i_ = 0; i_ < actualResponse_.type_ids.Count; ++i_ )
            {
                SetDecoderIfMissing( actualResponse_.type_ids[i_],
                                     actualResponse_.labels[i_],
                                     actualResponse_.type_schemas[i_],
                                     actualResponse_.properties[i_] );
            }

            return actualResponse_;
        }

        /// <summary>Retrieves information for the specified data type ID or
        /// type label.</summary>
        /// <remarks><para>For all data types that match the input criteria,
        /// the database returns the type ID, the type schema, the label (if
        /// available), and the type's column properties.</para></remarks>
        ///
        /// <param name="type_id">Type Id returned in response to a call to
        /// <see
        /// cref="createType(string,string,IDictionary{string,IList{string}},IDictionary{string,string})">createType</see>.
        /// </param>
        /// <param name="label">Option string that was supplied by user in a
        /// call to <see
        /// cref="createType(string,string,IDictionary{string,IList{string}},IDictionary{string,string})">createType</see>.
        /// </param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowTypesRequest.Options.NO_JOIN_TYPES">NO_JOIN_TYPES</see>:
        ///         </term>
        ///         <description>When set to 'true', no join types will be
        ///         included.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTypesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowTypesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowTypesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowTypesResponse showTypes( string type_id,
                                            string label,
                                            IDictionary<string, string> options = null )
        {
            return showTypes( new ShowTypesRequest( type_id, label, options ) );
        }

        /// <summary>Retrieves information about rendered videos.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowVideoResponse showVideo( ShowVideoRequest request_ )
        {
            ShowVideoResponse actualResponse_ = SubmitRequest<ShowVideoResponse>("/show/video", request_, false);

            return actualResponse_;
        }

        /// <summary>Retrieves information about rendered videos.</summary>
        ///
        /// <param name="paths">The fully-qualified <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a> paths for the
        /// videos to show. If empty, shows all videos.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowVideoResponse showVideo( IList<string> paths,
                                            IDictionary<string, string> options = null )
        {
            return showVideo( new ShowVideoRequest( paths, options ) );
        }

        /// <summary>Requests table wal properties.Returns information about
        /// the requested table wal entries.</summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowWalResponse showWal( ShowWalRequest request_ )
        {
            ShowWalResponse actualResponse_ = SubmitRequest<ShowWalResponse>("/show/wal", request_, false);

            return actualResponse_;
        }

        /// <summary>Requests table wal properties.Returns information about
        /// the requested table wal entries.</summary>
        ///
        /// <param name="table_names">List of tables to query. An asterisk
        /// returns all tables.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="ShowWalRequest.Options.SHOW_SETTINGS">SHOW_SETTINGS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="ShowWalRequest.Options.TRUE">TRUE</see> include a map
        ///         of the wal settings for the requested tables.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowWalRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="ShowWalRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="ShowWalRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public ShowWalResponse showWal( IList<string> table_names,
                                        IDictionary<string, string> options = null )
        {
            return showWal( new ShowWalRequest( table_names, options ) );
        }

        /// <summary>Solves an existing graph for a type of problem (e.g.,
        /// shortest path, page rank, travelling salesman, etc.) using source
        /// nodes, destination nodes, and additional, optional weights and
        /// restrictions.</summary>
        /// <remarks><para></para>
        /// <para>IMPORTANT: It's highly recommended that you review the <a
        /// href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a
        /// href="../../../guide-tags/graph---solve" target="_top">/solve/graph
        /// examples</a> before using this endpoint.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public SolveGraphResponse solveGraph( SolveGraphRequest request_ )
        {
            SolveGraphResponse actualResponse_ = SubmitRequest<SolveGraphResponse>("/solve/graph", request_, false);

            return actualResponse_;
        }

        /// <summary>Solves an existing graph for a type of problem (e.g.,
        /// shortest path, page rank, travelling salesman, etc.) using source
        /// nodes, destination nodes, and additional, optional weights and
        /// restrictions.</summary>
        /// <remarks><para></para>
        /// <para>IMPORTANT: It's highly recommended that you review the <a
        /// href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> concepts documentation, the <a
        /// href="../../../guides/graph_rest_guide/" target="_top">Graph REST
        /// Tutorial</a>, and/or some <a
        /// href="../../../guide-tags/graph---solve" target="_top">/solve/graph
        /// examples</a> before using this endpoint.</para></remarks>
        ///
        /// <param name="graph_name">Name of the graph resource to solve.
        /// </param>
        /// <param name="weights_on_edges">Additional weights to apply to the
        /// edges of an existing graph. Weights must be specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS WEIGHTS_EDGE_ID',
        /// expressions, e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or
        /// constant values, e.g., '{4, 15, 2} AS WEIGHTS_VALUESPECIFIED'. Any
        /// provided weights will be added (in the case of
        /// 'WEIGHTS_VALUESPECIFIED') to or multiplied with (in the case of
        /// 'WEIGHTS_FACTORSPECIFIED') the existing weight(s). If using
        /// constant values in an identifier combination, the number of values
        /// specified must match across the combination. The default value is
        /// an empty List.</param>
        /// <param name="restrictions">Additional restrictions to apply to the
        /// nodes/edges of an existing graph. Restrictions must be specified
        /// using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED', or constant values, e.g., '{0, 0, 0,
        /// 1} AS RESTRICTIONS_ONOFFCOMPARED'. If using constant values in an
        /// identifier combination, the number of values specified must match
        /// across the combination. If remove_previous_restrictions option is
        /// set to true, any provided restrictions will replace the existing
        /// restrictions. Otherwise, any provided restrictions will be added
        /// (in the case of 'RESTRICTIONS_VALUECOMPARED') to or replaced (in
        /// the case of 'RESTRICTIONS_ONOFFCOMPARED'). The default value is an
        /// empty List.</param>
        /// <param name="solver_type">The type of solver to use for the graph.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.SHORTEST_PATH">SHORTEST_PATH</see>:
        ///         </term>
        ///         <description>Solves for the optimal (shortest) path based
        ///         on weights and restrictions from one source to destinations
        ///         nodes. Also known as the Dijkstra solver.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.PAGE_RANK">PAGE_RANK</see>:
        ///         </term>
        ///         <description>Solves for the probability of each destination
        ///         node being visited based on the links of the graph
        ///         topology. Weights are not required to use this solver.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.PROBABILITY_RANK">PROBABILITY_RANK</see>:
        ///         </term>
        ///         <description>Solves for the transitional probability
        ///         (Hidden Markov) for each node based on the weights
        ///         (probability assigned over given edges).</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.CENTRALITY">CENTRALITY</see>:
        ///         </term>
        ///         <description>Solves for the degree of a node to depict how
        ///         many pairs of individuals that would have to go through the
        ///         node to reach one another in the minimum number of hops.
        ///         Also known as betweenness.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.MULTIPLE_ROUTING">MULTIPLE_ROUTING</see>:
        ///         </term>
        ///         <description>Solves for finding the minimum cost cumulative
        ///         path for a round-trip starting from the given source and
        ///         visiting each given destination node once then returning to
        ///         the source. Also known as the travelling salesman problem.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.INVERSE_SHORTEST_PATH">INVERSE_SHORTEST_PATH</see>:
        ///         </term>
        ///         <description>Solves for finding the optimal path cost for
        ///         each destination node to route to the source node. Also
        ///         known as inverse Dijkstra or the service man routing
        ///         problem.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.BACKHAUL_ROUTING">BACKHAUL_ROUTING</see>:
        ///         </term>
        ///         <description>Solves for optimal routes that connect remote
        ///         asset nodes to the fixed (backbone) asset nodes.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.ALLPATHS">ALLPATHS</see>:
        ///         </term>
        ///         <description>Solves for paths that would give costs between
        ///         max and min solution radia - Make sure to limit by the
        ///         'max_solution_targets' option. Min cost shoudl be &gt;=
        ///         shortest_path cost.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.STATS_ALL">STATS_ALL</see>:
        ///         </term>
        ///         <description>Solves for graph statistics such as graph
        ///         diameter, longest pairs, vertex valences, topology numbers,
        ///         average and max cluster sizes, etc.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.SolverType.CLOSENESS">CLOSENESS</see>:
        ///         </term>
        ///         <description>Solves for the centrality closeness score per
        ///         node as the sum of the inverse shortest path costs to all
        ///         nodes in the graph.</description>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="SolveGraphRequest.SolverType.SHORTEST_PATH">SHORTEST_PATH</see>.
        /// </param>
        /// <param name="source_nodes">It can be one of the nodal identifiers -
        /// e.g: 'NODE_WKTPOINT' for source nodes. For <see
        /// cref="SolveGraphRequest.SolverType.BACKHAUL_ROUTING">BACKHAUL_ROUTING</see>,
        /// this list depicts the fixed assets. The default value is an empty
        /// List.</param>
        /// <param name="destination_nodes">It can be one of the nodal
        /// identifiers - e.g: 'NODE_WKTPOINT' for destination (target) nodes.
        /// For <see
        /// cref="SolveGraphRequest.SolverType.BACKHAUL_ROUTING">BACKHAUL_ROUTING</see>,
        /// this list depicts the remote assets. The default value is an empty
        /// List.</param>
        /// <param name="solution_table">Name of the table to store the
        /// solution, in [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. The default value is
        /// 'graph_solutions'.</param>
        /// <param name="options">Additional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.MAX_SOLUTION_RADIUS">MAX_SOLUTION_RADIUS</see>:
        ///         </term>
        ///         <description>For <see
        ///         cref="SolveGraphRequest.SolverType.ALLPATHS">ALLPATHS</see>,
        ///         <see
        ///         cref="SolveGraphRequest.SolverType.SHORTEST_PATH">SHORTEST_PATH</see>
        ///         and <see
        ///         cref="SolveGraphRequest.SolverType.INVERSE_SHORTEST_PATH">INVERSE_SHORTEST_PATH</see>
        ///         solvers only. Sets the maximum solution cost radius, which
        ///         ignores the <paramref name="destination_nodes" /> list and
        ///         instead outputs the nodes within the radius sorted by
        ///         ascending cost. If set to '0.0', the setting is ignored.
        ///         The default value is '0.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.MIN_SOLUTION_RADIUS">MIN_SOLUTION_RADIUS</see>:
        ///         </term>
        ///         <description>For <see
        ///         cref="SolveGraphRequest.SolverType.ALLPATHS">ALLPATHS</see>,
        ///         <see
        ///         cref="SolveGraphRequest.SolverType.SHORTEST_PATH">SHORTEST_PATH</see>
        ///         and <see
        ///         cref="SolveGraphRequest.SolverType.INVERSE_SHORTEST_PATH">INVERSE_SHORTEST_PATH</see>
        ///         solvers only. Applicable only when <see
        ///         cref="SolveGraphRequest.Options.MAX_SOLUTION_RADIUS">MAX_SOLUTION_RADIUS</see>
        ///         is set. Sets the minimum solution cost radius, which
        ///         ignores the <paramref name="destination_nodes" /> list and
        ///         instead outputs the nodes within the radius sorted by
        ///         ascending cost. If set to '0.0', the setting is ignored.
        ///         The default value is '0.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.MAX_SOLUTION_TARGETS">MAX_SOLUTION_TARGETS</see>:
        ///         </term>
        ///         <description>For <see
        ///         cref="SolveGraphRequest.SolverType.ALLPATHS">ALLPATHS</see>,
        ///         <see
        ///         cref="SolveGraphRequest.SolverType.SHORTEST_PATH">SHORTEST_PATH</see>
        ///         and <see
        ///         cref="SolveGraphRequest.SolverType.INVERSE_SHORTEST_PATH">INVERSE_SHORTEST_PATH</see>
        ///         solvers only. Sets the maximum number of solution targets,
        ///         which ignores the <paramref name="destination_nodes" />
        ///         list and instead outputs no more than n number of nodes
        ///         sorted by ascending cost where n is equal to the setting
        ///         value. If set to 0, the setting is ignored. The default
        ///         value is '1000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.UNIFORM_WEIGHTS">UNIFORM_WEIGHTS</see>:
        ///         </term>
        ///         <description>When specified, assigns the given value to all
        ///         the edges in the graph. Note that weights provided in
        ///         <paramref name="weights_on_edges" /> will override this
        ///         value.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.LEFT_TURN_PENALTY">LEFT_TURN_PENALTY</see>:
        ///         </term>
        ///         <description>This will add an additonal weight over the
        ///         edges labelled as 'left turn' if the 'add_turn' option
        ///         parameter of the <see
        ///         cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        ///         was invoked at graph creation. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.RIGHT_TURN_PENALTY">RIGHT_TURN_PENALTY</see>:
        ///         </term>
        ///         <description>This will add an additonal weight over the
        ///         edges labelled as' right turn' if the 'add_turn' option
        ///         parameter of the <see
        ///         cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        ///         was invoked at graph creation. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.INTERSECTION_PENALTY">INTERSECTION_PENALTY</see>:
        ///         </term>
        ///         <description>This will add an additonal weight over the
        ///         edges labelled as 'intersection' if the 'add_turn' option
        ///         parameter of the <see
        ///         cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        ///         was invoked at graph creation. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.SHARP_TURN_PENALTY">SHARP_TURN_PENALTY</see>:
        ///         </term>
        ///         <description>This will add an additonal weight over the
        ///         edges labelled as 'sharp turn' or 'u-turn' if the
        ///         'add_turn' option parameter of the <see
        ///         cref="createGraph(string,bool,IList{string},IList{string},IList{string},IList{string},IDictionary{string,string})">createGraph</see>
        ///         was invoked at graph creation. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.NUM_BEST_PATHS">NUM_BEST_PATHS</see>:
        ///         </term>
        ///         <description>For <see
        ///         cref="SolveGraphRequest.SolverType.MULTIPLE_ROUTING">MULTIPLE_ROUTING</see>
        ///         solvers only; sets the number of shortest paths computed
        ///         from each node. This is the heuristic criterion. Default
        ///         value of zero allows the number to be computed
        ///         automatically by the solver. The user may want to override
        ///         this parameter to speed-up the solver. The default value is
        ///         '0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.MAX_NUM_COMBINATIONS">MAX_NUM_COMBINATIONS</see>:
        ///         </term>
        ///         <description>For <see
        ///         cref="SolveGraphRequest.SolverType.MULTIPLE_ROUTING">MULTIPLE_ROUTING</see>
        ///         solvers only; sets the cap on the combinatorial sequences
        ///         generated. If the default value of two millions is
        ///         overridden to a lesser value, it can potentially speed up
        ///         the solver. The default value is '2000000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.OUTPUT_EDGE_PATH">OUTPUT_EDGE_PATH</see>:
        ///         </term>
        ///         <description>If true then concatenated edge ids will be
        ///         added as the EDGE path column of the solution table for
        ///         each source and target pair in shortest path solves.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="SolveGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="SolveGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="SolveGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.OUTPUT_WKT_PATH">OUTPUT_WKT_PATH</see>:
        ///         </term>
        ///         <description>If true then concatenated wkt line segments
        ///         will be added as the Wktroute column of the solution table
        ///         for each source and target pair in shortest path solves.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="SolveGraphRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="SolveGraphRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="SolveGraphRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.SERVER_ID">SERVER_ID</see>:
        ///         </term>
        ///         <description>Indicates which graph server(s) to send the
        ///         request to. Default is to send to the server, amongst those
        ///         containing the corresponding graph, that has the most
        ///         computational bandwidth. For SHORTEST_PATH solver type, the
        ///         input is split amongst the server containing the
        ///         corresponding graph.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.CONVERGENCE_LIMIT">CONVERGENCE_LIMIT</see>:
        ///         </term>
        ///         <description>For <see
        ///         cref="SolveGraphRequest.SolverType.PAGE_RANK">PAGE_RANK</see>
        ///         solvers only; Maximum percent relative threshold on the
        ///         pagerank scores of each node between consecutive iterations
        ///         to satisfy convergence. Default value is 1 (one) percent.
        ///         The default value is '1.0'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.MAX_ITERATIONS">MAX_ITERATIONS</see>:
        ///         </term>
        ///         <description>For <see
        ///         cref="SolveGraphRequest.SolverType.PAGE_RANK">PAGE_RANK</see>
        ///         solvers only; Maximum number of pagerank iterations for
        ///         satisfying convergence. Default value is 100. The default
        ///         value is '100'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.MAX_RUNS">MAX_RUNS</see>:
        ///         </term>
        ///         <description>For all <see
        ///         cref="SolveGraphRequest.SolverType.CENTRALITY">CENTRALITY</see>
        ///         solvers only; Sets the maximum number of shortest path
        ///         runs; maximum possible value is the number of nodes in the
        ///         graph. Default value of 0 enables this value to be auto
        ///         computed by the solver. The default value is '0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.OUTPUT_CLUSTERS">OUTPUT_CLUSTERS</see>:
        ///         </term>
        ///         <description>For <see
        ///         cref="SolveGraphRequest.SolverType.STATS_ALL">STATS_ALL</see>
        ///         solvers only; the cluster index for each node will be
        ///         inserted as an additional column in the output.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="SolveGraphRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>An additional column 'CLUSTER' will be
        ///                 added for each node</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="SolveGraphRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>No extra cluster info per node will be
        ///                 available in the output</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="SolveGraphRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.SOLVE_HEURISTIC">SOLVE_HEURISTIC</see>:
        ///         </term>
        ///         <description>Specify heuristic search criterion only for
        ///         the geo graphs and shortest path solves towards a single
        ///         target.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="SolveGraphRequest.Options.ASTAR">ASTAR</see>:
        ///                 </term>
        ///                 <description>Employs A-STAR heuristics to speed up
        ///                 the shortest path traversal</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="SolveGraphRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>No heuristics are applied
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="SolveGraphRequest.Options.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="SolveGraphRequest.Options.ASTAR_RADIUS">ASTAR_RADIUS</see>:
        ///         </term>
        ///         <description>For path solvers only when 'solve_heuristic'
        ///         option is 'astar'. The shortest path traversal front
        ///         includes nodes only within this radius (kilometers) as it
        ///         moves towards the target location. The default value is
        ///         '70'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public SolveGraphResponse solveGraph( string graph_name,
                                              IList<string> weights_on_edges = null,
                                              IList<string> restrictions = null,
                                              string solver_type = SolveGraphRequest.SolverType.SHORTEST_PATH,
                                              IList<string> source_nodes = null,
                                              IList<string> destination_nodes = null,
                                              string solution_table = "graph_solutions",
                                              IDictionary<string, string> options = null )
        {
            return solveGraph( new SolveGraphRequest( graph_name, weights_on_edges,
                                                      restrictions, solver_type,
                                                      source_nodes, destination_nodes,
                                                      solution_table, options ) );
        }

        /// <summary>Runs multiple predicate-based updates in a single call.
        /// </summary>
        /// <remarks><para> With the list of given expressions, any matching
        /// record's column values will be updated as provided in <see
        /// cref="RawUpdateRecordsRequest.new_values_maps">new_values_maps</see>.
        /// There is also an optional 'upsert' capability where if a particular
        /// predicate doesn't match any existing record, then a new record can
        /// be inserted.</para>
        /// <para>Note that this operation can only be run on an original table
        /// and not on a result view.</para>
        /// <para>This operation can update primary key values.  By default
        /// only 'pure primary key' predicates are allowed when updating
        /// primary key values. If the primary key for a table is the column
        /// 'attr1', then the operation will only accept predicates of the
        /// form: "attr1 == 'foo'" if the attr1 column is being updated.  For a
        /// composite primary key (e.g. columns 'attr1' and 'attr2') then this
        /// operation will only accept predicates of the form: "(attr1 ==
        /// 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns
        /// must appear in an equality predicate in the expressions.
        /// Furthermore each 'pure primary key' predicate must be unique within
        /// a given request.  These restrictions can be removed by utilizing
        /// some available options through <see
        /// cref="RawUpdateRecordsRequest.options">options</see>.</para>
        /// <para>The <see
        /// cref="RawUpdateRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        /// option specifies the record primary key collision policy for tables
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>, while <see
        /// cref="RawUpdateRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>
        /// specifies the record primary key collision error-suppression policy
        /// when those collisions result in the update being rejected.  Both
        /// are ignored on tables with no primary key.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UpdateRecordsResponse updateRecordsRaw( RawUpdateRecordsRequest request_ )
        {
            UpdateRecordsResponse actualResponse_ = SubmitRequest<UpdateRecordsResponse>("/update/records", request_, true);

            return actualResponse_;
        }

        /// <summary>Runs multiple predicate-based updates in a single call.
        /// </summary>
        /// <remarks><para> With the list of given expressions, any matching
        /// record's column values will be updated as provided in <see
        /// cref="UpdateRecordsRequest{T}.new_values_maps">new_values_maps</see>.
        /// There is also an optional 'upsert' capability where if a particular
        /// predicate doesn't match any existing record, then a new record can
        /// be inserted.</para>
        /// <para>Note that this operation can only be run on an original table
        /// and not on a result view.</para>
        /// <para>This operation can update primary key values.  By default
        /// only 'pure primary key' predicates are allowed when updating
        /// primary key values. If the primary key for a table is the column
        /// 'attr1', then the operation will only accept predicates of the
        /// form: "attr1 == 'foo'" if the attr1 column is being updated.  For a
        /// composite primary key (e.g. columns 'attr1' and 'attr2') then this
        /// operation will only accept predicates of the form: "(attr1 ==
        /// 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns
        /// must appear in an equality predicate in the expressions.
        /// Furthermore each 'pure primary key' predicate must be unique within
        /// a given request.  These restrictions can be removed by utilizing
        /// some available options through <see
        /// cref="UpdateRecordsRequest{T}.options">options</see>.</para>
        /// <para>The <see
        /// cref="UpdateRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        /// option specifies the record primary key collision policy for tables
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>, while <see
        /// cref="UpdateRecordsRequest{T}.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>
        /// specifies the record primary key collision error-suppression policy
        /// when those collisions result in the update being rejected.  Both
        /// are ignored on tables with no primary key.</para></remarks>
        ///
        /// <typeparam name="T">The type of object being added.</typeparam>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UpdateRecordsResponse updateRecords<T>( UpdateRecordsRequest<T> request_ )
        {
            RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest();
            actualRequest_.table_name = request_.table_name;
            actualRequest_.expressions = request_.expressions;
            actualRequest_.new_values_maps = request_.new_values_maps;
            foreach (var thisObj in request_.data) actualRequest_.records_to_insert.Add( AvroEncode( thisObj ) );
            actualRequest_.options = request_.options;
            UpdateRecordsResponse actualResponse_ = SubmitRequest<UpdateRecordsResponse>("/update/records", actualRequest_, true);

            return actualResponse_;
        }

        /// <summary>Runs multiple predicate-based updates in a single call.
        /// </summary>
        /// <remarks><para> With the list of given expressions, any matching
        /// record's column values will be updated as provided in <paramref
        /// name="new_values_maps" />.  There is also an optional 'upsert'
        /// capability where if a particular predicate doesn't match any
        /// existing record, then a new record can be inserted.</para>
        /// <para>Note that this operation can only be run on an original table
        /// and not on a result view.</para>
        /// <para>This operation can update primary key values.  By default
        /// only 'pure primary key' predicates are allowed when updating
        /// primary key values. If the primary key for a table is the column
        /// 'attr1', then the operation will only accept predicates of the
        /// form: "attr1 == 'foo'" if the attr1 column is being updated.  For a
        /// composite primary key (e.g. columns 'attr1' and 'attr2') then this
        /// operation will only accept predicates of the form: "(attr1 ==
        /// 'foo') and (attr2 == 'bar')".  Meaning, all primary key columns
        /// must appear in an equality predicate in the expressions.
        /// Furthermore each 'pure primary key' predicate must be unique within
        /// a given request.  These restrictions can be removed by utilizing
        /// some available options through <paramref name="options" />.</para>
        /// <para>The <see
        /// cref="UpdateRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        /// option specifies the record primary key collision policy for tables
        /// with a <a href="../../../concepts/tables/#primary-keys"
        /// target="_top">primary key</a>, while <see
        /// cref="UpdateRecordsRequest{T}.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>
        /// specifies the record primary key collision error-suppression policy
        /// when those collisions result in the update being rejected.  Both
        /// are ignored on tables with no primary key.</para></remarks>
        ///
        /// <typeparam name="T">The type of object being added.</typeparam>
        ///
        /// <param name="table_name">Name of table to be updated, in
        /// [schema_name.]table_name format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be a currently
        /// existing table and not a view.</param>
        /// <param name="expressions">A list of the actual predicates, one for
        /// each update; format should follow the guidelines <see
        /// cref="filter(string,string,string,IDictionary{string,string})">here</see>.
        /// </param>
        /// <param name="new_values_maps">List of new values for the matching
        /// records.  Each element is a map with (key, value) pairs where the
        /// keys are the names of the columns whose values are to be updated;
        /// the values are the new values.  The number of elements in the list
        /// should match the length of <paramref name="expressions" />.</param>
        /// <param name="data">An *optional* list of new binary-avro encoded
        /// records to insert, one for each update.  If one of <paramref
        /// name="expressions" /> does not yield a matching record to be
        /// updated, then the corresponding element from this list will be
        /// added to the table. The default value is an empty List.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="UpdateRecordsRequest.Options.GLOBAL_EXPRESSION">GLOBAL_EXPRESSION</see>:
        ///         </term>
        ///         <description>An optional global expression to reduce the
        ///         search space of the predicates listed in <paramref
        ///         name="expressions" />. The default value is ''.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UpdateRecordsRequest.Options.BYPASS_SAFETY_CHECKS">BYPASS_SAFETY_CHECKS</see>:
        ///         </term>
        ///         <description>When set to <see
        ///         cref="UpdateRecordsRequest{T}.Options.TRUE">TRUE</see>, all
        ///         predicates are available for primary key updates.  Keep in
        ///         mind that it is possible to destroy data in this case,
        ///         since a single predicate may match multiple objects
        ///         (potentially all of records of a table), and then updating
        ///         all of those records to have the same primary key will, due
        ///         to the primary key uniqueness constraints, effectively
        ///         delete all but one of those updated records.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UpdateRecordsRequest.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision policy for
        ///         updating a table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>.  There are two ways that a
        ///         record collision can occur.
        ///         The first is an "update collision", which happens when the
        ///         update changes the value of the updated record's primary
        ///         key, and that new primary key already exists as the primary
        ///         key of another record in the table.
        ///         The second is an "insert collision", which occurs when a
        ///         given filter in <paramref name="expressions" /> finds no
        ///         records to update, and the alternate insert record given in
        ///         <paramref name="data" /> (or <c>records_to_insert_str</c>)
        ///         contains a primary key matching that of an existing record
        ///         in the table.
        ///         If <see
        ///         cref="UpdateRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is set to <see
        ///         cref="UpdateRecordsRequest{T}.Options.TRUE">TRUE</see>,
        ///         "update collisions" will result in the existing record
        ///         collided into being removed and the record updated with
        ///         values specified in <paramref name="new_values_maps" />
        ///         taking its place; "insert collisions" will result in the
        ///         collided-into record being updated with the values in
        ///         <paramref name="data" />/<c>records_to_insert_str</c> (if
        ///         given).
        ///         If set to <see
        ///         cref="UpdateRecordsRequest{T}.Options.FALSE">FALSE</see>,
        ///         the existing collided-into record will remain unchanged,
        ///         while the update will be rejected and the error handled as
        ///         determined by <see
        ///         cref="UpdateRecordsRequest{T}.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>.
        ///         If the specified table does not have a primary key, then
        ///         this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Overwrite the collided-into record
        ///                 when updating a record's primary key or inserting
        ///                 an alternate record causes a primary key collision
        ///                 between the record being updated/inserted and
        ///                 another existing record in the table</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Reject updates which cause primary key
        ///                 collisions between the record being
        ///                 updated/inserted and an existing record in the
        ///                 table</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UpdateRecordsRequest.Options.IGNORE_EXISTING_PK">IGNORE_EXISTING_PK</see>:
        ///         </term>
        ///         <description>Specifies the record collision
        ///         error-suppression policy for updating a table with a <a
        ///         href="../../../concepts/tables/#primary-keys"
        ///         target="_top">primary key</a>, only used when primary key
        ///         record collisions are rejected (<see
        ///         cref="UpdateRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="UpdateRecordsRequest{T}.Options.FALSE">FALSE</see>).
        ///         If set to <see
        ///         cref="UpdateRecordsRequest{T}.Options.TRUE">TRUE</see>, any
        ///         record update that is rejected for resulting in a primary
        ///         key collision with an existing table record will be ignored
        ///         with no error generated.  If <see
        ///         cref="UpdateRecordsRequest{T}.Options.FALSE">FALSE</see>,
        ///         the rejection of any update for resulting in a primary key
        ///         collision will cause an error to be reported.  If the
        ///         specified table does not have a primary key or if <see
        ///         cref="UpdateRecordsRequest{T}.Options.UPDATE_ON_EXISTING_PK">UPDATE_ON_EXISTING_PK</see>
        ///         is <see
        ///         cref="UpdateRecordsRequest{T}.Options.TRUE">TRUE</see>,
        ///         then this option has no effect.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>Ignore updates that result in primary
        ///                 key collisions with existing records</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>Treat as errors any updates that
        ///                 result in primary key collisions with existing
        ///                 records</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UpdateRecordsRequest.Options.UPDATE_PARTITION">UPDATE_PARTITION</see>:
        ///         </term>
        ///         <description>Force qualifying records to be deleted and
        ///         reinserted so their partition membership will be
        ///         reevaluated.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UpdateRecordsRequest.Options.TRUNCATE_STRINGS">TRUNCATE_STRINGS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="UpdateRecordsRequest{T}.Options.TRUE">TRUE</see>, any
        ///         strings which are too long for their charN string fields
        ///         will be truncated to fit.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UpdateRecordsRequest.Options.USE_EXPRESSIONS_IN_NEW_VALUES_MAPS">USE_EXPRESSIONS_IN_NEW_VALUES_MAPS</see>:
        ///         </term>
        ///         <description>When set to <see
        ///         cref="UpdateRecordsRequest{T}.Options.TRUE">TRUE</see>, all
        ///         new values in <paramref name="new_values_maps" /> are
        ///         considered as expression values. When set to <see
        ///         cref="UpdateRecordsRequest{T}.Options.FALSE">FALSE</see>,
        ///         all new values in <paramref name="new_values_maps" /> are
        ///         considered as constants.  NOTE:  When <see
        ///         cref="UpdateRecordsRequest{T}.Options.TRUE">TRUE</see>,
        ///         string constants will need to be quoted to avoid being
        ///         evaluated as expressions.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UpdateRecordsRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UpdateRecordsRequest.Options.RECORD_ID">RECORD_ID</see>:
        ///         </term>
        ///         <description>ID of a single record to be updated (returned
        ///         in the call to <see
        ///         cref="insertRecords{T}(string,IList{T},IDictionary{string,string})">insertRecords</see>
        ///         or <see
        ///         cref="getRecordsFromCollection{T}(string,long,long,IDictionary{string,string})">getRecordsFromCollection</see>).
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UpdateRecordsResponse updateRecords<T>( string table_name,
                                                       IList<string> expressions,
                                                       IList<IDictionary<string, string>> new_values_maps,
                                                       IList<T> data = null,
                                                       IDictionary<string, string> options = null )
        {
            return updateRecords<T>( new UpdateRecordsRequest<T>( table_name, expressions,
                                                                  new_values_maps, data,
                                                                  options ) );
        }

        /// <summary>Updates the view specified by <see
        /// cref="UpdateRecordsBySeriesRequest.table_name">table_name</see> to
        /// include full series (track) information from the <see
        /// cref="UpdateRecordsBySeriesRequest.world_table_name">world_table_name</see>
        /// for the series (tracks) present in the <see
        /// cref="UpdateRecordsBySeriesRequest.view_name">view_name</see>.
        /// </summary>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UpdateRecordsBySeriesResponse updateRecordsBySeries( UpdateRecordsBySeriesRequest request_ )
        {
            UpdateRecordsBySeriesResponse actualResponse_ = SubmitRequest<UpdateRecordsBySeriesResponse>("/update/records/byseries", request_, false);

            return actualResponse_;
        }

        /// <summary>Updates the view specified by <paramref name="table_name"
        /// /> to include full series (track) information from the <paramref
        /// name="world_table_name" /> for the series (tracks) present in the
        /// <paramref name="view_name" />.</summary>
        ///
        /// <param name="table_name">Name of the view on which the update
        /// operation will be performed, in [schema_name.]view_name format,
        /// using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.  Must be an existing view.
        /// </param>
        /// <param name="world_table_name">Name of the table containing the
        /// complete series (track) information, in [schema_name.]table_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="view_name">Name of the view containing the series
        /// (tracks) which have to be updated, in [schema_name.]view_name
        /// format, using standard <a
        /// href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>. The default value is ''.
        /// </param>
        /// <param name="reserved">The default value is an empty List.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UpdateRecordsBySeriesResponse updateRecordsBySeries( string table_name,
                                                                    string world_table_name,
                                                                    string view_name = "",
                                                                    IList<string> reserved = null,
                                                                    IDictionary<string, string> options = null )
        {
            return updateRecordsBySeries( new UpdateRecordsBySeriesRequest( table_name,
                                                                            world_table_name,
                                                                            view_name,
                                                                            reserved,
                                                                            options ) );
        }

        /// <summary>Uploads one or more files to <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        /// <remarks><para>There are two methods for uploading files: load
        /// files in their entirety, or load files in parts. The latter is
        /// recommeded for files of approximately 60 MB or larger.</para>
        /// <para>To upload files in their entirety, populate <see
        /// cref="UploadFilesRequest.file_names">file_names</see> with the file
        /// names to upload into on KiFS, and their respective byte content in
        /// <see cref="UploadFilesRequest.file_data">file_data</see>.</para>
        /// <para>Multiple steps are involved when uploading in multiple parts.
        /// Only one file at a time can be uploaded in this manner. A
        /// user-provided UUID is utilized to tie all the upload steps together
        /// for a given file.  To upload a file in multiple parts:</para>
        /// <para>1. Provide the file name in <see
        /// cref="UploadFilesRequest.file_names">file_names</see>, the UUID in
        /// the <see
        /// cref="UploadFilesRequest.Options.MULTIPART_UPLOAD_UUID">MULTIPART_UPLOAD_UUID</see>
        /// key in <see cref="UploadFilesRequest.options">options</see>, and a
        /// <see
        /// cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>
        /// value of <see
        /// cref="UploadFilesRequest.Options.INIT">INIT</see>.</para>
        /// <para>2. Upload one or more parts by providing the file name, the
        /// part data in <see
        /// cref="UploadFilesRequest.file_data">file_data</see>, the UUID, a
        /// <see
        /// cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>
        /// value of <see
        /// cref="UploadFilesRequest.Options.UPLOAD_PART">UPLOAD_PART</see>,
        /// and the part number in the <see
        /// cref="UploadFilesRequest.Options.MULTIPART_UPLOAD_PART_NUMBER">MULTIPART_UPLOAD_PART_NUMBER</see>.
        /// The part numbers must start at 1 and increase incrementally. Parts
        /// may not be uploaded out of order.</para>
        /// <para>3. Complete the upload by providing the file name, the UUID,
        /// and a <see
        /// cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>
        /// value of <see
        /// cref="UploadFilesRequest.Options.COMPLETE">COMPLETE</see>.</para>
        /// <para>Multipart uploads in progress may be canceled by providing
        /// the file name, the UUID, and a <see
        /// cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>
        /// value of <see
        /// cref="UploadFilesRequest.Options.CANCEL">CANCEL</see>.  If an new
        /// upload is initialized with a different UUID for an existing upload
        /// in progress, the pre-existing upload is automatically canceled in
        /// favor of the new upload.</para>
        /// <para>The multipart upload must be completed for the file to be
        /// usable in KiFS. Information about multipart uploads in progress is
        /// available in <see
        /// cref="showFiles(ShowFilesRequest)">showFiles</see>.</para>
        /// <para>File data may be pre-encoded using base64 encoding. This
        /// should be indicated using the <see
        /// cref="UploadFilesRequest.Options.FILE_ENCODING">FILE_ENCODING</see>
        /// option, and is recommended when using JSON serialization.</para>
        /// <para>Each file path must reside in a top-level KiFS directory,
        /// i.e. one of the directories listed in <see
        /// cref="showDirectories(ShowDirectoriesRequest)">showDirectories</see>.
        /// The user must have write permission on the directory. Nested
        /// directories are permitted in file name paths. Directories are
        /// deliniated with the directory separator of '/'.  For example, given
        /// the file path '/a/b/c/d.txt', 'a' must be a KiFS directory.</para>
        /// <para>These characters are allowed in file name paths: letters,
        /// numbers, spaces, the path delimiter of '/', and the characters: '.'
        /// '-' ':' '[' ']' '(' ')' '#' '='.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UploadFilesResponse uploadFiles( UploadFilesRequest request_ )
        {
            UploadFilesResponse actualResponse_ = SubmitRequest<UploadFilesResponse>("/upload/files", request_, false);

            return actualResponse_;
        }

        /// <summary>Uploads one or more files to <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        /// <remarks><para>There are two methods for uploading files: load
        /// files in their entirety, or load files in parts. The latter is
        /// recommeded for files of approximately 60 MB or larger.</para>
        /// <para>To upload files in their entirety, populate <paramref
        /// name="file_names" /> with the file names to upload into on KiFS,
        /// and their respective byte content in <paramref name="file_data"
        /// />.</para>
        /// <para>Multiple steps are involved when uploading in multiple parts.
        /// Only one file at a time can be uploaded in this manner. A
        /// user-provided UUID is utilized to tie all the upload steps together
        /// for a given file.  To upload a file in multiple parts:</para>
        /// <para>1. Provide the file name in <paramref name="file_names" />,
        /// the UUID in the <see
        /// cref="UploadFilesRequest.Options.MULTIPART_UPLOAD_UUID">MULTIPART_UPLOAD_UUID</see>
        /// key in <paramref name="options" />, and a <see
        /// cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>
        /// value of <see
        /// cref="UploadFilesRequest.Options.INIT">INIT</see>.</para>
        /// <para>2. Upload one or more parts by providing the file name, the
        /// part data in <paramref name="file_data" />, the UUID, a <see
        /// cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>
        /// value of <see
        /// cref="UploadFilesRequest.Options.UPLOAD_PART">UPLOAD_PART</see>,
        /// and the part number in the <see
        /// cref="UploadFilesRequest.Options.MULTIPART_UPLOAD_PART_NUMBER">MULTIPART_UPLOAD_PART_NUMBER</see>.
        /// The part numbers must start at 1 and increase incrementally. Parts
        /// may not be uploaded out of order.</para>
        /// <para>3. Complete the upload by providing the file name, the UUID,
        /// and a <see
        /// cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>
        /// value of <see
        /// cref="UploadFilesRequest.Options.COMPLETE">COMPLETE</see>.</para>
        /// <para>Multipart uploads in progress may be canceled by providing
        /// the file name, the UUID, and a <see
        /// cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>
        /// value of <see
        /// cref="UploadFilesRequest.Options.CANCEL">CANCEL</see>.  If an new
        /// upload is initialized with a different UUID for an existing upload
        /// in progress, the pre-existing upload is automatically canceled in
        /// favor of the new upload.</para>
        /// <para>The multipart upload must be completed for the file to be
        /// usable in KiFS. Information about multipart uploads in progress is
        /// available in <see
        /// cref="showFiles(IList{string},IDictionary{string,string})">showFiles</see>.</para>
        /// <para>File data may be pre-encoded using base64 encoding. This
        /// should be indicated using the <see
        /// cref="UploadFilesRequest.Options.FILE_ENCODING">FILE_ENCODING</see>
        /// option, and is recommended when using JSON serialization.</para>
        /// <para>Each file path must reside in a top-level KiFS directory,
        /// i.e. one of the directories listed in <see
        /// cref="showDirectories(string,IDictionary{string,string})">showDirectories</see>.
        /// The user must have write permission on the directory. Nested
        /// directories are permitted in file name paths. Directories are
        /// deliniated with the directory separator of '/'.  For example, given
        /// the file path '/a/b/c/d.txt', 'a' must be a KiFS directory.</para>
        /// <para>These characters are allowed in file name paths: letters,
        /// numbers, spaces, the path delimiter of '/', and the characters: '.'
        /// '-' ':' '[' ']' '(' ')' '#' '='.</para></remarks>
        ///
        /// <param name="file_names">An array of full file name paths to be
        /// used for the files uploaded to KiFS. File names may have any number
        /// of nested directories in their paths, but the top-level directory
        /// must be an existing KiFS directory. Each file must reside in or
        /// under a top-level directory. A full file name path cannot be larger
        /// than 1024 characters.</param>
        /// <param name="file_data">File data for the files being uploaded, for
        /// the respective files in <paramref name="file_names" />.</param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="UploadFilesRequest.Options.FILE_ENCODING">FILE_ENCODING</see>:
        ///         </term>
        ///         <description>Encoding that has been applied to the uploaded
        ///         file data. When using JSON serialization it is recommended
        ///         to utilize <see
        ///         cref="UploadFilesRequest.Options.BASE64">BASE64</see>. The
        ///         caller is responsible for encoding the data provided in
        ///         this payload.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.BASE64">BASE64</see>:
        ///                 </term>
        ///                 <description>Specifies that the file data being
        ///                 uploaded has been base64 encoded.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>The uploaded file data has not been
        ///                 encoded.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UploadFilesRequest.Options.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UploadFilesRequest.Options.MULTIPART_OPERATION">MULTIPART_OPERATION</see>:
        ///         </term>
        ///         <description>Multipart upload operation to perform.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>Default, indicates this is not a
        ///                 multipart upload</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.INIT">INIT</see>:
        ///                 </term>
        ///                 <description>Initialize a multipart file upload
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.UPLOAD_PART">UPLOAD_PART</see>:
        ///                 </term>
        ///                 <description>Uploads a part of the specified
        ///                 multipart file upload</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.COMPLETE">COMPLETE</see>:
        ///                 </term>
        ///                 <description>Complete the specified multipart file
        ///                 upload</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.CANCEL">CANCEL</see>:
        ///                 </term>
        ///                 <description>Cancel the specified multipart file
        ///                 upload</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UploadFilesRequest.Options.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UploadFilesRequest.Options.MULTIPART_UPLOAD_UUID">MULTIPART_UPLOAD_UUID</see>:
        ///         </term>
        ///         <description>UUID to uniquely identify a multipart upload
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UploadFilesRequest.Options.MULTIPART_UPLOAD_PART_NUMBER">MULTIPART_UPLOAD_PART_NUMBER</see>:
        ///         </term>
        ///         <description>Incremental part number for each part in a
        ///         multipart upload. Part numbers start at 1, increment by 1,
        ///         and must be uploaded sequentially</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="UploadFilesRequest.Options.DELETE_IF_EXISTS">DELETE_IF_EXISTS</see>:
        ///         </term>
        ///         <description>If <see
        ///         cref="UploadFilesRequest.Options.TRUE">TRUE</see>, any
        ///         existing files specified in <paramref name="file_names" />
        ///         will be deleted prior to start of upload. Otherwise the
        ///         file is replaced once the upload completes.  Rollback of
        ///         the original file is no longer possible if the upload is
        ///         cancelled, aborted or fails if the file was deleted
        ///         beforehand.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="UploadFilesRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="UploadFilesRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UploadFilesResponse uploadFiles( IList<string> file_names,
                                                IList<byte[]> file_data,
                                                IDictionary<string, string> options = null )
        {
            return uploadFiles( new UploadFilesRequest( file_names, file_data, options ) );
        }

        /// <summary>Uploads one or more files to <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        /// <remarks><para> Each file path must reside in a top-level KiFS
        /// directory, i.e. one of the directories listed in <see
        /// cref="showDirectories(ShowDirectoriesRequest)">showDirectories</see>.
        /// The user must have write permission on the directory. Nested
        /// directories are permitted in file name paths. Directories are
        /// deliniated with the directory separator of '/'.  For example, given
        /// the file path '/a/b/c/d.txt', 'a' must be a KiFS directory.</para>
        /// <para>These characters are allowed in file name paths: letters,
        /// numbers, spaces, the path delimiter of '/', and the characters: '.'
        /// '-' ':' '[' ']' '(' ')' '#' '='.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UploadFilesFromurlResponse uploadFilesFromurl( UploadFilesFromurlRequest request_ )
        {
            UploadFilesFromurlResponse actualResponse_ = SubmitRequest<UploadFilesFromurlResponse>("/upload/files/fromurl", request_, false);

            return actualResponse_;
        }

        /// <summary>Uploads one or more files to <a
        /// href="../../../tools/kifs/" target="_top">KiFS</a>.</summary>
        /// <remarks><para> Each file path must reside in a top-level KiFS
        /// directory, i.e. one of the directories listed in <see
        /// cref="showDirectories(string,IDictionary{string,string})">showDirectories</see>.
        /// The user must have write permission on the directory. Nested
        /// directories are permitted in file name paths. Directories are
        /// deliniated with the directory separator of '/'.  For example, given
        /// the file path '/a/b/c/d.txt', 'a' must be a KiFS directory.</para>
        /// <para>These characters are allowed in file name paths: letters,
        /// numbers, spaces, the path delimiter of '/', and the characters: '.'
        /// '-' ':' '[' ']' '(' ')' '#' '='.</para></remarks>
        ///
        /// <param name="file_names">An array of full file name paths to be
        /// used for the files uploaded to KiFS. File names may have any number
        /// of nested directories in their paths, but the top-level directory
        /// must be an existing KiFS directory. Each file must reside in or
        /// under a top-level directory. A full file name path cannot be larger
        /// than 1024 characters.</param>
        /// <param name="urls">List of URLs to upload, for each respective file
        /// in <paramref name="file_names" />.</param>
        /// <param name="options">Optional parameters. The default value is an
        /// empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public UploadFilesFromurlResponse uploadFilesFromurl( IList<string> file_names,
                                                              IList<string> urls,
                                                              IDictionary<string, string> options = null )
        {
            return uploadFilesFromurl( new UploadFilesFromurlRequest( file_names, urls,
                                                                      options ) );
        }

        /// @cond NO_DOCS
        public VisualizeGetFeatureInfoResponse visualizeGetFeatureInfo( VisualizeGetFeatureInfoRequest request_ )
        {
            VisualizeGetFeatureInfoResponse actualResponse_ = SubmitRequest<VisualizeGetFeatureInfoResponse>("/visualize/getfeatureinfo", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeGetFeatureInfoResponse visualizeGetFeatureInfo( IList<string> table_names,
                                                                        IList<string> x_column_names,
                                                                        IList<string> y_column_names,
                                                                        IList<string> geometry_column_names,
                                                                        IList<IList<string>> query_column_names,
                                                                        string projection,
                                                                        double min_x,
                                                                        double max_x,
                                                                        double min_y,
                                                                        double max_y,
                                                                        int width,
                                                                        int height,
                                                                        int x,
                                                                        int y,
                                                                        int radius,
                                                                        long limit,
                                                                        string encoding,
                                                                        IDictionary<string, string> options = null )
        {
            return visualizeGetFeatureInfo( new VisualizeGetFeatureInfoRequest( table_names,
                                                                                x_column_names,
                                                                                y_column_names,
                                                                                geometry_column_names,
                                                                                query_column_names,
                                                                                projection,
                                                                                min_x,
                                                                                max_x,
                                                                                min_y,
                                                                                max_y,
                                                                                width,
                                                                                height, x,
                                                                                y, radius,
                                                                                limit,
                                                                                encoding,
                                                                                options ) );
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageResponse visualizeImage( VisualizeImageRequest request_ )
        {
            VisualizeImageResponse actualResponse_ = SubmitRequest<VisualizeImageResponse>("/visualize/image", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageResponse visualizeImage( IList<string> table_names,
                                                      IList<string> world_table_names,
                                                      string x_column_name,
                                                      string y_column_name,
                                                      string symbol_column_name,
                                                      string geometry_column_name,
                                                      IList<IList<string>> track_ids,
                                                      double min_x,
                                                      double max_x,
                                                      double min_y,
                                                      double max_y,
                                                      int width,
                                                      int height,
                                                      string projection,
                                                      long bg_color,
                                                      IDictionary<string, IList<string>> style_options,
                                                      IDictionary<string, string> options = null )
        {
            return visualizeImage( new VisualizeImageRequest( table_names,
                                                              world_table_names,
                                                              x_column_name,
                                                              y_column_name,
                                                              symbol_column_name,
                                                              geometry_column_name,
                                                              track_ids, min_x, max_x,
                                                              min_y, max_y, width, height,
                                                              projection, bg_color,
                                                              style_options, options ) );
        }
        /// @endcond

        /// <summary>Scatter plot is the only plot type currently supported.
        /// </summary>
        /// <remarks><para>A non-numeric column can be specified as x or y
        /// column and jitters can be added to them to avoid excessive
        /// overlapping. All color values must be in the format RRGGBB or
        /// AARRGGBB (to specify the alpha value).The image is contained in the
        /// <see cref="VisualizeImageChartResponse.image_data">image_data</see>
        /// field.</para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public VisualizeImageChartResponse visualizeImageChart( VisualizeImageChartRequest request_ )
        {
            VisualizeImageChartResponse actualResponse_ = SubmitRequest<VisualizeImageChartResponse>("/visualize/image/chart", request_, false);

            return actualResponse_;
        }

        /// <summary>Scatter plot is the only plot type currently supported.
        /// </summary>
        /// <remarks><para>A non-numeric column can be specified as x or y
        /// column and jitters can be added to them to avoid excessive
        /// overlapping. All color values must be in the format RRGGBB or
        /// AARRGGBB (to specify the alpha value).The image is contained in the
        /// <see cref="VisualizeImageChartResponse.image_data">image_data</see>
        /// field.</para></remarks>
        ///
        /// <param name="table_name">Name of the table containing the data to
        /// be drawn as a chart, in [schema_name.]table_name format, using
        /// standard <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a>.</param>
        /// <param name="x_column_names">Names of the columns containing the
        /// data mapped to the x axis of a chart.</param>
        /// <param name="y_column_names">Names of the columns containing the
        /// data mapped to the y axis of a chart.</param>
        /// <param name="min_x">Lower bound for the x column values. For
        /// non-numeric x column, each x column item is mapped to an integral
        /// value starting from 0.</param>
        /// <param name="max_x">Upper bound for the x column values. For
        /// non-numeric x column, each x column item is mapped to an integral
        /// value starting from 0.</param>
        /// <param name="min_y">Lower bound for the y column values. For
        /// non-numeric y column, each y column item is mapped to an integral
        /// value starting from 0.</param>
        /// <param name="max_y">Upper bound for the y column values. For
        /// non-numeric y column, each y column item is mapped to an integral
        /// value starting from 0.</param>
        /// <param name="width">Width of the generated image in pixels.</param>
        /// <param name="height">Height of the generated image in pixels.
        /// </param>
        /// <param name="bg_color">Background color of the generated image.
        /// </param>
        /// <param name="style_options">Rendering style options for a chart.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.POINTCOLOR">POINTCOLOR</see>:
        ///         </term>
        ///         <description>The color of points in the plot represented as
        ///         a hexadecimal number. The default value is '0000FF'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.POINTSIZE">POINTSIZE</see>:
        ///         </term>
        ///         <description>The size of points in the plot represented as
        ///         number of pixels. The default value is '3'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.POINTSHAPE">POINTSHAPE</see>:
        ///         </term>
        ///         <description>The shape of points in the plot.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.NONE">NONE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.CIRCLE">CIRCLE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.SQUARE">SQUARE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.DIAMOND">DIAMOND</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.HOLLOWCIRCLE">HOLLOWCIRCLE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.HOLLOWSQUARE">HOLLOWSQUARE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.HOLLOWDIAMOND">HOLLOWDIAMOND</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeImageChartRequest.StyleOptions.SQUARE">SQUARE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.CB_POINTCOLORS">CB_POINTCOLORS</see>:
        ///         </term>
        ///         <description>Point color class break information consisting
        ///         of three entries: class-break attribute, class-break
        ///         values/ranges, and point color values. This option
        ///         overrides the pointcolor option if both are provided.
        ///         Class-break ranges are represented in the form of
        ///         "min:max". Class-break values/ranges and point color values
        ///         are separated by cb_delimiter, e.g. {"price",
        ///         "20:30;30:40;40:50", "0xFF0000;0x00FF00;0x0000FF"}.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.CB_POINTSIZES">CB_POINTSIZES</see>:
        ///         </term>
        ///         <description>Point size class break information consisting
        ///         of three entries: class-break attribute, class-break
        ///         values/ranges, and point size values. This option overrides
        ///         the pointsize option if both are provided. Class-break
        ///         ranges are represented in the form of "min:max".
        ///         Class-break values/ranges and point size values are
        ///         separated by cb_delimiter, e.g. {"states", "NY;TX;CA",
        ///         "3;5;7"}.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.CB_POINTSHAPES">CB_POINTSHAPES</see>:
        ///         </term>
        ///         <description>Point shape class break information consisting
        ///         of three entries: class-break attribute, class-break
        ///         values/ranges, and point shape names. This option overrides
        ///         the pointshape option if both are provided. Class-break
        ///         ranges are represented in the form of "min:max".
        ///         Class-break values/ranges and point shape names are
        ///         separated by cb_delimiter, e.g. {"states", "NY;TX;CA",
        ///         "circle;square;diamond"}.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.CB_DELIMITER">CB_DELIMITER</see>:
        ///         </term>
        ///         <description>A character or string which separates
        ///         per-class values in a class-break style option string. The
        ///         default value is ';'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.X_ORDER_BY">X_ORDER_BY</see>:
        ///         </term>
        ///         <description>An expression or aggregate expression by which
        ///         non-numeric x column values are sorted, e.g. "avg(price)
        ///         descending".</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.Y_ORDER_BY">Y_ORDER_BY</see>:
        ///         </term>
        ///         <description>An expression or aggregate expression by which
        ///         non-numeric y column values are sorted, e.g. "avg(price)",
        ///         which defaults to "avg(price) ascending".</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.SCALE_TYPE_X">SCALE_TYPE_X</see>:
        ///         </term>
        ///         <description>Type of x axis scale.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>No scale is applied to the x axis.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.LOG">LOG</see>:
        ///                 </term>
        ///                 <description>A base-10 log scale is applied to the
        ///                 x axis.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeImageChartRequest.StyleOptions.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.SCALE_TYPE_Y">SCALE_TYPE_Y</see>:
        ///         </term>
        ///         <description>Type of y axis scale.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>No scale is applied to the y axis.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.StyleOptions.LOG">LOG</see>:
        ///                 </term>
        ///                 <description>A base-10 log scale is applied to the
        ///                 y axis.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeImageChartRequest.StyleOptions.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.MIN_MAX_SCALED">MIN_MAX_SCALED</see>:
        ///         </term>
        ///         <description>If this options is set to "false", this
        ///         endpoint expects request's min/max values are not yet
        ///         scaled. They will be scaled according to scale_type_x or
        ///         scale_type_y for response. If this options is set to
        ///         "true", this endpoint expects request's min/max values are
        ///         already scaled according to scale_type_x/scale_type_y.
        ///         Response's min/max values will be equal to request's
        ///         min/max values. The default value is 'false'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.JITTER_X">JITTER_X</see>:
        ///         </term>
        ///         <description>Amplitude of horizontal jitter applied to
        ///         non-numeric x column values. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.JITTER_Y">JITTER_Y</see>:
        ///         </term>
        ///         <description>Amplitude of vertical jitter applied to
        ///         non-numeric y column values. The default value is '0.0'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.StyleOptions.PLOT_ALL">PLOT_ALL</see>:
        ///         </term>
        ///         <description>If this options is set to "true", all
        ///         non-numeric column values are plotted ignoring min_x,
        ///         max_x, min_y and max_y parameters. The default value is
        ///         'false'.</description>
        ///     </item>
        /// </list></param>
        /// <param name="options">Optional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeImageChartRequest.Options.IMAGE_ENCODING">IMAGE_ENCODING</see>:
        ///         </term>
        ///         <description>Encoding to be applied to the output image.
        ///         When using JSON serialization it is recommended to specify
        ///         this as <see
        ///         cref="VisualizeImageChartRequest.Options.BASE64">BASE64</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.Options.BASE64">BASE64</see>:
        ///                 </term>
        ///                 <description>Apply base64 encoding to the output
        ///                 image.</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeImageChartRequest.Options.NONE">NONE</see>:
        ///                 </term>
        ///                 <description>Do not apply any additional encoding
        ///                 to the output image.</description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeImageChartRequest.Options.NONE">NONE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public VisualizeImageChartResponse visualizeImageChart( string table_name,
                                                                IList<string> x_column_names,
                                                                IList<string> y_column_names,
                                                                double min_x,
                                                                double max_x,
                                                                double min_y,
                                                                double max_y,
                                                                int width,
                                                                int height,
                                                                string bg_color,
                                                                IDictionary<string, IList<string>> style_options,
                                                                IDictionary<string, string> options = null )
        {
            return visualizeImageChart( new VisualizeImageChartRequest( table_name,
                                                                        x_column_names,
                                                                        y_column_names,
                                                                        min_x, max_x,
                                                                        min_y, max_y,
                                                                        width, height,
                                                                        bg_color,
                                                                        style_options,
                                                                        options ) );
        }

        /// @cond NO_DOCS
        public VisualizeImageClassbreakResponse visualizeImageClassbreak( VisualizeImageClassbreakRequest request_ )
        {
            VisualizeImageClassbreakResponse actualResponse_ = SubmitRequest<VisualizeImageClassbreakResponse>("/visualize/image/classbreak", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageClassbreakResponse visualizeImageClassbreak( IList<string> table_names,
                                                                          IList<string> world_table_names,
                                                                          string x_column_name,
                                                                          string y_column_name,
                                                                          string symbol_column_name,
                                                                          string geometry_column_name,
                                                                          IList<IList<string>> track_ids,
                                                                          string cb_attr,
                                                                          IList<string> cb_vals,
                                                                          string cb_pointcolor_attr,
                                                                          IList<string> cb_pointcolor_vals,
                                                                          string cb_pointalpha_attr,
                                                                          IList<string> cb_pointalpha_vals,
                                                                          string cb_pointsize_attr,
                                                                          IList<string> cb_pointsize_vals,
                                                                          string cb_pointshape_attr,
                                                                          IList<string> cb_pointshape_vals,
                                                                          double min_x,
                                                                          double max_x,
                                                                          double min_y,
                                                                          double max_y,
                                                                          int width,
                                                                          int height,
                                                                          string projection,
                                                                          long bg_color,
                                                                          IDictionary<string, IList<string>> style_options,
                                                                          IDictionary<string, string> options,
                                                                          IList<int> cb_transparency_vec )
        {
            return visualizeImageClassbreak( new VisualizeImageClassbreakRequest( table_names,
                                                                                  world_table_names,
                                                                                  x_column_name,
                                                                                  y_column_name,
                                                                                  symbol_column_name,
                                                                                  geometry_column_name,
                                                                                  track_ids,
                                                                                  cb_attr,
                                                                                  cb_vals,
                                                                                  cb_pointcolor_attr,
                                                                                  cb_pointcolor_vals,
                                                                                  cb_pointalpha_attr,
                                                                                  cb_pointalpha_vals,
                                                                                  cb_pointsize_attr,
                                                                                  cb_pointsize_vals,
                                                                                  cb_pointshape_attr,
                                                                                  cb_pointshape_vals,
                                                                                  min_x,
                                                                                  max_x,
                                                                                  min_y,
                                                                                  max_y,
                                                                                  width,
                                                                                  height,
                                                                                  projection,
                                                                                  bg_color,
                                                                                  style_options,
                                                                                  options,
                                                                                  cb_transparency_vec ) );
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageContourResponse visualizeImageContour( VisualizeImageContourRequest request_ )
        {
            VisualizeImageContourResponse actualResponse_ = SubmitRequest<VisualizeImageContourResponse>("/visualize/image/contour", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageContourResponse visualizeImageContour( IList<string> table_names,
                                                                    string x_column_name,
                                                                    string y_column_name,
                                                                    string value_column_name,
                                                                    double min_x,
                                                                    double max_x,
                                                                    double min_y,
                                                                    double max_y,
                                                                    int width,
                                                                    int height,
                                                                    string projection,
                                                                    IDictionary<string, string> style_options,
                                                                    IDictionary<string, string> options = null )
        {
            return visualizeImageContour( new VisualizeImageContourRequest( table_names,
                                                                            x_column_name,
                                                                            y_column_name,
                                                                            value_column_name,
                                                                            min_x, max_x,
                                                                            min_y, max_y,
                                                                            width, height,
                                                                            projection,
                                                                            style_options,
                                                                            options ) );
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageHeatmapResponse visualizeImageHeatmap( VisualizeImageHeatmapRequest request_ )
        {
            VisualizeImageHeatmapResponse actualResponse_ = SubmitRequest<VisualizeImageHeatmapResponse>("/visualize/image/heatmap", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageHeatmapResponse visualizeImageHeatmap( IList<string> table_names,
                                                                    string x_column_name,
                                                                    string y_column_name,
                                                                    string value_column_name,
                                                                    string geometry_column_name,
                                                                    double min_x,
                                                                    double max_x,
                                                                    double min_y,
                                                                    double max_y,
                                                                    int width,
                                                                    int height,
                                                                    string projection,
                                                                    IDictionary<string, string> style_options,
                                                                    IDictionary<string, string> options = null )
        {
            return visualizeImageHeatmap( new VisualizeImageHeatmapRequest( table_names,
                                                                            x_column_name,
                                                                            y_column_name,
                                                                            value_column_name,
                                                                            geometry_column_name,
                                                                            min_x, max_x,
                                                                            min_y, max_y,
                                                                            width, height,
                                                                            projection,
                                                                            style_options,
                                                                            options ) );
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageLabelsResponse visualizeImageLabels( VisualizeImageLabelsRequest request_ )
        {
            VisualizeImageLabelsResponse actualResponse_ = SubmitRequest<VisualizeImageLabelsResponse>("/visualize/image/labels", request_, false);

            return actualResponse_;
        }
        /// @endcond

        /// @cond NO_DOCS
        public VisualizeImageLabelsResponse visualizeImageLabels( string table_name,
                                                                  string x_column_name,
                                                                  string y_column_name,
                                                                  string x_offset,
                                                                  string y_offset,
                                                                  string text_string,
                                                                  string font,
                                                                  string text_color,
                                                                  string text_angle,
                                                                  string text_scale,
                                                                  string draw_box,
                                                                  string draw_leader,
                                                                  string line_width,
                                                                  string line_color,
                                                                  string fill_color,
                                                                  string leader_x_column_name,
                                                                  string leader_y_column_name,
                                                                  string filter,
                                                                  double min_x,
                                                                  double max_x,
                                                                  double min_y,
                                                                  double max_y,
                                                                  int width,
                                                                  int height,
                                                                  string projection = VisualizeImageLabelsRequest.Projection.PLATE_CARREE,
                                                                  IDictionary<string, string> options = null )
        {
            return visualizeImageLabels( new VisualizeImageLabelsRequest( table_name,
                                                                          x_column_name,
                                                                          y_column_name,
                                                                          x_offset,
                                                                          y_offset,
                                                                          text_string,
                                                                          font,
                                                                          text_color,
                                                                          text_angle,
                                                                          text_scale,
                                                                          draw_box,
                                                                          draw_leader,
                                                                          line_width,
                                                                          line_color,
                                                                          fill_color,
                                                                          leader_x_column_name,
                                                                          leader_y_column_name,
                                                                          filter, min_x,
                                                                          max_x, min_y,
                                                                          max_y, width,
                                                                          height,
                                                                          projection,
                                                                          options ) );
        }
        /// @endcond

        /// <summary>Generate an image containing isolines for travel results
        /// using an existing graph.</summary>
        /// <remarks><para>Isolines represent curves of equal cost, with cost
        /// typically referring to the time or distance assigned as the weights
        /// of the underlying graph. See <a
        /// href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> for more information on graphs.
        /// </para></remarks>
        ///
        /// <param name="request_">Request object containing the parameters for
        /// the operation.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public VisualizeIsochroneResponse visualizeIsochrone( VisualizeIsochroneRequest request_ )
        {
            VisualizeIsochroneResponse actualResponse_ = SubmitRequest<VisualizeIsochroneResponse>("/visualize/isochrone", request_, false);

            return actualResponse_;
        }

        /// <summary>Generate an image containing isolines for travel results
        /// using an existing graph.</summary>
        /// <remarks><para>Isolines represent curves of equal cost, with cost
        /// typically referring to the time or distance assigned as the weights
        /// of the underlying graph. See <a
        /// href="../../../graph_solver/network_graph_solver/"
        /// target="_top">Graphs & Solvers</a> for more information on graphs.
        /// </para></remarks>
        ///
        /// <param name="graph_name">Name of the graph on which the isochrone
        /// is to be computed.</param>
        /// <param name="source_node">Starting vertex on the underlying graph
        /// from/to which the isochrones are created.</param>
        /// <param name="max_solution_radius">Extent of the search radius
        /// around <paramref name="source_node" />. Set to '-1.0' for
        /// unrestricted search radius. The default value is -1.0.</param>
        /// <param name="weights_on_edges">Additional weights to apply to the
        /// edges of an existing graph. Weights must be specified using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS WEIGHTS_EDGE_ID', or
        /// expressions, e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED'. Any
        /// provided weights will be added (in the case of
        /// 'WEIGHTS_VALUESPECIFIED') to or multiplied with (in the case of
        /// 'WEIGHTS_FACTORSPECIFIED') the existing weight(s). The default
        /// value is an empty List.</param>
        /// <param name="restrictions">Additional restrictions to apply to the
        /// nodes/edges of an existing graph. Restrictions must be specified
        /// using <a
        /// href="../../../graph_solver/network_graph_solver/#identifiers"
        /// target="_top">identifiers</a>; identifiers are grouped as <a
        /// href="../../../graph_solver/network_graph_solver/#id-combos"
        /// target="_top">combinations</a>. Identifiers can be used with
        /// existing column names, e.g., 'table.column AS
        /// RESTRICTIONS_EDGE_ID', or expressions, e.g., 'column/2 AS
        /// RESTRICTIONS_VALUECOMPARED'. If <see
        /// cref="VisualizeIsochroneRequest.SolveOptions.REMOVE_PREVIOUS_RESTRICTIONS">REMOVE_PREVIOUS_RESTRICTIONS</see>
        /// is set to <see
        /// cref="VisualizeIsochroneRequest.SolveOptions.TRUE">TRUE</see>, any
        /// provided restrictions will replace the existing restrictions. If
        /// <see
        /// cref="VisualizeIsochroneRequest.SolveOptions.REMOVE_PREVIOUS_RESTRICTIONS">REMOVE_PREVIOUS_RESTRICTIONS</see>
        /// is set to <see
        /// cref="VisualizeIsochroneRequest.SolveOptions.FALSE">FALSE</see>,
        /// any provided restrictions will be added (in the case of
        /// 'RESTRICTIONS_VALUECOMPARED') to or replaced (in the case of
        /// 'RESTRICTIONS_ONOFFCOMPARED'). The default value is an empty List.
        /// </param>
        /// <param name="num_levels">Number of equally-separated isochrones to
        /// compute. The default value is 1.</param>
        /// <param name="generate_image">If set to <see
        /// cref="VisualizeIsochroneRequest.GenerateImage.TRUE">TRUE</see>,
        /// generates a PNG image of the isochrones in the response.
        /// Supported values:
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.GenerateImage.TRUE">TRUE</see>
        ///         </term>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.GenerateImage.FALSE">FALSE</see>
        ///         </term>
        ///     </item>
        /// </list>
        /// The default value is <see
        /// cref="VisualizeIsochroneRequest.GenerateImage.TRUE">TRUE</see>.
        /// </param>
        /// <param name="levels_table">Name of the table to output the
        /// isochrones to, in [schema_name.]table_name format, using standard
        /// <a href="../../../concepts/tables/#table-name-resolution"
        /// target="_top">name resolution rules</a> and meeting <a
        /// href="../../../concepts/tables/#table-naming-criteria"
        /// target="_top">table naming criteria</a>.  The table will contain
        /// levels and their corresponding WKT geometry. If no value is
        /// provided, the table is not generated. The default value is ''.
        /// </param>
        /// <param name="style_options">Various style related options of the
        /// isochrone image.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.StyleOptions.LINE_SIZE">LINE_SIZE</see>:
        ///         </term>
        ///         <description>The width of the contour lines in pixels. The
        ///         default value is '3'. The minimum allowed value is '0'. The
        ///         maximum allowed value is '20'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.StyleOptions.COLOR">COLOR</see>:
        ///         </term>
        ///         <description>Color of generated isolines. All color values
        ///         must be in the format RRGGBB or AARRGGBB (to specify the
        ///         alpha value). If alpha is specified and flooded contours
        ///         are enabled, it will be used for as the transparency of the
        ///         latter. The default value is 'FF696969'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.StyleOptions.BG_COLOR">BG_COLOR</see>:
        ///         </term>
        ///         <description>When <paramref name="generate_image" /> is set
        ///         to <see
        ///         cref="VisualizeIsochroneRequest.GenerateImage.TRUE">TRUE</see>,
        ///         background color of the generated image. All color values
        ///         must be in the format RRGGBB or AARRGGBB (to specify the
        ///         alpha value). The default value is '00000000'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.StyleOptions.TEXT_COLOR">TEXT_COLOR</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.ADD_LABELS">ADD_LABELS</see>
        ///         is set to <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>,
        ///         color for the labels. All color values must be in the
        ///         format RRGGBB or AARRGGBB (to specify the alpha value). The
        ///         default value is 'FF000000'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.StyleOptions.COLORMAP">COLORMAP</see>:
        ///         </term>
        ///         <description>Colormap for contours or fill-in regions when
        ///         applicable. All color values must be in the format RRGGBB
        ///         or AARRGGBB (to specify the alpha value).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.JET">JET</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.ACCENT">ACCENT</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.AFMHOT">AFMHOT</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.AUTUMN">AUTUMN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.BINARY">BINARY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.BLUES">BLUES</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.BONE">BONE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.BRBG">BRBG</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.BRG">BRG</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.BUGN">BUGN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.BUPU">BUPU</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.BWR">BWR</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.CMRMAP">CMRMAP</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.COOL">COOL</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.COOLWARM">COOLWARM</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.COPPER">COPPER</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.CUBEHELIX">CUBEHELIX</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.DARK2">DARK2</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.FLAG">FLAG</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GIST_EARTH">GIST_EARTH</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GIST_GRAY">GIST_GRAY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GIST_HEAT">GIST_HEAT</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GIST_NCAR">GIST_NCAR</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GIST_RAINBOW">GIST_RAINBOW</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GIST_STERN">GIST_STERN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GIST_YARG">GIST_YARG</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GNBU">GNBU</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GNUPLOT2">GNUPLOT2</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GNUPLOT">GNUPLOT</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GRAY">GRAY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GREENS">GREENS</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.GREYS">GREYS</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.HOT">HOT</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.HSV">HSV</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.INFERNO">INFERNO</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.MAGMA">MAGMA</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.NIPY_SPECTRAL">NIPY_SPECTRAL</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.OCEAN">OCEAN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.ORANGES">ORANGES</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.ORRD">ORRD</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PAIRED">PAIRED</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PASTEL1">PASTEL1</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PASTEL2">PASTEL2</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PINK">PINK</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PIYG">PIYG</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PLASMA">PLASMA</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PRGN">PRGN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PRISM">PRISM</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PUBU">PUBU</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PUBUGN">PUBUGN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PUOR">PUOR</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PURD">PURD</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.PURPLES">PURPLES</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.RAINBOW">RAINBOW</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.RDBU">RDBU</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.RDGY">RDGY</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.RDPU">RDPU</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.RDYLBU">RDYLBU</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.RDYLGN">RDYLGN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.REDS">REDS</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.SEISMIC">SEISMIC</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.SET1">SET1</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.SET2">SET2</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.SET3">SET3</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.SPECTRAL">SPECTRAL</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.SPRING">SPRING</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.SUMMER">SUMMER</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.TERRAIN">TERRAIN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.VIRIDIS">VIRIDIS</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.WINTER">WINTER</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.WISTIA">WISTIA</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.YLGN">YLGN</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.YLGNBU">YLGNBU</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.YLORBR">YLORBR</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.StyleOptions.YLORRD">YLORRD</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeIsochroneRequest.StyleOptions.JET">JET</see>.
        ///         </description>
        ///     </item>
        /// </list></param>
        /// <param name="solve_options">Solver specific parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.SolveOptions.REMOVE_PREVIOUS_RESTRICTIONS">REMOVE_PREVIOUS_RESTRICTIONS</see>:
        ///         </term>
        ///         <description>Ignore the restrictions applied to the graph
        ///         during the creation stage and only use the restrictions
        ///         specified in this request if set to <see
        ///         cref="VisualizeIsochroneRequest.SolveOptions.TRUE">TRUE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.SolveOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.SolveOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeIsochroneRequest.SolveOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.SolveOptions.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>:
        ///         </term>
        ///         <description>Value-based restriction comparison. Any node
        ///         or edge with a 'RESTRICTIONS_VALUECOMPARED' value greater
        ///         than the <see
        ///         cref="VisualizeIsochroneRequest.SolveOptions.RESTRICTION_THRESHOLD_VALUE">RESTRICTION_THRESHOLD_VALUE</see>
        ///         will not be included in the solution.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.SolveOptions.UNIFORM_WEIGHTS">UNIFORM_WEIGHTS</see>:
        ///         </term>
        ///         <description>When specified, assigns the given value to all
        ///         the edges in the graph. Note that weights provided in
        ///         <paramref name="weights_on_edges" /> will override this
        ///         value.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="contour_options">Solver specific parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.PROJECTION">PROJECTION</see>:
        ///         </term>
        ///         <description>Spatial Reference System (i.e. EPSG Code).
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions._3857">_3857</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions._102100">_102100</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions._900913">_900913</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.EPSG_4326">EPSG_4326</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.PLATE_CARREE">PLATE_CARREE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.EPSG_900913">EPSG_900913</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.EPSG_102100">EPSG_102100</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.EPSG_3857">EPSG_3857</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.WEB_MERCATOR">WEB_MERCATOR</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.PLATE_CARREE">PLATE_CARREE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.WIDTH">WIDTH</see>:
        ///         </term>
        ///         <description>When <paramref name="generate_image" /> is set
        ///         to <see
        ///         cref="VisualizeIsochroneRequest.GenerateImage.TRUE">TRUE</see>,
        ///         width of the generated image. The default value is '512'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.HEIGHT">HEIGHT</see>:
        ///         </term>
        ///         <description>When <paramref name="generate_image" /> is set
        ///         to <see
        ///         cref="VisualizeIsochroneRequest.GenerateImage.TRUE">TRUE</see>,
        ///         height of the generated image. If the default value is
        ///         used, the <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.HEIGHT">HEIGHT</see>
        ///         is set to the value resulting from multiplying the aspect
        ///         ratio by the <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.WIDTH">WIDTH</see>.
        ///         The default value is '-1'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.SEARCH_RADIUS">SEARCH_RADIUS</see>:
        ///         </term>
        ///         <description>When interpolating the graph solution to
        ///         generate the isochrone, neighborhood of influence of sample
        ///         data (in percent of the image/grid). The default value is
        ///         '20'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.GRID_SIZE">GRID_SIZE</see>:
        ///         </term>
        ///         <description>When interpolating the graph solution to
        ///         generate the isochrone, number of subdivisions along the x
        ///         axis when building the grid (the y is computed using the
        ///         aspect ratio of the output image). The default value is
        ///         '100'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.COLOR_ISOLINES">COLOR_ISOLINES</see>:
        ///         </term>
        ///         <description>Color each isoline according to the colormap;
        ///         otherwise, use the foreground color.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.ADD_LABELS">ADD_LABELS</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>,
        ///         add labels to the isolines.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.ContourOptions.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.LABELS_FONT_SIZE">LABELS_FONT_SIZE</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.ADD_LABELS">ADD_LABELS</see>
        ///         is set to <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>,
        ///         size of the font (in pixels) to use for labels. The default
        ///         value is '12'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.LABELS_FONT_FAMILY">LABELS_FONT_FAMILY</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.ADD_LABELS">ADD_LABELS</see>
        ///         is set to <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>,
        ///         font name to be used when adding labels. The default value
        ///         is 'arial'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.LABELS_SEARCH_WINDOW">LABELS_SEARCH_WINDOW</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.ADD_LABELS">ADD_LABELS</see>
        ///         is set to <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>,
        ///         a search window is used to rate the local quality of each
        ///         isoline. Smooth, continuous, long stretches with relatively
        ///         flat angles are favored. The provided value is multiplied
        ///         by the <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.LABELS_FONT_SIZE">LABELS_FONT_SIZE</see>
        ///         to calculate the final window size. The default value is
        ///         '4'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.LABELS_INTRALEVEL_SEPARATION">LABELS_INTRALEVEL_SEPARATION</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.ADD_LABELS">ADD_LABELS</see>
        ///         is set to <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>,
        ///         this value determines the  distance (in multiples of the
        ///         <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.LABELS_FONT_SIZE">LABELS_FONT_SIZE</see>)
        ///         to use when separating labels of different values. The
        ///         default value is '4'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.LABELS_INTERLEVEL_SEPARATION">LABELS_INTERLEVEL_SEPARATION</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.ADD_LABELS">ADD_LABELS</see>
        ///         is set to <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>,
        ///         this value determines the distance (in percent of the total
        ///         window size) to use when separating labels of the same
        ///         value. The default value is '20'.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.LABELS_MAX_ANGLE">LABELS_MAX_ANGLE</see>:
        ///         </term>
        ///         <description>When <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.ADD_LABELS">ADD_LABELS</see>
        ///         is set to <see
        ///         cref="VisualizeIsochroneRequest.ContourOptions.TRUE">TRUE</see>,
        ///         maximum angle (in degrees) from the vertical to use when
        ///         adding labels. The default value is '60'.</description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <param name="options">Additional parameters.
        /// <list type="bullet">
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.SOLVE_TABLE">SOLVE_TABLE</see>:
        ///         </term>
        ///         <description>Name of the table to host intermediate solve
        ///         results, in [schema_name.]table_name format, using standard
        ///         <a href="../../../concepts/tables/#table-name-resolution"
        ///         target="_top">name resolution rules</a> and meeting <a
        ///         href="../../../concepts/tables/#table-naming-criteria"
        ///         target="_top">table naming criteria</a>.  This table will
        ///         contain the position and cost for each vertex in the graph.
        ///         If the default value is used, a temporary table is created
        ///         and deleted once the solution is calculated. The default
        ///         value is ''.</description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.IS_REPLICATED">IS_REPLICATED</see>:
        ///         </term>
        ///         <description>If set to <see
        ///         cref="VisualizeIsochroneRequest.Options.TRUE">TRUE</see>,
        ///         replicate the <see
        ///         cref="VisualizeIsochroneRequest.Options.SOLVE_TABLE">SOLVE_TABLE</see>.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.Options.TRUE">TRUE</see>
        ///                 </term>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.Options.FALSE">FALSE</see>
        ///                 </term>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeIsochroneRequest.Options.TRUE">TRUE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.DATA_MIN_X">DATA_MIN_X</see>:
        ///         </term>
        ///         <description>Lower bound for the x values. If not provided,
        ///         it will be computed from the bounds of the input data.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.DATA_MAX_X">DATA_MAX_X</see>:
        ///         </term>
        ///         <description>Upper bound for the x values. If not provided,
        ///         it will be computed from the bounds of the input data.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.DATA_MIN_Y">DATA_MIN_Y</see>:
        ///         </term>
        ///         <description>Lower bound for the y values. If not provided,
        ///         it will be computed from the bounds of the input data.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.DATA_MAX_Y">DATA_MAX_Y</see>:
        ///         </term>
        ///         <description>Upper bound for the y values. If not provided,
        ///         it will be computed from the bounds of the input data.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.CONCAVITY_LEVEL">CONCAVITY_LEVEL</see>:
        ///         </term>
        ///         <description>Factor to qualify the concavity of the
        ///         isochrone curves. The lower the value, the more convex
        ///         (with '0' being completely convex and '1' being the most
        ///         concave). The default value is '0.5'. The minimum allowed
        ///         value is '0'. The maximum allowed value is '1'.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.USE_PRIORITY_QUEUE_SOLVERS">USE_PRIORITY_QUEUE_SOLVERS</see>:
        ///         </term>
        ///         <description>sets the solver methods explicitly if true.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.Options.TRUE">TRUE</see>:
        ///                 </term>
        ///                 <description>uses the solvers scheduled for
        ///                 'shortest_path' and 'inverse_shortest_path' based
        ///                 on solve_direction</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.Options.FALSE">FALSE</see>:
        ///                 </term>
        ///                 <description>uses the solvers 'priority_queue' and
        ///                 'inverse_priority_queue' based on solve_direction
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeIsochroneRequest.Options.FALSE">FALSE</see>.
        ///         </description>
        ///     </item>
        ///     <item>
        ///         <term><see
        ///         cref="VisualizeIsochroneRequest.Options.SOLVE_DIRECTION">SOLVE_DIRECTION</see>:
        ///         </term>
        ///         <description>Specify whether we are going to the source
        ///         node, or starting from it.
        ///         Supported values:
        ///         <list type="bullet">
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.Options.FROM_SOURCE">FROM_SOURCE</see>:
        ///                 </term>
        ///                 <description>Shortest path to get to the source
        ///                 (inverse Dijkstra)</description>
        ///             </item>
        ///             <item>
        ///                 <term><see
        ///                 cref="VisualizeIsochroneRequest.Options.TO_SOURCE">TO_SOURCE</see>:
        ///                 </term>
        ///                 <description>Shortest path to source (Dijkstra)
        ///                 </description>
        ///             </item>
        ///         </list>
        ///         The default value is <see
        ///         cref="VisualizeIsochroneRequest.Options.FROM_SOURCE">FROM_SOURCE</see>.
        ///         </description>
        ///     </item>
        /// </list>
        /// The default value is an empty Dictionary.</param>
        /// <returns>Response object containing the result of the operation.
        /// </returns>
        public VisualizeIsochroneResponse visualizeIsochrone( string graph_name,
                                                              string source_node,
                                                              double max_solution_radius,
                                                              IList<string> weights_on_edges,
                                                              IList<string> restrictions,
                                                              int num_levels,
                                                              bool generate_image,
                                                              string levels_table,
                                                              IDictionary<string, string> style_options,
                                                              IDictionary<string, string> solve_options = null,
                                                              IDictionary<string, string> contour_options = null,
                                                              IDictionary<string, string> options = null )
        {
            return visualizeIsochrone( new VisualizeIsochroneRequest( graph_name,
                                                                      source_node,
                                                                      max_solution_radius,
                                                                      weights_on_edges,
                                                                      restrictions,
                                                                      num_levels,
                                                                      generate_image,
                                                                      levels_table,
                                                                      style_options,
                                                                      solve_options,
                                                                      contour_options,
                                                                      options ) );
        }
    } // end class Kinetica
} // end namespace kinetica
